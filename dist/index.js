var Sb = Object.defineProperty;
var _b = (n, e, t) => e in n ? Sb(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t;
var j = (n, e, t) => (_b(n, typeof e != "symbol" ? e + "" : e, t), t);
function qe(n) {
  this.content = n;
}
qe.prototype = {
  constructor: qe,
  find: function(n) {
    for (var e = 0; e < this.content.length; e += 2)
      if (this.content[e] === n)
        return e;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(n) {
    var e = this.find(n);
    return e == -1 ? void 0 : this.content[e + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(n, e, t) {
    var r = t && t != n ? this.remove(t) : this, i = r.find(n), s = r.content.slice();
    return i == -1 ? s.push(t || n, e) : (s[i + 1] = e, t && (s[i] = t)), new qe(s);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(n) {
    var e = this.find(n);
    if (e == -1)
      return this;
    var t = this.content.slice();
    return t.splice(e, 2), new qe(t);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(n, e) {
    return new qe([n, e].concat(this.remove(n).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(n, e) {
    var t = this.remove(n).content.slice();
    return t.push(n, e), new qe(t);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(n, e, t) {
    var r = this.remove(e), i = r.content.slice(), s = r.find(n);
    return i.splice(s == -1 ? i.length : s, 0, e, t), new qe(i);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(n) {
    for (var e = 0; e < this.content.length; e += 2)
      n(this.content[e], this.content[e + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(n) {
    return n = qe.from(n), n.size ? new qe(n.content.concat(this.subtract(n).content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(n) {
    return n = qe.from(n), n.size ? new qe(this.subtract(n).content.concat(n.content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(n) {
    var e = this;
    n = qe.from(n);
    for (var t = 0; t < n.content.length; t += 2)
      e = e.remove(n.content[t]);
    return e;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var n = {};
    return this.forEach(function(e, t) {
      n[e] = t;
    }), n;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
qe.from = function(n) {
  if (n instanceof qe)
    return n;
  var e = [];
  if (n)
    for (var t in n)
      e.push(t, n[t]);
  return new qe(e);
};
function Fp(n, e, t) {
  for (let r = 0; ; r++) {
    if (r == n.childCount || r == e.childCount)
      return n.childCount == e.childCount ? null : t;
    let i = n.child(r), s = e.child(r);
    if (i == s) {
      t += i.nodeSize;
      continue;
    }
    if (!i.sameMarkup(s))
      return t;
    if (i.isText && i.text != s.text) {
      for (let o = 0; i.text[o] == s.text[o]; o++)
        t++;
      return t;
    }
    if (i.content.size || s.content.size) {
      let o = Fp(i.content, s.content, t + 1);
      if (o != null)
        return o;
    }
    t += i.nodeSize;
  }
}
function zp(n, e, t, r) {
  for (let i = n.childCount, s = e.childCount; ; ) {
    if (i == 0 || s == 0)
      return i == s ? null : { a: t, b: r };
    let o = n.child(--i), a = e.child(--s), l = o.nodeSize;
    if (o == a) {
      t -= l, r -= l;
      continue;
    }
    if (!o.sameMarkup(a))
      return { a: t, b: r };
    if (o.isText && o.text != a.text) {
      let c = 0, u = Math.min(o.text.length, a.text.length);
      for (; c < u && o.text[o.text.length - c - 1] == a.text[a.text.length - c - 1]; )
        c++, t--, r--;
      return { a: t, b: r };
    }
    if (o.content.size || a.content.size) {
      let c = zp(o.content, a.content, t - 1, r - 1);
      if (c)
        return c;
    }
    t -= l, r -= l;
  }
}
class R {
  /**
  @internal
  */
  constructor(e, t) {
    if (this.content = e, this.size = t || 0, t == null)
      for (let r = 0; r < e.length; r++)
        this.size += e[r].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(e, t, r, i = 0, s) {
    for (let o = 0, a = 0; a < t; o++) {
      let l = this.content[o], c = a + l.nodeSize;
      if (c > e && r(l, i + a, s || null, o) !== !1 && l.content.size) {
        let u = a + 1;
        l.nodesBetween(Math.max(0, e - u), Math.min(l.content.size, t - u), r, i + u);
      }
      a = c;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(e) {
    this.nodesBetween(0, this.size, e);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(e, t, r, i) {
    let s = "", o = !0;
    return this.nodesBetween(e, t, (a, l) => {
      a.isText ? (s += a.text.slice(Math.max(e, l) - l, t - l), o = !r) : a.isLeaf ? (i ? s += typeof i == "function" ? i(a) : i : a.type.spec.leafText && (s += a.type.spec.leafText(a)), o = !r) : !o && a.isBlock && (s += r, o = !0);
    }, 0), s;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(e) {
    if (!e.size)
      return this;
    if (!this.size)
      return e;
    let t = this.lastChild, r = e.firstChild, i = this.content.slice(), s = 0;
    for (t.isText && t.sameMarkup(r) && (i[i.length - 1] = t.withText(t.text + r.text), s = 1); s < e.content.length; s++)
      i.push(e.content[s]);
    return new R(i, this.size + e.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(e, t = this.size) {
    if (e == 0 && t == this.size)
      return this;
    let r = [], i = 0;
    if (t > e)
      for (let s = 0, o = 0; o < t; s++) {
        let a = this.content[s], l = o + a.nodeSize;
        l > e && ((o < e || l > t) && (a.isText ? a = a.cut(Math.max(0, e - o), Math.min(a.text.length, t - o)) : a = a.cut(Math.max(0, e - o - 1), Math.min(a.content.size, t - o - 1))), r.push(a), i += a.nodeSize), o = l;
      }
    return new R(r, i);
  }
  /**
  @internal
  */
  cutByIndex(e, t) {
    return e == t ? R.empty : e == 0 && t == this.content.length ? this : new R(this.content.slice(e, t));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(e, t) {
    let r = this.content[e];
    if (r == t)
      return this;
    let i = this.content.slice(), s = this.size + t.nodeSize - r.nodeSize;
    return i[e] = t, new R(i, s);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(e) {
    return new R([e].concat(this.content), this.size + e.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(e) {
    return new R(this.content.concat(e), this.size + e.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(e) {
    if (this.content.length != e.content.length)
      return !1;
    for (let t = 0; t < this.content.length; t++)
      if (!this.content[t].eq(e.content[t]))
        return !1;
    return !0;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(e) {
    let t = this.content[e];
    if (!t)
      throw new RangeError("Index " + e + " out of range for " + this);
    return t;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content[e] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    for (let t = 0, r = 0; t < this.content.length; t++) {
      let i = this.content[t];
      e(i, r, t), r += i.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(e, t = 0) {
    return Fp(this, e, t);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(e, t = this.size, r = e.size) {
    return zp(this, e, t, r);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. (Not public.)
  */
  findIndex(e, t = -1) {
    if (e == 0)
      return ts(0, e);
    if (e == this.size)
      return ts(this.content.length, e);
    if (e > this.size || e < 0)
      throw new RangeError(`Position ${e} outside of fragment (${this})`);
    for (let r = 0, i = 0; ; r++) {
      let s = this.child(r), o = i + s.nodeSize;
      if (o >= e)
        return o == e || t > 0 ? ts(r + 1, o) : ts(r, i);
      i = o;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((e) => e.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      return R.empty;
    if (!Array.isArray(t))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new R(t.map(e.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(e) {
    if (!e.length)
      return R.empty;
    let t, r = 0;
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      r += s.nodeSize, i && s.isText && e[i - 1].sameMarkup(s) ? (t || (t = e.slice(0, i)), t[t.length - 1] = s.withText(t[t.length - 1].text + s.text)) : t && t.push(s);
    }
    return new R(t || e, r);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(e) {
    if (!e)
      return R.empty;
    if (e instanceof R)
      return e;
    if (Array.isArray(e))
      return this.fromArray(e);
    if (e.attrs)
      return new R([e], e.nodeSize);
    throw new RangeError("Can not convert " + e + " to a Fragment" + (e.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
}
R.empty = new R([], 0);
const na = { index: 0, offset: 0 };
function ts(n, e) {
  return na.index = n, na.offset = e, na;
}
function Ds(n, e) {
  if (n === e)
    return !0;
  if (!(n && typeof n == "object") || !(e && typeof e == "object"))
    return !1;
  let t = Array.isArray(n);
  if (Array.isArray(e) != t)
    return !1;
  if (t) {
    if (n.length != e.length)
      return !1;
    for (let r = 0; r < n.length; r++)
      if (!Ds(n[r], e[r]))
        return !1;
  } else {
    for (let r in n)
      if (!(r in e) || !Ds(n[r], e[r]))
        return !1;
    for (let r in e)
      if (!(r in n))
        return !1;
  }
  return !0;
}
let ye = class ol {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.attrs = t;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(e) {
    let t, r = !1;
    for (let i = 0; i < e.length; i++) {
      let s = e[i];
      if (this.eq(s))
        return e;
      if (this.type.excludes(s.type))
        t || (t = e.slice(0, i));
      else {
        if (s.type.excludes(this.type))
          return e;
        !r && s.type.rank > this.type.rank && (t || (t = e.slice(0, i)), t.push(this), r = !0), t && t.push(s);
      }
    }
    return t || (t = e.slice()), r || t.push(this), t;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(e) {
    for (let t = 0; t < e.length; t++)
      if (this.eq(e[t]))
        return e.slice(0, t).concat(e.slice(t + 1));
    return e;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(e) {
    for (let t = 0; t < e.length; t++)
      if (this.eq(e[t]))
        return !0;
    return !1;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(e) {
    return this == e || this.type == e.type && Ds(this.attrs, e.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let t in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return e;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(e, t) {
    if (!t)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let r = e.marks[t.type];
    if (!r)
      throw new RangeError(`There is no mark type ${t.type} in this schema`);
    return r.create(t.attrs);
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(e, t) {
    if (e == t)
      return !0;
    if (e.length != t.length)
      return !1;
    for (let r = 0; r < e.length; r++)
      if (!e[r].eq(t[r]))
        return !1;
    return !0;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(e) {
    if (!e || Array.isArray(e) && e.length == 0)
      return ol.none;
    if (e instanceof ol)
      return [e];
    let t = e.slice();
    return t.sort((r, i) => r.type.rank - i.type.rank), t;
  }
};
ye.none = [];
class Is extends Error {
}
class F {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(e, t, r) {
    this.content = e, this.openStart = t, this.openEnd = r;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(e, t) {
    let r = qp(this.content, e + this.openStart, t);
    return r && new F(r, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(e, t) {
    return new F(Vp(this.content, e + this.openStart, t + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(e) {
    return this.content.eq(e.content) && this.openStart == e.openStart && this.openEnd == e.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let e = { content: this.content.toJSON() };
    return this.openStart > 0 && (e.openStart = this.openStart), this.openEnd > 0 && (e.openEnd = this.openEnd), e;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      return F.empty;
    let r = t.openStart || 0, i = t.openEnd || 0;
    if (typeof r != "number" || typeof i != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new F(R.fromJSON(e, t.content), r, i);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(e, t = !0) {
    let r = 0, i = 0;
    for (let s = e.firstChild; s && !s.isLeaf && (t || !s.type.spec.isolating); s = s.firstChild)
      r++;
    for (let s = e.lastChild; s && !s.isLeaf && (t || !s.type.spec.isolating); s = s.lastChild)
      i++;
    return new F(e, r, i);
  }
}
F.empty = new F(R.empty, 0, 0);
function Vp(n, e, t) {
  let { index: r, offset: i } = n.findIndex(e), s = n.maybeChild(r), { index: o, offset: a } = n.findIndex(t);
  if (i == e || s.isText) {
    if (a != t && !n.child(o).isText)
      throw new RangeError("Removing non-flat range");
    return n.cut(0, e).append(n.cut(t));
  }
  if (r != o)
    throw new RangeError("Removing non-flat range");
  return n.replaceChild(r, s.copy(Vp(s.content, e - i - 1, t - i - 1)));
}
function qp(n, e, t, r) {
  let { index: i, offset: s } = n.findIndex(e), o = n.maybeChild(i);
  if (s == e || o.isText)
    return r && !r.canReplace(i, i, t) ? null : n.cut(0, e).append(t).append(n.cut(e));
  let a = qp(o.content, e - s - 1, t);
  return a && n.replaceChild(i, o.copy(a));
}
function Mb(n, e, t) {
  if (t.openStart > n.depth)
    throw new Is("Inserted content deeper than insertion position");
  if (n.depth - t.openStart != e.depth - t.openEnd)
    throw new Is("Inconsistent open depths");
  return Up(n, e, t, 0);
}
function Up(n, e, t, r) {
  let i = n.index(r), s = n.node(r);
  if (i == e.index(r) && r < n.depth - t.openStart) {
    let o = Up(n, e, t, r + 1);
    return s.copy(s.content.replaceChild(i, o));
  } else if (t.content.size)
    if (!t.openStart && !t.openEnd && n.depth == r && e.depth == r) {
      let o = n.parent, a = o.content;
      return Zn(o, a.cut(0, n.parentOffset).append(t.content).append(a.cut(e.parentOffset)));
    } else {
      let { start: o, end: a } = Ab(t, n);
      return Zn(s, Wp(n, o, a, e, r));
    }
  else
    return Zn(s, Bs(n, e, r));
}
function Kp(n, e) {
  if (!e.type.compatibleContent(n.type))
    throw new Is("Cannot join " + e.type.name + " onto " + n.type.name);
}
function al(n, e, t) {
  let r = n.node(t);
  return Kp(r, e.node(t)), r;
}
function Gn(n, e) {
  let t = e.length - 1;
  t >= 0 && n.isText && n.sameMarkup(e[t]) ? e[t] = n.withText(e[t].text + n.text) : e.push(n);
}
function pi(n, e, t, r) {
  let i = (e || n).node(t), s = 0, o = e ? e.index(t) : i.childCount;
  n && (s = n.index(t), n.depth > t ? s++ : n.textOffset && (Gn(n.nodeAfter, r), s++));
  for (let a = s; a < o; a++)
    Gn(i.child(a), r);
  e && e.depth == t && e.textOffset && Gn(e.nodeBefore, r);
}
function Zn(n, e) {
  return n.type.checkContent(e), n.copy(e);
}
function Wp(n, e, t, r, i) {
  let s = n.depth > i && al(n, e, i + 1), o = r.depth > i && al(t, r, i + 1), a = [];
  return pi(null, n, i, a), s && o && e.index(i) == t.index(i) ? (Kp(s, o), Gn(Zn(s, Wp(n, e, t, r, i + 1)), a)) : (s && Gn(Zn(s, Bs(n, e, i + 1)), a), pi(e, t, i, a), o && Gn(Zn(o, Bs(t, r, i + 1)), a)), pi(r, null, i, a), new R(a);
}
function Bs(n, e, t) {
  let r = [];
  if (pi(null, n, t, r), n.depth > t) {
    let i = al(n, e, t + 1);
    Gn(Zn(i, Bs(n, e, t + 1)), r);
  }
  return pi(e, null, t, r), new R(r);
}
function Ab(n, e) {
  let t = e.depth - n.openStart, i = e.node(t).copy(n.content);
  for (let s = t - 1; s >= 0; s--)
    i = e.node(s).copy(R.from(i));
  return {
    start: i.resolveNoCache(n.openStart + t),
    end: i.resolveNoCache(i.content.size - n.openEnd - t)
  };
}
class Si {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.pos = e, this.path = t, this.parentOffset = r, this.depth = t.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(e) {
    return e == null ? this.depth : e < 0 ? this.depth + e : e;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(e) {
    return this.path[this.resolveDepth(e) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(e) {
    return this.path[this.resolveDepth(e) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(e) {
    return e = this.resolveDepth(e), this.index(e) + (e == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(e) {
    return e = this.resolveDepth(e), e == 0 ? 0 : this.path[e * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(e) {
    return e = this.resolveDepth(e), this.start(e) + this.node(e).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position before the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position after the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1] + this.path[e * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let e = this.parent, t = this.index(this.depth);
    if (t == e.childCount)
      return null;
    let r = this.pos - this.path[this.path.length - 1], i = e.child(t);
    return r ? e.child(t).cut(r) : i;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let e = this.index(this.depth), t = this.pos - this.path[this.path.length - 1];
    return t ? this.parent.child(e).cut(0, t) : e == 0 ? null : this.parent.child(e - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(e, t) {
    t = this.resolveDepth(t);
    let r = this.path[t * 3], i = t == 0 ? 0 : this.path[t * 3 - 1] + 1;
    for (let s = 0; s < e; s++)
      i += r.child(s).nodeSize;
    return i;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let e = this.parent, t = this.index();
    if (e.content.size == 0)
      return ye.none;
    if (this.textOffset)
      return e.child(t).marks;
    let r = e.maybeChild(t - 1), i = e.maybeChild(t);
    if (!r) {
      let a = r;
      r = i, i = a;
    }
    let s = r.marks;
    for (var o = 0; o < s.length; o++)
      s[o].type.spec.inclusive === !1 && (!i || !s[o].isInSet(i.marks)) && (s = s[o--].removeFromSet(s));
    return s;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross(e) {
    let t = this.parent.maybeChild(this.index());
    if (!t || !t.isInline)
      return null;
    let r = t.marks, i = e.parent.maybeChild(e.index());
    for (var s = 0; s < r.length; s++)
      r[s].type.spec.inclusive === !1 && (!i || !r[s].isInSet(i.marks)) && (r = r[s--].removeFromSet(r));
    return r;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(e) {
    for (let t = this.depth; t > 0; t--)
      if (this.start(t) <= e && this.end(t) >= e)
        return t;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(e = this, t) {
    if (e.pos < this.pos)
      return e.blockRange(this);
    for (let r = this.depth - (this.parent.inlineContent || this.pos == e.pos ? 1 : 0); r >= 0; r--)
      if (e.pos <= this.end(r) && (!t || t(this.node(r))))
        return new Hs(this, e, r);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(e) {
    return this.pos - this.parentOffset == e.pos - e.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(e) {
    return e.pos > this.pos ? e : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(e) {
    return e.pos < this.pos ? e : this;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 1; t <= this.depth; t++)
      e += (e ? "/" : "") + this.node(t).type.name + "_" + this.index(t - 1);
    return e + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(e, t) {
    if (!(t >= 0 && t <= e.content.size))
      throw new RangeError("Position " + t + " out of range");
    let r = [], i = 0, s = t;
    for (let o = e; ; ) {
      let { index: a, offset: l } = o.content.findIndex(s), c = s - l;
      if (r.push(o, a, i + l), !c || (o = o.child(a), o.isText))
        break;
      s = c - 1, i += l + 1;
    }
    return new Si(t, r, s);
  }
  /**
  @internal
  */
  static resolveCached(e, t) {
    for (let i = 0; i < ra.length; i++) {
      let s = ra[i];
      if (s.pos == t && s.doc == e)
        return s;
    }
    let r = ra[ia] = Si.resolve(e, t);
    return ia = (ia + 1) % Tb, r;
  }
}
let ra = [], ia = 0, Tb = 12;
class Hs {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor(e, t, r) {
    this.$from = e, this.$to = t, this.depth = r;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
}
const Nb = /* @__PURE__ */ Object.create(null);
let jn = class ll {
  /**
  @internal
  */
  constructor(e, t, r, i = ye.none) {
    this.type = e, this.attrs = t, this.marks = i, this.content = r || R.empty;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(e) {
    return this.content.child(e);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content.maybeChild(e);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    this.content.forEach(e);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(e, t, r, i = 0) {
    this.content.nodesBetween(e, t, r, i, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(e) {
    this.nodesBetween(0, this.content.size, e);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(e, t, r, i) {
    return this.content.textBetween(e, t, r, i);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(e) {
    return this == e || this.sameMarkup(e) && this.content.eq(e.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(e) {
    return this.hasMarkup(e.type, e.attrs, e.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(e, t, r) {
    return this.type == e && Ds(this.attrs, t || e.defaultAttrs || Nb) && ye.sameSet(this.marks, r || ye.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(e = null) {
    return e == this.content ? this : new ll(this.type, this.attrs, e, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(e) {
    return e == this.marks ? this : new ll(this.type, this.attrs, this.content, e);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(e, t = this.content.size) {
    return e == 0 && t == this.content.size ? this : this.copy(this.content.cut(e, t));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(e, t = this.content.size, r = !1) {
    if (e == t)
      return F.empty;
    let i = this.resolve(e), s = this.resolve(t), o = r ? 0 : i.sharedDepth(t), a = i.start(o), c = i.node(o).content.cut(i.pos - a, s.pos - a);
    return new F(c, i.depth - o, s.depth - o);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(e, t, r) {
    return Mb(this.resolve(e), this.resolve(t), r);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(e) {
    for (let t = this; ; ) {
      let { index: r, offset: i } = t.content.findIndex(e);
      if (t = t.maybeChild(r), !t)
        return null;
      if (i == e || t.isText)
        return t;
      e -= i + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(e) {
    let { index: t, offset: r } = this.content.findIndex(e);
    return { node: this.content.maybeChild(t), index: t, offset: r };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(e) {
    if (e == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: t, offset: r } = this.content.findIndex(e);
    if (r < e)
      return { node: this.content.child(t), index: t, offset: r };
    let i = this.content.child(t - 1);
    return { node: i, index: t - 1, offset: r - i.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(e) {
    return Si.resolveCached(this, e);
  }
  /**
  @internal
  */
  resolveNoCache(e) {
    return Si.resolve(this, e);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(e, t, r) {
    let i = !1;
    return t > e && this.nodesBetween(e, t, (s) => (r.isInSet(s.marks) && (i = !0), !i)), i;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let e = this.type.name;
    return this.content.size && (e += "(" + this.content.toStringInner() + ")"), Gp(this.marks, e);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(e) {
    let t = this.type.contentMatch.matchFragment(this.content, 0, e);
    if (!t)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return t;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(e, t, r = R.empty, i = 0, s = r.childCount) {
    let o = this.contentMatchAt(e).matchFragment(r, i, s), a = o && o.matchFragment(this.content, t);
    if (!a || !a.validEnd)
      return !1;
    for (let l = i; l < s; l++)
      if (!this.type.allowsMarks(r.child(l).marks))
        return !1;
    return !0;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(e, t, r, i) {
    if (i && !this.type.allowsMarks(i))
      return !1;
    let s = this.contentMatchAt(e).matchType(r), o = s && s.matchFragment(this.content, t);
    return o ? o.validEnd : !1;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(e) {
    return e.content.size ? this.canReplace(this.childCount, this.childCount, e.content) : this.type.compatibleContent(e.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise error when they do not.
  */
  check() {
    this.type.checkContent(this.content);
    let e = ye.none;
    for (let t = 0; t < this.marks.length; t++)
      e = this.marks[t].addToSet(e);
    if (!ye.sameSet(e, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((t) => t.type.name)}`);
    this.content.forEach((t) => t.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let t in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return this.content.size && (e.content = this.content.toJSON()), this.marks.length && (e.marks = this.marks.map((t) => t.toJSON())), e;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      throw new RangeError("Invalid input for Node.fromJSON");
    let r = null;
    if (t.marks) {
      if (!Array.isArray(t.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      r = t.marks.map(e.markFromJSON);
    }
    if (t.type == "text") {
      if (typeof t.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return e.text(t.text, r);
    }
    let i = R.fromJSON(e, t.content);
    return e.nodeType(t.type).create(t.attrs, i, r);
  }
};
jn.prototype.text = void 0;
class Ps extends jn {
  /**
  @internal
  */
  constructor(e, t, r, i) {
    if (super(e, t, null, i), !r)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = r;
  }
  toString() {
    return this.type.spec.toDebugString ? this.type.spec.toDebugString(this) : Gp(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(e, t) {
    return this.text.slice(e, t);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(e) {
    return e == this.marks ? this : new Ps(this.type, this.attrs, this.text, e);
  }
  withText(e) {
    return e == this.text ? this : new Ps(this.type, this.attrs, e, this.marks);
  }
  cut(e = 0, t = this.text.length) {
    return e == 0 && t == this.text.length ? this : this.withText(this.text.slice(e, t));
  }
  eq(e) {
    return this.sameMarkup(e) && this.text == e.text;
  }
  toJSON() {
    let e = super.toJSON();
    return e.text = this.text, e;
  }
}
function Gp(n, e) {
  for (let t = n.length - 1; t >= 0; t--)
    e = n[t].type.name + "(" + e + ")";
  return e;
}
class tr {
  /**
  @internal
  */
  constructor(e) {
    this.validEnd = e, this.next = [], this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(e, t) {
    let r = new Ob(e, t);
    if (r.next == null)
      return tr.empty;
    let i = Zp(r);
    r.next && r.err("Unexpected trailing text");
    let s = Pb(Hb(i));
    return $b(s, r), s;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(e) {
    for (let t = 0; t < this.next.length; t++)
      if (this.next[t].type == e)
        return this.next[t].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(e, t = 0, r = e.childCount) {
    let i = this;
    for (let s = t; i && s < r; s++)
      i = i.matchType(e.child(s).type);
    return i;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let e = 0; e < this.next.length; e++) {
      let { type: t } = this.next[e];
      if (!(t.isText || t.hasRequiredAttrs()))
        return t;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(e) {
    for (let t = 0; t < this.next.length; t++)
      for (let r = 0; r < e.next.length; r++)
        if (this.next[t].type == e.next[r].type)
          return !0;
    return !1;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(e, t = !1, r = 0) {
    let i = [this];
    function s(o, a) {
      let l = o.matchFragment(e, r);
      if (l && (!t || l.validEnd))
        return R.from(a.map((c) => c.createAndFill()));
      for (let c = 0; c < o.next.length; c++) {
        let { type: u, next: d } = o.next[c];
        if (!(u.isText || u.hasRequiredAttrs()) && i.indexOf(d) == -1) {
          i.push(d);
          let f = s(d, a.concat(u));
          if (f)
            return f;
        }
      }
      return null;
    }
    return s(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(e) {
    for (let r = 0; r < this.wrapCache.length; r += 2)
      if (this.wrapCache[r] == e)
        return this.wrapCache[r + 1];
    let t = this.computeWrapping(e);
    return this.wrapCache.push(e, t), t;
  }
  /**
  @internal
  */
  computeWrapping(e) {
    let t = /* @__PURE__ */ Object.create(null), r = [{ match: this, type: null, via: null }];
    for (; r.length; ) {
      let i = r.shift(), s = i.match;
      if (s.matchType(e)) {
        let o = [];
        for (let a = i; a.type; a = a.via)
          o.push(a.type);
        return o.reverse();
      }
      for (let o = 0; o < s.next.length; o++) {
        let { type: a, next: l } = s.next[o];
        !a.isLeaf && !a.hasRequiredAttrs() && !(a.name in t) && (!i.type || l.validEnd) && (r.push({ match: a.contentMatch, type: a, via: i }), t[a.name] = !0);
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(e) {
    if (e >= this.next.length)
      throw new RangeError(`There's no ${e}th edge in this content match`);
    return this.next[e];
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    function t(r) {
      e.push(r);
      for (let i = 0; i < r.next.length; i++)
        e.indexOf(r.next[i].next) == -1 && t(r.next[i].next);
    }
    return t(this), e.map((r, i) => {
      let s = i + (r.validEnd ? "*" : " ") + " ";
      for (let o = 0; o < r.next.length; o++)
        s += (o ? ", " : "") + r.next[o].type.name + "->" + e.indexOf(r.next[o].next);
      return s;
    }).join(`
`);
  }
}
tr.empty = new tr(!0);
class Ob {
  constructor(e, t) {
    this.string = e, this.nodeTypes = t, this.inline = null, this.pos = 0, this.tokens = e.split(/\s*(?=\b|\W|$)/), this.tokens[this.tokens.length - 1] == "" && this.tokens.pop(), this.tokens[0] == "" && this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(e) {
    return this.next == e && (this.pos++ || !0);
  }
  err(e) {
    throw new SyntaxError(e + " (in content expression '" + this.string + "')");
  }
}
function Zp(n) {
  let e = [];
  do
    e.push(Lb(n));
  while (n.eat("|"));
  return e.length == 1 ? e[0] : { type: "choice", exprs: e };
}
function Lb(n) {
  let e = [];
  do
    e.push(Rb(n));
  while (n.next && n.next != ")" && n.next != "|");
  return e.length == 1 ? e[0] : { type: "seq", exprs: e };
}
function Rb(n) {
  let e = Bb(n);
  for (; ; )
    if (n.eat("+"))
      e = { type: "plus", expr: e };
    else if (n.eat("*"))
      e = { type: "star", expr: e };
    else if (n.eat("?"))
      e = { type: "opt", expr: e };
    else if (n.eat("{"))
      e = Db(n, e);
    else
      break;
  return e;
}
function du(n) {
  /\D/.test(n.next) && n.err("Expected number, got '" + n.next + "'");
  let e = Number(n.next);
  return n.pos++, e;
}
function Db(n, e) {
  let t = du(n), r = t;
  return n.eat(",") && (n.next != "}" ? r = du(n) : r = -1), n.eat("}") || n.err("Unclosed braced range"), { type: "range", min: t, max: r, expr: e };
}
function Ib(n, e) {
  let t = n.nodeTypes, r = t[e];
  if (r)
    return [r];
  let i = [];
  for (let s in t) {
    let o = t[s];
    o.groups.indexOf(e) > -1 && i.push(o);
  }
  return i.length == 0 && n.err("No node type or group '" + e + "' found"), i;
}
function Bb(n) {
  if (n.eat("(")) {
    let e = Zp(n);
    return n.eat(")") || n.err("Missing closing paren"), e;
  } else if (/\W/.test(n.next))
    n.err("Unexpected token '" + n.next + "'");
  else {
    let e = Ib(n, n.next).map((t) => (n.inline == null ? n.inline = t.isInline : n.inline != t.isInline && n.err("Mixing inline and block content"), { type: "name", value: t }));
    return n.pos++, e.length == 1 ? e[0] : { type: "choice", exprs: e };
  }
}
function Hb(n) {
  let e = [[]];
  return i(s(n, 0), t()), e;
  function t() {
    return e.push([]) - 1;
  }
  function r(o, a, l) {
    let c = { term: l, to: a };
    return e[o].push(c), c;
  }
  function i(o, a) {
    o.forEach((l) => l.to = a);
  }
  function s(o, a) {
    if (o.type == "choice")
      return o.exprs.reduce((l, c) => l.concat(s(c, a)), []);
    if (o.type == "seq")
      for (let l = 0; ; l++) {
        let c = s(o.exprs[l], a);
        if (l == o.exprs.length - 1)
          return c;
        i(c, a = t());
      }
    else if (o.type == "star") {
      let l = t();
      return r(a, l), i(s(o.expr, l), l), [r(l)];
    } else if (o.type == "plus") {
      let l = t();
      return i(s(o.expr, a), l), i(s(o.expr, l), l), [r(l)];
    } else {
      if (o.type == "opt")
        return [r(a)].concat(s(o.expr, a));
      if (o.type == "range") {
        let l = a;
        for (let c = 0; c < o.min; c++) {
          let u = t();
          i(s(o.expr, l), u), l = u;
        }
        if (o.max == -1)
          i(s(o.expr, l), l);
        else
          for (let c = o.min; c < o.max; c++) {
            let u = t();
            r(l, u), i(s(o.expr, l), u), l = u;
          }
        return [r(l)];
      } else {
        if (o.type == "name")
          return [r(a, void 0, o.value)];
        throw new Error("Unknown expr type");
      }
    }
  }
}
function jp(n, e) {
  return e - n;
}
function fu(n, e) {
  let t = [];
  return r(e), t.sort(jp);
  function r(i) {
    let s = n[i];
    if (s.length == 1 && !s[0].term)
      return r(s[0].to);
    t.push(i);
    for (let o = 0; o < s.length; o++) {
      let { term: a, to: l } = s[o];
      !a && t.indexOf(l) == -1 && r(l);
    }
  }
}
function Pb(n) {
  let e = /* @__PURE__ */ Object.create(null);
  return t(fu(n, 0));
  function t(r) {
    let i = [];
    r.forEach((o) => {
      n[o].forEach(({ term: a, to: l }) => {
        if (!a)
          return;
        let c;
        for (let u = 0; u < i.length; u++)
          i[u][0] == a && (c = i[u][1]);
        fu(n, l).forEach((u) => {
          c || i.push([a, c = []]), c.indexOf(u) == -1 && c.push(u);
        });
      });
    });
    let s = e[r.join(",")] = new tr(r.indexOf(n.length - 1) > -1);
    for (let o = 0; o < i.length; o++) {
      let a = i[o][1].sort(jp);
      s.next.push({ type: i[o][0], next: e[a.join(",")] || t(a) });
    }
    return s;
  }
}
function $b(n, e) {
  for (let t = 0, r = [n]; t < r.length; t++) {
    let i = r[t], s = !i.validEnd, o = [];
    for (let a = 0; a < i.next.length; a++) {
      let { type: l, next: c } = i.next[a];
      o.push(l.name), s && !(l.isText || l.hasRequiredAttrs()) && (s = !1), r.indexOf(c) == -1 && r.push(c);
    }
    s && e.err("Only non-generatable nodes (" + o.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function Jp(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let r = n[t];
    if (!r.hasDefault)
      return null;
    e[t] = r.default;
  }
  return e;
}
function Yp(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let r in n) {
    let i = e && e[r];
    if (i === void 0) {
      let s = n[r];
      if (s.hasDefault)
        i = s.default;
      else
        throw new RangeError("No value supplied for attribute " + r);
    }
    t[r] = i;
  }
  return t;
}
function Xp(n) {
  let e = /* @__PURE__ */ Object.create(null);
  if (n)
    for (let t in n)
      e[t] = new Fb(n[t]);
  return e;
}
let pu = class Qp {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.name = e, this.schema = t, this.spec = r, this.markSet = null, this.groups = r.group ? r.group.split(" ") : [], this.attrs = Xp(r.attrs), this.defaultAttrs = Jp(this.attrs), this.contentMatch = null, this.inlineContent = null, this.isBlock = !(r.inline || e == "text"), this.isText = e == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == tr.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let e in this.attrs)
      if (this.attrs[e].isRequired)
        return !0;
    return !1;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(e) {
    return this == e || this.contentMatch.compatible(e.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(e) {
    return !e && this.defaultAttrs ? this.defaultAttrs : Yp(this.attrs, e);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(e = null, t, r) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new jn(this, this.computeAttrs(e), R.from(t), ye.setFrom(r));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(e = null, t, r) {
    return t = R.from(t), this.checkContent(t), new jn(this, this.computeAttrs(e), t, ye.setFrom(r));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(e = null, t, r) {
    if (e = this.computeAttrs(e), t = R.from(t), t.size) {
      let o = this.contentMatch.fillBefore(t);
      if (!o)
        return null;
      t = o.append(t);
    }
    let i = this.contentMatch.matchFragment(t), s = i && i.fillBefore(R.empty, !0);
    return s ? new jn(this, e, t.append(s), ye.setFrom(r)) : null;
  }
  /**
  Returns true if the given fragment is valid content for this node
  type with the given attributes.
  */
  validContent(e) {
    let t = this.contentMatch.matchFragment(e);
    if (!t || !t.validEnd)
      return !1;
    for (let r = 0; r < e.childCount; r++)
      if (!this.allowsMarks(e.child(r).marks))
        return !1;
    return !0;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(e) {
    if (!this.validContent(e))
      throw new RangeError(`Invalid content for node ${this.name}: ${e.toString().slice(0, 50)}`);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(e) {
    return this.markSet == null || this.markSet.indexOf(e) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(e) {
    if (this.markSet == null)
      return !0;
    for (let t = 0; t < e.length; t++)
      if (!this.allowsMarkType(e[t].type))
        return !1;
    return !0;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(e) {
    if (this.markSet == null)
      return e;
    let t;
    for (let r = 0; r < e.length; r++)
      this.allowsMarkType(e[r].type) ? t && t.push(e[r]) : t || (t = e.slice(0, r));
    return t ? t.length ? t : ye.none : e;
  }
  /**
  @internal
  */
  static compile(e, t) {
    let r = /* @__PURE__ */ Object.create(null);
    e.forEach((s, o) => r[s] = new Qp(s, t, o));
    let i = t.spec.topNode || "doc";
    if (!r[i])
      throw new RangeError("Schema is missing its top node type ('" + i + "')");
    if (!r.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let s in r.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return r;
  }
};
class Fb {
  constructor(e) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(e, "default"), this.default = e.default;
  }
  get isRequired() {
    return !this.hasDefault;
  }
}
class Co {
  /**
  @internal
  */
  constructor(e, t, r, i) {
    this.name = e, this.rank = t, this.schema = r, this.spec = i, this.attrs = Xp(i.attrs), this.excluded = null;
    let s = Jp(this.attrs);
    this.instance = s ? new ye(this, s) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(e = null) {
    return !e && this.instance ? this.instance : new ye(this, Yp(this.attrs, e));
  }
  /**
  @internal
  */
  static compile(e, t) {
    let r = /* @__PURE__ */ Object.create(null), i = 0;
    return e.forEach((s, o) => r[s] = new Co(s, i++, t, o)), r;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(e) {
    for (var t = 0; t < e.length; t++)
      e[t].type == this && (e = e.slice(0, t).concat(e.slice(t + 1)), t--);
    return e;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(e) {
    for (let t = 0; t < e.length; t++)
      if (e[t].type == this)
        return e[t];
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(e) {
    return this.excluded.indexOf(e) > -1;
  }
}
class eh {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(e) {
    this.cached = /* @__PURE__ */ Object.create(null);
    let t = this.spec = {};
    for (let i in e)
      t[i] = e[i];
    t.nodes = qe.from(e.nodes), t.marks = qe.from(e.marks || {}), this.nodes = pu.compile(this.spec.nodes, this), this.marks = Co.compile(this.spec.marks, this);
    let r = /* @__PURE__ */ Object.create(null);
    for (let i in this.nodes) {
      if (i in this.marks)
        throw new RangeError(i + " can not be both a node and a mark");
      let s = this.nodes[i], o = s.spec.content || "", a = s.spec.marks;
      s.contentMatch = r[o] || (r[o] = tr.parse(o, this.nodes)), s.inlineContent = s.contentMatch.inlineContent, s.markSet = a == "_" ? null : a ? hu(this, a.split(" ")) : a == "" || !s.inlineContent ? [] : null;
    }
    for (let i in this.marks) {
      let s = this.marks[i], o = s.spec.excludes;
      s.excluded = o == null ? [s] : o == "" ? [] : hu(this, o.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this), this.markFromJSON = this.markFromJSON.bind(this), this.topNodeType = this.nodes[this.spec.topNode || "doc"], this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(e, t = null, r, i) {
    if (typeof e == "string")
      e = this.nodeType(e);
    else if (e instanceof pu) {
      if (e.schema != this)
        throw new RangeError("Node type from different schema used (" + e.name + ")");
    } else
      throw new RangeError("Invalid node type: " + e);
    return e.createChecked(t, r, i);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(e, t) {
    let r = this.nodes.text;
    return new Ps(r, r.defaultAttrs, e, ye.setFrom(t));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(e, t) {
    return typeof e == "string" && (e = this.marks[e]), e.create(t);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(e) {
    return jn.fromJSON(this, e);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(e) {
    return ye.fromJSON(this, e);
  }
  /**
  @internal
  */
  nodeType(e) {
    let t = this.nodes[e];
    if (!t)
      throw new RangeError("Unknown node type: " + e);
    return t;
  }
}
function hu(n, e) {
  let t = [];
  for (let r = 0; r < e.length; r++) {
    let i = e[r], s = n.marks[i], o = s;
    if (s)
      t.push(s);
    else
      for (let a in n.marks) {
        let l = n.marks[a];
        (i == "_" || l.spec.group && l.spec.group.split(" ").indexOf(i) > -1) && t.push(o = l);
      }
    if (!o)
      throw new SyntaxError("Unknown mark type: '" + e[r] + "'");
  }
  return t;
}
class Nn {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(e, t) {
    this.schema = e, this.rules = t, this.tags = [], this.styles = [], t.forEach((r) => {
      r.tag ? this.tags.push(r) : r.style && this.styles.push(r);
    }), this.normalizeLists = !this.tags.some((r) => {
      if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
        return !1;
      let i = e.nodes[r.node];
      return i.contentMatch.matchType(i);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(e, t = {}) {
    let r = new mu(this, t, !1);
    return r.addAll(e, t.from, t.to), r.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(e, t = {}) {
    let r = new mu(this, t, !0);
    return r.addAll(e, t.from, t.to), F.maxOpen(r.finish());
  }
  /**
  @internal
  */
  matchTag(e, t, r) {
    for (let i = r ? this.tags.indexOf(r) + 1 : 0; i < this.tags.length; i++) {
      let s = this.tags[i];
      if (qb(e, s.tag) && (s.namespace === void 0 || e.namespaceURI == s.namespace) && (!s.context || t.matchesContext(s.context))) {
        if (s.getAttrs) {
          let o = s.getAttrs(e);
          if (o === !1)
            continue;
          s.attrs = o || void 0;
        }
        return s;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(e, t, r, i) {
    for (let s = i ? this.styles.indexOf(i) + 1 : 0; s < this.styles.length; s++) {
      let o = this.styles[s], a = o.style;
      if (!(a.indexOf(e) != 0 || o.context && !r.matchesContext(o.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      a.length > e.length && (a.charCodeAt(e.length) != 61 || a.slice(e.length + 1) != t))) {
        if (o.getAttrs) {
          let l = o.getAttrs(t);
          if (l === !1)
            continue;
          o.attrs = l || void 0;
        }
        return o;
      }
    }
  }
  /**
  @internal
  */
  static schemaRules(e) {
    let t = [];
    function r(i) {
      let s = i.priority == null ? 50 : i.priority, o = 0;
      for (; o < t.length; o++) {
        let a = t[o];
        if ((a.priority == null ? 50 : a.priority) < s)
          break;
      }
      t.splice(o, 0, i);
    }
    for (let i in e.marks) {
      let s = e.marks[i].spec.parseDOM;
      s && s.forEach((o) => {
        r(o = bu(o)), o.mark || o.ignore || o.clearMark || (o.mark = i);
      });
    }
    for (let i in e.nodes) {
      let s = e.nodes[i].spec.parseDOM;
      s && s.forEach((o) => {
        r(o = bu(o)), o.node || o.ignore || o.mark || (o.node = i);
      });
    }
    return t;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(e) {
    return e.cached.domParser || (e.cached.domParser = new Nn(e, Nn.schemaRules(e)));
  }
}
const th = {
  address: !0,
  article: !0,
  aside: !0,
  blockquote: !0,
  canvas: !0,
  dd: !0,
  div: !0,
  dl: !0,
  fieldset: !0,
  figcaption: !0,
  figure: !0,
  footer: !0,
  form: !0,
  h1: !0,
  h2: !0,
  h3: !0,
  h4: !0,
  h5: !0,
  h6: !0,
  header: !0,
  hgroup: !0,
  hr: !0,
  li: !0,
  noscript: !0,
  ol: !0,
  output: !0,
  p: !0,
  pre: !0,
  section: !0,
  table: !0,
  tfoot: !0,
  ul: !0
}, zb = {
  head: !0,
  noscript: !0,
  object: !0,
  script: !0,
  style: !0,
  title: !0
}, nh = { ol: !0, ul: !0 }, $s = 1, Fs = 2, hi = 4;
function gu(n, e, t) {
  return e != null ? (e ? $s : 0) | (e === "full" ? Fs : 0) : n && n.whitespace == "pre" ? $s | Fs : t & ~hi;
}
class ns {
  constructor(e, t, r, i, s, o, a) {
    this.type = e, this.attrs = t, this.marks = r, this.pendingMarks = i, this.solid = s, this.options = a, this.content = [], this.activeMarks = ye.none, this.stashMarks = [], this.match = o || (a & hi ? null : e.contentMatch);
  }
  findWrapping(e) {
    if (!this.match) {
      if (!this.type)
        return [];
      let t = this.type.contentMatch.fillBefore(R.from(e));
      if (t)
        this.match = this.type.contentMatch.matchFragment(t);
      else {
        let r = this.type.contentMatch, i;
        return (i = r.findWrapping(e.type)) ? (this.match = r, i) : null;
      }
    }
    return this.match.findWrapping(e.type);
  }
  finish(e) {
    if (!(this.options & $s)) {
      let r = this.content[this.content.length - 1], i;
      if (r && r.isText && (i = /[ \t\r\n\u000c]+$/.exec(r.text))) {
        let s = r;
        r.text.length == i[0].length ? this.content.pop() : this.content[this.content.length - 1] = s.withText(s.text.slice(0, s.text.length - i[0].length));
      }
    }
    let t = R.from(this.content);
    return !e && this.match && (t = t.append(this.match.fillBefore(R.empty, !0))), this.type ? this.type.create(this.attrs, t, this.marks) : t;
  }
  popFromStashMark(e) {
    for (let t = this.stashMarks.length - 1; t >= 0; t--)
      if (e.eq(this.stashMarks[t]))
        return this.stashMarks.splice(t, 1)[0];
  }
  applyPending(e) {
    for (let t = 0, r = this.pendingMarks; t < r.length; t++) {
      let i = r[t];
      (this.type ? this.type.allowsMarkType(i.type) : Kb(i.type, e)) && !i.isInSet(this.activeMarks) && (this.activeMarks = i.addToSet(this.activeMarks), this.pendingMarks = i.removeFromSet(this.pendingMarks));
    }
  }
  inlineContext(e) {
    return this.type ? this.type.inlineContent : this.content.length ? this.content[0].isInline : e.parentNode && !th.hasOwnProperty(e.parentNode.nodeName.toLowerCase());
  }
}
class mu {
  constructor(e, t, r) {
    this.parser = e, this.options = t, this.isOpen = r, this.open = 0;
    let i = t.topNode, s, o = gu(null, t.preserveWhitespace, 0) | (r ? hi : 0);
    i ? s = new ns(i.type, i.attrs, ye.none, ye.none, !0, t.topMatch || i.type.contentMatch, o) : r ? s = new ns(null, null, ye.none, ye.none, !0, null, o) : s = new ns(e.schema.topNodeType, null, ye.none, ye.none, !0, null, o), this.nodes = [s], this.find = t.findPositions, this.needsBlock = !1;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(e) {
    e.nodeType == 3 ? this.addTextNode(e) : e.nodeType == 1 && this.addElement(e);
  }
  withStyleRules(e, t) {
    let r = e.getAttribute("style");
    if (!r)
      return t();
    let i = this.readStyles(Ub(r));
    if (!i)
      return;
    let [s, o] = i, a = this.top;
    for (let l = 0; l < o.length; l++)
      this.removePendingMark(o[l], a);
    for (let l = 0; l < s.length; l++)
      this.addPendingMark(s[l]);
    t();
    for (let l = 0; l < s.length; l++)
      this.removePendingMark(s[l], a);
    for (let l = 0; l < o.length; l++)
      this.addPendingMark(o[l]);
  }
  addTextNode(e) {
    let t = e.nodeValue, r = this.top;
    if (r.options & Fs || r.inlineContext(e) || /[^ \t\r\n\u000c]/.test(t)) {
      if (r.options & $s)
        r.options & Fs ? t = t.replace(/\r\n?/g, `
`) : t = t.replace(/\r?\n|\r/g, " ");
      else if (t = t.replace(/[ \t\r\n\u000c]+/g, " "), /^[ \t\r\n\u000c]/.test(t) && this.open == this.nodes.length - 1) {
        let i = r.content[r.content.length - 1], s = e.previousSibling;
        (!i || s && s.nodeName == "BR" || i.isText && /[ \t\r\n\u000c]$/.test(i.text)) && (t = t.slice(1));
      }
      t && this.insertNode(this.parser.schema.text(t)), this.findInText(e);
    } else
      this.findInside(e);
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(e, t) {
    let r = e.nodeName.toLowerCase(), i;
    nh.hasOwnProperty(r) && this.parser.normalizeLists && Vb(e);
    let s = this.options.ruleFromNode && this.options.ruleFromNode(e) || (i = this.parser.matchTag(e, this, t));
    if (s ? s.ignore : zb.hasOwnProperty(r))
      this.findInside(e), this.ignoreFallback(e);
    else if (!s || s.skip || s.closeParent) {
      s && s.closeParent ? this.open = Math.max(0, this.open - 1) : s && s.skip.nodeType && (e = s.skip);
      let o, a = this.top, l = this.needsBlock;
      if (th.hasOwnProperty(r))
        a.content.length && a.content[0].isInline && this.open && (this.open--, a = this.top), o = !0, a.type || (this.needsBlock = !0);
      else if (!e.firstChild) {
        this.leafFallback(e);
        return;
      }
      s && s.skip ? this.addAll(e) : this.withStyleRules(e, () => this.addAll(e)), o && this.sync(a), this.needsBlock = l;
    } else
      this.withStyleRules(e, () => {
        this.addElementByRule(e, s, s.consuming === !1 ? i : void 0);
      });
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(e) {
    e.nodeName == "BR" && this.top.type && this.top.type.inlineContent && this.addTextNode(e.ownerDocument.createTextNode(`
`));
  }
  // Called for ignored nodes
  ignoreFallback(e) {
    e.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent) && this.findPlace(this.parser.schema.text("-"));
  }
  // Run any style parser associated with the node's styles. Either
  // return an array of marks, or null to indicate some of the styles
  // had a rule with `ignore` set.
  readStyles(e) {
    let t = ye.none, r = ye.none;
    for (let i = 0; i < e.length; i += 2)
      for (let s = void 0; ; ) {
        let o = this.parser.matchStyle(e[i], e[i + 1], this, s);
        if (!o)
          break;
        if (o.ignore)
          return null;
        if (o.clearMark ? this.top.pendingMarks.concat(this.top.activeMarks).forEach((a) => {
          o.clearMark(a) && (r = a.addToSet(r));
        }) : t = this.parser.schema.marks[o.mark].create(o.attrs).addToSet(t), o.consuming === !1)
          s = o;
        else
          break;
      }
    return [t, r];
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(e, t, r) {
    let i, s, o;
    t.node ? (s = this.parser.schema.nodes[t.node], s.isLeaf ? this.insertNode(s.create(t.attrs)) || this.leafFallback(e) : i = this.enter(s, t.attrs || null, t.preserveWhitespace)) : (o = this.parser.schema.marks[t.mark].create(t.attrs), this.addPendingMark(o));
    let a = this.top;
    if (s && s.isLeaf)
      this.findInside(e);
    else if (r)
      this.addElement(e, r);
    else if (t.getContent)
      this.findInside(e), t.getContent(e, this.parser.schema).forEach((l) => this.insertNode(l));
    else {
      let l = e;
      typeof t.contentElement == "string" ? l = e.querySelector(t.contentElement) : typeof t.contentElement == "function" ? l = t.contentElement(e) : t.contentElement && (l = t.contentElement), this.findAround(e, l, !0), this.addAll(l);
    }
    i && this.sync(a) && this.open--, o && this.removePendingMark(o, a);
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(e, t, r) {
    let i = t || 0;
    for (let s = t ? e.childNodes[t] : e.firstChild, o = r == null ? null : e.childNodes[r]; s != o; s = s.nextSibling, ++i)
      this.findAtPoint(e, i), this.addDOM(s);
    this.findAtPoint(e, i);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(e) {
    let t, r;
    for (let i = this.open; i >= 0; i--) {
      let s = this.nodes[i], o = s.findWrapping(e);
      if (o && (!t || t.length > o.length) && (t = o, r = s, !o.length) || s.solid)
        break;
    }
    if (!t)
      return !1;
    this.sync(r);
    for (let i = 0; i < t.length; i++)
      this.enterInner(t[i], null, !1);
    return !0;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(e) {
    if (e.isInline && this.needsBlock && !this.top.type) {
      let t = this.textblockFromContext();
      t && this.enterInner(t);
    }
    if (this.findPlace(e)) {
      this.closeExtra();
      let t = this.top;
      t.applyPending(e.type), t.match && (t.match = t.match.matchType(e.type));
      let r = t.activeMarks;
      for (let i = 0; i < e.marks.length; i++)
        (!t.type || t.type.allowsMarkType(e.marks[i].type)) && (r = e.marks[i].addToSet(r));
      return t.content.push(e.mark(r)), !0;
    }
    return !1;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(e, t, r) {
    let i = this.findPlace(e.create(t));
    return i && this.enterInner(e, t, !0, r), i;
  }
  // Open a node of the given type
  enterInner(e, t = null, r = !1, i) {
    this.closeExtra();
    let s = this.top;
    s.applyPending(e), s.match = s.match && s.match.matchType(e);
    let o = gu(e, i, s.options);
    s.options & hi && s.content.length == 0 && (o |= hi), this.nodes.push(new ns(e, t, s.activeMarks, s.pendingMarks, r, null, o)), this.open++;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(e = !1) {
    let t = this.nodes.length - 1;
    if (t > this.open) {
      for (; t > this.open; t--)
        this.nodes[t - 1].content.push(this.nodes[t].finish(e));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    return this.open = 0, this.closeExtra(this.isOpen), this.nodes[0].finish(this.isOpen || this.options.topOpen);
  }
  sync(e) {
    for (let t = this.open; t >= 0; t--)
      if (this.nodes[t] == e)
        return this.open = t, !0;
    return !1;
  }
  get currentPos() {
    this.closeExtra();
    let e = 0;
    for (let t = this.open; t >= 0; t--) {
      let r = this.nodes[t].content;
      for (let i = r.length - 1; i >= 0; i--)
        e += r[i].nodeSize;
      t && e++;
    }
    return e;
  }
  findAtPoint(e, t) {
    if (this.find)
      for (let r = 0; r < this.find.length; r++)
        this.find[r].node == e && this.find[r].offset == t && (this.find[r].pos = this.currentPos);
  }
  findInside(e) {
    if (this.find)
      for (let t = 0; t < this.find.length; t++)
        this.find[t].pos == null && e.nodeType == 1 && e.contains(this.find[t].node) && (this.find[t].pos = this.currentPos);
  }
  findAround(e, t, r) {
    if (e != t && this.find)
      for (let i = 0; i < this.find.length; i++)
        this.find[i].pos == null && e.nodeType == 1 && e.contains(this.find[i].node) && t.compareDocumentPosition(this.find[i].node) & (r ? 2 : 4) && (this.find[i].pos = this.currentPos);
  }
  findInText(e) {
    if (this.find)
      for (let t = 0; t < this.find.length; t++)
        this.find[t].node == e && (this.find[t].pos = this.currentPos - (e.nodeValue.length - this.find[t].offset));
  }
  // Determines whether the given context string matches this context.
  matchesContext(e) {
    if (e.indexOf("|") > -1)
      return e.split(/\s*\|\s*/).some(this.matchesContext, this);
    let t = e.split("/"), r = this.options.context, i = !this.isOpen && (!r || r.parent.type == this.nodes[0].type), s = -(r ? r.depth + 1 : 0) + (i ? 0 : 1), o = (a, l) => {
      for (; a >= 0; a--) {
        let c = t[a];
        if (c == "") {
          if (a == t.length - 1 || a == 0)
            continue;
          for (; l >= s; l--)
            if (o(a - 1, l))
              return !0;
          return !1;
        } else {
          let u = l > 0 || l == 0 && i ? this.nodes[l].type : r && l >= s ? r.node(l - s).type : null;
          if (!u || u.name != c && u.groups.indexOf(c) == -1)
            return !1;
          l--;
        }
      }
      return !0;
    };
    return o(t.length - 1, this.open);
  }
  textblockFromContext() {
    let e = this.options.context;
    if (e)
      for (let t = e.depth; t >= 0; t--) {
        let r = e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;
        if (r && r.isTextblock && r.defaultAttrs)
          return r;
      }
    for (let t in this.parser.schema.nodes) {
      let r = this.parser.schema.nodes[t];
      if (r.isTextblock && r.defaultAttrs)
        return r;
    }
  }
  addPendingMark(e) {
    let t = Wb(e, this.top.pendingMarks);
    t && this.top.stashMarks.push(t), this.top.pendingMarks = e.addToSet(this.top.pendingMarks);
  }
  removePendingMark(e, t) {
    for (let r = this.open; r >= 0; r--) {
      let i = this.nodes[r];
      if (i.pendingMarks.lastIndexOf(e) > -1)
        i.pendingMarks = e.removeFromSet(i.pendingMarks);
      else {
        i.activeMarks = e.removeFromSet(i.activeMarks);
        let o = i.popFromStashMark(e);
        o && i.type && i.type.allowsMarkType(o.type) && (i.activeMarks = o.addToSet(i.activeMarks));
      }
      if (i == t)
        break;
    }
  }
}
function Vb(n) {
  for (let e = n.firstChild, t = null; e; e = e.nextSibling) {
    let r = e.nodeType == 1 ? e.nodeName.toLowerCase() : null;
    r && nh.hasOwnProperty(r) && t ? (t.appendChild(e), e = t) : r == "li" ? t = e : r && (t = null);
  }
}
function qb(n, e) {
  return (n.matches || n.msMatchesSelector || n.webkitMatchesSelector || n.mozMatchesSelector).call(n, e);
}
function Ub(n) {
  let e = /\s*([\w-]+)\s*:\s*([^;]+)/g, t, r = [];
  for (; t = e.exec(n); )
    r.push(t[1], t[2].trim());
  return r;
}
function bu(n) {
  let e = {};
  for (let t in n)
    e[t] = n[t];
  return e;
}
function Kb(n, e) {
  let t = e.schema.nodes;
  for (let r in t) {
    let i = t[r];
    if (!i.allowsMarkType(n))
      continue;
    let s = [], o = (a) => {
      s.push(a);
      for (let l = 0; l < a.edgeCount; l++) {
        let { type: c, next: u } = a.edge(l);
        if (c == e || s.indexOf(u) < 0 && o(u))
          return !0;
      }
    };
    if (o(i.contentMatch))
      return !0;
  }
}
function Wb(n, e) {
  for (let t = 0; t < e.length; t++)
    if (n.eq(e[t]))
      return e[t];
}
class qt {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(e, t) {
    this.nodes = e, this.marks = t;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(e, t = {}, r) {
    r || (r = sa(t).createDocumentFragment());
    let i = r, s = [];
    return e.forEach((o) => {
      if (s.length || o.marks.length) {
        let a = 0, l = 0;
        for (; a < s.length && l < o.marks.length; ) {
          let c = o.marks[l];
          if (!this.marks[c.type.name]) {
            l++;
            continue;
          }
          if (!c.eq(s[a][0]) || c.type.spec.spanning === !1)
            break;
          a++, l++;
        }
        for (; a < s.length; )
          i = s.pop()[1];
        for (; l < o.marks.length; ) {
          let c = o.marks[l++], u = this.serializeMark(c, o.isInline, t);
          u && (s.push([c, i]), i.appendChild(u.dom), i = u.contentDOM || u.dom);
        }
      }
      i.appendChild(this.serializeNodeInner(o, t));
    }), r;
  }
  /**
  @internal
  */
  serializeNodeInner(e, t) {
    let { dom: r, contentDOM: i } = qt.renderSpec(sa(t), this.nodes[e.type.name](e));
    if (i) {
      if (e.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(e.content, t, i);
    }
    return r;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(e, t = {}) {
    let r = this.serializeNodeInner(e, t);
    for (let i = e.marks.length - 1; i >= 0; i--) {
      let s = this.serializeMark(e.marks[i], e.isInline, t);
      s && ((s.contentDOM || s.dom).appendChild(r), r = s.dom);
    }
    return r;
  }
  /**
  @internal
  */
  serializeMark(e, t, r = {}) {
    let i = this.marks[e.type.name];
    return i && qt.renderSpec(sa(r), i(e, t));
  }
  /**
  Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
  the spec has a hole (zero) in it, `contentDOM` will point at the
  node with the hole.
  */
  static renderSpec(e, t, r = null) {
    if (typeof t == "string")
      return { dom: e.createTextNode(t) };
    if (t.nodeType != null)
      return { dom: t };
    if (t.dom && t.dom.nodeType != null)
      return t;
    let i = t[0], s = i.indexOf(" ");
    s > 0 && (r = i.slice(0, s), i = i.slice(s + 1));
    let o, a = r ? e.createElementNS(r, i) : e.createElement(i), l = t[1], c = 1;
    if (l && typeof l == "object" && l.nodeType == null && !Array.isArray(l)) {
      c = 2;
      for (let u in l)
        if (l[u] != null) {
          let d = u.indexOf(" ");
          d > 0 ? a.setAttributeNS(u.slice(0, d), u.slice(d + 1), l[u]) : a.setAttribute(u, l[u]);
        }
    }
    for (let u = c; u < t.length; u++) {
      let d = t[u];
      if (d === 0) {
        if (u < t.length - 1 || u > c)
          throw new RangeError("Content hole must be the only child of its parent node");
        return { dom: a, contentDOM: a };
      } else {
        let { dom: f, contentDOM: p } = qt.renderSpec(e, d, r);
        if (a.appendChild(f), p) {
          if (o)
            throw new RangeError("Multiple content holes");
          o = p;
        }
      }
    }
    return { dom: a, contentDOM: o };
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(e) {
    return e.cached.domSerializer || (e.cached.domSerializer = new qt(this.nodesFromSchema(e), this.marksFromSchema(e)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(e) {
    let t = yu(e.nodes);
    return t.text || (t.text = (r) => r.text), t;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(e) {
    return yu(e.marks);
  }
}
function yu(n) {
  let e = {};
  for (let t in n) {
    let r = n[t].spec.toDOM;
    r && (e[t] = r);
  }
  return e;
}
function sa(n) {
  return n.document || window.document;
}
const rh = 65535, ih = Math.pow(2, 16);
function Gb(n, e) {
  return n + e * ih;
}
function vu(n) {
  return n & rh;
}
function Zb(n) {
  return (n - (n & rh)) / ih;
}
const sh = 1, oh = 2, _s = 4, ah = 8;
class cl {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.pos = e, this.delInfo = t, this.recover = r;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & ah) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (sh | _s)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (oh | _s)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & _s) > 0;
  }
}
class gt {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(e, t = !1) {
    if (this.ranges = e, this.inverted = t, !e.length && gt.empty)
      return gt.empty;
  }
  /**
  @internal
  */
  recover(e) {
    let t = 0, r = vu(e);
    if (!this.inverted)
      for (let i = 0; i < r; i++)
        t += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
    return this.ranges[r * 3] + t + Zb(e);
  }
  mapResult(e, t = 1) {
    return this._map(e, t, !1);
  }
  map(e, t = 1) {
    return this._map(e, t, !0);
  }
  /**
  @internal
  */
  _map(e, t, r) {
    let i = 0, s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? i : 0);
      if (l > e)
        break;
      let c = this.ranges[a + s], u = this.ranges[a + o], d = l + c;
      if (e <= d) {
        let f = c ? e == l ? -1 : e == d ? 1 : t : t, p = l + i + (f < 0 ? 0 : u);
        if (r)
          return p;
        let h = e == (t < 0 ? l : d) ? null : Gb(a / 3, e - l), g = e == l ? oh : e == d ? sh : _s;
        return (t < 0 ? e != l : e != d) && (g |= ah), new cl(p, g, h);
      }
      i += u - c;
    }
    return r ? e + i : new cl(e + i, 0, null);
  }
  /**
  @internal
  */
  touches(e, t) {
    let r = 0, i = vu(t), s = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? r : 0);
      if (l > e)
        break;
      let c = this.ranges[a + s], u = l + c;
      if (e <= u && a == i * 3)
        return !0;
      r += this.ranges[a + o] - c;
    }
    return !1;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(e) {
    let t = this.inverted ? 2 : 1, r = this.inverted ? 1 : 2;
    for (let i = 0, s = 0; i < this.ranges.length; i += 3) {
      let o = this.ranges[i], a = o - (this.inverted ? s : 0), l = o + (this.inverted ? 0 : s), c = this.ranges[i + t], u = this.ranges[i + r];
      e(a, a + c, l, l + u), s += u - c;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new gt(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(e) {
    return e == 0 ? gt.empty : new gt(e < 0 ? [0, -e, 0] : [0, 0, e]);
  }
}
gt.empty = new gt([]);
class Dr {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(e = [], t, r = 0, i = e.length) {
    this.maps = e, this.mirror = t, this.from = r, this.to = i;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(e = 0, t = this.maps.length) {
    return new Dr(this.maps, this.mirror, e, t);
  }
  /**
  @internal
  */
  copy() {
    return new Dr(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(e, t) {
    this.to = this.maps.push(e), t != null && this.setMirror(this.maps.length - 1, t);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(e) {
    for (let t = 0, r = this.maps.length; t < e.maps.length; t++) {
      let i = e.getMirror(t);
      this.appendMap(e.maps[t], i != null && i < t ? r + i : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(e) {
    if (this.mirror) {
      for (let t = 0; t < this.mirror.length; t++)
        if (this.mirror[t] == e)
          return this.mirror[t + (t % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(e, t) {
    this.mirror || (this.mirror = []), this.mirror.push(e, t);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(e) {
    for (let t = e.maps.length - 1, r = this.maps.length + e.maps.length; t >= 0; t--) {
      let i = e.getMirror(t);
      this.appendMap(e.maps[t].invert(), i != null && i > t ? r - i - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let e = new Dr();
    return e.appendMappingInverted(this), e;
  }
  /**
  Map a position through this mapping.
  */
  map(e, t = 1) {
    if (this.mirror)
      return this._map(e, t, !0);
    for (let r = this.from; r < this.to; r++)
      e = this.maps[r].map(e, t);
    return e;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(e, t = 1) {
    return this._map(e, t, !1);
  }
  /**
  @internal
  */
  _map(e, t, r) {
    let i = 0;
    for (let s = this.from; s < this.to; s++) {
      let o = this.maps[s], a = o.mapResult(e, t);
      if (a.recover != null) {
        let l = this.getMirror(s);
        if (l != null && l > s && l < this.to) {
          s = l, e = this.maps[l].recover(a.recover);
          continue;
        }
      }
      i |= a.delInfo, e = a.pos;
    }
    return r ? e : new cl(e, i, null);
  }
}
const oa = /* @__PURE__ */ Object.create(null);
class Xe {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return gt.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(e) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(e, t) {
    if (!t || !t.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let r = oa[t.stepType];
    if (!r)
      throw new RangeError(`No step type ${t.stepType} defined`);
    return r.fromJSON(e, t);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(e, t) {
    if (e in oa)
      throw new RangeError("Duplicate use of step JSON ID " + e);
    return oa[e] = t, t.prototype.jsonID = e, t;
  }
}
class Ie {
  /**
  @internal
  */
  constructor(e, t) {
    this.doc = e, this.failed = t;
  }
  /**
  Create a successful step result.
  */
  static ok(e) {
    return new Ie(e, null);
  }
  /**
  Create a failed step result.
  */
  static fail(e) {
    return new Ie(null, e);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(e, t, r, i) {
    try {
      return Ie.ok(e.replace(t, r, i));
    } catch (s) {
      if (s instanceof Is)
        return Ie.fail(s.message);
      throw s;
    }
  }
}
function Zl(n, e, t) {
  let r = [];
  for (let i = 0; i < n.childCount; i++) {
    let s = n.child(i);
    s.content.size && (s = s.copy(Zl(s.content, e, s))), s.isInline && (s = e(s, t, i)), r.push(s);
  }
  return R.fromArray(r);
}
class wn extends Xe {
  /**
  Create a mark step.
  */
  constructor(e, t, r) {
    super(), this.from = e, this.to = t, this.mark = r;
  }
  apply(e) {
    let t = e.slice(this.from, this.to), r = e.resolve(this.from), i = r.node(r.sharedDepth(this.to)), s = new F(Zl(t.content, (o, a) => !o.isAtom || !a.type.allowsMarkType(this.mark.type) ? o : o.mark(this.mark.addToSet(o.marks)), i), t.openStart, t.openEnd);
    return Ie.fromReplace(e, this.from, this.to, s);
  }
  invert() {
    return new Ut(this.from, this.to, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return t.deleted && r.deleted || t.pos >= r.pos ? null : new wn(t.pos, r.pos, this.mark);
  }
  merge(e) {
    return e instanceof wn && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new wn(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new wn(t.from, t.to, e.markFromJSON(t.mark));
  }
}
Xe.jsonID("addMark", wn);
class Ut extends Xe {
  /**
  Create a mark-removing step.
  */
  constructor(e, t, r) {
    super(), this.from = e, this.to = t, this.mark = r;
  }
  apply(e) {
    let t = e.slice(this.from, this.to), r = new F(Zl(t.content, (i) => i.mark(this.mark.removeFromSet(i.marks)), e), t.openStart, t.openEnd);
    return Ie.fromReplace(e, this.from, this.to, r);
  }
  invert() {
    return new wn(this.from, this.to, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return t.deleted && r.deleted || t.pos >= r.pos ? null : new Ut(t.pos, r.pos, this.mark);
  }
  merge(e) {
    return e instanceof Ut && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new Ut(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new Ut(t.from, t.to, e.markFromJSON(t.mark));
  }
}
Xe.jsonID("removeMark", Ut);
class kn extends Xe {
  /**
  Create a node mark step.
  */
  constructor(e, t) {
    super(), this.pos = e, this.mark = t;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return Ie.fail("No node at mark step's position");
    let r = t.type.create(t.attrs, null, this.mark.addToSet(t.marks));
    return Ie.fromReplace(e, this.pos, this.pos + 1, new F(R.from(r), 0, t.isLeaf ? 0 : 1));
  }
  invert(e) {
    let t = e.nodeAt(this.pos);
    if (t) {
      let r = this.mark.addToSet(t.marks);
      if (r.length == t.marks.length) {
        for (let i = 0; i < t.marks.length; i++)
          if (!t.marks[i].isInSet(r))
            return new kn(this.pos, t.marks[i]);
        return new kn(this.pos, this.mark);
      }
    }
    return new $r(this.pos, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new kn(t.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new kn(t.pos, e.markFromJSON(t.mark));
  }
}
Xe.jsonID("addNodeMark", kn);
class $r extends Xe {
  /**
  Create a mark-removing step.
  */
  constructor(e, t) {
    super(), this.pos = e, this.mark = t;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return Ie.fail("No node at mark step's position");
    let r = t.type.create(t.attrs, null, this.mark.removeFromSet(t.marks));
    return Ie.fromReplace(e, this.pos, this.pos + 1, new F(R.from(r), 0, t.isLeaf ? 0 : 1));
  }
  invert(e) {
    let t = e.nodeAt(this.pos);
    return !t || !this.mark.isInSet(t.marks) ? this : new kn(this.pos, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new $r(t.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new $r(t.pos, e.markFromJSON(t.mark));
  }
}
Xe.jsonID("removeNodeMark", $r);
class Ue extends Xe {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(e, t, r, i = !1) {
    super(), this.from = e, this.to = t, this.slice = r, this.structure = i;
  }
  apply(e) {
    return this.structure && ul(e, this.from, this.to) ? Ie.fail("Structure replace would overwrite content") : Ie.fromReplace(e, this.from, this.to, this.slice);
  }
  getMap() {
    return new gt([this.from, this.to - this.from, this.slice.size]);
  }
  invert(e) {
    return new Ue(this.from, this.from + this.slice.size, e.slice(this.from, this.to));
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return t.deletedAcross && r.deletedAcross ? null : new Ue(t.pos, Math.max(t.pos, r.pos), this.slice);
  }
  merge(e) {
    if (!(e instanceof Ue) || e.structure || this.structure)
      return null;
    if (this.from + this.slice.size == e.from && !this.slice.openEnd && !e.slice.openStart) {
      let t = this.slice.size + e.slice.size == 0 ? F.empty : new F(this.slice.content.append(e.slice.content), this.slice.openStart, e.slice.openEnd);
      return new Ue(this.from, this.to + (e.to - e.from), t, this.structure);
    } else if (e.to == this.from && !this.slice.openStart && !e.slice.openEnd) {
      let t = this.slice.size + e.slice.size == 0 ? F.empty : new F(e.slice.content.append(this.slice.content), e.slice.openStart, this.slice.openEnd);
      return new Ue(e.from, this.to, t, this.structure);
    } else
      return null;
  }
  toJSON() {
    let e = { stepType: "replace", from: this.from, to: this.to };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new Ue(t.from, t.to, F.fromJSON(e, t.slice), !!t.structure);
  }
}
Xe.jsonID("replace", Ue);
class Pe extends Xe {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(e, t, r, i, s, o, a = !1) {
    super(), this.from = e, this.to = t, this.gapFrom = r, this.gapTo = i, this.slice = s, this.insert = o, this.structure = a;
  }
  apply(e) {
    if (this.structure && (ul(e, this.from, this.gapFrom) || ul(e, this.gapTo, this.to)))
      return Ie.fail("Structure gap-replace would overwrite content");
    let t = e.slice(this.gapFrom, this.gapTo);
    if (t.openStart || t.openEnd)
      return Ie.fail("Gap is not a flat range");
    let r = this.slice.insertAt(this.insert, t.content);
    return r ? Ie.fromReplace(e, this.from, this.to, r) : Ie.fail("Content does not fit in gap");
  }
  getMap() {
    return new gt([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(e) {
    let t = this.gapTo - this.gapFrom;
    return new Pe(this.from, this.from + this.slice.size + t, this.from + this.insert, this.from + this.insert + t, e.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1), i = e.map(this.gapFrom, -1), s = e.map(this.gapTo, 1);
    return t.deletedAcross && r.deletedAcross || i < t.pos || s > r.pos ? null : new Pe(t.pos, r.pos, i, s, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let e = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number" || typeof t.gapFrom != "number" || typeof t.gapTo != "number" || typeof t.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new Pe(t.from, t.to, t.gapFrom, t.gapTo, F.fromJSON(e, t.slice), t.insert, !!t.structure);
  }
}
Xe.jsonID("replaceAround", Pe);
function ul(n, e, t) {
  let r = n.resolve(e), i = t - e, s = r.depth;
  for (; i > 0 && s > 0 && r.indexAfter(s) == r.node(s).childCount; )
    s--, i--;
  if (i > 0) {
    let o = r.node(s).maybeChild(r.indexAfter(s));
    for (; i > 0; ) {
      if (!o || o.isLeaf)
        return !0;
      o = o.firstChild, i--;
    }
  }
  return !1;
}
function jb(n, e, t, r) {
  let i = [], s = [], o, a;
  n.doc.nodesBetween(e, t, (l, c, u) => {
    if (!l.isInline)
      return;
    let d = l.marks;
    if (!r.isInSet(d) && u.type.allowsMarkType(r.type)) {
      let f = Math.max(c, e), p = Math.min(c + l.nodeSize, t), h = r.addToSet(d);
      for (let g = 0; g < d.length; g++)
        d[g].isInSet(h) || (o && o.to == f && o.mark.eq(d[g]) ? o.to = p : i.push(o = new Ut(f, p, d[g])));
      a && a.to == f ? a.to = p : s.push(a = new wn(f, p, r));
    }
  }), i.forEach((l) => n.step(l)), s.forEach((l) => n.step(l));
}
function Jb(n, e, t, r) {
  let i = [], s = 0;
  n.doc.nodesBetween(e, t, (o, a) => {
    if (!o.isInline)
      return;
    s++;
    let l = null;
    if (r instanceof Co) {
      let c = o.marks, u;
      for (; u = r.isInSet(c); )
        (l || (l = [])).push(u), c = u.removeFromSet(c);
    } else
      r ? r.isInSet(o.marks) && (l = [r]) : l = o.marks;
    if (l && l.length) {
      let c = Math.min(a + o.nodeSize, t);
      for (let u = 0; u < l.length; u++) {
        let d = l[u], f;
        for (let p = 0; p < i.length; p++) {
          let h = i[p];
          h.step == s - 1 && d.eq(i[p].style) && (f = h);
        }
        f ? (f.to = c, f.step = s) : i.push({ style: d, from: Math.max(a, e), to: c, step: s });
      }
    }
  }), i.forEach((o) => n.step(new Ut(o.from, o.to, o.style)));
}
function Yb(n, e, t, r = t.contentMatch) {
  let i = n.doc.nodeAt(e), s = [], o = e + 1;
  for (let a = 0; a < i.childCount; a++) {
    let l = i.child(a), c = o + l.nodeSize, u = r.matchType(l.type);
    if (!u)
      s.push(new Ue(o, c, F.empty));
    else {
      r = u;
      for (let d = 0; d < l.marks.length; d++)
        t.allowsMarkType(l.marks[d].type) || n.step(new Ut(o, c, l.marks[d]));
      if (l.isText && !t.spec.code) {
        let d, f = /\r?\n|\r/g, p;
        for (; d = f.exec(l.text); )
          p || (p = new F(R.from(t.schema.text(" ", t.allowedMarks(l.marks))), 0, 0)), s.push(new Ue(o + d.index, o + d.index + d[0].length, p));
      }
    }
    o = c;
  }
  if (!r.validEnd) {
    let a = r.fillBefore(R.empty, !0);
    n.replace(o, o, new F(a, 0, 0));
  }
  for (let a = s.length - 1; a >= 0; a--)
    n.step(s[a]);
}
function Xb(n, e, t) {
  return (e == 0 || n.canReplace(e, n.childCount)) && (t == n.childCount || n.canReplace(0, t));
}
function Jr(n) {
  let t = n.parent.content.cutByIndex(n.startIndex, n.endIndex);
  for (let r = n.depth; ; --r) {
    let i = n.$from.node(r), s = n.$from.index(r), o = n.$to.indexAfter(r);
    if (r < n.depth && i.canReplace(s, o, t))
      return r;
    if (r == 0 || i.type.spec.isolating || !Xb(i, s, o))
      break;
  }
  return null;
}
function Qb(n, e, t) {
  let { $from: r, $to: i, depth: s } = e, o = r.before(s + 1), a = i.after(s + 1), l = o, c = a, u = R.empty, d = 0;
  for (let h = s, g = !1; h > t; h--)
    g || r.index(h) > 0 ? (g = !0, u = R.from(r.node(h).copy(u)), d++) : l--;
  let f = R.empty, p = 0;
  for (let h = s, g = !1; h > t; h--)
    g || i.after(h + 1) < i.end(h) ? (g = !0, f = R.from(i.node(h).copy(f)), p++) : c++;
  n.step(new Pe(l, c, o, a, new F(u.append(f), d, p), u.size - d, !0));
}
function jl(n, e, t = null, r = n) {
  let i = e0(n, e), s = i && t0(r, e);
  return s ? i.map(wu).concat({ type: e, attrs: t }).concat(s.map(wu)) : null;
}
function wu(n) {
  return { type: n, attrs: null };
}
function e0(n, e) {
  let { parent: t, startIndex: r, endIndex: i } = n, s = t.contentMatchAt(r).findWrapping(e);
  if (!s)
    return null;
  let o = s.length ? s[0] : e;
  return t.canReplaceWith(r, i, o) ? s : null;
}
function t0(n, e) {
  let { parent: t, startIndex: r, endIndex: i } = n, s = t.child(r), o = e.contentMatch.findWrapping(s.type);
  if (!o)
    return null;
  let l = (o.length ? o[o.length - 1] : e).contentMatch;
  for (let c = r; l && c < i; c++)
    l = l.matchType(t.child(c).type);
  return !l || !l.validEnd ? null : o;
}
function n0(n, e, t) {
  let r = R.empty;
  for (let o = t.length - 1; o >= 0; o--) {
    if (r.size) {
      let a = t[o].type.contentMatch.matchFragment(r);
      if (!a || !a.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    r = R.from(t[o].type.create(t[o].attrs, r));
  }
  let i = e.start, s = e.end;
  n.step(new Pe(i, s, i, s, new F(r, 0, 0), t.length, !0));
}
function r0(n, e, t, r, i) {
  if (!r.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let s = n.steps.length;
  n.doc.nodesBetween(e, t, (o, a) => {
    if (o.isTextblock && !o.hasMarkup(r, i) && i0(n.doc, n.mapping.slice(s).map(a), r)) {
      n.clearIncompatible(n.mapping.slice(s).map(a, 1), r);
      let l = n.mapping.slice(s), c = l.map(a, 1), u = l.map(a + o.nodeSize, 1);
      return n.step(new Pe(c, u, c + 1, u - 1, new F(R.from(r.create(i, null, o.marks)), 0, 0), 1, !0)), !1;
    }
  });
}
function i0(n, e, t) {
  let r = n.resolve(e), i = r.index();
  return r.parent.canReplaceWith(i, i + 1, t);
}
function s0(n, e, t, r, i) {
  let s = n.doc.nodeAt(e);
  if (!s)
    throw new RangeError("No node at given position");
  t || (t = s.type);
  let o = t.create(r, null, i || s.marks);
  if (s.isLeaf)
    return n.replaceWith(e, e + s.nodeSize, o);
  if (!t.validContent(s.content))
    throw new RangeError("Invalid content for node type " + t.name);
  n.step(new Pe(e, e + s.nodeSize, e + 1, e + s.nodeSize - 1, new F(R.from(o), 0, 0), 1, !0));
}
function Ir(n, e, t = 1, r) {
  let i = n.resolve(e), s = i.depth - t, o = r && r[r.length - 1] || i.parent;
  if (s < 0 || i.parent.type.spec.isolating || !i.parent.canReplace(i.index(), i.parent.childCount) || !o.type.validContent(i.parent.content.cutByIndex(i.index(), i.parent.childCount)))
    return !1;
  for (let c = i.depth - 1, u = t - 2; c > s; c--, u--) {
    let d = i.node(c), f = i.index(c);
    if (d.type.spec.isolating)
      return !1;
    let p = d.content.cutByIndex(f, d.childCount), h = r && r[u + 1];
    h && (p = p.replaceChild(0, h.type.create(h.attrs)));
    let g = r && r[u] || d;
    if (!d.canReplace(f + 1, d.childCount) || !g.type.validContent(p))
      return !1;
  }
  let a = i.indexAfter(s), l = r && r[0];
  return i.node(s).canReplaceWith(a, a, l ? l.type : i.node(s + 1).type);
}
function o0(n, e, t = 1, r) {
  let i = n.doc.resolve(e), s = R.empty, o = R.empty;
  for (let a = i.depth, l = i.depth - t, c = t - 1; a > l; a--, c--) {
    s = R.from(i.node(a).copy(s));
    let u = r && r[c];
    o = R.from(u ? u.type.create(u.attrs, o) : i.node(a).copy(o));
  }
  n.step(new Ue(e, e, new F(s.append(o), t, t), !0));
}
function Rn(n, e) {
  let t = n.resolve(e), r = t.index();
  return lh(t.nodeBefore, t.nodeAfter) && t.parent.canReplace(r, r + 1);
}
function lh(n, e) {
  return !!(n && e && !n.isLeaf && n.canAppend(e));
}
function So(n, e, t = -1) {
  let r = n.resolve(e);
  for (let i = r.depth; ; i--) {
    let s, o, a = r.index(i);
    if (i == r.depth ? (s = r.nodeBefore, o = r.nodeAfter) : t > 0 ? (s = r.node(i + 1), a++, o = r.node(i).maybeChild(a)) : (s = r.node(i).maybeChild(a - 1), o = r.node(i + 1)), s && !s.isTextblock && lh(s, o) && r.node(i).canReplace(a, a + 1))
      return e;
    if (i == 0)
      break;
    e = t < 0 ? r.before(i) : r.after(i);
  }
}
function a0(n, e, t) {
  let r = new Ue(e - t, e + t, F.empty, !0);
  n.step(r);
}
function l0(n, e, t) {
  let r = n.resolve(e);
  if (r.parent.canReplaceWith(r.index(), r.index(), t))
    return e;
  if (r.parentOffset == 0)
    for (let i = r.depth - 1; i >= 0; i--) {
      let s = r.index(i);
      if (r.node(i).canReplaceWith(s, s, t))
        return r.before(i + 1);
      if (s > 0)
        return null;
    }
  if (r.parentOffset == r.parent.content.size)
    for (let i = r.depth - 1; i >= 0; i--) {
      let s = r.indexAfter(i);
      if (r.node(i).canReplaceWith(s, s, t))
        return r.after(i + 1);
      if (s < r.node(i).childCount)
        return null;
    }
  return null;
}
function ch(n, e, t) {
  let r = n.resolve(e);
  if (!t.content.size)
    return e;
  let i = t.content;
  for (let s = 0; s < t.openStart; s++)
    i = i.firstChild.content;
  for (let s = 1; s <= (t.openStart == 0 && t.size ? 2 : 1); s++)
    for (let o = r.depth; o >= 0; o--) {
      let a = o == r.depth ? 0 : r.pos <= (r.start(o + 1) + r.end(o + 1)) / 2 ? -1 : 1, l = r.index(o) + (a > 0 ? 1 : 0), c = r.node(o), u = !1;
      if (s == 1)
        u = c.canReplace(l, l, i);
      else {
        let d = c.contentMatchAt(l).findWrapping(i.firstChild.type);
        u = d && c.canReplaceWith(l, l, d[0]);
      }
      if (u)
        return a == 0 ? r.pos : a < 0 ? r.before(o + 1) : r.after(o + 1);
    }
  return null;
}
function Jl(n, e, t = e, r = F.empty) {
  if (e == t && !r.size)
    return null;
  let i = n.resolve(e), s = n.resolve(t);
  return uh(i, s, r) ? new Ue(e, t, r) : new c0(i, s, r).fit();
}
function uh(n, e, t) {
  return !t.openStart && !t.openEnd && n.start() == e.start() && n.parent.canReplace(n.index(), e.index(), t.content);
}
class c0 {
  constructor(e, t, r) {
    this.$from = e, this.$to = t, this.unplaced = r, this.frontier = [], this.placed = R.empty;
    for (let i = 0; i <= e.depth; i++) {
      let s = e.node(i);
      this.frontier.push({
        type: s.type,
        match: s.contentMatchAt(e.indexAfter(i))
      });
    }
    for (let i = e.depth; i > 0; i--)
      this.placed = R.from(e.node(i).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    for (; this.unplaced.size; ) {
      let c = this.findFittable();
      c ? this.placeNodes(c) : this.openMore() || this.dropNode();
    }
    let e = this.mustMoveInline(), t = this.placed.size - this.depth - this.$from.depth, r = this.$from, i = this.close(e < 0 ? this.$to : r.doc.resolve(e));
    if (!i)
      return null;
    let s = this.placed, o = r.depth, a = i.depth;
    for (; o && a && s.childCount == 1; )
      s = s.firstChild.content, o--, a--;
    let l = new F(s, o, a);
    return e > -1 ? new Pe(r.pos, e, this.$to.pos, this.$to.end(), l, t) : l.size || r.pos != this.$to.pos ? new Ue(r.pos, i.pos, l) : null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let e = this.unplaced.openStart;
    for (let t = this.unplaced.content, r = 0, i = this.unplaced.openEnd; r < e; r++) {
      let s = t.firstChild;
      if (t.childCount > 1 && (i = 0), s.type.spec.isolating && i <= r) {
        e = r;
        break;
      }
      t = s.content;
    }
    for (let t = 1; t <= 2; t++)
      for (let r = t == 1 ? e : this.unplaced.openStart; r >= 0; r--) {
        let i, s = null;
        r ? (s = aa(this.unplaced.content, r - 1).firstChild, i = s.content) : i = this.unplaced.content;
        let o = i.firstChild;
        for (let a = this.depth; a >= 0; a--) {
          let { type: l, match: c } = this.frontier[a], u, d = null;
          if (t == 1 && (o ? c.matchType(o.type) || (d = c.fillBefore(R.from(o), !1)) : s && l.compatibleContent(s.type)))
            return { sliceDepth: r, frontierDepth: a, parent: s, inject: d };
          if (t == 2 && o && (u = c.findWrapping(o.type)))
            return { sliceDepth: r, frontierDepth: a, parent: s, wrap: u };
          if (s && c.matchType(s.type))
            break;
        }
      }
  }
  openMore() {
    let { content: e, openStart: t, openEnd: r } = this.unplaced, i = aa(e, t);
    return !i.childCount || i.firstChild.isLeaf ? !1 : (this.unplaced = new F(e, t + 1, Math.max(r, i.size + t >= e.size - r ? t + 1 : 0)), !0);
  }
  dropNode() {
    let { content: e, openStart: t, openEnd: r } = this.unplaced, i = aa(e, t);
    if (i.childCount <= 1 && t > 0) {
      let s = e.size - t <= t + i.size;
      this.unplaced = new F(ui(e, t - 1, 1), t - 1, s ? t - 1 : r);
    } else
      this.unplaced = new F(ui(e, t, 1), t, r);
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth: e, frontierDepth: t, parent: r, inject: i, wrap: s }) {
    for (; this.depth > t; )
      this.closeFrontierNode();
    if (s)
      for (let g = 0; g < s.length; g++)
        this.openFrontierNode(s[g]);
    let o = this.unplaced, a = r ? r.content : o.content, l = o.openStart - e, c = 0, u = [], { match: d, type: f } = this.frontier[t];
    if (i) {
      for (let g = 0; g < i.childCount; g++)
        u.push(i.child(g));
      d = d.matchFragment(i);
    }
    let p = a.size + e - (o.content.size - o.openEnd);
    for (; c < a.childCount; ) {
      let g = a.child(c), m = d.matchType(g.type);
      if (!m)
        break;
      c++, (c > 1 || l == 0 || g.content.size) && (d = m, u.push(dh(g.mark(f.allowedMarks(g.marks)), c == 1 ? l : 0, c == a.childCount ? p : -1)));
    }
    let h = c == a.childCount;
    h || (p = -1), this.placed = di(this.placed, t, R.from(u)), this.frontier[t].match = d, h && p < 0 && r && r.type == this.frontier[this.depth].type && this.frontier.length > 1 && this.closeFrontierNode();
    for (let g = 0, m = a; g < p; g++) {
      let v = m.lastChild;
      this.frontier.push({ type: v.type, match: v.contentMatchAt(v.childCount) }), m = v.content;
    }
    this.unplaced = h ? e == 0 ? F.empty : new F(ui(o.content, e - 1, 1), e - 1, p < 0 ? o.openEnd : e - 1) : new F(ui(o.content, e, c), o.openStart, o.openEnd);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let e = this.frontier[this.depth], t;
    if (!e.type.isTextblock || !la(this.$to, this.$to.depth, e.type, e.match, !1) || this.$to.depth == this.depth && (t = this.findCloseLevel(this.$to)) && t.depth == this.depth)
      return -1;
    let { depth: r } = this.$to, i = this.$to.after(r);
    for (; r > 1 && i == this.$to.end(--r); )
      ++i;
    return i;
  }
  findCloseLevel(e) {
    e:
      for (let t = Math.min(this.depth, e.depth); t >= 0; t--) {
        let { match: r, type: i } = this.frontier[t], s = t < e.depth && e.end(t + 1) == e.pos + (e.depth - (t + 1)), o = la(e, t, i, r, s);
        if (o) {
          for (let a = t - 1; a >= 0; a--) {
            let { match: l, type: c } = this.frontier[a], u = la(e, a, c, l, !0);
            if (!u || u.childCount)
              continue e;
          }
          return { depth: t, fit: o, move: s ? e.doc.resolve(e.after(t + 1)) : e };
        }
      }
  }
  close(e) {
    let t = this.findCloseLevel(e);
    if (!t)
      return null;
    for (; this.depth > t.depth; )
      this.closeFrontierNode();
    t.fit.childCount && (this.placed = di(this.placed, t.depth, t.fit)), e = t.move;
    for (let r = t.depth + 1; r <= e.depth; r++) {
      let i = e.node(r), s = i.type.contentMatch.fillBefore(i.content, !0, e.index(r));
      this.openFrontierNode(i.type, i.attrs, s);
    }
    return e;
  }
  openFrontierNode(e, t = null, r) {
    let i = this.frontier[this.depth];
    i.match = i.match.matchType(e), this.placed = di(this.placed, this.depth, R.from(e.create(t, r))), this.frontier.push({ type: e, match: e.contentMatch });
  }
  closeFrontierNode() {
    let t = this.frontier.pop().match.fillBefore(R.empty, !0);
    t.childCount && (this.placed = di(this.placed, this.frontier.length, t));
  }
}
function ui(n, e, t) {
  return e == 0 ? n.cutByIndex(t, n.childCount) : n.replaceChild(0, n.firstChild.copy(ui(n.firstChild.content, e - 1, t)));
}
function di(n, e, t) {
  return e == 0 ? n.append(t) : n.replaceChild(n.childCount - 1, n.lastChild.copy(di(n.lastChild.content, e - 1, t)));
}
function aa(n, e) {
  for (let t = 0; t < e; t++)
    n = n.firstChild.content;
  return n;
}
function dh(n, e, t) {
  if (e <= 0)
    return n;
  let r = n.content;
  return e > 1 && (r = r.replaceChild(0, dh(r.firstChild, e - 1, r.childCount == 1 ? t - 1 : 0))), e > 0 && (r = n.type.contentMatch.fillBefore(r).append(r), t <= 0 && (r = r.append(n.type.contentMatch.matchFragment(r).fillBefore(R.empty, !0)))), n.copy(r);
}
function la(n, e, t, r, i) {
  let s = n.node(e), o = i ? n.indexAfter(e) : n.index(e);
  if (o == s.childCount && !t.compatibleContent(s.type))
    return null;
  let a = r.fillBefore(s.content, !0, o);
  return a && !u0(t, s.content, o) ? a : null;
}
function u0(n, e, t) {
  for (let r = t; r < e.childCount; r++)
    if (!n.allowsMarks(e.child(r).marks))
      return !0;
  return !1;
}
function d0(n) {
  return n.spec.defining || n.spec.definingForContent;
}
function f0(n, e, t, r) {
  if (!r.size)
    return n.deleteRange(e, t);
  let i = n.doc.resolve(e), s = n.doc.resolve(t);
  if (uh(i, s, r))
    return n.step(new Ue(e, t, r));
  let o = ph(i, n.doc.resolve(t));
  o[o.length - 1] == 0 && o.pop();
  let a = -(i.depth + 1);
  o.unshift(a);
  for (let f = i.depth, p = i.pos - 1; f > 0; f--, p--) {
    let h = i.node(f).type.spec;
    if (h.defining || h.definingAsContext || h.isolating)
      break;
    o.indexOf(f) > -1 ? a = f : i.before(f) == p && o.splice(1, 0, -f);
  }
  let l = o.indexOf(a), c = [], u = r.openStart;
  for (let f = r.content, p = 0; ; p++) {
    let h = f.firstChild;
    if (c.push(h), p == r.openStart)
      break;
    f = h.content;
  }
  for (let f = u - 1; f >= 0; f--) {
    let p = c[f], h = d0(p.type);
    if (h && !p.sameMarkup(i.node(Math.abs(a) - 1)))
      u = f;
    else if (h || !p.type.isTextblock)
      break;
  }
  for (let f = r.openStart; f >= 0; f--) {
    let p = (f + u + 1) % (r.openStart + 1), h = c[p];
    if (h)
      for (let g = 0; g < o.length; g++) {
        let m = o[(g + l) % o.length], v = !0;
        m < 0 && (v = !1, m = -m);
        let y = i.node(m - 1), k = i.index(m - 1);
        if (y.canReplaceWith(k, k, h.type, h.marks))
          return n.replace(i.before(m), v ? s.after(m) : t, new F(fh(r.content, 0, r.openStart, p), p, r.openEnd));
      }
  }
  let d = n.steps.length;
  for (let f = o.length - 1; f >= 0 && (n.replace(e, t, r), !(n.steps.length > d)); f--) {
    let p = o[f];
    p < 0 || (e = i.before(p), t = s.after(p));
  }
}
function fh(n, e, t, r, i) {
  if (e < t) {
    let s = n.firstChild;
    n = n.replaceChild(0, s.copy(fh(s.content, e + 1, t, r, s)));
  }
  if (e > r) {
    let s = i.contentMatchAt(0), o = s.fillBefore(n).append(n);
    n = o.append(s.matchFragment(o).fillBefore(R.empty, !0));
  }
  return n;
}
function p0(n, e, t, r) {
  if (!r.isInline && e == t && n.doc.resolve(e).parent.content.size) {
    let i = l0(n.doc, e, r.type);
    i != null && (e = t = i);
  }
  n.replaceRange(e, t, new F(R.from(r), 0, 0));
}
function h0(n, e, t) {
  let r = n.doc.resolve(e), i = n.doc.resolve(t), s = ph(r, i);
  for (let o = 0; o < s.length; o++) {
    let a = s[o], l = o == s.length - 1;
    if (l && a == 0 || r.node(a).type.contentMatch.validEnd)
      return n.delete(r.start(a), i.end(a));
    if (a > 0 && (l || r.node(a - 1).canReplace(r.index(a - 1), i.indexAfter(a - 1))))
      return n.delete(r.before(a), i.after(a));
  }
  for (let o = 1; o <= r.depth && o <= i.depth; o++)
    if (e - r.start(o) == r.depth - o && t > r.end(o) && i.end(o) - t != i.depth - o)
      return n.delete(r.before(o), t);
  n.delete(e, t);
}
function ph(n, e) {
  let t = [], r = Math.min(n.depth, e.depth);
  for (let i = r; i >= 0; i--) {
    let s = n.start(i);
    if (s < n.pos - (n.depth - i) || e.end(i) > e.pos + (e.depth - i) || n.node(i).type.spec.isolating || e.node(i).type.spec.isolating)
      break;
    (s == e.start(i) || i == n.depth && i == e.depth && n.parent.inlineContent && e.parent.inlineContent && i && e.start(i - 1) == s - 1) && t.push(i);
  }
  return t;
}
class Br extends Xe {
  /**
  Construct an attribute step.
  */
  constructor(e, t, r) {
    super(), this.pos = e, this.attr = t, this.value = r;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return Ie.fail("No node at attribute step's position");
    let r = /* @__PURE__ */ Object.create(null);
    for (let s in t.attrs)
      r[s] = t.attrs[s];
    r[this.attr] = this.value;
    let i = t.type.create(r, null, t.marks);
    return Ie.fromReplace(e, this.pos, this.pos + 1, new F(R.from(i), 0, t.isLeaf ? 0 : 1));
  }
  getMap() {
    return gt.empty;
  }
  invert(e) {
    return new Br(this.pos, this.attr, e.nodeAt(this.pos).attrs[this.attr]);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new Br(t.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(e, t) {
    if (typeof t.pos != "number" || typeof t.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new Br(t.pos, t.attr, t.value);
  }
}
Xe.jsonID("attr", Br);
class _i extends Xe {
  /**
  Construct an attribute step.
  */
  constructor(e, t) {
    super(), this.attr = e, this.value = t;
  }
  apply(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let i in e.attrs)
      t[i] = e.attrs[i];
    t[this.attr] = this.value;
    let r = e.type.create(t, e.content, e.marks);
    return Ie.ok(r);
  }
  getMap() {
    return gt.empty;
  }
  invert(e) {
    return new _i(this.attr, e.attrs[this.attr]);
  }
  map(e) {
    return this;
  }
  toJSON() {
    return { stepType: "docAttr", attr: this.attr, value: this.value };
  }
  static fromJSON(e, t) {
    if (typeof t.attr != "string")
      throw new RangeError("Invalid input for DocAttrStep.fromJSON");
    return new _i(t.attr, t.value);
  }
}
Xe.jsonID("docAttr", _i);
let Fr = class extends Error {
};
Fr = function n(e) {
  let t = Error.call(this, e);
  return t.__proto__ = n.prototype, t;
};
Fr.prototype = Object.create(Error.prototype);
Fr.prototype.constructor = Fr;
Fr.prototype.name = "TransformError";
class Yl {
  /**
  Create a transform that starts with the given document.
  */
  constructor(e) {
    this.doc = e, this.steps = [], this.docs = [], this.mapping = new Dr();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(e) {
    let t = this.maybeStep(e);
    if (t.failed)
      throw new Fr(t.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(e) {
    let t = e.apply(this.doc);
    return t.failed || this.addStep(e, t.doc), t;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(e, t) {
    this.docs.push(this.doc), this.steps.push(e), this.mapping.appendMap(e.getMap()), this.doc = t;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(e, t = e, r = F.empty) {
    let i = Jl(this.doc, e, t, r);
    return i && this.step(i), this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(e, t, r) {
    return this.replace(e, t, new F(R.from(r), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(e, t) {
    return this.replace(e, t, F.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(e, t) {
    return this.replaceWith(e, e, t);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(e, t, r) {
    return f0(this, e, t, r), this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(e, t, r) {
    return p0(this, e, t, r), this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(e, t) {
    return h0(this, e, t), this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(e, t) {
    return Qb(this, e, t), this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(e, t = 1) {
    return a0(this, e, t), this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(e, t) {
    return n0(this, e, t), this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(e, t = e, r, i = null) {
    return r0(this, e, t, r, i), this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(e, t, r = null, i) {
    return s0(this, e, t, r, i), this;
  }
  /**
  Set a single attribute on a given node to a new value.
  The `pos` addresses the document content. Use `setDocAttribute`
  to set attributes on the document itself.
  */
  setNodeAttribute(e, t, r) {
    return this.step(new Br(e, t, r)), this;
  }
  /**
  Set a single attribute on the document to a new value.
  */
  setDocAttribute(e, t) {
    return this.step(new _i(e, t)), this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(e, t) {
    return this.step(new kn(e, t)), this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(e, t) {
    if (!(t instanceof ye)) {
      let r = this.doc.nodeAt(e);
      if (!r)
        throw new RangeError("No node at position " + e);
      if (t = t.isInSet(r.marks), !t)
        return this;
    }
    return this.step(new $r(e, t)), this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(e, t = 1, r) {
    return o0(this, e, t, r), this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(e, t, r) {
    return jb(this, e, t, r), this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(e, t, r) {
    return Jb(this, e, t, r), this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(e, t, r) {
    return Yb(this, e, t, r), this;
  }
}
const ca = /* @__PURE__ */ Object.create(null);
class ne {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor(e, t, r) {
    this.$anchor = e, this.$head = t, this.ranges = r || [new hh(e.min(t), e.max(t))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let e = this.ranges;
    for (let t = 0; t < e.length; t++)
      if (e[t].$from.pos != e[t].$to.pos)
        return !1;
    return !0;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, !0);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(e, t = F.empty) {
    let r = t.content.lastChild, i = null;
    for (let a = 0; a < t.openEnd; a++)
      i = r, r = r.lastChild;
    let s = e.steps.length, o = this.ranges;
    for (let a = 0; a < o.length; a++) {
      let { $from: l, $to: c } = o[a], u = e.mapping.slice(s);
      e.replaceRange(u.map(l.pos), u.map(c.pos), a ? F.empty : t), a == 0 && xu(e, s, (r ? r.isInline : i && i.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(e, t) {
    let r = e.steps.length, i = this.ranges;
    for (let s = 0; s < i.length; s++) {
      let { $from: o, $to: a } = i[s], l = e.mapping.slice(r), c = l.map(o.pos), u = l.map(a.pos);
      s ? e.deleteRange(c, u) : (e.replaceRangeWith(c, u, t), xu(e, r, t.isInline ? -1 : 1));
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom(e, t, r = !1) {
    let i = e.parent.inlineContent ? new X(e) : xr(e.node(0), e.parent, e.pos, e.index(), t, r);
    if (i)
      return i;
    for (let s = e.depth - 1; s >= 0; s--) {
      let o = t < 0 ? xr(e.node(0), e.node(s), e.before(s + 1), e.index(s), t, r) : xr(e.node(0), e.node(s), e.after(s + 1), e.index(s) + 1, t, r);
      if (o)
        return o;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near(e, t = 1) {
    return this.findFrom(e, t) || this.findFrom(e, -t) || new Ct(e.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(e) {
    return xr(e, e, 0, 0, 1) || new Ct(e);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(e) {
    return xr(e, e, e.content.size, e.childCount, -1) || new Ct(e);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(e, t) {
    if (!t || !t.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let r = ca[t.type];
    if (!r)
      throw new RangeError(`No selection type ${t.type} defined`);
    return r.fromJSON(e, t);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(e, t) {
    if (e in ca)
      throw new RangeError("Duplicate use of selection JSON ID " + e);
    return ca[e] = t, t.prototype.jsonID = e, t;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return X.between(this.$anchor, this.$head).getBookmark();
  }
}
ne.prototype.visible = !0;
class hh {
  /**
  Create a range.
  */
  constructor(e, t) {
    this.$from = e, this.$to = t;
  }
}
let ku = !1;
function Eu(n) {
  !ku && !n.parent.inlineContent && (ku = !0, console.warn("TextSelection endpoint not pointing into a node with inline content (" + n.parent.type.name + ")"));
}
class X extends ne {
  /**
  Construct a text selection between the given points.
  */
  constructor(e, t = e) {
    Eu(e), Eu(t), super(e, t);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(e, t) {
    let r = e.resolve(t.map(this.head));
    if (!r.parent.inlineContent)
      return ne.near(r);
    let i = e.resolve(t.map(this.anchor));
    return new X(i.parent.inlineContent ? i : r, r);
  }
  replace(e, t = F.empty) {
    if (super.replace(e, t), t == F.empty) {
      let r = this.$from.marksAcross(this.$to);
      r && e.ensureMarks(r);
    }
  }
  eq(e) {
    return e instanceof X && e.anchor == this.anchor && e.head == this.head;
  }
  getBookmark() {
    return new _o(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.anchor != "number" || typeof t.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new X(e.resolve(t.anchor), e.resolve(t.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(e, t, r = t) {
    let i = e.resolve(t);
    return new this(i, r == t ? i : e.resolve(r));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between(e, t, r) {
    let i = e.pos - t.pos;
    if ((!r || i) && (r = i >= 0 ? 1 : -1), !t.parent.inlineContent) {
      let s = ne.findFrom(t, r, !0) || ne.findFrom(t, -r, !0);
      if (s)
        t = s.$head;
      else
        return ne.near(t, r);
    }
    return e.parent.inlineContent || (i == 0 ? e = t : (e = (ne.findFrom(e, -r, !0) || ne.findFrom(e, r, !0)).$anchor, e.pos < t.pos != i < 0 && (e = t))), new X(e, t);
  }
}
ne.jsonID("text", X);
class _o {
  constructor(e, t) {
    this.anchor = e, this.head = t;
  }
  map(e) {
    return new _o(e.map(this.anchor), e.map(this.head));
  }
  resolve(e) {
    return X.between(e.resolve(this.anchor), e.resolve(this.head));
  }
}
class Q extends ne {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor(e) {
    let t = e.nodeAfter, r = e.node(0).resolve(e.pos + t.nodeSize);
    super(e, r), this.node = t;
  }
  map(e, t) {
    let { deleted: r, pos: i } = t.mapResult(this.anchor), s = e.resolve(i);
    return r ? ne.near(s) : new Q(s);
  }
  content() {
    return new F(R.from(this.node), 0, 0);
  }
  eq(e) {
    return e instanceof Q && e.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new Xl(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new Q(e.resolve(t.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(e, t) {
    return new Q(e.resolve(t));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(e) {
    return !e.isText && e.type.spec.selectable !== !1;
  }
}
Q.prototype.visible = !1;
ne.jsonID("node", Q);
class Xl {
  constructor(e) {
    this.anchor = e;
  }
  map(e) {
    let { deleted: t, pos: r } = e.mapResult(this.anchor);
    return t ? new _o(r, r) : new Xl(r);
  }
  resolve(e) {
    let t = e.resolve(this.anchor), r = t.nodeAfter;
    return r && Q.isSelectable(r) ? new Q(t) : ne.near(t);
  }
}
class Ct extends ne {
  /**
  Create an all-selection over the given document.
  */
  constructor(e) {
    super(e.resolve(0), e.resolve(e.content.size));
  }
  replace(e, t = F.empty) {
    if (t == F.empty) {
      e.delete(0, e.doc.content.size);
      let r = ne.atStart(e.doc);
      r.eq(e.selection) || e.setSelection(r);
    } else
      super.replace(e, t);
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(e) {
    return new Ct(e);
  }
  map(e) {
    return new Ct(e);
  }
  eq(e) {
    return e instanceof Ct;
  }
  getBookmark() {
    return g0;
  }
}
ne.jsonID("all", Ct);
const g0 = {
  map() {
    return this;
  },
  resolve(n) {
    return new Ct(n);
  }
};
function xr(n, e, t, r, i, s = !1) {
  if (e.inlineContent)
    return X.create(n, t);
  for (let o = r - (i > 0 ? 0 : 1); i > 0 ? o < e.childCount : o >= 0; o += i) {
    let a = e.child(o);
    if (a.isAtom) {
      if (!s && Q.isSelectable(a))
        return Q.create(n, t - (i < 0 ? a.nodeSize : 0));
    } else {
      let l = xr(n, a, t + i, i < 0 ? a.childCount : 0, i, s);
      if (l)
        return l;
    }
    t += a.nodeSize * i;
  }
  return null;
}
function xu(n, e, t) {
  let r = n.steps.length - 1;
  if (r < e)
    return;
  let i = n.steps[r];
  if (!(i instanceof Ue || i instanceof Pe))
    return;
  let s = n.mapping.maps[r], o;
  s.forEach((a, l, c, u) => {
    o == null && (o = u);
  }), n.setSelection(ne.near(n.doc.resolve(o), t));
}
const Cu = 1, rs = 2, Su = 4;
class m0 extends Yl {
  /**
  @internal
  */
  constructor(e) {
    super(e.doc), this.curSelectionFor = 0, this.updated = 0, this.meta = /* @__PURE__ */ Object.create(null), this.time = Date.now(), this.curSelection = e.selection, this.storedMarks = e.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    return this.curSelectionFor < this.steps.length && (this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor)), this.curSelectionFor = this.steps.length), this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(e) {
    if (e.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    return this.curSelection = e, this.curSelectionFor = this.steps.length, this.updated = (this.updated | Cu) & ~rs, this.storedMarks = null, this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & Cu) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(e) {
    return this.storedMarks = e, this.updated |= rs, this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(e) {
    return ye.sameSet(this.storedMarks || this.selection.$from.marks(), e) || this.setStoredMarks(e), this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(e) {
    return this.ensureMarks(e.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(e) {
    return this.ensureMarks(e.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & rs) > 0;
  }
  /**
  @internal
  */
  addStep(e, t) {
    super.addStep(e, t), this.updated = this.updated & ~rs, this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(e) {
    return this.time = e, this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(e) {
    return this.selection.replace(this, e), this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(e, t = !0) {
    let r = this.selection;
    return t && (e = e.mark(this.storedMarks || (r.empty ? r.$from.marks() : r.$from.marksAcross(r.$to) || ye.none))), r.replaceWith(this, e), this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    return this.selection.replace(this), this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(e, t, r) {
    let i = this.doc.type.schema;
    if (t == null)
      return e ? this.replaceSelectionWith(i.text(e), !0) : this.deleteSelection();
    {
      if (r == null && (r = t), r = r ?? t, !e)
        return this.deleteRange(t, r);
      let s = this.storedMarks;
      if (!s) {
        let o = this.doc.resolve(t);
        s = r == t ? o.marks() : o.marksAcross(this.doc.resolve(r));
      }
      return this.replaceRangeWith(t, r, i.text(e, s)), this.selection.empty || this.setSelection(ne.near(this.selection.$to)), this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(e, t) {
    return this.meta[typeof e == "string" ? e : e.key] = t, this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(e) {
    return this.meta[typeof e == "string" ? e : e.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let e in this.meta)
      return !1;
    return !0;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    return this.updated |= Su, this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & Su) > 0;
  }
}
function _u(n, e) {
  return !e || !n ? n : n.bind(e);
}
class fi {
  constructor(e, t, r) {
    this.name = e, this.init = _u(t.init, r), this.apply = _u(t.apply, r);
  }
}
const b0 = [
  new fi("doc", {
    init(n) {
      return n.doc || n.schema.topNodeType.createAndFill();
    },
    apply(n) {
      return n.doc;
    }
  }),
  new fi("selection", {
    init(n, e) {
      return n.selection || ne.atStart(e.doc);
    },
    apply(n) {
      return n.selection;
    }
  }),
  new fi("storedMarks", {
    init(n) {
      return n.storedMarks || null;
    },
    apply(n, e, t, r) {
      return r.selection.$cursor ? n.storedMarks : null;
    }
  }),
  new fi("scrollToSelection", {
    init() {
      return 0;
    },
    apply(n, e) {
      return n.scrolledIntoView ? e + 1 : e;
    }
  })
];
class ua {
  constructor(e, t) {
    this.schema = e, this.plugins = [], this.pluginsByKey = /* @__PURE__ */ Object.create(null), this.fields = b0.slice(), t && t.forEach((r) => {
      if (this.pluginsByKey[r.key])
        throw new RangeError("Adding different instances of a keyed plugin (" + r.key + ")");
      this.plugins.push(r), this.pluginsByKey[r.key] = r, r.spec.state && this.fields.push(new fi(r.key, r.spec.state, r));
    });
  }
}
class Tr {
  /**
  @internal
  */
  constructor(e) {
    this.config = e;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(e) {
    return this.applyTransaction(e).state;
  }
  /**
  @internal
  */
  filterTransaction(e, t = -1) {
    for (let r = 0; r < this.config.plugins.length; r++)
      if (r != t) {
        let i = this.config.plugins[r];
        if (i.spec.filterTransaction && !i.spec.filterTransaction.call(i, e, this))
          return !1;
      }
    return !0;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(e) {
    if (!this.filterTransaction(e))
      return { state: this, transactions: [] };
    let t = [e], r = this.applyInner(e), i = null;
    for (; ; ) {
      let s = !1;
      for (let o = 0; o < this.config.plugins.length; o++) {
        let a = this.config.plugins[o];
        if (a.spec.appendTransaction) {
          let l = i ? i[o].n : 0, c = i ? i[o].state : this, u = l < t.length && a.spec.appendTransaction.call(a, l ? t.slice(l) : t, c, r);
          if (u && r.filterTransaction(u, o)) {
            if (u.setMeta("appendedTransaction", e), !i) {
              i = [];
              for (let d = 0; d < this.config.plugins.length; d++)
                i.push(d < o ? { state: r, n: t.length } : { state: this, n: 0 });
            }
            t.push(u), r = r.applyInner(u), s = !0;
          }
          i && (i[o] = { state: r, n: t.length });
        }
      }
      if (!s)
        return { state: r, transactions: t };
    }
  }
  /**
  @internal
  */
  applyInner(e) {
    if (!e.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let t = new Tr(this.config), r = this.config.fields;
    for (let i = 0; i < r.length; i++) {
      let s = r[i];
      t[s.name] = s.apply(e, this[s.name], this, t);
    }
    return t;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new m0(this);
  }
  /**
  Create a new state.
  */
  static create(e) {
    let t = new ua(e.doc ? e.doc.type.schema : e.schema, e.plugins), r = new Tr(t);
    for (let i = 0; i < t.fields.length; i++)
      r[t.fields[i].name] = t.fields[i].init(e, r);
    return r;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(e) {
    let t = new ua(this.schema, e.plugins), r = t.fields, i = new Tr(t);
    for (let s = 0; s < r.length; s++) {
      let o = r[s].name;
      i[o] = this.hasOwnProperty(o) ? this[o] : r[s].init(e, i);
    }
    return i;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(e) {
    let t = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks && (t.storedMarks = this.storedMarks.map((r) => r.toJSON())), e && typeof e == "object")
      for (let r in e) {
        if (r == "doc" || r == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let i = e[r], s = i.spec.state;
        s && s.toJSON && (t[r] = s.toJSON.call(i, this[i.key]));
      }
    return t;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(e, t, r) {
    if (!t)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!e.schema)
      throw new RangeError("Required config field 'schema' missing");
    let i = new ua(e.schema, e.plugins), s = new Tr(i);
    return i.fields.forEach((o) => {
      if (o.name == "doc")
        s.doc = jn.fromJSON(e.schema, t.doc);
      else if (o.name == "selection")
        s.selection = ne.fromJSON(s.doc, t.selection);
      else if (o.name == "storedMarks")
        t.storedMarks && (s.storedMarks = t.storedMarks.map(e.schema.markFromJSON));
      else {
        if (r)
          for (let a in r) {
            let l = r[a], c = l.spec.state;
            if (l.key == o.name && c && c.fromJSON && Object.prototype.hasOwnProperty.call(t, a)) {
              s[o.name] = c.fromJSON.call(l, e, t[a], s);
              return;
            }
          }
        s[o.name] = o.init(e, s);
      }
    }), s;
  }
}
function gh(n, e, t) {
  for (let r in n) {
    let i = n[r];
    i instanceof Function ? i = i.bind(e) : r == "handleDOMEvents" && (i = gh(i, e, {})), t[r] = i;
  }
  return t;
}
class Se {
  /**
  Create a plugin.
  */
  constructor(e) {
    this.spec = e, this.props = {}, e.props && gh(e.props, this, this.props), this.key = e.key ? e.key.key : mh("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const da = /* @__PURE__ */ Object.create(null);
function mh(n) {
  return n in da ? n + "$" + ++da[n] : (da[n] = 0, n + "$");
}
class Me {
  /**
  Create a plugin key.
  */
  constructor(e = "key") {
    this.key = mh(e);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(e) {
    return e.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const tt = function(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}, Mi = function(n) {
  let e = n.assignedSlot || n.parentNode;
  return e && e.nodeType == 11 ? e.host : e;
};
let Mu = null;
const sn = function(n, e, t) {
  let r = Mu || (Mu = document.createRange());
  return r.setEnd(n, t ?? n.nodeValue.length), r.setStart(n, e || 0), r;
}, nr = function(n, e, t, r) {
  return t && (Au(n, e, t, r, -1) || Au(n, e, t, r, 1));
}, y0 = /^(img|br|input|textarea|hr)$/i;
function Au(n, e, t, r, i) {
  for (; ; ) {
    if (n == t && e == r)
      return !0;
    if (e == (i < 0 ? 0 : Vt(n))) {
      let s = n.parentNode;
      if (!s || s.nodeType != 1 || Ql(n) || y0.test(n.nodeName) || n.contentEditable == "false")
        return !1;
      e = tt(n) + (i < 0 ? 0 : 1), n = s;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (i < 0 ? -1 : 0)], n.contentEditable == "false")
        return !1;
      e = i < 0 ? Vt(n) : 0;
    } else
      return !1;
  }
}
function Vt(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function v0(n, e, t) {
  for (let r = e == 0, i = e == Vt(n); r || i; ) {
    if (n == t)
      return !0;
    let s = tt(n);
    if (n = n.parentNode, !n)
      return !1;
    r = r && s == 0, i = i && s == Vt(n);
  }
}
function Ql(n) {
  let e;
  for (let t = n; t && !(e = t.pmViewDesc); t = t.parentNode)
    ;
  return e && e.node && e.node.isBlock && (e.dom == n || e.contentDOM == n);
}
const Mo = function(n) {
  return n.focusNode && nr(n.focusNode, n.focusOffset, n.anchorNode, n.anchorOffset);
};
function Fn(n, e) {
  let t = document.createEvent("Event");
  return t.initEvent("keydown", !0, !0), t.keyCode = n, t.key = t.code = e, t;
}
function w0(n) {
  let e = n.activeElement;
  for (; e && e.shadowRoot; )
    e = e.shadowRoot.activeElement;
  return e;
}
function k0(n, e, t) {
  if (n.caretPositionFromPoint)
    try {
      let r = n.caretPositionFromPoint(e, t);
      if (r)
        return { node: r.offsetNode, offset: r.offset };
    } catch {
    }
  if (n.caretRangeFromPoint) {
    let r = n.caretRangeFromPoint(e, t);
    if (r)
      return { node: r.startContainer, offset: r.startOffset };
  }
}
const jt = typeof navigator < "u" ? navigator : null, Tu = typeof document < "u" ? document : null, Dn = jt && jt.userAgent || "", dl = /Edge\/(\d+)/.exec(Dn), bh = /MSIE \d/.exec(Dn), fl = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Dn), ct = !!(bh || fl || dl), _n = bh ? document.documentMode : fl ? +fl[1] : dl ? +dl[1] : 0, Rt = !ct && /gecko\/(\d+)/i.test(Dn);
Rt && +(/Firefox\/(\d+)/.exec(Dn) || [0, 0])[1];
const pl = !ct && /Chrome\/(\d+)/.exec(Dn), je = !!pl, E0 = pl ? +pl[1] : 0, nt = !ct && !!jt && /Apple Computer/.test(jt.vendor), zr = nt && (/Mobile\/\w+/.test(Dn) || !!jt && jt.maxTouchPoints > 2), Et = zr || (jt ? /Mac/.test(jt.platform) : !1), x0 = jt ? /Win/.test(jt.platform) : !1, Ot = /Android \d/.test(Dn), Ki = !!Tu && "webkitFontSmoothing" in Tu.documentElement.style, C0 = Ki ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function S0(n) {
  return {
    left: 0,
    right: n.documentElement.clientWidth,
    top: 0,
    bottom: n.documentElement.clientHeight
  };
}
function tn(n, e) {
  return typeof n == "number" ? n : n[e];
}
function _0(n) {
  let e = n.getBoundingClientRect(), t = e.width / n.offsetWidth || 1, r = e.height / n.offsetHeight || 1;
  return {
    left: e.left,
    right: e.left + n.clientWidth * t,
    top: e.top,
    bottom: e.top + n.clientHeight * r
  };
}
function Nu(n, e, t) {
  let r = n.someProp("scrollThreshold") || 0, i = n.someProp("scrollMargin") || 5, s = n.dom.ownerDocument;
  for (let o = t || n.dom; o; o = Mi(o)) {
    if (o.nodeType != 1)
      continue;
    let a = o, l = a == s.body, c = l ? S0(s) : _0(a), u = 0, d = 0;
    if (e.top < c.top + tn(r, "top") ? d = -(c.top - e.top + tn(i, "top")) : e.bottom > c.bottom - tn(r, "bottom") && (d = e.bottom - e.top > c.bottom - c.top ? e.top + tn(i, "top") - c.top : e.bottom - c.bottom + tn(i, "bottom")), e.left < c.left + tn(r, "left") ? u = -(c.left - e.left + tn(i, "left")) : e.right > c.right - tn(r, "right") && (u = e.right - c.right + tn(i, "right")), u || d)
      if (l)
        s.defaultView.scrollBy(u, d);
      else {
        let f = a.scrollLeft, p = a.scrollTop;
        d && (a.scrollTop += d), u && (a.scrollLeft += u);
        let h = a.scrollLeft - f, g = a.scrollTop - p;
        e = { left: e.left - h, top: e.top - g, right: e.right - h, bottom: e.bottom - g };
      }
    if (l || /^(fixed|sticky)$/.test(getComputedStyle(o).position))
      break;
  }
}
function M0(n) {
  let e = n.dom.getBoundingClientRect(), t = Math.max(0, e.top), r, i;
  for (let s = (e.left + e.right) / 2, o = t + 1; o < Math.min(innerHeight, e.bottom); o += 5) {
    let a = n.root.elementFromPoint(s, o);
    if (!a || a == n.dom || !n.dom.contains(a))
      continue;
    let l = a.getBoundingClientRect();
    if (l.top >= t - 20) {
      r = a, i = l.top;
      break;
    }
  }
  return { refDOM: r, refTop: i, stack: yh(n.dom) };
}
function yh(n) {
  let e = [], t = n.ownerDocument;
  for (let r = n; r && (e.push({ dom: r, top: r.scrollTop, left: r.scrollLeft }), n != t); r = Mi(r))
    ;
  return e;
}
function A0({ refDOM: n, refTop: e, stack: t }) {
  let r = n ? n.getBoundingClientRect().top : 0;
  vh(t, r == 0 ? 0 : r - e);
}
function vh(n, e) {
  for (let t = 0; t < n.length; t++) {
    let { dom: r, top: i, left: s } = n[t];
    r.scrollTop != i + e && (r.scrollTop = i + e), r.scrollLeft != s && (r.scrollLeft = s);
  }
}
let hr = null;
function T0(n) {
  if (n.setActive)
    return n.setActive();
  if (hr)
    return n.focus(hr);
  let e = yh(n);
  n.focus(hr == null ? {
    get preventScroll() {
      return hr = { preventScroll: !0 }, !0;
    }
  } : void 0), hr || (hr = !1, vh(e, 0));
}
function wh(n, e) {
  let t, r = 2e8, i, s = 0, o = e.top, a = e.top, l, c;
  for (let u = n.firstChild, d = 0; u; u = u.nextSibling, d++) {
    let f;
    if (u.nodeType == 1)
      f = u.getClientRects();
    else if (u.nodeType == 3)
      f = sn(u).getClientRects();
    else
      continue;
    for (let p = 0; p < f.length; p++) {
      let h = f[p];
      if (h.top <= o && h.bottom >= a) {
        o = Math.max(h.bottom, o), a = Math.min(h.top, a);
        let g = h.left > e.left ? h.left - e.left : h.right < e.left ? e.left - h.right : 0;
        if (g < r) {
          t = u, r = g, i = g && t.nodeType == 3 ? {
            left: h.right < e.left ? h.right : h.left,
            top: e.top
          } : e, u.nodeType == 1 && g && (s = d + (e.left >= (h.left + h.right) / 2 ? 1 : 0));
          continue;
        }
      } else
        h.top > e.top && !l && h.left <= e.left && h.right >= e.left && (l = u, c = { left: Math.max(h.left, Math.min(h.right, e.left)), top: h.top });
      !t && (e.left >= h.right && e.top >= h.top || e.left >= h.left && e.top >= h.bottom) && (s = d + 1);
    }
  }
  return !t && l && (t = l, i = c, r = 0), t && t.nodeType == 3 ? N0(t, i) : !t || r && t.nodeType == 1 ? { node: n, offset: s } : wh(t, i);
}
function N0(n, e) {
  let t = n.nodeValue.length, r = document.createRange();
  for (let i = 0; i < t; i++) {
    r.setEnd(n, i + 1), r.setStart(n, i);
    let s = fn(r, 1);
    if (s.top != s.bottom && ec(e, s))
      return { node: n, offset: i + (e.left >= (s.left + s.right) / 2 ? 1 : 0) };
  }
  return { node: n, offset: 0 };
}
function ec(n, e) {
  return n.left >= e.left - 1 && n.left <= e.right + 1 && n.top >= e.top - 1 && n.top <= e.bottom + 1;
}
function O0(n, e) {
  let t = n.parentNode;
  return t && /^li$/i.test(t.nodeName) && e.left < n.getBoundingClientRect().left ? t : n;
}
function L0(n, e, t) {
  let { node: r, offset: i } = wh(e, t), s = -1;
  if (r.nodeType == 1 && !r.firstChild) {
    let o = r.getBoundingClientRect();
    s = o.left != o.right && t.left > (o.left + o.right) / 2 ? 1 : -1;
  }
  return n.docView.posFromDOM(r, i, s);
}
function R0(n, e, t, r) {
  let i = -1;
  for (let s = e, o = !1; s != n.dom; ) {
    let a = n.docView.nearestDesc(s, !0);
    if (!a)
      return null;
    if (a.dom.nodeType == 1 && (a.node.isBlock && a.parent && !o || !a.contentDOM)) {
      let l = a.dom.getBoundingClientRect();
      if (a.node.isBlock && a.parent && !o && (o = !0, l.left > r.left || l.top > r.top ? i = a.posBefore : (l.right < r.left || l.bottom < r.top) && (i = a.posAfter)), !a.contentDOM && i < 0 && !a.node.isText)
        return (a.node.isBlock ? r.top < (l.top + l.bottom) / 2 : r.left < (l.left + l.right) / 2) ? a.posBefore : a.posAfter;
    }
    s = a.dom.parentNode;
  }
  return i > -1 ? i : n.docView.posFromDOM(e, t, -1);
}
function kh(n, e, t) {
  let r = n.childNodes.length;
  if (r && t.top < t.bottom)
    for (let i = Math.max(0, Math.min(r - 1, Math.floor(r * (e.top - t.top) / (t.bottom - t.top)) - 2)), s = i; ; ) {
      let o = n.childNodes[s];
      if (o.nodeType == 1) {
        let a = o.getClientRects();
        for (let l = 0; l < a.length; l++) {
          let c = a[l];
          if (ec(e, c))
            return kh(o, e, c);
        }
      }
      if ((s = (s + 1) % r) == i)
        break;
    }
  return n;
}
function D0(n, e) {
  let t = n.dom.ownerDocument, r, i = 0, s = k0(t, e.left, e.top);
  s && ({ node: r, offset: i } = s);
  let o = (n.root.elementFromPoint ? n.root : t).elementFromPoint(e.left, e.top), a;
  if (!o || !n.dom.contains(o.nodeType != 1 ? o.parentNode : o)) {
    let c = n.dom.getBoundingClientRect();
    if (!ec(e, c) || (o = kh(n.dom, e, c), !o))
      return null;
  }
  if (nt)
    for (let c = o; r && c; c = Mi(c))
      c.draggable && (r = void 0);
  if (o = O0(o, e), r) {
    if (Rt && r.nodeType == 1 && (i = Math.min(i, r.childNodes.length), i < r.childNodes.length)) {
      let u = r.childNodes[i], d;
      u.nodeName == "IMG" && (d = u.getBoundingClientRect()).right <= e.left && d.bottom > e.top && i++;
    }
    let c;
    Ki && i && r.nodeType == 1 && (c = r.childNodes[i - 1]).nodeType == 1 && c.contentEditable == "false" && c.getBoundingClientRect().top >= e.top && i--, r == n.dom && i == r.childNodes.length - 1 && r.lastChild.nodeType == 1 && e.top > r.lastChild.getBoundingClientRect().bottom ? a = n.state.doc.content.size : (i == 0 || r.nodeType != 1 || r.childNodes[i - 1].nodeName != "BR") && (a = R0(n, r, i, e));
  }
  a == null && (a = L0(n, o, e));
  let l = n.docView.nearestDesc(o, !0);
  return { pos: a, inside: l ? l.posAtStart - l.border : -1 };
}
function Ou(n) {
  return n.top < n.bottom || n.left < n.right;
}
function fn(n, e) {
  let t = n.getClientRects();
  if (t.length) {
    let r = t[e < 0 ? 0 : t.length - 1];
    if (Ou(r))
      return r;
  }
  return Array.prototype.find.call(t, Ou) || n.getBoundingClientRect();
}
const I0 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function Eh(n, e, t) {
  let { node: r, offset: i, atom: s } = n.docView.domFromPos(e, t < 0 ? -1 : 1), o = Ki || Rt;
  if (r.nodeType == 3)
    if (o && (I0.test(r.nodeValue) || (t < 0 ? !i : i == r.nodeValue.length))) {
      let l = fn(sn(r, i, i), t);
      if (Rt && i && /\s/.test(r.nodeValue[i - 1]) && i < r.nodeValue.length) {
        let c = fn(sn(r, i - 1, i - 1), -1);
        if (c.top == l.top) {
          let u = fn(sn(r, i, i + 1), -1);
          if (u.top != l.top)
            return ri(u, u.left < c.left);
        }
      }
      return l;
    } else {
      let l = i, c = i, u = t < 0 ? 1 : -1;
      return t < 0 && !i ? (c++, u = -1) : t >= 0 && i == r.nodeValue.length ? (l--, u = 1) : t < 0 ? l-- : c++, ri(fn(sn(r, l, c), u), u < 0);
    }
  if (!n.state.doc.resolve(e - (s || 0)).parent.inlineContent) {
    if (s == null && i && (t < 0 || i == Vt(r))) {
      let l = r.childNodes[i - 1];
      if (l.nodeType == 1)
        return fa(l.getBoundingClientRect(), !1);
    }
    if (s == null && i < Vt(r)) {
      let l = r.childNodes[i];
      if (l.nodeType == 1)
        return fa(l.getBoundingClientRect(), !0);
    }
    return fa(r.getBoundingClientRect(), t >= 0);
  }
  if (s == null && i && (t < 0 || i == Vt(r))) {
    let l = r.childNodes[i - 1], c = l.nodeType == 3 ? sn(l, Vt(l) - (o ? 0 : 1)) : l.nodeType == 1 && (l.nodeName != "BR" || !l.nextSibling) ? l : null;
    if (c)
      return ri(fn(c, 1), !1);
  }
  if (s == null && i < Vt(r)) {
    let l = r.childNodes[i];
    for (; l.pmViewDesc && l.pmViewDesc.ignoreForCoords; )
      l = l.nextSibling;
    let c = l ? l.nodeType == 3 ? sn(l, 0, o ? 0 : 1) : l.nodeType == 1 ? l : null : null;
    if (c)
      return ri(fn(c, -1), !0);
  }
  return ri(fn(r.nodeType == 3 ? sn(r) : r, -t), t >= 0);
}
function ri(n, e) {
  if (n.width == 0)
    return n;
  let t = e ? n.left : n.right;
  return { top: n.top, bottom: n.bottom, left: t, right: t };
}
function fa(n, e) {
  if (n.height == 0)
    return n;
  let t = e ? n.top : n.bottom;
  return { top: t, bottom: t, left: n.left, right: n.right };
}
function xh(n, e, t) {
  let r = n.state, i = n.root.activeElement;
  r != e && n.updateState(e), i != n.dom && n.focus();
  try {
    return t();
  } finally {
    r != e && n.updateState(r), i != n.dom && i && i.focus();
  }
}
function B0(n, e, t) {
  let r = e.selection, i = t == "up" ? r.$from : r.$to;
  return xh(n, e, () => {
    let { node: s } = n.docView.domFromPos(i.pos, t == "up" ? -1 : 1);
    for (; ; ) {
      let a = n.docView.nearestDesc(s, !0);
      if (!a)
        break;
      if (a.node.isBlock) {
        s = a.contentDOM || a.dom;
        break;
      }
      s = a.dom.parentNode;
    }
    let o = Eh(n, i.pos, 1);
    for (let a = s.firstChild; a; a = a.nextSibling) {
      let l;
      if (a.nodeType == 1)
        l = a.getClientRects();
      else if (a.nodeType == 3)
        l = sn(a, 0, a.nodeValue.length).getClientRects();
      else
        continue;
      for (let c = 0; c < l.length; c++) {
        let u = l[c];
        if (u.bottom > u.top + 1 && (t == "up" ? o.top - u.top > (u.bottom - o.top) * 2 : u.bottom - o.bottom > (o.bottom - u.top) * 2))
          return !1;
      }
    }
    return !0;
  });
}
const H0 = /[\u0590-\u08ac]/;
function P0(n, e, t) {
  let { $head: r } = e.selection;
  if (!r.parent.isTextblock)
    return !1;
  let i = r.parentOffset, s = !i, o = i == r.parent.content.size, a = n.domSelection();
  return !H0.test(r.parent.textContent) || !a.modify ? t == "left" || t == "backward" ? s : o : xh(n, e, () => {
    let { focusNode: l, focusOffset: c, anchorNode: u, anchorOffset: d } = n.domSelectionRange(), f = a.caretBidiLevel;
    a.modify("move", t, "character");
    let p = r.depth ? n.docView.domAfterPos(r.before()) : n.dom, { focusNode: h, focusOffset: g } = n.domSelectionRange(), m = h && !p.contains(h.nodeType == 1 ? h : h.parentNode) || l == h && c == g;
    try {
      a.collapse(u, d), l && (l != u || c != d) && a.extend && a.extend(l, c);
    } catch {
    }
    return f != null && (a.caretBidiLevel = f), m;
  });
}
let Lu = null, Ru = null, Du = !1;
function $0(n, e, t) {
  return Lu == e && Ru == t ? Du : (Lu = e, Ru = t, Du = t == "up" || t == "down" ? B0(n, e, t) : P0(n, e, t));
}
const St = 0, Iu = 1, qn = 2, Jt = 3;
class Wi {
  constructor(e, t, r, i) {
    this.parent = e, this.children = t, this.dom = r, this.contentDOM = i, this.dirty = St, r.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(e) {
    return !1;
  }
  matchesMark(e) {
    return !1;
  }
  matchesNode(e, t, r) {
    return !1;
  }
  matchesHack(e) {
    return !1;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(e) {
    return !1;
  }
  // The size of the content represented by this desc.
  get size() {
    let e = 0;
    for (let t = 0; t < this.children.length; t++)
      e += this.children[t].size;
    return e;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0, this.dom.pmViewDesc == this && (this.dom.pmViewDesc = void 0);
    for (let e = 0; e < this.children.length; e++)
      this.children[e].destroy();
  }
  posBeforeChild(e) {
    for (let t = 0, r = this.posAtStart; ; t++) {
      let i = this.children[t];
      if (i == e)
        return r;
      r += i.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(e, t, r) {
    if (this.contentDOM && this.contentDOM.contains(e.nodeType == 1 ? e : e.parentNode))
      if (r < 0) {
        let s, o;
        if (e == this.contentDOM)
          s = e.childNodes[t - 1];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          s = e.previousSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.previousSibling;
        return s ? this.posBeforeChild(o) + o.size : this.posAtStart;
      } else {
        let s, o;
        if (e == this.contentDOM)
          s = e.childNodes[t];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          s = e.nextSibling;
        }
        for (; s && !((o = s.pmViewDesc) && o.parent == this); )
          s = s.nextSibling;
        return s ? this.posBeforeChild(o) : this.posAtEnd;
      }
    let i;
    if (e == this.dom && this.contentDOM)
      i = t > tt(this.contentDOM);
    else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM))
      i = e.compareDocumentPosition(this.contentDOM) & 2;
    else if (this.dom.firstChild) {
      if (t == 0)
        for (let s = e; ; s = s.parentNode) {
          if (s == this.dom) {
            i = !1;
            break;
          }
          if (s.previousSibling)
            break;
        }
      if (i == null && t == e.childNodes.length)
        for (let s = e; ; s = s.parentNode) {
          if (s == this.dom) {
            i = !0;
            break;
          }
          if (s.nextSibling)
            break;
        }
    }
    return i ?? r > 0 ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(e, t = !1) {
    for (let r = !0, i = e; i; i = i.parentNode) {
      let s = this.getDesc(i), o;
      if (s && (!t || s.node))
        if (r && (o = s.nodeDOM) && !(o.nodeType == 1 ? o.contains(e.nodeType == 1 ? e : e.parentNode) : o == e))
          r = !1;
        else
          return s;
    }
  }
  getDesc(e) {
    let t = e.pmViewDesc;
    for (let r = t; r; r = r.parent)
      if (r == this)
        return t;
  }
  posFromDOM(e, t, r) {
    for (let i = e; i; i = i.parentNode) {
      let s = this.getDesc(i);
      if (s)
        return s.localPosFromDOM(e, t, r);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(e) {
    for (let t = 0, r = 0; t < this.children.length; t++) {
      let i = this.children[t], s = r + i.size;
      if (r == e && s != r) {
        for (; !i.border && i.children.length; )
          i = i.children[0];
        return i;
      }
      if (e < s)
        return i.descAt(e - r - i.border);
      r = s;
    }
  }
  domFromPos(e, t) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: e + 1 };
    let r = 0, i = 0;
    for (let s = 0; r < this.children.length; r++) {
      let o = this.children[r], a = s + o.size;
      if (a > e || o instanceof Sh) {
        i = e - s;
        break;
      }
      s = a;
    }
    if (i)
      return this.children[r].domFromPos(i - this.children[r].border, t);
    for (let s; r && !(s = this.children[r - 1]).size && s instanceof Ch && s.side >= 0; r--)
      ;
    if (t <= 0) {
      let s, o = !0;
      for (; s = r ? this.children[r - 1] : null, !(!s || s.dom.parentNode == this.contentDOM); r--, o = !1)
        ;
      return s && t && o && !s.border && !s.domAtom ? s.domFromPos(s.size, t) : { node: this.contentDOM, offset: s ? tt(s.dom) + 1 : 0 };
    } else {
      let s, o = !0;
      for (; s = r < this.children.length ? this.children[r] : null, !(!s || s.dom.parentNode == this.contentDOM); r++, o = !1)
        ;
      return s && o && !s.border && !s.domAtom ? s.domFromPos(0, t) : { node: this.contentDOM, offset: s ? tt(s.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(e, t, r = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: e, to: t, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let i = -1, s = -1;
    for (let o = r, a = 0; ; a++) {
      let l = this.children[a], c = o + l.size;
      if (i == -1 && e <= c) {
        let u = o + l.border;
        if (e >= u && t <= c - l.border && l.node && l.contentDOM && this.contentDOM.contains(l.contentDOM))
          return l.parseRange(e, t, u);
        e = o;
        for (let d = a; d > 0; d--) {
          let f = this.children[d - 1];
          if (f.size && f.dom.parentNode == this.contentDOM && !f.emptyChildAt(1)) {
            i = tt(f.dom) + 1;
            break;
          }
          e -= f.size;
        }
        i == -1 && (i = 0);
      }
      if (i > -1 && (c > t || a == this.children.length - 1)) {
        t = c;
        for (let u = a + 1; u < this.children.length; u++) {
          let d = this.children[u];
          if (d.size && d.dom.parentNode == this.contentDOM && !d.emptyChildAt(-1)) {
            s = tt(d.dom);
            break;
          }
          t += d.size;
        }
        s == -1 && (s = this.contentDOM.childNodes.length);
        break;
      }
      o = c;
    }
    return { node: this.contentDOM, from: e, to: t, fromOffset: i, toOffset: s };
  }
  emptyChildAt(e) {
    if (this.border || !this.contentDOM || !this.children.length)
      return !1;
    let t = this.children[e < 0 ? 0 : this.children.length - 1];
    return t.size == 0 || t.emptyChildAt(e);
  }
  domAfterPos(e) {
    let { node: t, offset: r } = this.domFromPos(e, 0);
    if (t.nodeType != 1 || r == t.childNodes.length)
      throw new RangeError("No node after pos " + e);
    return t.childNodes[r];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(e, t, r, i = !1) {
    let s = Math.min(e, t), o = Math.max(e, t);
    for (let f = 0, p = 0; f < this.children.length; f++) {
      let h = this.children[f], g = p + h.size;
      if (s > p && o < g)
        return h.setSelection(e - p - h.border, t - p - h.border, r, i);
      p = g;
    }
    let a = this.domFromPos(e, e ? -1 : 1), l = t == e ? a : this.domFromPos(t, t ? -1 : 1), c = r.getSelection(), u = !1;
    if ((Rt || nt) && e == t) {
      let { node: f, offset: p } = a;
      if (f.nodeType == 3) {
        if (u = !!(p && f.nodeValue[p - 1] == `
`), u && p == f.nodeValue.length)
          for (let h = f, g; h; h = h.parentNode) {
            if (g = h.nextSibling) {
              g.nodeName == "BR" && (a = l = { node: g.parentNode, offset: tt(g) + 1 });
              break;
            }
            let m = h.pmViewDesc;
            if (m && m.node && m.node.isBlock)
              break;
          }
      } else {
        let h = f.childNodes[p - 1];
        u = h && (h.nodeName == "BR" || h.contentEditable == "false");
      }
    }
    if (Rt && c.focusNode && c.focusNode != l.node && c.focusNode.nodeType == 1) {
      let f = c.focusNode.childNodes[c.focusOffset];
      f && f.contentEditable == "false" && (i = !0);
    }
    if (!(i || u && nt) && nr(a.node, a.offset, c.anchorNode, c.anchorOffset) && nr(l.node, l.offset, c.focusNode, c.focusOffset))
      return;
    let d = !1;
    if ((c.extend || e == t) && !u) {
      c.collapse(a.node, a.offset);
      try {
        e != t && c.extend(l.node, l.offset), d = !0;
      } catch {
      }
    }
    if (!d) {
      if (e > t) {
        let p = a;
        a = l, l = p;
      }
      let f = document.createRange();
      f.setEnd(l.node, l.offset), f.setStart(a.node, a.offset), c.removeAllRanges(), c.addRange(f);
    }
  }
  ignoreMutation(e) {
    return !this.contentDOM && e.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(e, t) {
    for (let r = 0, i = 0; i < this.children.length; i++) {
      let s = this.children[i], o = r + s.size;
      if (r == o ? e <= o && t >= r : e < o && t > r) {
        let a = r + s.border, l = o - s.border;
        if (e >= a && t <= l) {
          this.dirty = e == r || t == o ? qn : Iu, e == a && t == l && (s.contentLost || s.dom.parentNode != this.contentDOM) ? s.dirty = Jt : s.markDirty(e - a, t - a);
          return;
        } else
          s.dirty = s.dom == s.contentDOM && s.dom.parentNode == this.contentDOM && !s.children.length ? qn : Jt;
      }
      r = o;
    }
    this.dirty = qn;
  }
  markParentsDirty() {
    let e = 1;
    for (let t = this.parent; t; t = t.parent, e++) {
      let r = e == 1 ? qn : Iu;
      t.dirty < r && (t.dirty = r);
    }
  }
  get domAtom() {
    return !1;
  }
  get ignoreForCoords() {
    return !1;
  }
}
class Ch extends Wi {
  constructor(e, t, r, i) {
    let s, o = t.type.toDOM;
    if (typeof o == "function" && (o = o(r, () => {
      if (!s)
        return i;
      if (s.parent)
        return s.parent.posBeforeChild(s);
    })), !t.type.spec.raw) {
      if (o.nodeType != 1) {
        let a = document.createElement("span");
        a.appendChild(o), o = a;
      }
      o.contentEditable = "false", o.classList.add("ProseMirror-widget");
    }
    super(e, [], o, null), this.widget = t, this.widget = t, s = this;
  }
  matchesWidget(e) {
    return this.dirty == St && e.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: !0 };
  }
  stopEvent(e) {
    let t = this.widget.spec.stopEvent;
    return t ? t(e) : !1;
  }
  ignoreMutation(e) {
    return e.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom), super.destroy();
  }
  get domAtom() {
    return !0;
  }
  get side() {
    return this.widget.type.side;
  }
}
class F0 extends Wi {
  constructor(e, t, r, i) {
    super(e, [], t, null), this.textDOM = r, this.text = i;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(e, t) {
    return e != this.textDOM ? this.posAtStart + (t ? this.size : 0) : this.posAtStart + t;
  }
  domFromPos(e) {
    return { node: this.textDOM, offset: e };
  }
  ignoreMutation(e) {
    return e.type === "characterData" && e.target.nodeValue == e.oldValue;
  }
}
class rr extends Wi {
  constructor(e, t, r, i) {
    super(e, [], r, i), this.mark = t;
  }
  static create(e, t, r, i) {
    let s = i.nodeViews[t.type.name], o = s && s(t, i, r);
    return (!o || !o.dom) && (o = qt.renderSpec(document, t.type.spec.toDOM(t, r))), new rr(e, t, o.dom, o.contentDOM || o.dom);
  }
  parseRule() {
    return this.dirty & Jt || this.mark.type.spec.reparseInView ? null : { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
  }
  matchesMark(e) {
    return this.dirty != Jt && this.mark.eq(e);
  }
  markDirty(e, t) {
    if (super.markDirty(e, t), this.dirty != St) {
      let r = this.parent;
      for (; !r.node; )
        r = r.parent;
      r.dirty < this.dirty && (r.dirty = this.dirty), this.dirty = St;
    }
  }
  slice(e, t, r) {
    let i = rr.create(this.parent, this.mark, !0, r), s = this.children, o = this.size;
    t < o && (s = ml(s, t, o, r)), e > 0 && (s = ml(s, 0, e, r));
    for (let a = 0; a < s.length; a++)
      s[a].parent = i;
    return i.children = s, i;
  }
}
class Mn extends Wi {
  constructor(e, t, r, i, s, o, a, l, c) {
    super(e, [], s, o), this.node = t, this.outerDeco = r, this.innerDeco = i, this.nodeDOM = a;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(e, t, r, i, s, o) {
    let a = s.nodeViews[t.type.name], l, c = a && a(t, s, () => {
      if (!l)
        return o;
      if (l.parent)
        return l.parent.posBeforeChild(l);
    }, r, i), u = c && c.dom, d = c && c.contentDOM;
    if (t.isText) {
      if (!u)
        u = document.createTextNode(t.text);
      else if (u.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else
      u || ({ dom: u, contentDOM: d } = qt.renderSpec(document, t.type.spec.toDOM(t)));
    !d && !t.isText && u.nodeName != "BR" && (u.hasAttribute("contenteditable") || (u.contentEditable = "false"), t.type.spec.draggable && (u.draggable = !0));
    let f = u;
    return u = Ah(u, r, t), c ? l = new z0(e, t, r, i, u, d || null, f, c, s, o + 1) : t.isText ? new Ao(e, t, r, i, u, f, s) : new Mn(e, t, r, i, u, d || null, f, s, o + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let e = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre" && (e.preserveWhitespace = "full"), !this.contentDOM)
      e.getContent = () => this.node.content;
    else if (!this.contentLost)
      e.contentElement = this.contentDOM;
    else {
      for (let t = this.children.length - 1; t >= 0; t--) {
        let r = this.children[t];
        if (this.dom.contains(r.dom.parentNode)) {
          e.contentElement = r.dom.parentNode;
          break;
        }
      }
      e.contentElement || (e.getContent = () => R.empty);
    }
    return e;
  }
  matchesNode(e, t, r) {
    return this.dirty == St && e.eq(this.node) && gl(t, this.outerDeco) && r.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(e, t) {
    let r = this.node.inlineContent, i = t, s = e.composing ? this.localCompositionInfo(e, t) : null, o = s && s.pos > -1 ? s : null, a = s && s.pos < 0, l = new q0(this, o && o.node, e);
    W0(this.node, this.innerDeco, (c, u, d) => {
      c.spec.marks ? l.syncToMarks(c.spec.marks, r, e) : c.type.side >= 0 && !d && l.syncToMarks(u == this.node.childCount ? ye.none : this.node.child(u).marks, r, e), l.placeWidget(c, e, i);
    }, (c, u, d, f) => {
      l.syncToMarks(c.marks, r, e);
      let p;
      l.findNodeMatch(c, u, d, f) || a && e.state.selection.from > i && e.state.selection.to < i + c.nodeSize && (p = l.findIndexWithChild(s.node)) > -1 && l.updateNodeAt(c, u, d, p, e) || l.updateNextNode(c, u, d, e, f, i) || l.addNode(c, u, d, e, i), i += c.nodeSize;
    }), l.syncToMarks([], r, e), this.node.isTextblock && l.addTextblockHacks(), l.destroyRest(), (l.changed || this.dirty == qn) && (o && this.protectLocalComposition(e, o), _h(this.contentDOM, this.children, e), zr && G0(this.dom));
  }
  localCompositionInfo(e, t) {
    let { from: r, to: i } = e.state.selection;
    if (!(e.state.selection instanceof X) || r < t || i > t + this.node.content.size)
      return null;
    let s = e.domSelectionRange(), o = Z0(s.focusNode, s.focusOffset);
    if (!o || !this.dom.contains(o.parentNode))
      return null;
    if (this.node.inlineContent) {
      let a = o.nodeValue, l = j0(this.node.content, a, r - t, i - t);
      return l < 0 ? null : { node: o, pos: l, text: a };
    } else
      return { node: o, pos: -1, text: "" };
  }
  protectLocalComposition(e, { node: t, pos: r, text: i }) {
    if (this.getDesc(t))
      return;
    let s = t;
    for (; s.parentNode != this.contentDOM; s = s.parentNode) {
      for (; s.previousSibling; )
        s.parentNode.removeChild(s.previousSibling);
      for (; s.nextSibling; )
        s.parentNode.removeChild(s.nextSibling);
      s.pmViewDesc && (s.pmViewDesc = void 0);
    }
    let o = new F0(this, s, t, i);
    e.input.compositionNodes.push(o), this.children = ml(this.children, r, r + i.length, e, o);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(e, t, r, i) {
    return this.dirty == Jt || !e.sameMarkup(this.node) ? !1 : (this.updateInner(e, t, r, i), !0);
  }
  updateInner(e, t, r, i) {
    this.updateOuterDeco(t), this.node = e, this.innerDeco = r, this.contentDOM && this.updateChildren(i, this.posAtStart), this.dirty = St;
  }
  updateOuterDeco(e) {
    if (gl(e, this.outerDeco))
      return;
    let t = this.nodeDOM.nodeType != 1, r = this.dom;
    this.dom = Mh(this.dom, this.nodeDOM, hl(this.outerDeco, this.node, t), hl(e, this.node, t)), this.dom != r && (r.pmViewDesc = void 0, this.dom.pmViewDesc = this), this.outerDeco = e;
  }
  // Mark this node as being the selected node.
  selectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.add("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && (this.dom.draggable = !0);
  }
  // Remove selected node marking from this node.
  deselectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.remove("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && this.dom.removeAttribute("draggable");
  }
  get domAtom() {
    return this.node.isAtom;
  }
}
function Bu(n, e, t, r, i) {
  Ah(r, e, n);
  let s = new Mn(void 0, n, e, t, r, r, r, i, 0);
  return s.contentDOM && s.updateChildren(i, 0), s;
}
class Ao extends Mn {
  constructor(e, t, r, i, s, o, a) {
    super(e, t, r, i, s, null, o, a, 0);
  }
  parseRule() {
    let e = this.nodeDOM.parentNode;
    for (; e && e != this.dom && !e.pmIsDeco; )
      e = e.parentNode;
    return { skip: e || !0 };
  }
  update(e, t, r, i) {
    return this.dirty == Jt || this.dirty != St && !this.inParent() || !e.sameMarkup(this.node) ? !1 : (this.updateOuterDeco(t), (this.dirty != St || e.text != this.node.text) && e.text != this.nodeDOM.nodeValue && (this.nodeDOM.nodeValue = e.text, i.trackWrites == this.nodeDOM && (i.trackWrites = null)), this.node = e, this.dirty = St, !0);
  }
  inParent() {
    let e = this.parent.contentDOM;
    for (let t = this.nodeDOM; t; t = t.parentNode)
      if (t == e)
        return !0;
    return !1;
  }
  domFromPos(e) {
    return { node: this.nodeDOM, offset: e };
  }
  localPosFromDOM(e, t, r) {
    return e == this.nodeDOM ? this.posAtStart + Math.min(t, this.node.text.length) : super.localPosFromDOM(e, t, r);
  }
  ignoreMutation(e) {
    return e.type != "characterData" && e.type != "selection";
  }
  slice(e, t, r) {
    let i = this.node.cut(e, t), s = document.createTextNode(i.text);
    return new Ao(this.parent, i, this.outerDeco, this.innerDeco, s, s, r);
  }
  markDirty(e, t) {
    super.markDirty(e, t), this.dom != this.nodeDOM && (e == 0 || t == this.nodeDOM.nodeValue.length) && (this.dirty = Jt);
  }
  get domAtom() {
    return !1;
  }
}
class Sh extends Wi {
  parseRule() {
    return { ignore: !0 };
  }
  matchesHack(e) {
    return this.dirty == St && this.dom.nodeName == e;
  }
  get domAtom() {
    return !0;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
}
class z0 extends Mn {
  constructor(e, t, r, i, s, o, a, l, c, u) {
    super(e, t, r, i, s, o, a, c, u), this.spec = l;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(e, t, r, i) {
    if (this.dirty == Jt)
      return !1;
    if (this.spec.update) {
      let s = this.spec.update(e, t, r);
      return s && this.updateInner(e, t, r, i), s;
    } else
      return !this.contentDOM && !e.isLeaf ? !1 : super.update(e, t, r, i);
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(e, t, r, i) {
    this.spec.setSelection ? this.spec.setSelection(e, t, r) : super.setSelection(e, t, r, i);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
  stopEvent(e) {
    return this.spec.stopEvent ? this.spec.stopEvent(e) : !1;
  }
  ignoreMutation(e) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(e) : super.ignoreMutation(e);
  }
}
function _h(n, e, t) {
  let r = n.firstChild, i = !1;
  for (let s = 0; s < e.length; s++) {
    let o = e[s], a = o.dom;
    if (a.parentNode == n) {
      for (; a != r; )
        r = Hu(r), i = !0;
      r = r.nextSibling;
    } else
      i = !0, n.insertBefore(a, r);
    if (o instanceof rr) {
      let l = r ? r.previousSibling : n.lastChild;
      _h(o.contentDOM, o.children, t), r = l ? l.nextSibling : n.firstChild;
    }
  }
  for (; r; )
    r = Hu(r), i = !0;
  i && t.trackWrites == n && (t.trackWrites = null);
}
const gi = function(n) {
  n && (this.nodeName = n);
};
gi.prototype = /* @__PURE__ */ Object.create(null);
const Un = [new gi()];
function hl(n, e, t) {
  if (n.length == 0)
    return Un;
  let r = t ? Un[0] : new gi(), i = [r];
  for (let s = 0; s < n.length; s++) {
    let o = n[s].type.attrs;
    if (o) {
      o.nodeName && i.push(r = new gi(o.nodeName));
      for (let a in o) {
        let l = o[a];
        l != null && (t && i.length == 1 && i.push(r = new gi(e.isInline ? "span" : "div")), a == "class" ? r.class = (r.class ? r.class + " " : "") + l : a == "style" ? r.style = (r.style ? r.style + ";" : "") + l : a != "nodeName" && (r[a] = l));
      }
    }
  }
  return i;
}
function Mh(n, e, t, r) {
  if (t == Un && r == Un)
    return e;
  let i = e;
  for (let s = 0; s < r.length; s++) {
    let o = r[s], a = t[s];
    if (s) {
      let l;
      a && a.nodeName == o.nodeName && i != n && (l = i.parentNode) && l.nodeName.toLowerCase() == o.nodeName || (l = document.createElement(o.nodeName), l.pmIsDeco = !0, l.appendChild(i), a = Un[0]), i = l;
    }
    V0(i, a || Un[0], o);
  }
  return i;
}
function V0(n, e, t) {
  for (let r in e)
    r != "class" && r != "style" && r != "nodeName" && !(r in t) && n.removeAttribute(r);
  for (let r in t)
    r != "class" && r != "style" && r != "nodeName" && t[r] != e[r] && n.setAttribute(r, t[r]);
  if (e.class != t.class) {
    let r = e.class ? e.class.split(" ").filter(Boolean) : [], i = t.class ? t.class.split(" ").filter(Boolean) : [];
    for (let s = 0; s < r.length; s++)
      i.indexOf(r[s]) == -1 && n.classList.remove(r[s]);
    for (let s = 0; s < i.length; s++)
      r.indexOf(i[s]) == -1 && n.classList.add(i[s]);
    n.classList.length == 0 && n.removeAttribute("class");
  }
  if (e.style != t.style) {
    if (e.style) {
      let r = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, i;
      for (; i = r.exec(e.style); )
        n.style.removeProperty(i[1]);
    }
    t.style && (n.style.cssText += t.style);
  }
}
function Ah(n, e, t) {
  return Mh(n, n, Un, hl(e, t, n.nodeType != 1));
}
function gl(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (!n[t].type.eq(e[t].type))
      return !1;
  return !0;
}
function Hu(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class q0 {
  constructor(e, t, r) {
    this.lock = t, this.view = r, this.index = 0, this.stack = [], this.changed = !1, this.top = e, this.preMatch = U0(e.node.content, e);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(e, t) {
    if (e != t) {
      for (let r = e; r < t; r++)
        this.top.children[r].destroy();
      this.top.children.splice(e, t - e), this.changed = !0;
    }
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(e, t, r) {
    let i = 0, s = this.stack.length >> 1, o = Math.min(s, e.length);
    for (; i < o && (i == s - 1 ? this.top : this.stack[i + 1 << 1]).matchesMark(e[i]) && e[i].type.spec.spanning !== !1; )
      i++;
    for (; i < s; )
      this.destroyRest(), this.top.dirty = St, this.index = this.stack.pop(), this.top = this.stack.pop(), s--;
    for (; s < e.length; ) {
      this.stack.push(this.top, this.index + 1);
      let a = -1;
      for (let l = this.index; l < Math.min(this.index + 3, this.top.children.length); l++) {
        let c = this.top.children[l];
        if (c.matchesMark(e[s]) && !this.isLocked(c.dom)) {
          a = l;
          break;
        }
      }
      if (a > -1)
        a > this.index && (this.changed = !0, this.destroyBetween(this.index, a)), this.top = this.top.children[this.index];
      else {
        let l = rr.create(this.top, e[s], t, r);
        this.top.children.splice(this.index, 0, l), this.top = l, this.changed = !0;
      }
      this.index = 0, s++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(e, t, r, i) {
    let s = -1, o;
    if (i >= this.preMatch.index && (o = this.preMatch.matches[i - this.preMatch.index]).parent == this.top && o.matchesNode(e, t, r))
      s = this.top.children.indexOf(o, this.index);
    else
      for (let a = this.index, l = Math.min(this.top.children.length, a + 5); a < l; a++) {
        let c = this.top.children[a];
        if (c.matchesNode(e, t, r) && !this.preMatch.matched.has(c)) {
          s = a;
          break;
        }
      }
    return s < 0 ? !1 : (this.destroyBetween(this.index, s), this.index++, !0);
  }
  updateNodeAt(e, t, r, i, s) {
    let o = this.top.children[i];
    return o.dirty == Jt && o.dom == o.contentDOM && (o.dirty = qn), o.update(e, t, r, s) ? (this.destroyBetween(this.index, i), this.index++, !0) : !1;
  }
  findIndexWithChild(e) {
    for (; ; ) {
      let t = e.parentNode;
      if (!t)
        return -1;
      if (t == this.top.contentDOM) {
        let r = e.pmViewDesc;
        if (r) {
          for (let i = this.index; i < this.top.children.length; i++)
            if (this.top.children[i] == r)
              return i;
        }
        return -1;
      }
      e = t;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(e, t, r, i, s, o) {
    for (let a = this.index; a < this.top.children.length; a++) {
      let l = this.top.children[a];
      if (l instanceof Mn) {
        let c = this.preMatch.matched.get(l);
        if (c != null && c != s)
          return !1;
        let u = l.dom, d, f = this.isLocked(u) && !(e.isText && l.node && l.node.isText && l.nodeDOM.nodeValue == e.text && l.dirty != Jt && gl(t, l.outerDeco));
        if (!f && l.update(e, t, r, i))
          return this.destroyBetween(this.index, a), l.dom != u && (this.changed = !0), this.index++, !0;
        if (!f && (d = this.recreateWrapper(l, e, t, r, i, o)))
          return this.top.children[this.index] = d, d.contentDOM && (d.dirty = qn, d.updateChildren(i, o + 1), d.dirty = St), this.changed = !0, this.index++, !0;
        break;
      }
    }
    return !1;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(e, t, r, i, s, o) {
    if (e.dirty || t.isAtom || !e.children.length || !e.node.content.eq(t.content))
      return null;
    let a = Mn.create(this.top, t, r, i, s, o);
    if (a.contentDOM) {
      a.children = e.children, e.children = [];
      for (let l of a.children)
        l.parent = a;
    }
    return e.destroy(), a;
  }
  // Insert the node as a newly created node desc.
  addNode(e, t, r, i, s) {
    let o = Mn.create(this.top, e, t, r, i, s);
    o.contentDOM && o.updateChildren(i, s + 1), this.top.children.splice(this.index++, 0, o), this.changed = !0;
  }
  placeWidget(e, t, r) {
    let i = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (i && i.matchesWidget(e) && (e == i.widget || !i.widget.type.toDOM.parentNode))
      this.index++;
    else {
      let s = new Ch(this.top, e, t, r);
      this.top.children.splice(this.index++, 0, s), this.changed = !0;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let e = this.top.children[this.index - 1], t = this.top;
    for (; e instanceof rr; )
      t = e, e = t.children[t.children.length - 1];
    (!e || // Empty textblock
    !(e instanceof Ao) || /\n$/.test(e.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(e.node.text)) && ((nt || je) && e && e.dom.contentEditable == "false" && this.addHackNode("IMG", t), this.addHackNode("BR", this.top));
  }
  addHackNode(e, t) {
    if (t == this.top && this.index < t.children.length && t.children[this.index].matchesHack(e))
      this.index++;
    else {
      let r = document.createElement(e);
      e == "IMG" && (r.className = "ProseMirror-separator", r.alt = ""), e == "BR" && (r.className = "ProseMirror-trailingBreak");
      let i = new Sh(this.top, [], r, null);
      t != this.top ? t.children.push(i) : t.children.splice(this.index++, 0, i), this.changed = !0;
    }
  }
  isLocked(e) {
    return this.lock && (e == this.lock || e.nodeType == 1 && e.contains(this.lock.parentNode));
  }
}
function U0(n, e) {
  let t = e, r = t.children.length, i = n.childCount, s = /* @__PURE__ */ new Map(), o = [];
  e:
    for (; i > 0; ) {
      let a;
      for (; ; )
        if (r) {
          let c = t.children[r - 1];
          if (c instanceof rr)
            t = c, r = c.children.length;
          else {
            a = c, r--;
            break;
          }
        } else {
          if (t == e)
            break e;
          r = t.parent.children.indexOf(t), t = t.parent;
        }
      let l = a.node;
      if (l) {
        if (l != n.child(i - 1))
          break;
        --i, s.set(a, i), o.push(a);
      }
    }
  return { index: i, matched: s, matches: o.reverse() };
}
function K0(n, e) {
  return n.type.side - e.type.side;
}
function W0(n, e, t, r) {
  let i = e.locals(n), s = 0;
  if (i.length == 0) {
    for (let c = 0; c < n.childCount; c++) {
      let u = n.child(c);
      r(u, i, e.forChild(s, u), c), s += u.nodeSize;
    }
    return;
  }
  let o = 0, a = [], l = null;
  for (let c = 0; ; ) {
    let u, d;
    for (; o < i.length && i[o].to == s; ) {
      let m = i[o++];
      m.widget && (u ? (d || (d = [u])).push(m) : u = m);
    }
    if (u)
      if (d) {
        d.sort(K0);
        for (let m = 0; m < d.length; m++)
          t(d[m], c, !!l);
      } else
        t(u, c, !!l);
    let f, p;
    if (l)
      p = -1, f = l, l = null;
    else if (c < n.childCount)
      p = c, f = n.child(c++);
    else
      break;
    for (let m = 0; m < a.length; m++)
      a[m].to <= s && a.splice(m--, 1);
    for (; o < i.length && i[o].from <= s && i[o].to > s; )
      a.push(i[o++]);
    let h = s + f.nodeSize;
    if (f.isText) {
      let m = h;
      o < i.length && i[o].from < m && (m = i[o].from);
      for (let v = 0; v < a.length; v++)
        a[v].to < m && (m = a[v].to);
      m < h && (l = f.cut(m - s), f = f.cut(0, m - s), h = m, p = -1);
    }
    let g = f.isInline && !f.isLeaf ? a.filter((m) => !m.inline) : a.slice();
    r(f, g, e.forChild(s, f), p), s = h;
  }
}
function G0(n) {
  if (n.nodeName == "UL" || n.nodeName == "OL") {
    let e = n.style.cssText;
    n.style.cssText = e + "; list-style: square !important", window.getComputedStyle(n).listStyle, n.style.cssText = e;
  }
}
function Z0(n, e) {
  for (; ; ) {
    if (n.nodeType == 3)
      return n;
    if (n.nodeType == 1 && e > 0) {
      if (n.childNodes.length > e && n.childNodes[e].nodeType == 3)
        return n.childNodes[e];
      n = n.childNodes[e - 1], e = Vt(n);
    } else if (n.nodeType == 1 && e < n.childNodes.length)
      n = n.childNodes[e], e = 0;
    else
      return null;
  }
}
function j0(n, e, t, r) {
  for (let i = 0, s = 0; i < n.childCount && s <= r; ) {
    let o = n.child(i++), a = s;
    if (s += o.nodeSize, !o.isText)
      continue;
    let l = o.text;
    for (; i < n.childCount; ) {
      let c = n.child(i++);
      if (s += c.nodeSize, !c.isText)
        break;
      l += c.text;
    }
    if (s >= t) {
      if (s >= r && l.slice(r - e.length - a, r - a) == e)
        return r - e.length;
      let c = a < r ? l.lastIndexOf(e, r - a - 1) : -1;
      if (c >= 0 && c + e.length + a >= t)
        return a + c;
      if (t == r && l.length >= r + e.length - a && l.slice(r - a, r - a + e.length) == e)
        return r;
    }
  }
  return -1;
}
function ml(n, e, t, r, i) {
  let s = [];
  for (let o = 0, a = 0; o < n.length; o++) {
    let l = n[o], c = a, u = a += l.size;
    c >= t || u <= e ? s.push(l) : (c < e && s.push(l.slice(0, e - c, r)), i && (s.push(i), i = void 0), u > t && s.push(l.slice(t - c, l.size, r)));
  }
  return s;
}
function tc(n, e = null) {
  let t = n.domSelectionRange(), r = n.state.doc;
  if (!t.focusNode)
    return null;
  let i = n.docView.nearestDesc(t.focusNode), s = i && i.size == 0, o = n.docView.posFromDOM(t.focusNode, t.focusOffset, 1);
  if (o < 0)
    return null;
  let a = r.resolve(o), l, c;
  if (Mo(t)) {
    for (l = a; i && !i.node; )
      i = i.parent;
    let u = i.node;
    if (i && u.isAtom && Q.isSelectable(u) && i.parent && !(u.isInline && v0(t.focusNode, t.focusOffset, i.dom))) {
      let d = i.posBefore;
      c = new Q(o == d ? a : r.resolve(d));
    }
  } else {
    let u = n.docView.posFromDOM(t.anchorNode, t.anchorOffset, 1);
    if (u < 0)
      return null;
    l = r.resolve(u);
  }
  if (!c) {
    let u = e == "pointer" || n.state.selection.head < a.pos && !s ? 1 : -1;
    c = nc(n, l, a, u);
  }
  return c;
}
function Th(n) {
  return n.editable ? n.hasFocus() : Oh(n) && document.activeElement && document.activeElement.contains(n.dom);
}
function ln(n, e = !1) {
  let t = n.state.selection;
  if (Nh(n, t), !!Th(n)) {
    if (!e && n.input.mouseDown && n.input.mouseDown.allowDefault && je) {
      let r = n.domSelectionRange(), i = n.domObserver.currentSelection;
      if (r.anchorNode && i.anchorNode && nr(r.anchorNode, r.anchorOffset, i.anchorNode, i.anchorOffset)) {
        n.input.mouseDown.delayedSelectionSync = !0, n.domObserver.setCurSelection();
        return;
      }
    }
    if (n.domObserver.disconnectSelection(), n.cursorWrapper)
      Y0(n);
    else {
      let { anchor: r, head: i } = t, s, o;
      Pu && !(t instanceof X) && (t.$from.parent.inlineContent || (s = $u(n, t.from)), !t.empty && !t.$from.parent.inlineContent && (o = $u(n, t.to))), n.docView.setSelection(r, i, n.root, e), Pu && (s && Fu(s), o && Fu(o)), t.visible ? n.dom.classList.remove("ProseMirror-hideselection") : (n.dom.classList.add("ProseMirror-hideselection"), "onselectionchange" in document && J0(n));
    }
    n.domObserver.setCurSelection(), n.domObserver.connectSelection();
  }
}
const Pu = nt || je && E0 < 63;
function $u(n, e) {
  let { node: t, offset: r } = n.docView.domFromPos(e, 0), i = r < t.childNodes.length ? t.childNodes[r] : null, s = r ? t.childNodes[r - 1] : null;
  if (nt && i && i.contentEditable == "false")
    return pa(i);
  if ((!i || i.contentEditable == "false") && (!s || s.contentEditable == "false")) {
    if (i)
      return pa(i);
    if (s)
      return pa(s);
  }
}
function pa(n) {
  return n.contentEditable = "true", nt && n.draggable && (n.draggable = !1, n.wasDraggable = !0), n;
}
function Fu(n) {
  n.contentEditable = "false", n.wasDraggable && (n.draggable = !0, n.wasDraggable = null);
}
function J0(n) {
  let e = n.dom.ownerDocument;
  e.removeEventListener("selectionchange", n.input.hideSelectionGuard);
  let t = n.domSelectionRange(), r = t.anchorNode, i = t.anchorOffset;
  e.addEventListener("selectionchange", n.input.hideSelectionGuard = () => {
    (t.anchorNode != r || t.anchorOffset != i) && (e.removeEventListener("selectionchange", n.input.hideSelectionGuard), setTimeout(() => {
      (!Th(n) || n.state.selection.visible) && n.dom.classList.remove("ProseMirror-hideselection");
    }, 20));
  });
}
function Y0(n) {
  let e = n.domSelection(), t = document.createRange(), r = n.cursorWrapper.dom, i = r.nodeName == "IMG";
  i ? t.setEnd(r.parentNode, tt(r) + 1) : t.setEnd(r, 0), t.collapse(!1), e.removeAllRanges(), e.addRange(t), !i && !n.state.selection.visible && ct && _n <= 11 && (r.disabled = !0, r.disabled = !1);
}
function Nh(n, e) {
  if (e instanceof Q) {
    let t = n.docView.descAt(e.from);
    t != n.lastSelectedViewDesc && (zu(n), t && t.selectNode(), n.lastSelectedViewDesc = t);
  } else
    zu(n);
}
function zu(n) {
  n.lastSelectedViewDesc && (n.lastSelectedViewDesc.parent && n.lastSelectedViewDesc.deselectNode(), n.lastSelectedViewDesc = void 0);
}
function nc(n, e, t, r) {
  return n.someProp("createSelectionBetween", (i) => i(n, e, t)) || X.between(e, t, r);
}
function Vu(n) {
  return n.editable && !n.hasFocus() ? !1 : Oh(n);
}
function Oh(n) {
  let e = n.domSelectionRange();
  if (!e.anchorNode)
    return !1;
  try {
    return n.dom.contains(e.anchorNode.nodeType == 3 ? e.anchorNode.parentNode : e.anchorNode) && (n.editable || n.dom.contains(e.focusNode.nodeType == 3 ? e.focusNode.parentNode : e.focusNode));
  } catch {
    return !1;
  }
}
function X0(n) {
  let e = n.docView.domFromPos(n.state.selection.anchor, 0), t = n.domSelectionRange();
  return nr(e.node, e.offset, t.anchorNode, t.anchorOffset);
}
function bl(n, e) {
  let { $anchor: t, $head: r } = n.selection, i = e > 0 ? t.max(r) : t.min(r), s = i.parent.inlineContent ? i.depth ? n.doc.resolve(e > 0 ? i.after() : i.before()) : null : i;
  return s && ne.findFrom(s, e);
}
function pn(n, e) {
  return n.dispatch(n.state.tr.setSelection(e).scrollIntoView()), !0;
}
function qu(n, e, t) {
  let r = n.state.selection;
  if (r instanceof X)
    if (t.indexOf("s") > -1) {
      let { $head: i } = r, s = i.textOffset ? null : e < 0 ? i.nodeBefore : i.nodeAfter;
      if (!s || s.isText || !s.isLeaf)
        return !1;
      let o = n.state.doc.resolve(i.pos + s.nodeSize * (e < 0 ? -1 : 1));
      return pn(n, new X(r.$anchor, o));
    } else if (r.empty) {
      if (n.endOfTextblock(e > 0 ? "forward" : "backward")) {
        let i = bl(n.state, e);
        return i && i instanceof Q ? pn(n, i) : !1;
      } else if (!(Et && t.indexOf("m") > -1)) {
        let i = r.$head, s = i.textOffset ? null : e < 0 ? i.nodeBefore : i.nodeAfter, o;
        if (!s || s.isText)
          return !1;
        let a = e < 0 ? i.pos - s.nodeSize : i.pos;
        return s.isAtom || (o = n.docView.descAt(a)) && !o.contentDOM ? Q.isSelectable(s) ? pn(n, new Q(e < 0 ? n.state.doc.resolve(i.pos - s.nodeSize) : i)) : Ki ? pn(n, new X(n.state.doc.resolve(e < 0 ? a : a + s.nodeSize))) : !1 : !1;
      }
    } else
      return !1;
  else {
    if (r instanceof Q && r.node.isInline)
      return pn(n, new X(e > 0 ? r.$to : r.$from));
    {
      let i = bl(n.state, e);
      return i ? pn(n, i) : !1;
    }
  }
}
function zs(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function mi(n, e) {
  let t = n.pmViewDesc;
  return t && t.size == 0 && (e < 0 || n.nextSibling || n.nodeName != "BR");
}
function gr(n, e) {
  return e < 0 ? Q0(n) : e1(n);
}
function Q0(n) {
  let e = n.domSelectionRange(), t = e.focusNode, r = e.focusOffset;
  if (!t)
    return;
  let i, s, o = !1;
  for (Rt && t.nodeType == 1 && r < zs(t) && mi(t.childNodes[r], -1) && (o = !0); ; )
    if (r > 0) {
      if (t.nodeType != 1)
        break;
      {
        let a = t.childNodes[r - 1];
        if (mi(a, -1))
          i = t, s = --r;
        else if (a.nodeType == 3)
          t = a, r = t.nodeValue.length;
        else
          break;
      }
    } else {
      if (Lh(t))
        break;
      {
        let a = t.previousSibling;
        for (; a && mi(a, -1); )
          i = t.parentNode, s = tt(a), a = a.previousSibling;
        if (a)
          t = a, r = zs(t);
        else {
          if (t = t.parentNode, t == n.dom)
            break;
          r = 0;
        }
      }
    }
  o ? yl(n, t, r) : i && yl(n, i, s);
}
function e1(n) {
  let e = n.domSelectionRange(), t = e.focusNode, r = e.focusOffset;
  if (!t)
    return;
  let i = zs(t), s, o;
  for (; ; )
    if (r < i) {
      if (t.nodeType != 1)
        break;
      let a = t.childNodes[r];
      if (mi(a, 1))
        s = t, o = ++r;
      else
        break;
    } else {
      if (Lh(t))
        break;
      {
        let a = t.nextSibling;
        for (; a && mi(a, 1); )
          s = a.parentNode, o = tt(a) + 1, a = a.nextSibling;
        if (a)
          t = a, r = 0, i = zs(t);
        else {
          if (t = t.parentNode, t == n.dom)
            break;
          r = i = 0;
        }
      }
    }
  s && yl(n, s, o);
}
function Lh(n) {
  let e = n.pmViewDesc;
  return e && e.node && e.node.isBlock;
}
function t1(n, e) {
  for (; n && e == n.childNodes.length && !Ql(n); )
    e = tt(n) + 1, n = n.parentNode;
  for (; n && e < n.childNodes.length; ) {
    let t = n.childNodes[e];
    if (t.nodeType == 3)
      return t;
    if (t.nodeType == 1 && t.contentEditable == "false")
      break;
    n = t, e = 0;
  }
}
function n1(n, e) {
  for (; n && !e && !Ql(n); )
    e = tt(n), n = n.parentNode;
  for (; n && e; ) {
    let t = n.childNodes[e - 1];
    if (t.nodeType == 3)
      return t;
    if (t.nodeType == 1 && t.contentEditable == "false")
      break;
    n = t, e = n.childNodes.length;
  }
}
function yl(n, e, t) {
  if (e.nodeType != 3) {
    let s, o;
    (o = t1(e, t)) ? (e = o, t = 0) : (s = n1(e, t)) && (e = s, t = s.nodeValue.length);
  }
  let r = n.domSelection();
  if (Mo(r)) {
    let s = document.createRange();
    s.setEnd(e, t), s.setStart(e, t), r.removeAllRanges(), r.addRange(s);
  } else
    r.extend && r.extend(e, t);
  n.domObserver.setCurSelection();
  let { state: i } = n;
  setTimeout(() => {
    n.state == i && ln(n);
  }, 50);
}
function Uu(n, e) {
  let t = n.state.doc.resolve(e);
  if (!(je || x0) && t.parent.inlineContent) {
    let i = n.coordsAtPos(e);
    if (e > t.start()) {
      let s = n.coordsAtPos(e - 1), o = (s.top + s.bottom) / 2;
      if (o > i.top && o < i.bottom && Math.abs(s.left - i.left) > 1)
        return s.left < i.left ? "ltr" : "rtl";
    }
    if (e < t.end()) {
      let s = n.coordsAtPos(e + 1), o = (s.top + s.bottom) / 2;
      if (o > i.top && o < i.bottom && Math.abs(s.left - i.left) > 1)
        return s.left > i.left ? "ltr" : "rtl";
    }
  }
  return getComputedStyle(n.dom).direction == "rtl" ? "rtl" : "ltr";
}
function Ku(n, e, t) {
  let r = n.state.selection;
  if (r instanceof X && !r.empty || t.indexOf("s") > -1 || Et && t.indexOf("m") > -1)
    return !1;
  let { $from: i, $to: s } = r;
  if (!i.parent.inlineContent || n.endOfTextblock(e < 0 ? "up" : "down")) {
    let o = bl(n.state, e);
    if (o && o instanceof Q)
      return pn(n, o);
  }
  if (!i.parent.inlineContent) {
    let o = e < 0 ? i : s, a = r instanceof Ct ? ne.near(o, e) : ne.findFrom(o, e);
    return a ? pn(n, a) : !1;
  }
  return !1;
}
function Wu(n, e) {
  if (!(n.state.selection instanceof X))
    return !0;
  let { $head: t, $anchor: r, empty: i } = n.state.selection;
  if (!t.sameParent(r))
    return !0;
  if (!i)
    return !1;
  if (n.endOfTextblock(e > 0 ? "forward" : "backward"))
    return !0;
  let s = !t.textOffset && (e < 0 ? t.nodeBefore : t.nodeAfter);
  if (s && !s.isText) {
    let o = n.state.tr;
    return e < 0 ? o.delete(t.pos - s.nodeSize, t.pos) : o.delete(t.pos, t.pos + s.nodeSize), n.dispatch(o), !0;
  }
  return !1;
}
function Gu(n, e, t) {
  n.domObserver.stop(), e.contentEditable = t, n.domObserver.start();
}
function r1(n) {
  if (!nt || n.state.selection.$head.parentOffset > 0)
    return !1;
  let { focusNode: e, focusOffset: t } = n.domSelectionRange();
  if (e && e.nodeType == 1 && t == 0 && e.firstChild && e.firstChild.contentEditable == "false") {
    let r = e.firstChild;
    Gu(n, r, "true"), setTimeout(() => Gu(n, r, "false"), 20);
  }
  return !1;
}
function i1(n) {
  let e = "";
  return n.ctrlKey && (e += "c"), n.metaKey && (e += "m"), n.altKey && (e += "a"), n.shiftKey && (e += "s"), e;
}
function s1(n, e) {
  let t = e.keyCode, r = i1(e);
  if (t == 8 || Et && t == 72 && r == "c")
    return Wu(n, -1) || gr(n, -1);
  if (t == 46 && !e.shiftKey || Et && t == 68 && r == "c")
    return Wu(n, 1) || gr(n, 1);
  if (t == 13 || t == 27)
    return !0;
  if (t == 37 || Et && t == 66 && r == "c") {
    let i = t == 37 ? Uu(n, n.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return qu(n, i, r) || gr(n, i);
  } else if (t == 39 || Et && t == 70 && r == "c") {
    let i = t == 39 ? Uu(n, n.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return qu(n, i, r) || gr(n, i);
  } else {
    if (t == 38 || Et && t == 80 && r == "c")
      return Ku(n, -1, r) || gr(n, -1);
    if (t == 40 || Et && t == 78 && r == "c")
      return r1(n) || Ku(n, 1, r) || gr(n, 1);
    if (r == (Et ? "m" : "c") && (t == 66 || t == 73 || t == 89 || t == 90))
      return !0;
  }
  return !1;
}
function Rh(n, e) {
  n.someProp("transformCopied", (p) => {
    e = p(e, n);
  });
  let t = [], { content: r, openStart: i, openEnd: s } = e;
  for (; i > 1 && s > 1 && r.childCount == 1 && r.firstChild.childCount == 1; ) {
    i--, s--;
    let p = r.firstChild;
    t.push(p.type.name, p.attrs != p.type.defaultAttrs ? p.attrs : null), r = p.content;
  }
  let o = n.someProp("clipboardSerializer") || qt.fromSchema(n.state.schema), a = $h(), l = a.createElement("div");
  l.appendChild(o.serializeFragment(r, { document: a }));
  let c = l.firstChild, u, d = 0;
  for (; c && c.nodeType == 1 && (u = Ph[c.nodeName.toLowerCase()]); ) {
    for (let p = u.length - 1; p >= 0; p--) {
      let h = a.createElement(u[p]);
      for (; l.firstChild; )
        h.appendChild(l.firstChild);
      l.appendChild(h), d++;
    }
    c = l.firstChild;
  }
  c && c.nodeType == 1 && c.setAttribute("data-pm-slice", `${i} ${s}${d ? ` -${d}` : ""} ${JSON.stringify(t)}`);
  let f = n.someProp("clipboardTextSerializer", (p) => p(e, n)) || e.content.textBetween(0, e.content.size, `

`);
  return { dom: l, text: f };
}
function Dh(n, e, t, r, i) {
  let s = i.parent.type.spec.code, o, a;
  if (!t && !e)
    return null;
  let l = e && (r || s || !t);
  if (l) {
    if (n.someProp("transformPastedText", (f) => {
      e = f(e, s || r, n);
    }), s)
      return e ? new F(R.from(n.state.schema.text(e.replace(/\r\n?/g, `
`))), 0, 0) : F.empty;
    let d = n.someProp("clipboardTextParser", (f) => f(e, i, r, n));
    if (d)
      a = d;
    else {
      let f = i.marks(), { schema: p } = n.state, h = qt.fromSchema(p);
      o = document.createElement("div"), e.split(/(?:\r\n?|\n)+/).forEach((g) => {
        let m = o.appendChild(document.createElement("p"));
        g && m.appendChild(h.serializeNode(p.text(g, f)));
      });
    }
  } else
    n.someProp("transformPastedHTML", (d) => {
      t = d(t, n);
    }), o = l1(t), Ki && c1(o);
  let c = o && o.querySelector("[data-pm-slice]"), u = c && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(c.getAttribute("data-pm-slice") || "");
  if (u && u[3])
    for (let d = +u[3]; d > 0; d--) {
      let f = o.firstChild;
      for (; f && f.nodeType != 1; )
        f = f.nextSibling;
      if (!f)
        break;
      o = f;
    }
  if (a || (a = (n.someProp("clipboardParser") || n.someProp("domParser") || Nn.fromSchema(n.state.schema)).parseSlice(o, {
    preserveWhitespace: !!(l || u),
    context: i,
    ruleFromNode(f) {
      return f.nodeName == "BR" && !f.nextSibling && f.parentNode && !o1.test(f.parentNode.nodeName) ? { ignore: !0 } : null;
    }
  })), u)
    a = u1(Zu(a, +u[1], +u[2]), u[4]);
  else if (a = F.maxOpen(a1(a.content, i), !0), a.openStart || a.openEnd) {
    let d = 0, f = 0;
    for (let p = a.content.firstChild; d < a.openStart && !p.type.spec.isolating; d++, p = p.firstChild)
      ;
    for (let p = a.content.lastChild; f < a.openEnd && !p.type.spec.isolating; f++, p = p.lastChild)
      ;
    a = Zu(a, d, f);
  }
  return n.someProp("transformPasted", (d) => {
    a = d(a, n);
  }), a;
}
const o1 = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function a1(n, e) {
  if (n.childCount < 2)
    return n;
  for (let t = e.depth; t >= 0; t--) {
    let i = e.node(t).contentMatchAt(e.index(t)), s, o = [];
    if (n.forEach((a) => {
      if (!o)
        return;
      let l = i.findWrapping(a.type), c;
      if (!l)
        return o = null;
      if (c = o.length && s.length && Bh(l, s, a, o[o.length - 1], 0))
        o[o.length - 1] = c;
      else {
        o.length && (o[o.length - 1] = Hh(o[o.length - 1], s.length));
        let u = Ih(a, l);
        o.push(u), i = i.matchType(u.type), s = l;
      }
    }), o)
      return R.from(o);
  }
  return n;
}
function Ih(n, e, t = 0) {
  for (let r = e.length - 1; r >= t; r--)
    n = e[r].create(null, R.from(n));
  return n;
}
function Bh(n, e, t, r, i) {
  if (i < n.length && i < e.length && n[i] == e[i]) {
    let s = Bh(n, e, t, r.lastChild, i + 1);
    if (s)
      return r.copy(r.content.replaceChild(r.childCount - 1, s));
    if (r.contentMatchAt(r.childCount).matchType(i == n.length - 1 ? t.type : n[i + 1]))
      return r.copy(r.content.append(R.from(Ih(t, n, i + 1))));
  }
}
function Hh(n, e) {
  if (e == 0)
    return n;
  let t = n.content.replaceChild(n.childCount - 1, Hh(n.lastChild, e - 1)), r = n.contentMatchAt(n.childCount).fillBefore(R.empty, !0);
  return n.copy(t.append(r));
}
function vl(n, e, t, r, i, s) {
  let o = e < 0 ? n.firstChild : n.lastChild, a = o.content;
  return n.childCount > 1 && (s = 0), i < r - 1 && (a = vl(a, e, t, r, i + 1, s)), i >= t && (a = e < 0 ? o.contentMatchAt(0).fillBefore(a, s <= i).append(a) : a.append(o.contentMatchAt(o.childCount).fillBefore(R.empty, !0))), n.replaceChild(e < 0 ? 0 : n.childCount - 1, o.copy(a));
}
function Zu(n, e, t) {
  return e < n.openStart && (n = new F(vl(n.content, -1, e, n.openStart, 0, n.openEnd), e, n.openEnd)), t < n.openEnd && (n = new F(vl(n.content, 1, t, n.openEnd, 0, 0), n.openStart, t)), n;
}
const Ph = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
let ju = null;
function $h() {
  return ju || (ju = document.implementation.createHTMLDocument("title"));
}
function l1(n) {
  let e = /^(\s*<meta [^>]*>)*/.exec(n);
  e && (n = n.slice(e[0].length));
  let t = $h().createElement("div"), r = /<([a-z][^>\s]+)/i.exec(n), i;
  if ((i = r && Ph[r[1].toLowerCase()]) && (n = i.map((s) => "<" + s + ">").join("") + n + i.map((s) => "</" + s + ">").reverse().join("")), t.innerHTML = n, i)
    for (let s = 0; s < i.length; s++)
      t = t.querySelector(i[s]) || t;
  return t;
}
function c1(n) {
  let e = n.querySelectorAll(je ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let t = 0; t < e.length; t++) {
    let r = e[t];
    r.childNodes.length == 1 && r.textContent == " " && r.parentNode && r.parentNode.replaceChild(n.ownerDocument.createTextNode(" "), r);
  }
}
function u1(n, e) {
  if (!n.size)
    return n;
  let t = n.content.firstChild.type.schema, r;
  try {
    r = JSON.parse(e);
  } catch {
    return n;
  }
  let { content: i, openStart: s, openEnd: o } = n;
  for (let a = r.length - 2; a >= 0; a -= 2) {
    let l = t.nodes[r[a]];
    if (!l || l.hasRequiredAttrs())
      break;
    i = R.from(l.create(r[a + 1], i)), s++, o++;
  }
  return new F(i, s, o);
}
const rt = {}, it = {}, d1 = { touchstart: !0, touchmove: !0 };
class f1 {
  constructor() {
    this.shiftKey = !1, this.mouseDown = null, this.lastKeyCode = null, this.lastKeyCodeTime = 0, this.lastClick = { time: 0, x: 0, y: 0, type: "" }, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastIOSEnter = 0, this.lastIOSEnterFallbackTimeout = -1, this.lastFocus = 0, this.lastTouch = 0, this.lastAndroidDelete = 0, this.composing = !1, this.composingTimeout = -1, this.compositionNodes = [], this.compositionEndedAt = -2e8, this.compositionID = 1, this.compositionPendingChanges = 0, this.domChangeCount = 0, this.eventHandlers = /* @__PURE__ */ Object.create(null), this.hideSelectionGuard = null;
  }
}
function p1(n) {
  for (let e in rt) {
    let t = rt[e];
    n.dom.addEventListener(e, n.input.eventHandlers[e] = (r) => {
      g1(n, r) && !rc(n, r) && (n.editable || !(r.type in it)) && t(n, r);
    }, d1[e] ? { passive: !0 } : void 0);
  }
  nt && n.dom.addEventListener("input", () => null), wl(n);
}
function En(n, e) {
  n.input.lastSelectionOrigin = e, n.input.lastSelectionTime = Date.now();
}
function h1(n) {
  n.domObserver.stop();
  for (let e in n.input.eventHandlers)
    n.dom.removeEventListener(e, n.input.eventHandlers[e]);
  clearTimeout(n.input.composingTimeout), clearTimeout(n.input.lastIOSEnterFallbackTimeout);
}
function wl(n) {
  n.someProp("handleDOMEvents", (e) => {
    for (let t in e)
      n.input.eventHandlers[t] || n.dom.addEventListener(t, n.input.eventHandlers[t] = (r) => rc(n, r));
  });
}
function rc(n, e) {
  return n.someProp("handleDOMEvents", (t) => {
    let r = t[e.type];
    return r ? r(n, e) || e.defaultPrevented : !1;
  });
}
function g1(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target; t != n.dom; t = t.parentNode)
    if (!t || t.nodeType == 11 || t.pmViewDesc && t.pmViewDesc.stopEvent(e))
      return !1;
  return !0;
}
function m1(n, e) {
  !rc(n, e) && rt[e.type] && (n.editable || !(e.type in it)) && rt[e.type](n, e);
}
it.keydown = (n, e) => {
  let t = e;
  if (n.input.shiftKey = t.keyCode == 16 || t.shiftKey, !zh(n, t) && (n.input.lastKeyCode = t.keyCode, n.input.lastKeyCodeTime = Date.now(), !(Ot && je && t.keyCode == 13)))
    if (t.keyCode != 229 && n.domObserver.forceFlush(), zr && t.keyCode == 13 && !t.ctrlKey && !t.altKey && !t.metaKey) {
      let r = Date.now();
      n.input.lastIOSEnter = r, n.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
        n.input.lastIOSEnter == r && (n.someProp("handleKeyDown", (i) => i(n, Fn(13, "Enter"))), n.input.lastIOSEnter = 0);
      }, 200);
    } else
      n.someProp("handleKeyDown", (r) => r(n, t)) || s1(n, t) ? t.preventDefault() : En(n, "key");
};
it.keyup = (n, e) => {
  e.keyCode == 16 && (n.input.shiftKey = !1);
};
it.keypress = (n, e) => {
  let t = e;
  if (zh(n, t) || !t.charCode || t.ctrlKey && !t.altKey || Et && t.metaKey)
    return;
  if (n.someProp("handleKeyPress", (i) => i(n, t))) {
    t.preventDefault();
    return;
  }
  let r = n.state.selection;
  if (!(r instanceof X) || !r.$from.sameParent(r.$to)) {
    let i = String.fromCharCode(t.charCode);
    !/[\r\n]/.test(i) && !n.someProp("handleTextInput", (s) => s(n, r.$from.pos, r.$to.pos, i)) && n.dispatch(n.state.tr.insertText(i).scrollIntoView()), t.preventDefault();
  }
};
function To(n) {
  return { left: n.clientX, top: n.clientY };
}
function b1(n, e) {
  let t = e.x - n.clientX, r = e.y - n.clientY;
  return t * t + r * r < 100;
}
function ic(n, e, t, r, i) {
  if (r == -1)
    return !1;
  let s = n.state.doc.resolve(r);
  for (let o = s.depth + 1; o > 0; o--)
    if (n.someProp(e, (a) => o > s.depth ? a(n, t, s.nodeAfter, s.before(o), i, !0) : a(n, t, s.node(o), s.before(o), i, !1)))
      return !0;
  return !1;
}
function Hr(n, e, t) {
  n.focused || n.focus();
  let r = n.state.tr.setSelection(e);
  t == "pointer" && r.setMeta("pointer", !0), n.dispatch(r);
}
function y1(n, e) {
  if (e == -1)
    return !1;
  let t = n.state.doc.resolve(e), r = t.nodeAfter;
  return r && r.isAtom && Q.isSelectable(r) ? (Hr(n, new Q(t), "pointer"), !0) : !1;
}
function v1(n, e) {
  if (e == -1)
    return !1;
  let t = n.state.selection, r, i;
  t instanceof Q && (r = t.node);
  let s = n.state.doc.resolve(e);
  for (let o = s.depth + 1; o > 0; o--) {
    let a = o > s.depth ? s.nodeAfter : s.node(o);
    if (Q.isSelectable(a)) {
      r && t.$from.depth > 0 && o >= t.$from.depth && s.before(t.$from.depth + 1) == t.$from.pos ? i = s.before(t.$from.depth) : i = s.before(o);
      break;
    }
  }
  return i != null ? (Hr(n, Q.create(n.state.doc, i), "pointer"), !0) : !1;
}
function w1(n, e, t, r, i) {
  return ic(n, "handleClickOn", e, t, r) || n.someProp("handleClick", (s) => s(n, e, r)) || (i ? v1(n, t) : y1(n, t));
}
function k1(n, e, t, r) {
  return ic(n, "handleDoubleClickOn", e, t, r) || n.someProp("handleDoubleClick", (i) => i(n, e, r));
}
function E1(n, e, t, r) {
  return ic(n, "handleTripleClickOn", e, t, r) || n.someProp("handleTripleClick", (i) => i(n, e, r)) || x1(n, t, r);
}
function x1(n, e, t) {
  if (t.button != 0)
    return !1;
  let r = n.state.doc;
  if (e == -1)
    return r.inlineContent ? (Hr(n, X.create(r, 0, r.content.size), "pointer"), !0) : !1;
  let i = r.resolve(e);
  for (let s = i.depth + 1; s > 0; s--) {
    let o = s > i.depth ? i.nodeAfter : i.node(s), a = i.before(s);
    if (o.inlineContent)
      Hr(n, X.create(r, a + 1, a + 1 + o.content.size), "pointer");
    else if (Q.isSelectable(o))
      Hr(n, Q.create(r, a), "pointer");
    else
      continue;
    return !0;
  }
}
function sc(n) {
  return Vs(n);
}
const Fh = Et ? "metaKey" : "ctrlKey";
rt.mousedown = (n, e) => {
  let t = e;
  n.input.shiftKey = t.shiftKey;
  let r = sc(n), i = Date.now(), s = "singleClick";
  i - n.input.lastClick.time < 500 && b1(t, n.input.lastClick) && !t[Fh] && (n.input.lastClick.type == "singleClick" ? s = "doubleClick" : n.input.lastClick.type == "doubleClick" && (s = "tripleClick")), n.input.lastClick = { time: i, x: t.clientX, y: t.clientY, type: s };
  let o = n.posAtCoords(To(t));
  o && (s == "singleClick" ? (n.input.mouseDown && n.input.mouseDown.done(), n.input.mouseDown = new C1(n, o, t, !!r)) : (s == "doubleClick" ? k1 : E1)(n, o.pos, o.inside, t) ? t.preventDefault() : En(n, "pointer"));
};
class C1 {
  constructor(e, t, r, i) {
    this.view = e, this.pos = t, this.event = r, this.flushed = i, this.delayedSelectionSync = !1, this.mightDrag = null, this.startDoc = e.state.doc, this.selectNode = !!r[Fh], this.allowDefault = r.shiftKey;
    let s, o;
    if (t.inside > -1)
      s = e.state.doc.nodeAt(t.inside), o = t.inside;
    else {
      let u = e.state.doc.resolve(t.pos);
      s = u.parent, o = u.depth ? u.before() : 0;
    }
    const a = i ? null : r.target, l = a ? e.docView.nearestDesc(a, !0) : null;
    this.target = l ? l.dom : null;
    let { selection: c } = e.state;
    (r.button == 0 && s.type.spec.draggable && s.type.spec.selectable !== !1 || c instanceof Q && c.from <= o && c.to > o) && (this.mightDrag = {
      node: s,
      pos: o,
      addAttr: !!(this.target && !this.target.draggable),
      setUneditable: !!(this.target && Rt && !this.target.hasAttribute("contentEditable"))
    }), this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable) && (this.view.domObserver.stop(), this.mightDrag.addAttr && (this.target.draggable = !0), this.mightDrag.setUneditable && setTimeout(() => {
      this.view.input.mouseDown == this && this.target.setAttribute("contentEditable", "false");
    }, 20), this.view.domObserver.start()), e.root.addEventListener("mouseup", this.up = this.up.bind(this)), e.root.addEventListener("mousemove", this.move = this.move.bind(this)), En(e, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up), this.view.root.removeEventListener("mousemove", this.move), this.mightDrag && this.target && (this.view.domObserver.stop(), this.mightDrag.addAttr && this.target.removeAttribute("draggable"), this.mightDrag.setUneditable && this.target.removeAttribute("contentEditable"), this.view.domObserver.start()), this.delayedSelectionSync && setTimeout(() => ln(this.view)), this.view.input.mouseDown = null;
  }
  up(e) {
    if (this.done(), !this.view.dom.contains(e.target))
      return;
    let t = this.pos;
    this.view.state.doc != this.startDoc && (t = this.view.posAtCoords(To(e))), this.updateAllowDefault(e), this.allowDefault || !t ? En(this.view, "pointer") : w1(this.view, t.pos, t.inside, e, this.selectNode) ? e.preventDefault() : e.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    nt && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    je && !this.view.state.selection.visible && Math.min(Math.abs(t.pos - this.view.state.selection.from), Math.abs(t.pos - this.view.state.selection.to)) <= 2) ? (Hr(this.view, ne.near(this.view.state.doc.resolve(t.pos)), "pointer"), e.preventDefault()) : En(this.view, "pointer");
  }
  move(e) {
    this.updateAllowDefault(e), En(this.view, "pointer"), e.buttons == 0 && this.done();
  }
  updateAllowDefault(e) {
    !this.allowDefault && (Math.abs(this.event.x - e.clientX) > 4 || Math.abs(this.event.y - e.clientY) > 4) && (this.allowDefault = !0);
  }
}
rt.touchstart = (n) => {
  n.input.lastTouch = Date.now(), sc(n), En(n, "pointer");
};
rt.touchmove = (n) => {
  n.input.lastTouch = Date.now(), En(n, "pointer");
};
rt.contextmenu = (n) => sc(n);
function zh(n, e) {
  return n.composing ? !0 : nt && Math.abs(e.timeStamp - n.input.compositionEndedAt) < 500 ? (n.input.compositionEndedAt = -2e8, !0) : !1;
}
const S1 = Ot ? 5e3 : -1;
it.compositionstart = it.compositionupdate = (n) => {
  if (!n.composing) {
    n.domObserver.flush();
    let { state: e } = n, t = e.selection.$from;
    if (e.selection.empty && (e.storedMarks || !t.textOffset && t.parentOffset && t.nodeBefore.marks.some((r) => r.type.spec.inclusive === !1)))
      n.markCursor = n.state.storedMarks || t.marks(), Vs(n, !0), n.markCursor = null;
    else if (Vs(n), Rt && e.selection.empty && t.parentOffset && !t.textOffset && t.nodeBefore.marks.length) {
      let r = n.domSelectionRange();
      for (let i = r.focusNode, s = r.focusOffset; i && i.nodeType == 1 && s != 0; ) {
        let o = s < 0 ? i.lastChild : i.childNodes[s - 1];
        if (!o)
          break;
        if (o.nodeType == 3) {
          n.domSelection().collapse(o, o.nodeValue.length);
          break;
        } else
          i = o, s = -1;
      }
    }
    n.input.composing = !0;
  }
  Vh(n, S1);
};
it.compositionend = (n, e) => {
  n.composing && (n.input.composing = !1, n.input.compositionEndedAt = e.timeStamp, n.input.compositionPendingChanges = n.domObserver.pendingRecords().length ? n.input.compositionID : 0, n.input.compositionPendingChanges && Promise.resolve().then(() => n.domObserver.flush()), n.input.compositionID++, Vh(n, 20));
};
function Vh(n, e) {
  clearTimeout(n.input.composingTimeout), e > -1 && (n.input.composingTimeout = setTimeout(() => Vs(n), e));
}
function qh(n) {
  for (n.composing && (n.input.composing = !1, n.input.compositionEndedAt = _1()); n.input.compositionNodes.length > 0; )
    n.input.compositionNodes.pop().markParentsDirty();
}
function _1() {
  let n = document.createEvent("Event");
  return n.initEvent("event", !0, !0), n.timeStamp;
}
function Vs(n, e = !1) {
  if (!(Ot && n.domObserver.flushingSoon >= 0)) {
    if (n.domObserver.forceFlush(), qh(n), e || n.docView && n.docView.dirty) {
      let t = tc(n);
      return t && !t.eq(n.state.selection) ? n.dispatch(n.state.tr.setSelection(t)) : n.updateState(n.state), !0;
    }
    return !1;
  }
}
function M1(n, e) {
  if (!n.dom.parentNode)
    return;
  let t = n.dom.parentNode.appendChild(document.createElement("div"));
  t.appendChild(e), t.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let r = getSelection(), i = document.createRange();
  i.selectNodeContents(e), n.dom.blur(), r.removeAllRanges(), r.addRange(i), setTimeout(() => {
    t.parentNode && t.parentNode.removeChild(t), n.focus();
  }, 50);
}
const Ai = ct && _n < 15 || zr && C0 < 604;
rt.copy = it.cut = (n, e) => {
  let t = e, r = n.state.selection, i = t.type == "cut";
  if (r.empty)
    return;
  let s = Ai ? null : t.clipboardData, o = r.content(), { dom: a, text: l } = Rh(n, o);
  s ? (t.preventDefault(), s.clearData(), s.setData("text/html", a.innerHTML), s.setData("text/plain", l)) : M1(n, a), i && n.dispatch(n.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function A1(n) {
  return n.openStart == 0 && n.openEnd == 0 && n.content.childCount == 1 ? n.content.firstChild : null;
}
function T1(n, e) {
  if (!n.dom.parentNode)
    return;
  let t = n.input.shiftKey || n.state.selection.$from.parent.type.spec.code, r = n.dom.parentNode.appendChild(document.createElement(t ? "textarea" : "div"));
  t || (r.contentEditable = "true"), r.style.cssText = "position: fixed; left: -10000px; top: 10px", r.focus();
  let i = n.input.shiftKey && n.input.lastKeyCode != 45;
  setTimeout(() => {
    n.focus(), r.parentNode && r.parentNode.removeChild(r), t ? Ti(n, r.value, null, i, e) : Ti(n, r.textContent, r.innerHTML, i, e);
  }, 50);
}
function Ti(n, e, t, r, i) {
  let s = Dh(n, e, t, r, n.state.selection.$from);
  if (n.someProp("handlePaste", (l) => l(n, i, s || F.empty)))
    return !0;
  if (!s)
    return !1;
  let o = A1(s), a = o ? n.state.tr.replaceSelectionWith(o, r) : n.state.tr.replaceSelection(s);
  return n.dispatch(a.scrollIntoView().setMeta("paste", !0).setMeta("uiEvent", "paste")), !0;
}
function Uh(n) {
  let e = n.getData("text/plain") || n.getData("Text");
  if (e)
    return e;
  let t = n.getData("text/uri-list");
  return t ? t.replace(/\r?\n/g, " ") : "";
}
it.paste = (n, e) => {
  let t = e;
  if (n.composing && !Ot)
    return;
  let r = Ai ? null : t.clipboardData, i = n.input.shiftKey && n.input.lastKeyCode != 45;
  r && Ti(n, Uh(r), r.getData("text/html"), i, t) ? t.preventDefault() : T1(n, t);
};
class Kh {
  constructor(e, t, r) {
    this.slice = e, this.move = t, this.node = r;
  }
}
const Wh = Et ? "altKey" : "ctrlKey";
rt.dragstart = (n, e) => {
  let t = e, r = n.input.mouseDown;
  if (r && r.done(), !t.dataTransfer)
    return;
  let i = n.state.selection, s = i.empty ? null : n.posAtCoords(To(t)), o;
  if (!(s && s.pos >= i.from && s.pos <= (i instanceof Q ? i.to - 1 : i.to))) {
    if (r && r.mightDrag)
      o = Q.create(n.state.doc, r.mightDrag.pos);
    else if (t.target && t.target.nodeType == 1) {
      let u = n.docView.nearestDesc(t.target, !0);
      u && u.node.type.spec.draggable && u != n.docView && (o = Q.create(n.state.doc, u.posBefore));
    }
  }
  let a = (o || n.state.selection).content(), { dom: l, text: c } = Rh(n, a);
  t.dataTransfer.clearData(), t.dataTransfer.setData(Ai ? "Text" : "text/html", l.innerHTML), t.dataTransfer.effectAllowed = "copyMove", Ai || t.dataTransfer.setData("text/plain", c), n.dragging = new Kh(a, !t[Wh], o);
};
rt.dragend = (n) => {
  let e = n.dragging;
  window.setTimeout(() => {
    n.dragging == e && (n.dragging = null);
  }, 50);
};
it.dragover = it.dragenter = (n, e) => e.preventDefault();
it.drop = (n, e) => {
  let t = e, r = n.dragging;
  if (n.dragging = null, !t.dataTransfer)
    return;
  let i = n.posAtCoords(To(t));
  if (!i)
    return;
  let s = n.state.doc.resolve(i.pos), o = r && r.slice;
  o ? n.someProp("transformPasted", (h) => {
    o = h(o, n);
  }) : o = Dh(n, Uh(t.dataTransfer), Ai ? null : t.dataTransfer.getData("text/html"), !1, s);
  let a = !!(r && !t[Wh]);
  if (n.someProp("handleDrop", (h) => h(n, t, o || F.empty, a))) {
    t.preventDefault();
    return;
  }
  if (!o)
    return;
  t.preventDefault();
  let l = o ? ch(n.state.doc, s.pos, o) : s.pos;
  l == null && (l = s.pos);
  let c = n.state.tr;
  if (a) {
    let { node: h } = r;
    h ? h.replace(c) : c.deleteSelection();
  }
  let u = c.mapping.map(l), d = o.openStart == 0 && o.openEnd == 0 && o.content.childCount == 1, f = c.doc;
  if (d ? c.replaceRangeWith(u, u, o.content.firstChild) : c.replaceRange(u, u, o), c.doc.eq(f))
    return;
  let p = c.doc.resolve(u);
  if (d && Q.isSelectable(o.content.firstChild) && p.nodeAfter && p.nodeAfter.sameMarkup(o.content.firstChild))
    c.setSelection(new Q(p));
  else {
    let h = c.mapping.map(l);
    c.mapping.maps[c.mapping.maps.length - 1].forEach((g, m, v, y) => h = y), c.setSelection(nc(n, p, c.doc.resolve(h)));
  }
  n.focus(), n.dispatch(c.setMeta("uiEvent", "drop"));
};
rt.focus = (n) => {
  n.input.lastFocus = Date.now(), n.focused || (n.domObserver.stop(), n.dom.classList.add("ProseMirror-focused"), n.domObserver.start(), n.focused = !0, setTimeout(() => {
    n.docView && n.hasFocus() && !n.domObserver.currentSelection.eq(n.domSelectionRange()) && ln(n);
  }, 20));
};
rt.blur = (n, e) => {
  let t = e;
  n.focused && (n.domObserver.stop(), n.dom.classList.remove("ProseMirror-focused"), n.domObserver.start(), t.relatedTarget && n.dom.contains(t.relatedTarget) && n.domObserver.currentSelection.clear(), n.focused = !1);
};
rt.beforeinput = (n, e) => {
  if (je && Ot && e.inputType == "deleteContentBackward") {
    n.domObserver.flushSoon();
    let { domChangeCount: r } = n.input;
    setTimeout(() => {
      if (n.input.domChangeCount != r || (n.dom.blur(), n.focus(), n.someProp("handleKeyDown", (s) => s(n, Fn(8, "Backspace")))))
        return;
      let { $cursor: i } = n.state.selection;
      i && i.pos > 0 && n.dispatch(n.state.tr.delete(i.pos - 1, i.pos).scrollIntoView());
    }, 50);
  }
};
for (let n in it)
  rt[n] = it[n];
function Ni(n, e) {
  if (n == e)
    return !0;
  for (let t in n)
    if (n[t] !== e[t])
      return !1;
  for (let t in e)
    if (!(t in n))
      return !1;
  return !0;
}
class qs {
  constructor(e, t) {
    this.toDOM = e, this.spec = t || Jn, this.side = this.spec.side || 0;
  }
  map(e, t, r, i) {
    let { pos: s, deleted: o } = e.mapResult(t.from + i, this.side < 0 ? -1 : 1);
    return o ? null : new Be(s - r, s - r, this);
  }
  valid() {
    return !0;
  }
  eq(e) {
    return this == e || e instanceof qs && (this.spec.key && this.spec.key == e.spec.key || this.toDOM == e.toDOM && Ni(this.spec, e.spec));
  }
  destroy(e) {
    this.spec.destroy && this.spec.destroy(e);
  }
}
class An {
  constructor(e, t) {
    this.attrs = e, this.spec = t || Jn;
  }
  map(e, t, r, i) {
    let s = e.map(t.from + i, this.spec.inclusiveStart ? -1 : 1) - r, o = e.map(t.to + i, this.spec.inclusiveEnd ? 1 : -1) - r;
    return s >= o ? null : new Be(s, o, this);
  }
  valid(e, t) {
    return t.from < t.to;
  }
  eq(e) {
    return this == e || e instanceof An && Ni(this.attrs, e.attrs) && Ni(this.spec, e.spec);
  }
  static is(e) {
    return e.type instanceof An;
  }
  destroy() {
  }
}
class oc {
  constructor(e, t) {
    this.attrs = e, this.spec = t || Jn;
  }
  map(e, t, r, i) {
    let s = e.mapResult(t.from + i, 1);
    if (s.deleted)
      return null;
    let o = e.mapResult(t.to + i, -1);
    return o.deleted || o.pos <= s.pos ? null : new Be(s.pos - r, o.pos - r, this);
  }
  valid(e, t) {
    let { index: r, offset: i } = e.content.findIndex(t.from), s;
    return i == t.from && !(s = e.child(r)).isText && i + s.nodeSize == t.to;
  }
  eq(e) {
    return this == e || e instanceof oc && Ni(this.attrs, e.attrs) && Ni(this.spec, e.spec);
  }
  destroy() {
  }
}
class Be {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.from = e, this.to = t, this.type = r;
  }
  /**
  @internal
  */
  copy(e, t) {
    return new Be(e, t, this.type);
  }
  /**
  @internal
  */
  eq(e, t = 0) {
    return this.type.eq(e.type) && this.from + t == e.from && this.to + t == e.to;
  }
  /**
  @internal
  */
  map(e, t, r) {
    return this.type.map(e, this, t, r);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(e, t, r) {
    return new Be(e, e, new qs(t, r));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(e, t, r, i) {
    return new Be(e, t, new An(r, i));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(e, t, r, i) {
    return new Be(e, t, new oc(r, i));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof An;
  }
  /**
  @internal
  */
  get widget() {
    return this.type instanceof qs;
  }
}
const Cr = [], Jn = {};
class ke {
  /**
  @internal
  */
  constructor(e, t) {
    this.local = e.length ? e : Cr, this.children = t.length ? t : Cr;
  }
  /**
  Create a set of decorations, using the structure of the given
  document. This will consume (modify) the `decorations` array, so
  you must make a copy if you want need to preserve that.
  */
  static create(e, t) {
    return t.length ? Us(t, e, 0, Jn) : Ze;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(e, t, r) {
    let i = [];
    return this.findInner(e ?? 0, t ?? 1e9, i, 0, r), i;
  }
  findInner(e, t, r, i, s) {
    for (let o = 0; o < this.local.length; o++) {
      let a = this.local[o];
      a.from <= t && a.to >= e && (!s || s(a.spec)) && r.push(a.copy(a.from + i, a.to + i));
    }
    for (let o = 0; o < this.children.length; o += 3)
      if (this.children[o] < t && this.children[o + 1] > e) {
        let a = this.children[o] + 1;
        this.children[o + 2].findInner(e - a, t - a, r, i + a, s);
      }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(e, t, r) {
    return this == Ze || e.maps.length == 0 ? this : this.mapInner(e, t, 0, 0, r || Jn);
  }
  /**
  @internal
  */
  mapInner(e, t, r, i, s) {
    let o;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a].map(e, r, i);
      l && l.type.valid(t, l) ? (o || (o = [])).push(l) : s.onRemove && s.onRemove(this.local[a].spec);
    }
    return this.children.length ? N1(this.children, o || [], e, t, r, i, s) : o ? new ke(o.sort(Yn), Cr) : Ze;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Consumes the `decorations` array. Needs
  access to the current document to create the appropriate tree
  structure.
  */
  add(e, t) {
    return t.length ? this == Ze ? ke.create(e, t) : this.addInner(e, t, 0) : this;
  }
  addInner(e, t, r) {
    let i, s = 0;
    e.forEach((a, l) => {
      let c = l + r, u;
      if (u = Zh(t, a, c)) {
        for (i || (i = this.children.slice()); s < i.length && i[s] < l; )
          s += 3;
        i[s] == l ? i[s + 2] = i[s + 2].addInner(a, u, c + 1) : i.splice(s, 0, l, l + a.nodeSize, Us(u, a, c + 1, Jn)), s += 3;
      }
    });
    let o = Gh(s ? jh(t) : t, -r);
    for (let a = 0; a < o.length; a++)
      o[a].type.valid(e, o[a]) || o.splice(a--, 1);
    return new ke(o.length ? this.local.concat(o).sort(Yn) : this.local, i || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(e) {
    return e.length == 0 || this == Ze ? this : this.removeInner(e, 0);
  }
  removeInner(e, t) {
    let r = this.children, i = this.local;
    for (let s = 0; s < r.length; s += 3) {
      let o, a = r[s] + t, l = r[s + 1] + t;
      for (let u = 0, d; u < e.length; u++)
        (d = e[u]) && d.from > a && d.to < l && (e[u] = null, (o || (o = [])).push(d));
      if (!o)
        continue;
      r == this.children && (r = this.children.slice());
      let c = r[s + 2].removeInner(o, a + 1);
      c != Ze ? r[s + 2] = c : (r.splice(s, 3), s -= 3);
    }
    if (i.length) {
      for (let s = 0, o; s < e.length; s++)
        if (o = e[s])
          for (let a = 0; a < i.length; a++)
            i[a].eq(o, t) && (i == this.local && (i = this.local.slice()), i.splice(a--, 1));
    }
    return r == this.children && i == this.local ? this : i.length || r.length ? new ke(i, r) : Ze;
  }
  /**
  @internal
  */
  forChild(e, t) {
    if (this == Ze)
      return this;
    if (t.isLeaf)
      return ke.empty;
    let r, i;
    for (let a = 0; a < this.children.length; a += 3)
      if (this.children[a] >= e) {
        this.children[a] == e && (r = this.children[a + 2]);
        break;
      }
    let s = e + 1, o = s + t.content.size;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a];
      if (l.from < o && l.to > s && l.type instanceof An) {
        let c = Math.max(s, l.from) - s, u = Math.min(o, l.to) - s;
        c < u && (i || (i = [])).push(l.copy(c, u));
      }
    }
    if (i) {
      let a = new ke(i.sort(Yn), Cr);
      return r ? new bn([a, r]) : a;
    }
    return r || Ze;
  }
  /**
  @internal
  */
  eq(e) {
    if (this == e)
      return !0;
    if (!(e instanceof ke) || this.local.length != e.local.length || this.children.length != e.children.length)
      return !1;
    for (let t = 0; t < this.local.length; t++)
      if (!this.local[t].eq(e.local[t]))
        return !1;
    for (let t = 0; t < this.children.length; t += 3)
      if (this.children[t] != e.children[t] || this.children[t + 1] != e.children[t + 1] || !this.children[t + 2].eq(e.children[t + 2]))
        return !1;
    return !0;
  }
  /**
  @internal
  */
  locals(e) {
    return ac(this.localsInner(e));
  }
  /**
  @internal
  */
  localsInner(e) {
    if (this == Ze)
      return Cr;
    if (e.inlineContent || !this.local.some(An.is))
      return this.local;
    let t = [];
    for (let r = 0; r < this.local.length; r++)
      this.local[r].type instanceof An || t.push(this.local[r]);
    return t;
  }
}
ke.empty = new ke([], []);
ke.removeOverlap = ac;
const Ze = ke.empty;
class bn {
  constructor(e) {
    this.members = e;
  }
  map(e, t) {
    const r = this.members.map((i) => i.map(e, t, Jn));
    return bn.from(r);
  }
  forChild(e, t) {
    if (t.isLeaf)
      return ke.empty;
    let r = [];
    for (let i = 0; i < this.members.length; i++) {
      let s = this.members[i].forChild(e, t);
      s != Ze && (s instanceof bn ? r = r.concat(s.members) : r.push(s));
    }
    return bn.from(r);
  }
  eq(e) {
    if (!(e instanceof bn) || e.members.length != this.members.length)
      return !1;
    for (let t = 0; t < this.members.length; t++)
      if (!this.members[t].eq(e.members[t]))
        return !1;
    return !0;
  }
  locals(e) {
    let t, r = !0;
    for (let i = 0; i < this.members.length; i++) {
      let s = this.members[i].localsInner(e);
      if (s.length)
        if (!t)
          t = s;
        else {
          r && (t = t.slice(), r = !1);
          for (let o = 0; o < s.length; o++)
            t.push(s[o]);
        }
    }
    return t ? ac(r ? t : t.sort(Yn)) : Cr;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(e) {
    switch (e.length) {
      case 0:
        return Ze;
      case 1:
        return e[0];
      default:
        return new bn(e.every((t) => t instanceof ke) ? e : e.reduce((t, r) => t.concat(r instanceof ke ? r : r.members), []));
    }
  }
}
function N1(n, e, t, r, i, s, o) {
  let a = n.slice();
  for (let c = 0, u = s; c < t.maps.length; c++) {
    let d = 0;
    t.maps[c].forEach((f, p, h, g) => {
      let m = g - h - (p - f);
      for (let v = 0; v < a.length; v += 3) {
        let y = a[v + 1];
        if (y < 0 || f > y + u - d)
          continue;
        let k = a[v] + u - d;
        p >= k ? a[v + 1] = f <= k ? -2 : -1 : h >= i && m && (a[v] += m, a[v + 1] += m);
      }
      d += m;
    }), u = t.maps[c].map(u, -1);
  }
  let l = !1;
  for (let c = 0; c < a.length; c += 3)
    if (a[c + 1] < 0) {
      if (a[c + 1] == -2) {
        l = !0, a[c + 1] = -1;
        continue;
      }
      let u = t.map(n[c] + s), d = u - i;
      if (d < 0 || d >= r.content.size) {
        l = !0;
        continue;
      }
      let f = t.map(n[c + 1] + s, -1), p = f - i, { index: h, offset: g } = r.content.findIndex(d), m = r.maybeChild(h);
      if (m && g == d && g + m.nodeSize == p) {
        let v = a[c + 2].mapInner(t, m, u + 1, n[c] + s + 1, o);
        v != Ze ? (a[c] = d, a[c + 1] = p, a[c + 2] = v) : (a[c + 1] = -2, l = !0);
      } else
        l = !0;
    }
  if (l) {
    let c = O1(a, n, e, t, i, s, o), u = Us(c, r, 0, o);
    e = u.local;
    for (let d = 0; d < a.length; d += 3)
      a[d + 1] < 0 && (a.splice(d, 3), d -= 3);
    for (let d = 0, f = 0; d < u.children.length; d += 3) {
      let p = u.children[d];
      for (; f < a.length && a[f] < p; )
        f += 3;
      a.splice(f, 0, u.children[d], u.children[d + 1], u.children[d + 2]);
    }
  }
  return new ke(e.sort(Yn), a);
}
function Gh(n, e) {
  if (!e || !n.length)
    return n;
  let t = [];
  for (let r = 0; r < n.length; r++) {
    let i = n[r];
    t.push(new Be(i.from + e, i.to + e, i.type));
  }
  return t;
}
function O1(n, e, t, r, i, s, o) {
  function a(l, c) {
    for (let u = 0; u < l.local.length; u++) {
      let d = l.local[u].map(r, i, c);
      d ? t.push(d) : o.onRemove && o.onRemove(l.local[u].spec);
    }
    for (let u = 0; u < l.children.length; u += 3)
      a(l.children[u + 2], l.children[u] + c + 1);
  }
  for (let l = 0; l < n.length; l += 3)
    n[l + 1] == -1 && a(n[l + 2], e[l] + s + 1);
  return t;
}
function Zh(n, e, t) {
  if (e.isLeaf)
    return null;
  let r = t + e.nodeSize, i = null;
  for (let s = 0, o; s < n.length; s++)
    (o = n[s]) && o.from > t && o.to < r && ((i || (i = [])).push(o), n[s] = null);
  return i;
}
function jh(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    n[t] != null && e.push(n[t]);
  return e;
}
function Us(n, e, t, r) {
  let i = [], s = !1;
  e.forEach((a, l) => {
    let c = Zh(n, a, l + t);
    if (c) {
      s = !0;
      let u = Us(c, a, t + l + 1, r);
      u != Ze && i.push(l, l + a.nodeSize, u);
    }
  });
  let o = Gh(s ? jh(n) : n, -t).sort(Yn);
  for (let a = 0; a < o.length; a++)
    o[a].type.valid(e, o[a]) || (r.onRemove && r.onRemove(o[a].spec), o.splice(a--, 1));
  return o.length || i.length ? new ke(o, i) : Ze;
}
function Yn(n, e) {
  return n.from - e.from || n.to - e.to;
}
function ac(n) {
  let e = n;
  for (let t = 0; t < e.length - 1; t++) {
    let r = e[t];
    if (r.from != r.to)
      for (let i = t + 1; i < e.length; i++) {
        let s = e[i];
        if (s.from == r.from) {
          s.to != r.to && (e == n && (e = n.slice()), e[i] = s.copy(s.from, r.to), Ju(e, i + 1, s.copy(r.to, s.to)));
          continue;
        } else {
          s.from < r.to && (e == n && (e = n.slice()), e[t] = r.copy(r.from, s.from), Ju(e, i, r.copy(s.from, r.to)));
          break;
        }
      }
  }
  return e;
}
function Ju(n, e, t) {
  for (; e < n.length && Yn(t, n[e]) > 0; )
    e++;
  n.splice(e, 0, t);
}
function ha(n) {
  let e = [];
  return n.someProp("decorations", (t) => {
    let r = t(n.state);
    r && r != Ze && e.push(r);
  }), n.cursorWrapper && e.push(ke.create(n.state.doc, [n.cursorWrapper.deco])), bn.from(e);
}
const L1 = {
  childList: !0,
  characterData: !0,
  characterDataOldValue: !0,
  attributes: !0,
  attributeOldValue: !0,
  subtree: !0
}, R1 = ct && _n <= 11;
class D1 {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  set(e) {
    this.anchorNode = e.anchorNode, this.anchorOffset = e.anchorOffset, this.focusNode = e.focusNode, this.focusOffset = e.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(e) {
    return e.anchorNode == this.anchorNode && e.anchorOffset == this.anchorOffset && e.focusNode == this.focusNode && e.focusOffset == this.focusOffset;
  }
}
class I1 {
  constructor(e, t) {
    this.view = e, this.handleDOMChange = t, this.queue = [], this.flushingSoon = -1, this.observer = null, this.currentSelection = new D1(), this.onCharData = null, this.suppressingSelectionUpdates = !1, this.observer = window.MutationObserver && new window.MutationObserver((r) => {
      for (let i = 0; i < r.length; i++)
        this.queue.push(r[i]);
      ct && _n <= 11 && r.some((i) => i.type == "childList" && i.removedNodes.length || i.type == "characterData" && i.oldValue.length > i.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), R1 && (this.onCharData = (r) => {
      this.queue.push({ target: r.target, type: "characterData", oldValue: r.prevValue }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    this.flushingSoon < 0 && (this.flushingSoon = window.setTimeout(() => {
      this.flushingSoon = -1, this.flush();
    }, 20));
  }
  forceFlush() {
    this.flushingSoon > -1 && (window.clearTimeout(this.flushingSoon), this.flushingSoon = -1, this.flush());
  }
  start() {
    this.observer && (this.observer.takeRecords(), this.observer.observe(this.view.dom, L1)), this.onCharData && this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let e = this.observer.takeRecords();
      if (e.length) {
        for (let t = 0; t < e.length; t++)
          this.queue.push(e[t]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    this.onCharData && this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData), this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = !0, setTimeout(() => this.suppressingSelectionUpdates = !1, 50);
  }
  onSelectionChange() {
    if (Vu(this.view)) {
      if (this.suppressingSelectionUpdates)
        return ln(this.view);
      if (ct && _n <= 11 && !this.view.state.selection.empty) {
        let e = this.view.domSelectionRange();
        if (e.focusNode && nr(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset))
          return this.flushSoon();
      }
      this.flush();
    }
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(e) {
    if (!e.focusNode)
      return !0;
    let t = /* @__PURE__ */ new Set(), r;
    for (let s = e.focusNode; s; s = Mi(s))
      t.add(s);
    for (let s = e.anchorNode; s; s = Mi(s))
      if (t.has(s)) {
        r = s;
        break;
      }
    let i = r && this.view.docView.nearestDesc(r);
    if (i && i.ignoreMutation({
      type: "selection",
      target: r.nodeType == 3 ? r.parentNode : r
    }))
      return this.setCurSelection(), !0;
  }
  pendingRecords() {
    if (this.observer)
      for (let e of this.observer.takeRecords())
        this.queue.push(e);
    return this.queue;
  }
  flush() {
    let { view: e } = this;
    if (!e.docView || this.flushingSoon > -1)
      return;
    let t = this.pendingRecords();
    t.length && (this.queue = []);
    let r = e.domSelectionRange(), i = !this.suppressingSelectionUpdates && !this.currentSelection.eq(r) && Vu(e) && !this.ignoreSelectionChange(r), s = -1, o = -1, a = !1, l = [];
    if (e.editable)
      for (let u = 0; u < t.length; u++) {
        let d = this.registerMutation(t[u], l);
        d && (s = s < 0 ? d.from : Math.min(d.from, s), o = o < 0 ? d.to : Math.max(d.to, o), d.typeOver && (a = !0));
      }
    if (Rt && l.length > 1) {
      let u = l.filter((d) => d.nodeName == "BR");
      if (u.length == 2) {
        let d = u[0], f = u[1];
        d.parentNode && d.parentNode.parentNode == f.parentNode ? f.remove() : d.remove();
      }
    }
    let c = null;
    s < 0 && i && e.input.lastFocus > Date.now() - 200 && Math.max(e.input.lastTouch, e.input.lastClick.time) < Date.now() - 300 && Mo(r) && (c = tc(e)) && c.eq(ne.near(e.state.doc.resolve(0), 1)) ? (e.input.lastFocus = 0, ln(e), this.currentSelection.set(r), e.scrollToSelection()) : (s > -1 || i) && (s > -1 && (e.docView.markDirty(s, o), B1(e)), this.handleDOMChange(s, o, a, l), e.docView && e.docView.dirty ? e.updateState(e.state) : this.currentSelection.eq(r) || ln(e), this.currentSelection.set(r));
  }
  registerMutation(e, t) {
    if (t.indexOf(e.target) > -1)
      return null;
    let r = this.view.docView.nearestDesc(e.target);
    if (e.type == "attributes" && (r == this.view.docView || e.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    e.attributeName == "style" && !e.oldValue && !e.target.getAttribute("style")) || !r || r.ignoreMutation(e))
      return null;
    if (e.type == "childList") {
      for (let u = 0; u < e.addedNodes.length; u++)
        t.push(e.addedNodes[u]);
      if (r.contentDOM && r.contentDOM != r.dom && !r.contentDOM.contains(e.target))
        return { from: r.posBefore, to: r.posAfter };
      let i = e.previousSibling, s = e.nextSibling;
      if (ct && _n <= 11 && e.addedNodes.length)
        for (let u = 0; u < e.addedNodes.length; u++) {
          let { previousSibling: d, nextSibling: f } = e.addedNodes[u];
          (!d || Array.prototype.indexOf.call(e.addedNodes, d) < 0) && (i = d), (!f || Array.prototype.indexOf.call(e.addedNodes, f) < 0) && (s = f);
        }
      let o = i && i.parentNode == e.target ? tt(i) + 1 : 0, a = r.localPosFromDOM(e.target, o, -1), l = s && s.parentNode == e.target ? tt(s) : e.target.childNodes.length, c = r.localPosFromDOM(e.target, l, 1);
      return { from: a, to: c };
    } else
      return e.type == "attributes" ? { from: r.posAtStart - r.border, to: r.posAtEnd + r.border } : {
        from: r.posAtStart,
        to: r.posAtEnd,
        // An event was generated for a text change that didn't change
        // any text. Mark the dom change to fall back to assuming the
        // selection was typed over with an identical value if it can't
        // find another change.
        typeOver: e.target.nodeValue == e.oldValue
      };
  }
}
let Yu = /* @__PURE__ */ new WeakMap(), Xu = !1;
function B1(n) {
  if (!Yu.has(n) && (Yu.set(n, null), ["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(n.dom).whiteSpace) !== -1)) {
    if (n.requiresGeckoHackNode = Rt, Xu)
      return;
    console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."), Xu = !0;
  }
}
function H1(n) {
  let e;
  function t(l) {
    l.preventDefault(), l.stopImmediatePropagation(), e = l.getTargetRanges()[0];
  }
  n.dom.addEventListener("beforeinput", t, !0), document.execCommand("indent"), n.dom.removeEventListener("beforeinput", t, !0);
  let r = e.startContainer, i = e.startOffset, s = e.endContainer, o = e.endOffset, a = n.domAtPos(n.state.selection.anchor);
  return nr(a.node, a.offset, s, o) && ([r, i, s, o] = [s, o, r, i]), { anchorNode: r, anchorOffset: i, focusNode: s, focusOffset: o };
}
function P1(n, e, t) {
  let { node: r, fromOffset: i, toOffset: s, from: o, to: a } = n.docView.parseRange(e, t), l = n.domSelectionRange(), c, u = l.anchorNode;
  if (u && n.dom.contains(u.nodeType == 1 ? u : u.parentNode) && (c = [{ node: u, offset: l.anchorOffset }], Mo(l) || c.push({ node: l.focusNode, offset: l.focusOffset })), je && n.input.lastKeyCode === 8)
    for (let m = s; m > i; m--) {
      let v = r.childNodes[m - 1], y = v.pmViewDesc;
      if (v.nodeName == "BR" && !y) {
        s = m;
        break;
      }
      if (!y || y.size)
        break;
    }
  let d = n.state.doc, f = n.someProp("domParser") || Nn.fromSchema(n.state.schema), p = d.resolve(o), h = null, g = f.parse(r, {
    topNode: p.parent,
    topMatch: p.parent.contentMatchAt(p.index()),
    topOpen: !0,
    from: i,
    to: s,
    preserveWhitespace: p.parent.type.whitespace == "pre" ? "full" : !0,
    findPositions: c,
    ruleFromNode: $1,
    context: p
  });
  if (c && c[0].pos != null) {
    let m = c[0].pos, v = c[1] && c[1].pos;
    v == null && (v = m), h = { anchor: m + o, head: v + o };
  }
  return { doc: g, sel: h, from: o, to: a };
}
function $1(n) {
  let e = n.pmViewDesc;
  if (e)
    return e.parseRule();
  if (n.nodeName == "BR" && n.parentNode) {
    if (nt && /^(ul|ol)$/i.test(n.parentNode.nodeName)) {
      let t = document.createElement("div");
      return t.appendChild(document.createElement("li")), { skip: t };
    } else if (n.parentNode.lastChild == n || nt && /^(tr|table)$/i.test(n.parentNode.nodeName))
      return { ignore: !0 };
  } else if (n.nodeName == "IMG" && n.getAttribute("mark-placeholder"))
    return { ignore: !0 };
  return null;
}
const F1 = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function z1(n, e, t, r, i) {
  let s = n.input.compositionPendingChanges || (n.composing ? n.input.compositionID : 0);
  if (n.input.compositionPendingChanges = 0, e < 0) {
    let M = n.input.lastSelectionTime > Date.now() - 50 ? n.input.lastSelectionOrigin : null, L = tc(n, M);
    if (L && !n.state.selection.eq(L)) {
      if (je && Ot && n.input.lastKeyCode === 13 && Date.now() - 100 < n.input.lastKeyCodeTime && n.someProp("handleKeyDown", (G) => G(n, Fn(13, "Enter"))))
        return;
      let z = n.state.tr.setSelection(L);
      M == "pointer" ? z.setMeta("pointer", !0) : M == "key" && z.scrollIntoView(), s && z.setMeta("composition", s), n.dispatch(z);
    }
    return;
  }
  let o = n.state.doc.resolve(e), a = o.sharedDepth(t);
  e = o.before(a + 1), t = n.state.doc.resolve(t).after(a + 1);
  let l = n.state.selection, c = P1(n, e, t), u = n.state.doc, d = u.slice(c.from, c.to), f, p;
  n.input.lastKeyCode === 8 && Date.now() - 100 < n.input.lastKeyCodeTime ? (f = n.state.selection.to, p = "end") : (f = n.state.selection.from, p = "start"), n.input.lastKeyCode = null;
  let h = U1(d.content, c.doc.content, c.from, f, p);
  if ((zr && n.input.lastIOSEnter > Date.now() - 225 || Ot) && i.some((M) => M.nodeType == 1 && !F1.test(M.nodeName)) && (!h || h.endA >= h.endB) && n.someProp("handleKeyDown", (M) => M(n, Fn(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (!h)
    if (r && l instanceof X && !l.empty && l.$head.sameParent(l.$anchor) && !n.composing && !(c.sel && c.sel.anchor != c.sel.head))
      h = { start: l.from, endA: l.to, endB: l.to };
    else {
      if (c.sel) {
        let M = Qu(n, n.state.doc, c.sel);
        if (M && !M.eq(n.state.selection)) {
          let L = n.state.tr.setSelection(M);
          s && L.setMeta("composition", s), n.dispatch(L);
        }
      }
      return;
    }
  if (je && n.cursorWrapper && c.sel && c.sel.anchor == n.cursorWrapper.deco.from && c.sel.head == c.sel.anchor) {
    let M = h.endB - h.start;
    c.sel = { anchor: c.sel.anchor + M, head: c.sel.anchor + M };
  }
  n.input.domChangeCount++, n.state.selection.from < n.state.selection.to && h.start == h.endB && n.state.selection instanceof X && (h.start > n.state.selection.from && h.start <= n.state.selection.from + 2 && n.state.selection.from >= c.from ? h.start = n.state.selection.from : h.endA < n.state.selection.to && h.endA >= n.state.selection.to - 2 && n.state.selection.to <= c.to && (h.endB += n.state.selection.to - h.endA, h.endA = n.state.selection.to)), ct && _n <= 11 && h.endB == h.start + 1 && h.endA == h.start && h.start > c.from && c.doc.textBetween(h.start - c.from - 1, h.start - c.from + 1) == "  " && (h.start--, h.endA--, h.endB--);
  let g = c.doc.resolveNoCache(h.start - c.from), m = c.doc.resolveNoCache(h.endB - c.from), v = u.resolve(h.start), y = g.sameParent(m) && g.parent.inlineContent && v.end() >= h.endA, k;
  if ((zr && n.input.lastIOSEnter > Date.now() - 225 && (!y || i.some((M) => M.nodeName == "DIV" || M.nodeName == "P")) || !y && g.pos < c.doc.content.size && !g.sameParent(m) && (k = ne.findFrom(c.doc.resolve(g.pos + 1), 1, !0)) && k.head == m.pos) && n.someProp("handleKeyDown", (M) => M(n, Fn(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (n.state.selection.anchor > h.start && q1(u, h.start, h.endA, g, m) && n.someProp("handleKeyDown", (M) => M(n, Fn(8, "Backspace")))) {
    Ot && je && n.domObserver.suppressSelectionUpdates();
    return;
  }
  je && Ot && h.endB == h.start && (n.input.lastAndroidDelete = Date.now()), Ot && !y && g.start() != m.start() && m.parentOffset == 0 && g.depth == m.depth && c.sel && c.sel.anchor == c.sel.head && c.sel.head == h.endA && (h.endB -= 2, m = c.doc.resolveNoCache(h.endB - c.from), setTimeout(() => {
    n.someProp("handleKeyDown", function(M) {
      return M(n, Fn(13, "Enter"));
    });
  }, 20));
  let b = h.start, x = h.endA, w, S, T;
  if (y) {
    if (g.pos == m.pos)
      ct && _n <= 11 && g.parentOffset == 0 && (n.domObserver.suppressSelectionUpdates(), setTimeout(() => ln(n), 20)), w = n.state.tr.delete(b, x), S = u.resolve(h.start).marksAcross(u.resolve(h.endA));
    else if (
      // Adding or removing a mark
      h.endA == h.endB && (T = V1(g.parent.content.cut(g.parentOffset, m.parentOffset), v.parent.content.cut(v.parentOffset, h.endA - v.start())))
    )
      w = n.state.tr, T.type == "add" ? w.addMark(b, x, T.mark) : w.removeMark(b, x, T.mark);
    else if (g.parent.child(g.index()).isText && g.index() == m.index() - (m.textOffset ? 0 : 1)) {
      let M = g.parent.textBetween(g.parentOffset, m.parentOffset);
      if (n.someProp("handleTextInput", (L) => L(n, b, x, M)))
        return;
      w = n.state.tr.insertText(M, b, x);
    }
  }
  if (w || (w = n.state.tr.replace(b, x, c.doc.slice(h.start - c.from, h.endB - c.from))), c.sel) {
    let M = Qu(n, w.doc, c.sel);
    M && !(je && Ot && n.composing && M.empty && (h.start != h.endB || n.input.lastAndroidDelete < Date.now() - 100) && (M.head == b || M.head == w.mapping.map(x) - 1) || ct && M.empty && M.head == b) && w.setSelection(M);
  }
  S && w.ensureMarks(S), s && w.setMeta("composition", s), n.dispatch(w.scrollIntoView());
}
function Qu(n, e, t) {
  return Math.max(t.anchor, t.head) > e.content.size ? null : nc(n, e.resolve(t.anchor), e.resolve(t.head));
}
function V1(n, e) {
  let t = n.firstChild.marks, r = e.firstChild.marks, i = t, s = r, o, a, l;
  for (let u = 0; u < r.length; u++)
    i = r[u].removeFromSet(i);
  for (let u = 0; u < t.length; u++)
    s = t[u].removeFromSet(s);
  if (i.length == 1 && s.length == 0)
    a = i[0], o = "add", l = (u) => u.mark(a.addToSet(u.marks));
  else if (i.length == 0 && s.length == 1)
    a = s[0], o = "remove", l = (u) => u.mark(a.removeFromSet(u.marks));
  else
    return null;
  let c = [];
  for (let u = 0; u < e.childCount; u++)
    c.push(l(e.child(u)));
  if (R.from(c).eq(n))
    return { mark: a, type: o };
}
function q1(n, e, t, r, i) {
  if (!r.parent.isTextblock || // The content must have shrunk
  t - e <= i.pos - r.pos || // newEnd must point directly at or after the end of the block that newStart points into
  ga(r, !0, !1) < i.pos)
    return !1;
  let s = n.resolve(e);
  if (s.parentOffset < s.parent.content.size || !s.parent.isTextblock)
    return !1;
  let o = n.resolve(ga(s, !0, !0));
  return !o.parent.isTextblock || o.pos > t || ga(o, !0, !1) < t ? !1 : r.parent.content.cut(r.parentOffset).eq(o.parent.content);
}
function ga(n, e, t) {
  let r = n.depth, i = e ? n.end() : n.pos;
  for (; r > 0 && (e || n.indexAfter(r) == n.node(r).childCount); )
    r--, i++, e = !1;
  if (t) {
    let s = n.node(r).maybeChild(n.indexAfter(r));
    for (; s && !s.isLeaf; )
      s = s.firstChild, i++;
  }
  return i;
}
function U1(n, e, t, r, i) {
  let s = n.findDiffStart(e, t);
  if (s == null)
    return null;
  let { a: o, b: a } = n.findDiffEnd(e, t + n.size, t + e.size);
  if (i == "end") {
    let l = Math.max(0, s - Math.min(o, a));
    r -= o + l - s;
  }
  if (o < s && n.size < e.size) {
    let l = r <= s && r >= o ? s - r : 0;
    s -= l, s && s < e.size && ed(e.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), a = s + (a - o), o = s;
  } else if (a < s) {
    let l = r <= s && r >= a ? s - r : 0;
    s -= l, s && s < n.size && ed(n.textBetween(s - 1, s + 1)) && (s += l ? 1 : -1), o = s + (o - a), a = s;
  }
  return { start: s, endA: o, endB: a };
}
function ed(n) {
  if (n.length != 2)
    return !1;
  let e = n.charCodeAt(0), t = n.charCodeAt(1);
  return e >= 56320 && e <= 57343 && t >= 55296 && t <= 56319;
}
class K1 {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(e, t) {
    this._root = null, this.focused = !1, this.trackWrites = null, this.mounted = !1, this.markCursor = null, this.cursorWrapper = null, this.lastSelectedViewDesc = void 0, this.input = new f1(), this.prevDirectPlugins = [], this.pluginViews = [], this.requiresGeckoHackNode = !1, this.dragging = null, this._props = t, this.state = t.state, this.directPlugins = t.plugins || [], this.directPlugins.forEach(sd), this.dispatch = this.dispatch.bind(this), this.dom = e && e.mount || document.createElement("div"), e && (e.appendChild ? e.appendChild(this.dom) : typeof e == "function" ? e(this.dom) : e.mount && (this.mounted = !0)), this.editable = rd(this), nd(this), this.nodeViews = id(this), this.docView = Bu(this.state.doc, td(this), ha(this), this.dom, this), this.domObserver = new I1(this, (r, i, s, o) => z1(this, r, i, s, o)), this.domObserver.start(), p1(this), this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let e = this._props;
      this._props = {};
      for (let t in e)
        this._props[t] = e[t];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(e) {
    e.handleDOMEvents != this._props.handleDOMEvents && wl(this);
    let t = this._props;
    this._props = e, e.plugins && (e.plugins.forEach(sd), this.directPlugins = e.plugins), this.updateStateInner(e.state, t);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(e) {
    let t = {};
    for (let r in this._props)
      t[r] = this._props[r];
    t.state = this.state;
    for (let r in e)
      t[r] = e[r];
    this.update(t);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(e) {
    this.updateStateInner(e, this._props);
  }
  updateStateInner(e, t) {
    var r;
    let i = this.state, s = !1, o = !1;
    e.storedMarks && this.composing && (qh(this), o = !0), this.state = e;
    let a = i.plugins != e.plugins || this._props.plugins != t.plugins;
    if (a || this._props.plugins != t.plugins || this._props.nodeViews != t.nodeViews) {
      let p = id(this);
      G1(p, this.nodeViews) && (this.nodeViews = p, s = !0);
    }
    (a || t.handleDOMEvents != this._props.handleDOMEvents) && wl(this), this.editable = rd(this), nd(this);
    let l = ha(this), c = td(this), u = i.plugins != e.plugins && !i.doc.eq(e.doc) ? "reset" : e.scrollToSelection > i.scrollToSelection ? "to selection" : "preserve", d = s || !this.docView.matchesNode(e.doc, c, l);
    (d || !e.selection.eq(i.selection)) && (o = !0);
    let f = u == "preserve" && o && this.dom.style.overflowAnchor == null && M0(this);
    if (o) {
      this.domObserver.stop();
      let p = d && (ct || je) && !this.composing && !i.selection.empty && !e.selection.empty && W1(i.selection, e.selection);
      if (d) {
        let h = je ? this.trackWrites = this.domSelectionRange().focusNode : null;
        (s || !this.docView.update(e.doc, c, l, this)) && (this.docView.updateOuterDeco([]), this.docView.destroy(), this.docView = Bu(e.doc, c, l, this.dom, this)), h && !this.trackWrites && (p = !0);
      }
      p || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && X0(this)) ? ln(this, p) : (Nh(this, e.selection), this.domObserver.setCurSelection()), this.domObserver.start();
    }
    this.updatePluginViews(i), !((r = this.dragging) === null || r === void 0) && r.node && !i.doc.eq(e.doc) && this.updateDraggedNode(this.dragging, i), u == "reset" ? this.dom.scrollTop = 0 : u == "to selection" ? this.scrollToSelection() : f && A0(f);
  }
  /**
  @internal
  */
  scrollToSelection() {
    let e = this.domSelectionRange().focusNode;
    if (!this.someProp("handleScrollToSelection", (t) => t(this)))
      if (this.state.selection instanceof Q) {
        let t = this.docView.domAfterPos(this.state.selection.from);
        t.nodeType == 1 && Nu(this, t.getBoundingClientRect(), e);
      } else
        Nu(this, this.coordsAtPos(this.state.selection.head, 1), e);
  }
  destroyPluginViews() {
    let e;
    for (; e = this.pluginViews.pop(); )
      e.destroy && e.destroy();
  }
  updatePluginViews(e) {
    if (!e || e.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins, this.destroyPluginViews();
      for (let t = 0; t < this.directPlugins.length; t++) {
        let r = this.directPlugins[t];
        r.spec.view && this.pluginViews.push(r.spec.view(this));
      }
      for (let t = 0; t < this.state.plugins.length; t++) {
        let r = this.state.plugins[t];
        r.spec.view && this.pluginViews.push(r.spec.view(this));
      }
    } else
      for (let t = 0; t < this.pluginViews.length; t++) {
        let r = this.pluginViews[t];
        r.update && r.update(this, e);
      }
  }
  updateDraggedNode(e, t) {
    let r = e.node, i = -1;
    if (this.state.doc.nodeAt(r.from) == r.node)
      i = r.from;
    else {
      let s = r.from + (this.state.doc.content.size - t.doc.content.size);
      (s > 0 && this.state.doc.nodeAt(s)) == r.node && (i = s);
    }
    this.dragging = new Kh(e.slice, e.move, i < 0 ? void 0 : Q.create(this.state.doc, i));
  }
  someProp(e, t) {
    let r = this._props && this._props[e], i;
    if (r != null && (i = t ? t(r) : r))
      return i;
    for (let o = 0; o < this.directPlugins.length; o++) {
      let a = this.directPlugins[o].props[e];
      if (a != null && (i = t ? t(a) : a))
        return i;
    }
    let s = this.state.plugins;
    if (s)
      for (let o = 0; o < s.length; o++) {
        let a = s[o].props[e];
        if (a != null && (i = t ? t(a) : a))
          return i;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (ct) {
      let e = this.root.activeElement;
      if (e == this.dom)
        return !0;
      if (!e || !this.dom.contains(e))
        return !1;
      for (; e && this.dom != e && this.dom.contains(e); ) {
        if (e.contentEditable == "false")
          return !1;
        e = e.parentElement;
      }
      return !0;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop(), this.editable && T0(this.dom), ln(this), this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let e = this._root;
    if (e == null) {
      for (let t = this.dom.parentNode; t; t = t.parentNode)
        if (t.nodeType == 9 || t.nodeType == 11 && t.host)
          return t.getSelection || (Object.getPrototypeOf(t).getSelection = () => t.ownerDocument.getSelection()), this._root = t;
    }
    return e || document;
  }
  /**
  When an existing editor view is moved to a new document or
  shadow tree, call this to make it recompute its root.
  */
  updateRoot() {
    this._root = null;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(e) {
    return D0(this, e);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(e, t = 1) {
    return Eh(this, e, t);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(e, t = 0) {
    return this.docView.domFromPos(e, t);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(e) {
    let t = this.docView.descAt(e);
    return t ? t.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(e, t, r = -1) {
    let i = this.docView.posFromDOM(e, t, r);
    if (i == null)
      throw new RangeError("DOM position not inside the editor");
    return i;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(e, t) {
    return $0(this, t || this.state, e);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(e, t) {
    return Ti(this, "", e, !1, t || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(e, t) {
    return Ti(this, e, null, !0, t || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    this.docView && (h1(this), this.destroyPluginViews(), this.mounted ? (this.docView.update(this.state.doc, [], ha(this), this), this.dom.textContent = "") : this.dom.parentNode && this.dom.parentNode.removeChild(this.dom), this.docView.destroy(), this.docView = null);
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(e) {
    return m1(this, e);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(e) {
    let t = this._props.dispatchTransaction;
    t ? t.call(this, e) : this.updateState(this.state.apply(e));
  }
  /**
  @internal
  */
  domSelectionRange() {
    return nt && this.root.nodeType === 11 && w0(this.dom.ownerDocument) == this.dom ? H1(this) : this.domSelection();
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
}
function td(n) {
  let e = /* @__PURE__ */ Object.create(null);
  return e.class = "ProseMirror", e.contenteditable = String(n.editable), n.someProp("attributes", (t) => {
    if (typeof t == "function" && (t = t(n.state)), t)
      for (let r in t)
        r == "class" ? e.class += " " + t[r] : r == "style" ? e.style = (e.style ? e.style + ";" : "") + t[r] : !e[r] && r != "contenteditable" && r != "nodeName" && (e[r] = String(t[r]));
  }), e.translate || (e.translate = "no"), [Be.node(0, n.state.doc.content.size, e)];
}
function nd(n) {
  if (n.markCursor) {
    let e = document.createElement("img");
    e.className = "ProseMirror-separator", e.setAttribute("mark-placeholder", "true"), e.setAttribute("alt", ""), n.cursorWrapper = { dom: e, deco: Be.widget(n.state.selection.head, e, { raw: !0, marks: n.markCursor }) };
  } else
    n.cursorWrapper = null;
}
function rd(n) {
  return !n.someProp("editable", (e) => e(n.state) === !1);
}
function W1(n, e) {
  let t = Math.min(n.$anchor.sharedDepth(n.head), e.$anchor.sharedDepth(e.head));
  return n.$anchor.start(t) != e.$anchor.start(t);
}
function id(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(r) {
    for (let i in r)
      Object.prototype.hasOwnProperty.call(e, i) || (e[i] = r[i]);
  }
  return n.someProp("nodeViews", t), n.someProp("markViews", t), e;
}
function G1(n, e) {
  let t = 0, r = 0;
  for (let i in n) {
    if (n[i] != e[i])
      return !0;
    t++;
  }
  for (let i in e)
    r++;
  return t != r;
}
function sd(n) {
  if (n.spec.state || n.spec.filterTransaction || n.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}
var On = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, Ks = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, Z1 = typeof navigator < "u" && /Mac/.test(navigator.platform), j1 = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Ke = 0; Ke < 10; Ke++)
  On[48 + Ke] = On[96 + Ke] = String(Ke);
for (var Ke = 1; Ke <= 24; Ke++)
  On[Ke + 111] = "F" + Ke;
for (var Ke = 65; Ke <= 90; Ke++)
  On[Ke] = String.fromCharCode(Ke + 32), Ks[Ke] = String.fromCharCode(Ke);
for (var ma in On)
  Ks.hasOwnProperty(ma) || (Ks[ma] = On[ma]);
function J1(n) {
  var e = Z1 && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || j1 && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? Ks : On)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
const Y1 = typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : !1;
function X1(n) {
  let e = n.split(/-(?!$)/), t = e[e.length - 1];
  t == "Space" && (t = " ");
  let r, i, s, o;
  for (let a = 0; a < e.length - 1; a++) {
    let l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      i = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      Y1 ? o = !0 : i = !0;
    else
      throw new Error("Unrecognized modifier name: " + l);
  }
  return r && (t = "Alt-" + t), i && (t = "Ctrl-" + t), o && (t = "Meta-" + t), s && (t = "Shift-" + t), t;
}
function Q1(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n)
    e[X1(t)] = n[t];
  return e;
}
function ba(n, e, t = !0) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t && e.shiftKey && (n = "Shift-" + n), n;
}
function ey(n) {
  return new Se({ props: { handleKeyDown: lc(n) } });
}
function lc(n) {
  let e = Q1(n);
  return function(t, r) {
    let i = J1(r), s, o = e[ba(i, r)];
    if (o && o(t.state, t.dispatch, t))
      return !0;
    if (i.length == 1 && i != " ") {
      if (r.shiftKey) {
        let a = e[ba(i, r, !1)];
        if (a && a(t.state, t.dispatch, t))
          return !0;
      }
      if ((r.shiftKey || r.altKey || r.metaKey || i.charCodeAt(0) > 127) && (s = On[r.keyCode]) && s != i) {
        let a = e[ba(s, r)];
        if (a && a(t.state, t.dispatch, t))
          return !0;
      }
    }
    return !1;
  };
}
const ty = (n, e) => n.selection.empty ? !1 : (e && e(n.tr.deleteSelection().scrollIntoView()), !0);
function ny(n, e) {
  let { $cursor: t } = n.selection;
  return !t || (e ? !e.endOfTextblock("backward", n) : t.parentOffset > 0) ? null : t;
}
const ry = (n, e, t) => {
  let r = ny(n, t);
  if (!r)
    return !1;
  let i = Jh(r);
  if (!i) {
    let o = r.blockRange(), a = o && Jr(o);
    return a == null ? !1 : (e && e(n.tr.lift(o, a).scrollIntoView()), !0);
  }
  let s = i.nodeBefore;
  if (!s.type.spec.isolating && Qh(n, i, e))
    return !0;
  if (r.parent.content.size == 0 && (Vr(s, "end") || Q.isSelectable(s))) {
    let o = Jl(n.doc, r.before(), r.after(), F.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = n.tr.step(o);
        a.setSelection(Vr(s, "end") ? ne.findFrom(a.doc.resolve(a.mapping.map(i.pos, -1)), -1) : Q.create(a.doc, i.pos - s.nodeSize)), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return s.isAtom && i.depth == r.depth - 1 ? (e && e(n.tr.delete(i.pos - s.nodeSize, i.pos).scrollIntoView()), !0) : !1;
};
function Vr(n, e, t = !1) {
  for (let r = n; r; r = e == "start" ? r.firstChild : r.lastChild) {
    if (r.isTextblock)
      return !0;
    if (t && r.childCount != 1)
      return !1;
  }
  return !1;
}
const iy = (n, e, t) => {
  let { $head: r, empty: i } = n.selection, s = r;
  if (!i)
    return !1;
  if (r.parent.isTextblock) {
    if (t ? !t.endOfTextblock("backward", n) : r.parentOffset > 0)
      return !1;
    s = Jh(r);
  }
  let o = s && s.nodeBefore;
  return !o || !Q.isSelectable(o) ? !1 : (e && e(n.tr.setSelection(Q.create(n.doc, s.pos - o.nodeSize)).scrollIntoView()), !0);
};
function Jh(n) {
  if (!n.parent.type.spec.isolating)
    for (let e = n.depth - 1; e >= 0; e--) {
      if (n.index(e) > 0)
        return n.doc.resolve(n.before(e + 1));
      if (n.node(e).type.spec.isolating)
        break;
    }
  return null;
}
function sy(n, e) {
  let { $cursor: t } = n.selection;
  return !t || (e ? !e.endOfTextblock("forward", n) : t.parentOffset < t.parent.content.size) ? null : t;
}
const oy = (n, e, t) => {
  let r = sy(n, t);
  if (!r)
    return !1;
  let i = Yh(r);
  if (!i)
    return !1;
  let s = i.nodeAfter;
  if (Qh(n, i, e))
    return !0;
  if (r.parent.content.size == 0 && (Vr(s, "start") || Q.isSelectable(s))) {
    let o = Jl(n.doc, r.before(), r.after(), F.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = n.tr.step(o);
        a.setSelection(Vr(s, "start") ? ne.findFrom(a.doc.resolve(a.mapping.map(i.pos)), 1) : Q.create(a.doc, a.mapping.map(i.pos))), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return s.isAtom && i.depth == r.depth - 1 ? (e && e(n.tr.delete(i.pos, i.pos + s.nodeSize).scrollIntoView()), !0) : !1;
}, ay = (n, e, t) => {
  let { $head: r, empty: i } = n.selection, s = r;
  if (!i)
    return !1;
  if (r.parent.isTextblock) {
    if (t ? !t.endOfTextblock("forward", n) : r.parentOffset < r.parent.content.size)
      return !1;
    s = Yh(r);
  }
  let o = s && s.nodeAfter;
  return !o || !Q.isSelectable(o) ? !1 : (e && e(n.tr.setSelection(Q.create(n.doc, s.pos)).scrollIntoView()), !0);
};
function Yh(n) {
  if (!n.parent.type.spec.isolating)
    for (let e = n.depth - 1; e >= 0; e--) {
      let t = n.node(e);
      if (n.index(e) + 1 < t.childCount)
        return n.doc.resolve(n.after(e + 1));
      if (t.type.spec.isolating)
        break;
    }
  return null;
}
const ly = (n, e) => {
  let t = n.selection, r = t instanceof Q, i;
  if (r) {
    if (t.node.isTextblock || !Rn(n.doc, t.from))
      return !1;
    i = t.from;
  } else if (i = So(n.doc, t.from, -1), i == null)
    return !1;
  if (e) {
    let s = n.tr.join(i);
    r && s.setSelection(Q.create(s.doc, i - n.doc.resolve(i).nodeBefore.nodeSize)), e(s.scrollIntoView());
  }
  return !0;
}, cy = (n, e) => {
  let t = n.selection, r;
  if (t instanceof Q) {
    if (t.node.isTextblock || !Rn(n.doc, t.to))
      return !1;
    r = t.to;
  } else if (r = So(n.doc, t.to, 1), r == null)
    return !1;
  return e && e(n.tr.join(r).scrollIntoView()), !0;
}, uy = (n, e) => {
  let { $from: t, $to: r } = n.selection, i = t.blockRange(r), s = i && Jr(i);
  return s == null ? !1 : (e && e(n.tr.lift(i, s).scrollIntoView()), !0);
}, dy = (n, e) => {
  let { $head: t, $anchor: r } = n.selection;
  return !t.parent.type.spec.code || !t.sameParent(r) ? !1 : (e && e(n.tr.insertText(`
`).scrollIntoView()), !0);
};
function Xh(n) {
  for (let e = 0; e < n.edgeCount; e++) {
    let { type: t } = n.edge(e);
    if (t.isTextblock && !t.hasRequiredAttrs())
      return t;
  }
  return null;
}
const fy = (n, e) => {
  let { $head: t, $anchor: r } = n.selection;
  if (!t.parent.type.spec.code || !t.sameParent(r))
    return !1;
  let i = t.node(-1), s = t.indexAfter(-1), o = Xh(i.contentMatchAt(s));
  if (!o || !i.canReplaceWith(s, s, o))
    return !1;
  if (e) {
    let a = t.after(), l = n.tr.replaceWith(a, a, o.createAndFill());
    l.setSelection(ne.near(l.doc.resolve(a), 1)), e(l.scrollIntoView());
  }
  return !0;
}, py = (n, e) => {
  let t = n.selection, { $from: r, $to: i } = t;
  if (t instanceof Ct || r.parent.inlineContent || i.parent.inlineContent)
    return !1;
  let s = Xh(i.parent.contentMatchAt(i.indexAfter()));
  if (!s || !s.isTextblock)
    return !1;
  if (e) {
    let o = (!r.parentOffset && i.index() < i.parent.childCount ? r : i).pos, a = n.tr.insert(o, s.createAndFill());
    a.setSelection(X.create(a.doc, o + 1)), e(a.scrollIntoView());
  }
  return !0;
}, hy = (n, e) => {
  let { $cursor: t } = n.selection;
  if (!t || t.parent.content.size)
    return !1;
  if (t.depth > 1 && t.after() != t.end(-1)) {
    let s = t.before();
    if (Ir(n.doc, s))
      return e && e(n.tr.split(s).scrollIntoView()), !0;
  }
  let r = t.blockRange(), i = r && Jr(r);
  return i == null ? !1 : (e && e(n.tr.lift(r, i).scrollIntoView()), !0);
}, gy = (n, e) => {
  let { $from: t, to: r } = n.selection, i, s = t.sharedDepth(r);
  return s == 0 ? !1 : (i = t.before(s), e && e(n.tr.setSelection(Q.create(n.doc, i))), !0);
};
function my(n, e, t) {
  let r = e.nodeBefore, i = e.nodeAfter, s = e.index();
  return !r || !i || !r.type.compatibleContent(i.type) ? !1 : !r.content.size && e.parent.canReplace(s - 1, s) ? (t && t(n.tr.delete(e.pos - r.nodeSize, e.pos).scrollIntoView()), !0) : !e.parent.canReplace(s, s + 1) || !(i.isTextblock || Rn(n.doc, e.pos)) ? !1 : (t && t(n.tr.clearIncompatible(e.pos, r.type, r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()), !0);
}
function Qh(n, e, t) {
  let r = e.nodeBefore, i = e.nodeAfter, s, o;
  if (r.type.spec.isolating || i.type.spec.isolating)
    return !1;
  if (my(n, e, t))
    return !0;
  let a = e.parent.canReplace(e.index(), e.index() + 1);
  if (a && (s = (o = r.contentMatchAt(r.childCount)).findWrapping(i.type)) && o.matchType(s[0] || i.type).validEnd) {
    if (t) {
      let d = e.pos + i.nodeSize, f = R.empty;
      for (let g = s.length - 1; g >= 0; g--)
        f = R.from(s[g].create(null, f));
      f = R.from(r.copy(f));
      let p = n.tr.step(new Pe(e.pos - 1, d, e.pos, d, new F(f, 1, 0), s.length, !0)), h = d + 2 * s.length;
      Rn(p.doc, h) && p.join(h), t(p.scrollIntoView());
    }
    return !0;
  }
  let l = ne.findFrom(e, 1), c = l && l.$from.blockRange(l.$to), u = c && Jr(c);
  if (u != null && u >= e.depth)
    return t && t(n.tr.lift(c, u).scrollIntoView()), !0;
  if (a && Vr(i, "start", !0) && Vr(r, "end")) {
    let d = r, f = [];
    for (; f.push(d), !d.isTextblock; )
      d = d.lastChild;
    let p = i, h = 1;
    for (; !p.isTextblock; p = p.firstChild)
      h++;
    if (d.canReplace(d.childCount, d.childCount, p.content)) {
      if (t) {
        let g = R.empty;
        for (let v = f.length - 1; v >= 0; v--)
          g = R.from(f[v].copy(g));
        let m = n.tr.step(new Pe(e.pos - f.length, e.pos + i.nodeSize, e.pos + h, e.pos + i.nodeSize - h, new F(g, f.length, 0), 0, !0));
        t(m.scrollIntoView());
      }
      return !0;
    }
  }
  return !1;
}
function eg(n) {
  return function(e, t) {
    let r = e.selection, i = n < 0 ? r.$from : r.$to, s = i.depth;
    for (; i.node(s).isInline; ) {
      if (!s)
        return !1;
      s--;
    }
    return i.node(s).isTextblock ? (t && t(e.tr.setSelection(X.create(e.doc, n < 0 ? i.start(s) : i.end(s)))), !0) : !1;
  };
}
const by = eg(-1), yy = eg(1);
function vy(n, e = null) {
  return function(t, r) {
    let { $from: i, $to: s } = t.selection, o = i.blockRange(s), a = o && jl(o, n, e);
    return a ? (r && r(t.tr.wrap(o, a).scrollIntoView()), !0) : !1;
  };
}
function od(n, e = null) {
  return function(t, r) {
    let i = !1;
    for (let s = 0; s < t.selection.ranges.length && !i; s++) {
      let { $from: { pos: o }, $to: { pos: a } } = t.selection.ranges[s];
      t.doc.nodesBetween(o, a, (l, c) => {
        if (i)
          return !1;
        if (!(!l.isTextblock || l.hasMarkup(n, e)))
          if (l.type == n)
            i = !0;
          else {
            let u = t.doc.resolve(c), d = u.index();
            i = u.parent.canReplaceWith(d, d + 1, n);
          }
      });
    }
    if (!i)
      return !1;
    if (r) {
      let s = t.tr;
      for (let o = 0; o < t.selection.ranges.length; o++) {
        let { $from: { pos: a }, $to: { pos: l } } = t.selection.ranges[o];
        s.setBlockType(a, l, n, e);
      }
      r(s.scrollIntoView());
    }
    return !0;
  };
}
typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os < "u" && os.platform && os.platform() == "darwin";
function wy(n, e = null) {
  return function(t, r) {
    let { $from: i, $to: s } = t.selection, o = i.blockRange(s), a = !1, l = o;
    if (!o)
      return !1;
    if (o.depth >= 2 && i.node(o.depth - 1).type.compatibleContent(n) && o.startIndex == 0) {
      if (i.index(o.depth - 1) == 0)
        return !1;
      let u = t.doc.resolve(o.start - 2);
      l = new Hs(u, u, o.depth), o.endIndex < o.parent.childCount && (o = new Hs(i, t.doc.resolve(s.end(o.depth)), o.depth)), a = !0;
    }
    let c = jl(l, n, e, o);
    return c ? (r && r(ky(t.tr, o, c, a, n).scrollIntoView()), !0) : !1;
  };
}
function ky(n, e, t, r, i) {
  let s = R.empty;
  for (let u = t.length - 1; u >= 0; u--)
    s = R.from(t[u].type.create(t[u].attrs, s));
  n.step(new Pe(e.start - (r ? 2 : 0), e.end, e.start, e.end, new F(s, 0, 0), t.length, !0));
  let o = 0;
  for (let u = 0; u < t.length; u++)
    t[u].type == i && (o = u + 1);
  let a = t.length - o, l = e.start + t.length - (r ? 2 : 0), c = e.parent;
  for (let u = e.startIndex, d = e.endIndex, f = !0; u < d; u++, f = !1)
    !f && Ir(n.doc, l, a) && (n.split(l, a), l += 2 * a), l += c.child(u).nodeSize;
  return n;
}
function Ey(n) {
  return function(e, t) {
    let { $from: r, $to: i } = e.selection, s = r.blockRange(i, (o) => o.childCount > 0 && o.firstChild.type == n);
    return s ? t ? r.node(s.depth - 1).type == n ? xy(e, t, n, s) : Cy(e, t, s) : !0 : !1;
  };
}
function xy(n, e, t, r) {
  let i = n.tr, s = r.end, o = r.$to.end(r.depth);
  s < o && (i.step(new Pe(s - 1, o, s, o, new F(R.from(t.create(null, r.parent.copy())), 1, 0), 1, !0)), r = new Hs(i.doc.resolve(r.$from.pos), i.doc.resolve(o), r.depth));
  const a = Jr(r);
  if (a == null)
    return !1;
  i.lift(r, a);
  let l = i.mapping.map(s, -1) - 1;
  return Rn(i.doc, l) && i.join(l), e(i.scrollIntoView()), !0;
}
function Cy(n, e, t) {
  let r = n.tr, i = t.parent;
  for (let p = t.end, h = t.endIndex - 1, g = t.startIndex; h > g; h--)
    p -= i.child(h).nodeSize, r.delete(p - 1, p + 1);
  let s = r.doc.resolve(t.start), o = s.nodeAfter;
  if (r.mapping.map(t.end) != t.start + s.nodeAfter.nodeSize)
    return !1;
  let a = t.startIndex == 0, l = t.endIndex == i.childCount, c = s.node(-1), u = s.index(-1);
  if (!c.canReplace(u + (a ? 0 : 1), u + 1, o.content.append(l ? R.empty : R.from(i))))
    return !1;
  let d = s.pos, f = d + o.nodeSize;
  return r.step(new Pe(d - (a ? 1 : 0), f + (l ? 1 : 0), d + 1, f - 1, new F((a ? R.empty : R.from(i.copy(R.empty))).append(l ? R.empty : R.from(i.copy(R.empty))), a ? 0 : 1, l ? 0 : 1), a ? 0 : 1)), e(r.scrollIntoView()), !0;
}
function Sy(n) {
  return function(e, t) {
    let { $from: r, $to: i } = e.selection, s = r.blockRange(i, (c) => c.childCount > 0 && c.firstChild.type == n);
    if (!s)
      return !1;
    let o = s.startIndex;
    if (o == 0)
      return !1;
    let a = s.parent, l = a.child(o - 1);
    if (l.type != n)
      return !1;
    if (t) {
      let c = l.lastChild && l.lastChild.type == a.type, u = R.from(c ? n.create() : null), d = new F(R.from(n.create(null, R.from(a.type.create(null, u)))), c ? 3 : 1, 0), f = s.start, p = s.end;
      t(e.tr.step(new Pe(f - (c ? 3 : 1), p, f, p, d, 1, !0)).scrollIntoView());
    }
    return !0;
  };
}
function No(n) {
  const { state: e, transaction: t } = n;
  let { selection: r } = t, { doc: i } = t, { storedMarks: s } = t;
  return {
    ...e,
    apply: e.apply.bind(e),
    applyTransaction: e.applyTransaction.bind(e),
    filterTransaction: e.filterTransaction,
    plugins: e.plugins,
    schema: e.schema,
    reconfigure: e.reconfigure.bind(e),
    toJSON: e.toJSON.bind(e),
    get storedMarks() {
      return s;
    },
    get selection() {
      return r;
    },
    get doc() {
      return i;
    },
    get tr() {
      return r = t.selection, i = t.doc, s = t.storedMarks, t;
    }
  };
}
class Oo {
  constructor(e) {
    this.editor = e.editor, this.rawCommands = this.editor.extensionManager.commands, this.customState = e.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands: e, editor: t, state: r } = this, { view: i } = t, { tr: s } = r, o = this.buildProps(s);
    return Object.fromEntries(Object.entries(e).map(([a, l]) => [a, (...u) => {
      const d = l(...u)(o);
      return !s.getMeta("preventDispatch") && !this.hasCustomState && i.dispatch(s), d;
    }]));
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(e, t = !0) {
    const { rawCommands: r, editor: i, state: s } = this, { view: o } = i, a = [], l = !!e, c = e || s.tr, u = () => (!l && t && !c.getMeta("preventDispatch") && !this.hasCustomState && o.dispatch(c), a.every((f) => f === !0)), d = {
      ...Object.fromEntries(Object.entries(r).map(([f, p]) => [f, (...g) => {
        const m = this.buildProps(c, t), v = p(...g)(m);
        return a.push(v), d;
      }])),
      run: u
    };
    return d;
  }
  createCan(e) {
    const { rawCommands: t, state: r } = this, i = !1, s = e || r.tr, o = this.buildProps(s, i);
    return {
      ...Object.fromEntries(Object.entries(t).map(([l, c]) => [l, (...u) => c(...u)({ ...o, dispatch: void 0 })])),
      chain: () => this.createChain(s, i)
    };
  }
  buildProps(e, t = !0) {
    const { rawCommands: r, editor: i, state: s } = this, { view: o } = i, a = {
      tr: e,
      editor: i,
      view: o,
      state: No({
        state: s,
        transaction: e
      }),
      dispatch: t ? () => {
      } : void 0,
      chain: () => this.createChain(e, t),
      can: () => this.createCan(e),
      get commands() {
        return Object.fromEntries(Object.entries(r).map(([l, c]) => [l, (...u) => c(...u)(a)]));
      }
    };
    return a;
  }
}
let _y = class {
  constructor() {
    this.callbacks = {};
  }
  on(e, t) {
    return this.callbacks[e] || (this.callbacks[e] = []), this.callbacks[e].push(t), this;
  }
  emit(e, ...t) {
    const r = this.callbacks[e];
    return r && r.forEach((i) => i.apply(this, t)), this;
  }
  off(e, t) {
    const r = this.callbacks[e];
    return r && (t ? this.callbacks[e] = r.filter((i) => i !== t) : delete this.callbacks[e]), this;
  }
  removeAllListeners() {
    this.callbacks = {};
  }
};
function K(n, e, t) {
  return n.config[e] === void 0 && n.parent ? K(n.parent, e, t) : typeof n.config[e] == "function" ? n.config[e].bind({
    ...t,
    parent: n.parent ? K(n.parent, e, t) : null
  }) : n.config[e];
}
function Lo(n) {
  const e = n.filter((i) => i.type === "extension"), t = n.filter((i) => i.type === "node"), r = n.filter((i) => i.type === "mark");
  return {
    baseExtensions: e,
    nodeExtensions: t,
    markExtensions: r
  };
}
function tg(n) {
  const e = [], { nodeExtensions: t, markExtensions: r } = Lo(n), i = [...t, ...r], s = {
    default: null,
    rendered: !0,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: !0,
    isRequired: !1
  };
  return n.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = K(o, "addGlobalAttributes", a);
    if (!l)
      return;
    l().forEach((u) => {
      u.types.forEach((d) => {
        Object.entries(u.attributes).forEach(([f, p]) => {
          e.push({
            type: d,
            name: f,
            attribute: {
              ...s,
              ...p
            }
          });
        });
      });
    });
  }), i.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = K(o, "addAttributes", a);
    if (!l)
      return;
    const c = l();
    Object.entries(c).forEach(([u, d]) => {
      const f = {
        ...s,
        ...d
      };
      typeof (f == null ? void 0 : f.default) == "function" && (f.default = f.default()), f != null && f.isRequired && (f == null ? void 0 : f.default) === void 0 && delete f.default, e.push({
        type: o.name,
        name: u,
        attribute: f
      });
    });
  }), e;
}
function Fe(n, e) {
  if (typeof n == "string") {
    if (!e.nodes[n])
      throw Error(`There is no node type named '${n}'. Maybe you forgot to add the extension?`);
    return e.nodes[n];
  }
  return n;
}
function pe(...n) {
  return n.filter((e) => !!e).reduce((e, t) => {
    const r = { ...e };
    return Object.entries(t).forEach(([i, s]) => {
      if (!r[i]) {
        r[i] = s;
        return;
      }
      if (i === "class") {
        const a = s ? s.split(" ") : [], l = r[i] ? r[i].split(" ") : [], c = a.filter((u) => !l.includes(u));
        r[i] = [...l, ...c].join(" ");
      } else
        i === "style" ? r[i] = [r[i], s].join("; ") : r[i] = s;
    }), r;
  }, {});
}
function kl(n, e) {
  return e.filter((t) => t.attribute.rendered).map((t) => t.attribute.renderHTML ? t.attribute.renderHTML(n.attrs) || {} : {
    [t.name]: n.attrs[t.name]
  }).reduce((t, r) => pe(t, r), {});
}
function ng(n) {
  return typeof n == "function";
}
function ie(n, e = void 0, ...t) {
  return ng(n) ? e ? n.bind(e)(...t) : n(...t) : n;
}
function My(n = {}) {
  return Object.keys(n).length === 0 && n.constructor === Object;
}
function Ay(n) {
  return typeof n != "string" ? n : n.match(/^[+-]?(?:\d*\.)?\d+$/) ? Number(n) : n === "true" ? !0 : n === "false" ? !1 : n;
}
function ad(n, e) {
  return n.style ? n : {
    ...n,
    getAttrs: (t) => {
      const r = n.getAttrs ? n.getAttrs(t) : n.attrs;
      if (r === !1)
        return !1;
      const i = e.reduce((s, o) => {
        const a = o.attribute.parseHTML ? o.attribute.parseHTML(t) : Ay(t.getAttribute(o.name));
        return a == null ? s : {
          ...s,
          [o.name]: a
        };
      }, {});
      return { ...r, ...i };
    }
  };
}
function ld(n) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(n).filter(([e, t]) => e === "attrs" && My(t) ? !1 : t != null)
  );
}
function Ty(n, e) {
  var t;
  const r = tg(n), { nodeExtensions: i, markExtensions: s } = Lo(n), o = (t = i.find((c) => K(c, "topNode"))) === null || t === void 0 ? void 0 : t.name, a = Object.fromEntries(i.map((c) => {
    const u = r.filter((v) => v.type === c.name), d = {
      name: c.name,
      options: c.options,
      storage: c.storage,
      editor: e
    }, f = n.reduce((v, y) => {
      const k = K(y, "extendNodeSchema", d);
      return {
        ...v,
        ...k ? k(c) : {}
      };
    }, {}), p = ld({
      ...f,
      content: ie(K(c, "content", d)),
      marks: ie(K(c, "marks", d)),
      group: ie(K(c, "group", d)),
      inline: ie(K(c, "inline", d)),
      atom: ie(K(c, "atom", d)),
      selectable: ie(K(c, "selectable", d)),
      draggable: ie(K(c, "draggable", d)),
      code: ie(K(c, "code", d)),
      defining: ie(K(c, "defining", d)),
      isolating: ie(K(c, "isolating", d)),
      attrs: Object.fromEntries(u.map((v) => {
        var y;
        return [v.name, { default: (y = v == null ? void 0 : v.attribute) === null || y === void 0 ? void 0 : y.default }];
      }))
    }), h = ie(K(c, "parseHTML", d));
    h && (p.parseDOM = h.map((v) => ad(v, u)));
    const g = K(c, "renderHTML", d);
    g && (p.toDOM = (v) => g({
      node: v,
      HTMLAttributes: kl(v, u)
    }));
    const m = K(c, "renderText", d);
    return m && (p.toText = m), [c.name, p];
  })), l = Object.fromEntries(s.map((c) => {
    const u = r.filter((m) => m.type === c.name), d = {
      name: c.name,
      options: c.options,
      storage: c.storage,
      editor: e
    }, f = n.reduce((m, v) => {
      const y = K(v, "extendMarkSchema", d);
      return {
        ...m,
        ...y ? y(c) : {}
      };
    }, {}), p = ld({
      ...f,
      inclusive: ie(K(c, "inclusive", d)),
      excludes: ie(K(c, "excludes", d)),
      group: ie(K(c, "group", d)),
      spanning: ie(K(c, "spanning", d)),
      code: ie(K(c, "code", d)),
      attrs: Object.fromEntries(u.map((m) => {
        var v;
        return [m.name, { default: (v = m == null ? void 0 : m.attribute) === null || v === void 0 ? void 0 : v.default }];
      }))
    }), h = ie(K(c, "parseHTML", d));
    h && (p.parseDOM = h.map((m) => ad(m, u)));
    const g = K(c, "renderHTML", d);
    return g && (p.toDOM = (m) => g({
      mark: m,
      HTMLAttributes: kl(m, u)
    })), [c.name, p];
  }));
  return new eh({
    topNode: o,
    nodes: a,
    marks: l
  });
}
function ya(n, e) {
  return e.nodes[n] || e.marks[n] || null;
}
function cd(n, e) {
  return Array.isArray(e) ? e.some((t) => (typeof t == "string" ? t : t.name) === n.name) : e;
}
const Ny = (n, e = 500) => {
  let t = "";
  const r = n.parentOffset;
  return n.parent.nodesBetween(Math.max(0, r - e), r, (i, s, o, a) => {
    var l, c;
    const u = ((c = (l = i.type.spec).toText) === null || c === void 0 ? void 0 : c.call(l, {
      node: i,
      pos: s,
      parent: o,
      index: a
    })) || i.textContent || "%leaf%";
    t += u.slice(0, Math.max(0, r - s));
  }), t;
};
function cc(n) {
  return Object.prototype.toString.call(n) === "[object RegExp]";
}
class Gi {
  constructor(e) {
    this.find = e.find, this.handler = e.handler;
  }
}
const Oy = (n, e) => {
  if (cc(e))
    return e.exec(n);
  const t = e(n);
  if (!t)
    return null;
  const r = [t.text];
  return r.index = t.index, r.input = n, r.data = t.data, t.replaceWith && (t.text.includes(t.replaceWith) || console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'), r.push(t.replaceWith)), r;
};
function va(n) {
  var e;
  const { editor: t, from: r, to: i, text: s, rules: o, plugin: a } = n, { view: l } = t;
  if (l.composing)
    return !1;
  const c = l.state.doc.resolve(r);
  if (
    // check for code node
    c.parent.type.spec.code || !((e = c.nodeBefore || c.nodeAfter) === null || e === void 0) && e.marks.find((f) => f.type.spec.code)
  )
    return !1;
  let u = !1;
  const d = Ny(c) + s;
  return o.forEach((f) => {
    if (u)
      return;
    const p = Oy(d, f.find);
    if (!p)
      return;
    const h = l.state.tr, g = No({
      state: l.state,
      transaction: h
    }), m = {
      from: r - (p[0].length - s.length),
      to: i
    }, { commands: v, chain: y, can: k } = new Oo({
      editor: t,
      state: g
    });
    f.handler({
      state: g,
      range: m,
      match: p,
      commands: v,
      chain: y,
      can: k
    }) === null || !h.steps.length || (h.setMeta(a, {
      transform: h,
      from: r,
      to: i,
      text: s
    }), l.dispatch(h), u = !0);
  }), u;
}
function Ly(n) {
  const { editor: e, rules: t } = n, r = new Se({
    state: {
      init() {
        return null;
      },
      apply(i, s) {
        const o = i.getMeta(r);
        return o || (i.selectionSet || i.docChanged ? null : s);
      }
    },
    props: {
      handleTextInput(i, s, o, a) {
        return va({
          editor: e,
          from: s,
          to: o,
          text: a,
          rules: t,
          plugin: r
        });
      },
      handleDOMEvents: {
        compositionend: (i) => (setTimeout(() => {
          const { $cursor: s } = i.state.selection;
          s && va({
            editor: e,
            from: s.pos,
            to: s.pos,
            text: "",
            rules: t,
            plugin: r
          });
        }), !1)
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(i, s) {
        if (s.key !== "Enter")
          return !1;
        const { $cursor: o } = i.state.selection;
        return o ? va({
          editor: e,
          from: o.pos,
          to: o.pos,
          text: `
`,
          rules: t,
          plugin: r
        }) : !1;
      }
    },
    // @ts-ignore
    isInputRules: !0
  });
  return r;
}
function Ry(n) {
  return typeof n == "number";
}
class Dy {
  constructor(e) {
    this.find = e.find, this.handler = e.handler;
  }
}
const Iy = (n, e) => {
  if (cc(e))
    return [...n.matchAll(e)];
  const t = e(n);
  return t ? t.map((r) => {
    const i = [r.text];
    return i.index = r.index, i.input = n, i.data = r.data, r.replaceWith && (r.text.includes(r.replaceWith) || console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'), i.push(r.replaceWith)), i;
  }) : [];
};
function By(n) {
  const { editor: e, state: t, from: r, to: i, rule: s, pasteEvent: o, dropEvent: a } = n, { commands: l, chain: c, can: u } = new Oo({
    editor: e,
    state: t
  }), d = [];
  return t.doc.nodesBetween(r, i, (p, h) => {
    if (!p.isTextblock || p.type.spec.code)
      return;
    const g = Math.max(r, h), m = Math.min(i, h + p.content.size), v = p.textBetween(g - h, m - h, void 0, "￼");
    Iy(v, s.find).forEach((k) => {
      if (k.index === void 0)
        return;
      const b = g + k.index + 1, x = b + k[0].length, w = {
        from: t.tr.mapping.map(b),
        to: t.tr.mapping.map(x)
      }, S = s.handler({
        state: t,
        range: w,
        match: k,
        commands: l,
        chain: c,
        can: u,
        pasteEvent: o,
        dropEvent: a
      });
      d.push(S);
    });
  }), d.every((p) => p !== null);
}
function Hy(n) {
  const { editor: e, rules: t } = n;
  let r = null, i = !1, s = !1, o = new ClipboardEvent("paste"), a = new DragEvent("drop");
  return t.map((c) => new Se({
    // we register a global drag handler to track the current drag source element
    view(u) {
      const d = (f) => {
        var p;
        r = !((p = u.dom.parentElement) === null || p === void 0) && p.contains(f.target) ? u.dom.parentElement : null;
      };
      return window.addEventListener("dragstart", d), {
        destroy() {
          window.removeEventListener("dragstart", d);
        }
      };
    },
    props: {
      handleDOMEvents: {
        drop: (u, d) => (s = r === u.dom.parentElement, a = d, !1),
        paste: (u, d) => {
          var f;
          const p = (f = d.clipboardData) === null || f === void 0 ? void 0 : f.getData("text/html");
          return o = d, i = !!(p != null && p.includes("data-pm-slice")), !1;
        }
      }
    },
    appendTransaction: (u, d, f) => {
      const p = u[0], h = p.getMeta("uiEvent") === "paste" && !i, g = p.getMeta("uiEvent") === "drop" && !s;
      if (!h && !g)
        return;
      const m = d.doc.content.findDiffStart(f.doc.content), v = d.doc.content.findDiffEnd(f.doc.content);
      if (!Ry(m) || !v || m === v.b)
        return;
      const y = f.tr, k = No({
        state: f,
        transaction: y
      });
      if (!(!By({
        editor: e,
        state: k,
        from: Math.max(m - 1, 0),
        to: v.b - 1,
        rule: c,
        pasteEvent: o,
        dropEvent: a
      }) || !y.steps.length))
        return a = new DragEvent("drop"), o = new ClipboardEvent("paste"), y;
    }
  }));
}
function Py(n) {
  const e = n.filter((t, r) => n.indexOf(t) !== r);
  return [...new Set(e)];
}
class Nr {
  constructor(e, t) {
    this.splittableMarks = [], this.editor = t, this.extensions = Nr.resolve(e), this.schema = Ty(this.extensions, t), this.extensions.forEach((r) => {
      var i;
      this.editor.extensionStorage[r.name] = r.storage;
      const s = {
        name: r.name,
        options: r.options,
        storage: r.storage,
        editor: this.editor,
        type: ya(r.name, this.schema)
      };
      r.type === "mark" && (!((i = ie(K(r, "keepOnSplit", s))) !== null && i !== void 0) || i) && this.splittableMarks.push(r.name);
      const o = K(r, "onBeforeCreate", s);
      o && this.editor.on("beforeCreate", o);
      const a = K(r, "onCreate", s);
      a && this.editor.on("create", a);
      const l = K(r, "onUpdate", s);
      l && this.editor.on("update", l);
      const c = K(r, "onSelectionUpdate", s);
      c && this.editor.on("selectionUpdate", c);
      const u = K(r, "onTransaction", s);
      u && this.editor.on("transaction", u);
      const d = K(r, "onFocus", s);
      d && this.editor.on("focus", d);
      const f = K(r, "onBlur", s);
      f && this.editor.on("blur", f);
      const p = K(r, "onDestroy", s);
      p && this.editor.on("destroy", p);
    });
  }
  static resolve(e) {
    const t = Nr.sort(Nr.flatten(e)), r = Py(t.map((i) => i.name));
    return r.length && console.warn(`[tiptap warn]: Duplicate extension names found: [${r.map((i) => `'${i}'`).join(", ")}]. This can lead to issues.`), t;
  }
  static flatten(e) {
    return e.map((t) => {
      const r = {
        name: t.name,
        options: t.options,
        storage: t.storage
      }, i = K(t, "addExtensions", r);
      return i ? [t, ...this.flatten(i())] : t;
    }).flat(10);
  }
  static sort(e) {
    return e.sort((r, i) => {
      const s = K(r, "priority") || 100, o = K(i, "priority") || 100;
      return s > o ? -1 : s < o ? 1 : 0;
    });
  }
  get commands() {
    return this.extensions.reduce((e, t) => {
      const r = {
        name: t.name,
        options: t.options,
        storage: t.storage,
        editor: this.editor,
        type: ya(t.name, this.schema)
      }, i = K(t, "addCommands", r);
      return i ? {
        ...e,
        ...i()
      } : e;
    }, {});
  }
  get plugins() {
    const { editor: e } = this, t = Nr.sort([...this.extensions].reverse()), r = [], i = [], s = t.map((o) => {
      const a = {
        name: o.name,
        options: o.options,
        storage: o.storage,
        editor: e,
        type: ya(o.name, this.schema)
      }, l = [], c = K(o, "addKeyboardShortcuts", a);
      let u = {};
      if (o.type === "mark" && o.config.exitable && (u.ArrowRight = () => Re.handleExit({ editor: e, mark: o })), c) {
        const g = Object.fromEntries(Object.entries(c()).map(([m, v]) => [m, () => v({ editor: e })]));
        u = { ...u, ...g };
      }
      const d = ey(u);
      l.push(d);
      const f = K(o, "addInputRules", a);
      cd(o, e.options.enableInputRules) && f && r.push(...f());
      const p = K(o, "addPasteRules", a);
      cd(o, e.options.enablePasteRules) && p && i.push(...p());
      const h = K(o, "addProseMirrorPlugins", a);
      if (h) {
        const g = h();
        l.push(...g);
      }
      return l;
    }).flat();
    return [
      Ly({
        editor: e,
        rules: r
      }),
      ...Hy({
        editor: e,
        rules: i
      }),
      ...s
    ];
  }
  get attributes() {
    return tg(this.extensions);
  }
  get nodeViews() {
    const { editor: e } = this, { nodeExtensions: t } = Lo(this.extensions);
    return Object.fromEntries(t.filter((r) => !!K(r, "addNodeView")).map((r) => {
      const i = this.attributes.filter((l) => l.type === r.name), s = {
        name: r.name,
        options: r.options,
        storage: r.storage,
        editor: e,
        type: Fe(r.name, this.schema)
      }, o = K(r, "addNodeView", s);
      if (!o)
        return [];
      const a = (l, c, u, d) => {
        const f = kl(l, i);
        return o()({
          editor: e,
          node: l,
          getPos: u,
          decorations: d,
          HTMLAttributes: f,
          extension: r
        });
      };
      return [r.name, a];
    }));
  }
}
function $y(n) {
  return Object.prototype.toString.call(n).slice(8, -1);
}
function wa(n) {
  return $y(n) !== "Object" ? !1 : n.constructor === Object && Object.getPrototypeOf(n) === Object.prototype;
}
function Ro(n, e) {
  const t = { ...n };
  return wa(n) && wa(e) && Object.keys(e).forEach((r) => {
    wa(e[r]) ? r in n ? t[r] = Ro(n[r], e[r]) : Object.assign(t, { [r]: e[r] }) : Object.assign(t, { [r]: e[r] });
  }), t;
}
class Ee {
  constructor(e = {}) {
    this.type = "extension", this.name = "extension", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = ie(K(this, "addOptions", {
      name: this.name
    }))), this.storage = ie(K(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new Ee(e);
  }
  configure(e = {}) {
    const t = this.extend();
    return t.options = Ro(this.options, e), t.storage = ie(K(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
  extend(e = {}) {
    const t = new Ee(e);
    return t.parent = this, this.child = t, t.name = e.name ? e.name : t.parent.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`), t.options = ie(K(t, "addOptions", {
      name: t.name
    })), t.storage = ie(K(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
}
function rg(n, e, t) {
  const { from: r, to: i } = e, { blockSeparator: s = `

`, textSerializers: o = {} } = t || {};
  let a = "", l = !0;
  return n.nodesBetween(r, i, (c, u, d, f) => {
    var p;
    const h = o == null ? void 0 : o[c.type.name];
    h ? (c.isBlock && !l && (a += s, l = !0), d && (a += h({
      node: c,
      pos: u,
      parent: d,
      index: f,
      range: e
    }))) : c.isText ? (a += (p = c == null ? void 0 : c.text) === null || p === void 0 ? void 0 : p.slice(Math.max(r, u) - u, i - u), l = !1) : c.isBlock && !l && (a += s, l = !0);
  }), a;
}
function ig(n) {
  return Object.fromEntries(Object.entries(n.nodes).filter(([, e]) => e.spec.toText).map(([e, t]) => [e, t.spec.toText]));
}
const Fy = Ee.create({
  name: "clipboardTextSerializer",
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor: n } = this, { state: e, schema: t } = n, { doc: r, selection: i } = e, { ranges: s } = i, o = Math.min(...s.map((u) => u.$from.pos)), a = Math.max(...s.map((u) => u.$to.pos)), l = ig(t);
            return rg(r, { from: o, to: a }, {
              textSerializers: l
            });
          }
        }
      })
    ];
  }
}), zy = () => ({ editor: n, view: e }) => (requestAnimationFrame(() => {
  var t;
  n.isDestroyed || (e.dom.blur(), (t = window == null ? void 0 : window.getSelection()) === null || t === void 0 || t.removeAllRanges());
}), !0), Vy = (n = !1) => ({ commands: e }) => e.setContent("", n), qy = () => ({ state: n, tr: e, dispatch: t }) => {
  const { selection: r } = e, { ranges: i } = r;
  return t && i.forEach(({ $from: s, $to: o }) => {
    n.doc.nodesBetween(s.pos, o.pos, (a, l) => {
      if (a.type.isText)
        return;
      const { doc: c, mapping: u } = e, d = c.resolve(u.map(l)), f = c.resolve(u.map(l + a.nodeSize)), p = d.blockRange(f);
      if (!p)
        return;
      const h = Jr(p);
      if (a.type.isTextblock) {
        const { defaultType: g } = d.parent.contentMatchAt(d.index());
        e.setNodeMarkup(p.start, g);
      }
      (h || h === 0) && e.lift(p, h);
    });
  }), !0;
}, Uy = (n) => (e) => n(e), Ky = () => ({ state: n, dispatch: e }) => py(n, e), Wy = (n, e) => ({ editor: t, tr: r }) => {
  const { state: i } = t, s = i.doc.slice(n.from, n.to);
  r.deleteRange(n.from, n.to);
  const o = r.mapping.map(e);
  return r.insert(o, s.content), r.setSelection(new X(r.doc.resolve(o - 1))), !0;
}, Gy = () => ({ tr: n, dispatch: e }) => {
  const { selection: t } = n, r = t.$anchor.node();
  if (r.content.size > 0)
    return !1;
  const i = n.selection.$anchor;
  for (let s = i.depth; s > 0; s -= 1)
    if (i.node(s).type === r.type) {
      if (e) {
        const a = i.before(s), l = i.after(s);
        n.delete(a, l).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, Zy = (n) => ({ tr: e, state: t, dispatch: r }) => {
  const i = Fe(n, t.schema), s = e.selection.$anchor;
  for (let o = s.depth; o > 0; o -= 1)
    if (s.node(o).type === i) {
      if (r) {
        const l = s.before(o), c = s.after(o);
        e.delete(l, c).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, jy = (n) => ({ tr: e, dispatch: t }) => {
  const { from: r, to: i } = n;
  return t && e.delete(r, i), !0;
}, Jy = () => ({ state: n, dispatch: e }) => ty(n, e), Yy = () => ({ commands: n }) => n.keyboardShortcut("Enter"), Xy = () => ({ state: n, dispatch: e }) => fy(n, e);
function qr(n, e, t = { strict: !0 }) {
  const r = Object.keys(e);
  return r.length ? r.every((i) => t.strict ? e[i] === n[i] : cc(e[i]) ? e[i].test(n[i]) : e[i] === n[i]) : !0;
}
function El(n, e, t = {}) {
  return n.find((r) => r.type === e && qr(r.attrs, t));
}
function Qy(n, e, t = {}) {
  return !!El(n, e, t);
}
function uc(n, e, t = {}) {
  if (!n || !e)
    return;
  let r = n.parent.childAfter(n.parentOffset);
  if (n.parentOffset === r.offset && r.offset !== 0 && (r = n.parent.childBefore(n.parentOffset)), !r.node)
    return;
  const i = El([...r.node.marks], e, t);
  if (!i)
    return;
  let s = r.index, o = n.start() + r.offset, a = s + 1, l = o + r.node.nodeSize;
  for (El([...r.node.marks], e, t); s > 0 && i.isInSet(n.parent.child(s - 1).marks); )
    s -= 1, o -= n.parent.child(s).nodeSize;
  for (; a < n.parent.childCount && Qy([...n.parent.child(a).marks], e, t); )
    l += n.parent.child(a).nodeSize, a += 1;
  return {
    from: o,
    to: l
  };
}
function un(n, e) {
  if (typeof n == "string") {
    if (!e.marks[n])
      throw Error(`There is no mark type named '${n}'. Maybe you forgot to add the extension?`);
    return e.marks[n];
  }
  return n;
}
const ev = (n, e = {}) => ({ tr: t, state: r, dispatch: i }) => {
  const s = un(n, r.schema), { doc: o, selection: a } = t, { $from: l, from: c, to: u } = a;
  if (i) {
    const d = uc(l, s, e);
    if (d && d.from <= c && d.to >= u) {
      const f = X.create(o, d.from, d.to);
      t.setSelection(f);
    }
  }
  return !0;
}, tv = (n) => (e) => {
  const t = typeof n == "function" ? n(e) : n;
  for (let r = 0; r < t.length; r += 1)
    if (t[r](e))
      return !0;
  return !1;
};
function dc(n) {
  return n instanceof X;
}
function an(n = 0, e = 0, t = 0) {
  return Math.min(Math.max(n, e), t);
}
function sg(n, e = null) {
  if (!e)
    return null;
  const t = ne.atStart(n), r = ne.atEnd(n);
  if (e === "start" || e === !0)
    return t;
  if (e === "end")
    return r;
  const i = t.from, s = r.to;
  return e === "all" ? X.create(n, an(0, i, s), an(n.content.size, i, s)) : X.create(n, an(e, i, s), an(e, i, s));
}
function fc() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
const nv = (n = null, e = {}) => ({ editor: t, view: r, tr: i, dispatch: s }) => {
  e = {
    scrollIntoView: !0,
    ...e
  };
  const o = () => {
    fc() && r.dom.focus(), requestAnimationFrame(() => {
      t.isDestroyed || (r.focus(), e != null && e.scrollIntoView && t.commands.scrollIntoView());
    });
  };
  if (r.hasFocus() && n === null || n === !1)
    return !0;
  if (s && n === null && !dc(t.state.selection))
    return o(), !0;
  const a = sg(i.doc, n) || t.state.selection, l = t.state.selection.eq(a);
  return s && (l || i.setSelection(a), l && i.storedMarks && i.setStoredMarks(i.storedMarks), o()), !0;
}, rv = (n, e) => (t) => n.every((r, i) => e(r, { ...t, index: i })), iv = (n, e) => ({ tr: t, commands: r }) => r.insertContentAt({ from: t.selection.from, to: t.selection.to }, n, e);
function ud(n) {
  const e = `<body>${n}</body>`;
  return new window.DOMParser().parseFromString(e, "text/html").body;
}
function Ws(n, e, t) {
  if (t = {
    slice: !0,
    parseOptions: {},
    ...t
  }, typeof n == "object" && n !== null)
    try {
      return Array.isArray(n) && n.length > 0 ? R.fromArray(n.map((r) => e.nodeFromJSON(r))) : e.nodeFromJSON(n);
    } catch (r) {
      return console.warn("[tiptap warn]: Invalid content.", "Passed value:", n, "Error:", r), Ws("", e, t);
    }
  if (typeof n == "string") {
    const r = Nn.fromSchema(e);
    return t.slice ? r.parseSlice(ud(n), t.parseOptions).content : r.parse(ud(n), t.parseOptions);
  }
  return Ws("", e, t);
}
function sv(n, e, t) {
  const r = n.steps.length - 1;
  if (r < e)
    return;
  const i = n.steps[r];
  if (!(i instanceof Ue || i instanceof Pe))
    return;
  const s = n.mapping.maps[r];
  let o = 0;
  s.forEach((a, l, c, u) => {
    o === 0 && (o = u);
  }), n.setSelection(ne.near(n.doc.resolve(o), t));
}
const ov = (n) => n.toString().startsWith("<"), av = (n, e, t) => ({ tr: r, dispatch: i, editor: s }) => {
  if (i) {
    t = {
      parseOptions: {},
      updateSelection: !0,
      ...t
    };
    const o = Ws(e, s.schema, {
      parseOptions: {
        preserveWhitespace: "full",
        ...t.parseOptions
      }
    });
    if (o.toString() === "<>")
      return !0;
    let { from: a, to: l } = typeof n == "number" ? { from: n, to: n } : { from: n.from, to: n.to }, c = !0, u = !0;
    if ((ov(o) ? o : [o]).forEach((f) => {
      f.check(), c = c ? f.isText && f.marks.length === 0 : !1, u = u ? f.isBlock : !1;
    }), a === l && u) {
      const { parent: f } = r.doc.resolve(a);
      f.isTextblock && !f.type.spec.code && !f.childCount && (a -= 1, l += 1);
    }
    c ? Array.isArray(e) ? r.insertText(e.map((f) => f.text || "").join(""), a, l) : typeof e == "object" && e && e.text ? r.insertText(e.text, a, l) : r.insertText(e, a, l) : r.replaceWith(a, l, o), t.updateSelection && sv(r, r.steps.length - 1, -1);
  }
  return !0;
}, lv = () => ({ state: n, dispatch: e }) => ly(n, e), cv = () => ({ state: n, dispatch: e }) => cy(n, e), uv = () => ({ state: n, dispatch: e }) => ry(n, e), dv = () => ({ state: n, dispatch: e }) => oy(n, e), fv = () => ({ tr: n, state: e, dispatch: t }) => {
  try {
    const r = So(e.doc, e.selection.$from.pos, -1);
    return r == null ? !1 : (n.join(r, 2), t && t(n), !0);
  } catch {
    return !1;
  }
}, pv = () => ({ state: n, dispatch: e, tr: t }) => {
  try {
    const r = So(n.doc, n.selection.$from.pos, 1);
    return r == null ? !1 : (t.join(r, 2), e && e(t), !0);
  } catch {
    return !1;
  }
};
function pc() {
  return typeof navigator < "u" ? /Mac/.test(navigator.platform) : !1;
}
function hv(n) {
  const e = n.split(/-(?!$)/);
  let t = e[e.length - 1];
  t === "Space" && (t = " ");
  let r, i, s, o;
  for (let a = 0; a < e.length - 1; a += 1) {
    const l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      i = !0;
    else if (/^s(hift)?$/i.test(l))
      s = !0;
    else if (/^mod$/i.test(l))
      fc() || pc() ? o = !0 : i = !0;
    else
      throw new Error(`Unrecognized modifier name: ${l}`);
  }
  return r && (t = `Alt-${t}`), i && (t = `Ctrl-${t}`), o && (t = `Meta-${t}`), s && (t = `Shift-${t}`), t;
}
const gv = (n) => ({ editor: e, view: t, tr: r, dispatch: i }) => {
  const s = hv(n).split(/-(?!$)/), o = s.find((c) => !["Alt", "Ctrl", "Meta", "Shift"].includes(c)), a = new KeyboardEvent("keydown", {
    key: o === "Space" ? " " : o,
    altKey: s.includes("Alt"),
    ctrlKey: s.includes("Ctrl"),
    metaKey: s.includes("Meta"),
    shiftKey: s.includes("Shift"),
    bubbles: !0,
    cancelable: !0
  }), l = e.captureTransaction(() => {
    t.someProp("handleKeyDown", (c) => c(t, a));
  });
  return l == null || l.steps.forEach((c) => {
    const u = c.map(r.mapping);
    u && i && r.maybeStep(u);
  }), !0;
};
function ir(n, e, t = {}) {
  const { from: r, to: i, empty: s } = n.selection, o = e ? Fe(e, n.schema) : null, a = [];
  n.doc.nodesBetween(r, i, (d, f) => {
    if (d.isText)
      return;
    const p = Math.max(r, f), h = Math.min(i, f + d.nodeSize);
    a.push({
      node: d,
      from: p,
      to: h
    });
  });
  const l = i - r, c = a.filter((d) => o ? o.name === d.node.type.name : !0).filter((d) => qr(d.node.attrs, t, { strict: !1 }));
  return s ? !!c.length : c.reduce((d, f) => d + f.to - f.from, 0) >= l;
}
const mv = (n, e = {}) => ({ state: t, dispatch: r }) => {
  const i = Fe(n, t.schema);
  return ir(t, i, e) ? uy(t, r) : !1;
}, bv = () => ({ state: n, dispatch: e }) => hy(n, e), yv = (n) => ({ state: e, dispatch: t }) => {
  const r = Fe(n, e.schema);
  return Ey(r)(e, t);
}, vv = () => ({ state: n, dispatch: e }) => dy(n, e);
function Do(n, e) {
  return e.nodes[n] ? "node" : e.marks[n] ? "mark" : null;
}
function dd(n, e) {
  const t = typeof e == "string" ? [e] : e;
  return Object.keys(n).reduce((r, i) => (t.includes(i) || (r[i] = n[i]), r), {});
}
const wv = (n, e) => ({ tr: t, state: r, dispatch: i }) => {
  let s = null, o = null;
  const a = Do(typeof n == "string" ? n : n.name, r.schema);
  return a ? (a === "node" && (s = Fe(n, r.schema)), a === "mark" && (o = un(n, r.schema)), i && t.selection.ranges.forEach((l) => {
    r.doc.nodesBetween(l.$from.pos, l.$to.pos, (c, u) => {
      s && s === c.type && t.setNodeMarkup(u, void 0, dd(c.attrs, e)), o && c.marks.length && c.marks.forEach((d) => {
        o === d.type && t.addMark(u, u + c.nodeSize, o.create(dd(d.attrs, e)));
      });
    });
  }), !0) : !1;
}, kv = () => ({ tr: n, dispatch: e }) => (e && n.scrollIntoView(), !0), Ev = () => ({ tr: n, commands: e }) => e.setTextSelection({
  from: 0,
  to: n.doc.content.size
}), xv = () => ({ state: n, dispatch: e }) => iy(n, e), Cv = () => ({ state: n, dispatch: e }) => ay(n, e), Sv = () => ({ state: n, dispatch: e }) => gy(n, e), _v = () => ({ state: n, dispatch: e }) => yy(n, e), Mv = () => ({ state: n, dispatch: e }) => by(n, e);
function og(n, e, t = {}) {
  return Ws(n, e, { slice: !1, parseOptions: t });
}
const Av = (n, e = !1, t = {}) => ({ tr: r, editor: i, dispatch: s }) => {
  const { doc: o } = r, a = og(n, i.schema, t);
  return s && r.replaceWith(0, o.content.size, a).setMeta("preventUpdate", !e), !0;
};
function Zi(n, e) {
  const t = un(e, n.schema), { from: r, to: i, empty: s } = n.selection, o = [];
  s ? (n.storedMarks && o.push(...n.storedMarks), o.push(...n.selection.$head.marks())) : n.doc.nodesBetween(r, i, (l) => {
    o.push(...l.marks);
  });
  const a = o.find((l) => l.type.name === t.name);
  return a ? { ...a.attrs } : {};
}
function Tv(n, e) {
  const t = new Yl(n);
  return e.forEach((r) => {
    r.steps.forEach((i) => {
      t.step(i);
    });
  }), t;
}
function Nv(n) {
  for (let e = 0; e < n.edgeCount; e += 1) {
    const { type: t } = n.edge(e);
    if (t.isTextblock && !t.hasRequiredAttrs())
      return t;
  }
  return null;
}
function xl(n, e) {
  const t = [];
  return n.descendants((r, i) => {
    e(r) && t.push({
      node: r,
      pos: i
    });
  }), t;
}
function Ov(n, e, t) {
  const r = [];
  return n.nodesBetween(e.from, e.to, (i, s) => {
    t(i) && r.push({
      node: i,
      pos: s
    });
  }), r;
}
function ag(n, e) {
  for (let t = n.depth; t > 0; t -= 1) {
    const r = n.node(t);
    if (e(r))
      return {
        pos: t > 0 ? n.before(t) : 0,
        start: n.start(t),
        depth: t,
        node: r
      };
  }
}
function Io(n) {
  return (e) => ag(e.$from, n);
}
function hc(n, e) {
  const t = qt.fromSchema(e).serializeFragment(n), i = document.implementation.createHTMLDocument().createElement("div");
  return i.appendChild(t), i.innerHTML;
}
function Lv(n, e) {
  const t = {
    from: 0,
    to: n.content.size
  };
  return rg(n, t, e);
}
function Rv(n, e) {
  const t = Fe(e, n.schema), { from: r, to: i } = n.selection, s = [];
  n.doc.nodesBetween(r, i, (a) => {
    s.push(a);
  });
  const o = s.reverse().find((a) => a.type.name === t.name);
  return o ? { ...o.attrs } : {};
}
function lg(n, e) {
  const t = Do(typeof e == "string" ? e : e.name, n.schema);
  return t === "node" ? Rv(n, e) : t === "mark" ? Zi(n, e) : {};
}
function Dv(n, e = JSON.stringify) {
  const t = {};
  return n.filter((r) => {
    const i = e(r);
    return Object.prototype.hasOwnProperty.call(t, i) ? !1 : t[i] = !0;
  });
}
function Iv(n) {
  const e = Dv(n);
  return e.length === 1 ? e : e.filter((t, r) => !e.filter((s, o) => o !== r).some((s) => t.oldRange.from >= s.oldRange.from && t.oldRange.to <= s.oldRange.to && t.newRange.from >= s.newRange.from && t.newRange.to <= s.newRange.to));
}
function Bv(n) {
  const { mapping: e, steps: t } = n, r = [];
  return e.maps.forEach((i, s) => {
    const o = [];
    if (i.ranges.length)
      i.forEach((a, l) => {
        o.push({ from: a, to: l });
      });
    else {
      const { from: a, to: l } = t[s];
      if (a === void 0 || l === void 0)
        return;
      o.push({ from: a, to: l });
    }
    o.forEach(({ from: a, to: l }) => {
      const c = e.slice(s).map(a, -1), u = e.slice(s).map(l), d = e.invert().map(c, -1), f = e.invert().map(u);
      r.push({
        oldRange: {
          from: d,
          to: f
        },
        newRange: {
          from: c,
          to: u
        }
      });
    });
  }), Iv(r);
}
function gc(n, e, t) {
  const r = [];
  return n === e ? t.resolve(n).marks().forEach((i) => {
    const s = t.resolve(n - 1), o = uc(s, i.type);
    o && r.push({
      mark: i,
      ...o
    });
  }) : t.nodesBetween(n, e, (i, s) => {
    r.push(...i.marks.map((o) => ({
      from: s,
      to: s + i.nodeSize,
      mark: o
    })));
  }), r;
}
function Ms(n, e, t) {
  return Object.fromEntries(Object.entries(t).filter(([r]) => {
    const i = n.find((s) => s.type === e && s.name === r);
    return i ? i.attribute.keepOnSplit : !1;
  }));
}
function Cl(n, e, t = {}) {
  const { empty: r, ranges: i } = n.selection, s = e ? un(e, n.schema) : null;
  if (r)
    return !!(n.storedMarks || n.selection.$from.marks()).filter((d) => s ? s.name === d.type.name : !0).find((d) => qr(d.attrs, t, { strict: !1 }));
  let o = 0;
  const a = [];
  if (i.forEach(({ $from: d, $to: f }) => {
    const p = d.pos, h = f.pos;
    n.doc.nodesBetween(p, h, (g, m) => {
      if (!g.isText && !g.marks.length)
        return;
      const v = Math.max(p, m), y = Math.min(h, m + g.nodeSize), k = y - v;
      o += k, a.push(...g.marks.map((b) => ({
        mark: b,
        from: v,
        to: y
      })));
    });
  }), o === 0)
    return !1;
  const l = a.filter((d) => s ? s.name === d.mark.type.name : !0).filter((d) => qr(d.mark.attrs, t, { strict: !1 })).reduce((d, f) => d + f.to - f.from, 0), c = a.filter((d) => s ? d.mark.type !== s && d.mark.type.excludes(s) : !0).reduce((d, f) => d + f.to - f.from, 0);
  return (l > 0 ? l + c : l) >= o;
}
function Hv(n, e, t = {}) {
  if (!e)
    return ir(n, null, t) || Cl(n, null, t);
  const r = Do(e, n.schema);
  return r === "node" ? ir(n, e, t) : r === "mark" ? Cl(n, e, t) : !1;
}
function fd(n, e) {
  const { nodeExtensions: t } = Lo(e), r = t.find((o) => o.name === n);
  if (!r)
    return !1;
  const i = {
    name: r.name,
    options: r.options,
    storage: r.storage
  }, s = ie(K(r, "group", i));
  return typeof s != "string" ? !1 : s.split(" ").includes("list");
}
function Pv(n) {
  var e;
  const t = (e = n.type.createAndFill()) === null || e === void 0 ? void 0 : e.toJSON(), r = n.toJSON();
  return JSON.stringify(t) === JSON.stringify(r);
}
function $v(n) {
  return n instanceof Q;
}
function mc(n, e, t) {
  const i = n.state.doc.content.size, s = an(e, 0, i), o = an(t, 0, i), a = n.coordsAtPos(s), l = n.coordsAtPos(o, -1), c = Math.min(a.top, l.top), u = Math.max(a.bottom, l.bottom), d = Math.min(a.left, l.left), f = Math.max(a.right, l.right), p = f - d, h = u - c, v = {
    top: c,
    bottom: u,
    left: d,
    right: f,
    width: p,
    height: h,
    x: d,
    y: c
  };
  return {
    ...v,
    toJSON: () => v
  };
}
function Fv(n, e, t) {
  var r;
  const { selection: i } = e;
  let s = null;
  if (dc(i) && (s = i.$cursor), s) {
    const a = (r = n.storedMarks) !== null && r !== void 0 ? r : s.marks();
    return !!t.isInSet(a) || !a.some((l) => l.type.excludes(t));
  }
  const { ranges: o } = i;
  return o.some(({ $from: a, $to: l }) => {
    let c = a.depth === 0 ? n.doc.inlineContent && n.doc.type.allowsMarkType(t) : !1;
    return n.doc.nodesBetween(a.pos, l.pos, (u, d, f) => {
      if (c)
        return !1;
      if (u.isInline) {
        const p = !f || f.type.allowsMarkType(t), h = !!t.isInSet(u.marks) || !u.marks.some((g) => g.type.excludes(t));
        c = p && h;
      }
      return !c;
    }), c;
  });
}
const zv = (n, e = {}) => ({ tr: t, state: r, dispatch: i }) => {
  const { selection: s } = t, { empty: o, ranges: a } = s, l = un(n, r.schema);
  if (i)
    if (o) {
      const c = Zi(r, l);
      t.addStoredMark(l.create({
        ...c,
        ...e
      }));
    } else
      a.forEach((c) => {
        const u = c.$from.pos, d = c.$to.pos;
        r.doc.nodesBetween(u, d, (f, p) => {
          const h = Math.max(p, u), g = Math.min(p + f.nodeSize, d);
          f.marks.find((v) => v.type === l) ? f.marks.forEach((v) => {
            l === v.type && t.addMark(h, g, l.create({
              ...v.attrs,
              ...e
            }));
          }) : t.addMark(h, g, l.create(e));
        });
      });
  return Fv(r, t, l);
}, Vv = (n, e) => ({ tr: t }) => (t.setMeta(n, e), !0), qv = (n, e = {}) => ({ state: t, dispatch: r, chain: i }) => {
  const s = Fe(n, t.schema);
  return s.isTextblock ? i().command(({ commands: o }) => od(s, e)(t) ? !0 : o.clearNodes()).command(({ state: o }) => od(s, e)(o, r)).run() : (console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'), !1);
}, Uv = (n) => ({ tr: e, dispatch: t }) => {
  if (t) {
    const { doc: r } = e, i = an(n, 0, r.content.size), s = Q.create(r, i);
    e.setSelection(s);
  }
  return !0;
}, Kv = (n) => ({ tr: e, dispatch: t }) => {
  if (t) {
    const { doc: r } = e, { from: i, to: s } = typeof n == "number" ? { from: n, to: n } : n, o = X.atStart(r).from, a = X.atEnd(r).to, l = an(i, o, a), c = an(s, o, a), u = X.create(r, l, c);
    e.setSelection(u);
  }
  return !0;
}, Wv = (n) => ({ state: e, dispatch: t }) => {
  const r = Fe(n, e.schema);
  return Sy(r)(e, t);
};
function pd(n, e) {
  const t = n.storedMarks || n.selection.$to.parentOffset && n.selection.$from.marks();
  if (t) {
    const r = t.filter((i) => e == null ? void 0 : e.includes(i.type.name));
    n.tr.ensureMarks(r);
  }
}
const Gv = ({ keepMarks: n = !0 } = {}) => ({ tr: e, state: t, dispatch: r, editor: i }) => {
  const { selection: s, doc: o } = e, { $from: a, $to: l } = s, c = i.extensionManager.attributes, u = Ms(c, a.node().type.name, a.node().attrs);
  if (s instanceof Q && s.node.isBlock)
    return !a.parentOffset || !Ir(o, a.pos) ? !1 : (r && (n && pd(t, i.extensionManager.splittableMarks), e.split(a.pos).scrollIntoView()), !0);
  if (!a.parent.isBlock)
    return !1;
  if (r) {
    const d = l.parentOffset === l.parent.content.size;
    s instanceof X && e.deleteSelection();
    const f = a.depth === 0 ? void 0 : Nv(a.node(-1).contentMatchAt(a.indexAfter(-1)));
    let p = d && f ? [
      {
        type: f,
        attrs: u
      }
    ] : void 0, h = Ir(e.doc, e.mapping.map(a.pos), 1, p);
    if (!p && !h && Ir(e.doc, e.mapping.map(a.pos), 1, f ? [{ type: f }] : void 0) && (h = !0, p = f ? [
      {
        type: f,
        attrs: u
      }
    ] : void 0), h && (e.split(e.mapping.map(a.pos), 1, p), f && !d && !a.parentOffset && a.parent.type !== f)) {
      const g = e.mapping.map(a.before()), m = e.doc.resolve(g);
      a.node(-1).canReplaceWith(m.index(), m.index() + 1, f) && e.setNodeMarkup(e.mapping.map(a.before()), f);
    }
    n && pd(t, i.extensionManager.splittableMarks), e.scrollIntoView();
  }
  return !0;
}, Zv = (n) => ({ tr: e, state: t, dispatch: r, editor: i }) => {
  var s;
  const o = Fe(n, t.schema), { $from: a, $to: l } = t.selection, c = t.selection.node;
  if (c && c.isBlock || a.depth < 2 || !a.sameParent(l))
    return !1;
  const u = a.node(-1);
  if (u.type !== o)
    return !1;
  const d = i.extensionManager.attributes;
  if (a.parent.content.size === 0 && a.node(-1).childCount === a.indexAfter(-1)) {
    if (a.depth === 2 || a.node(-3).type !== o || a.index(-2) !== a.node(-2).childCount - 1)
      return !1;
    if (r) {
      let m = R.empty;
      const v = a.index(-1) ? 1 : a.index(-2) ? 2 : 3;
      for (let S = a.depth - v; S >= a.depth - 3; S -= 1)
        m = R.from(a.node(S).copy(m));
      const y = a.indexAfter(-1) < a.node(-2).childCount ? 1 : a.indexAfter(-2) < a.node(-3).childCount ? 2 : 3, k = Ms(d, a.node().type.name, a.node().attrs), b = ((s = o.contentMatch.defaultType) === null || s === void 0 ? void 0 : s.createAndFill(k)) || void 0;
      m = m.append(R.from(o.createAndFill(null, b) || void 0));
      const x = a.before(a.depth - (v - 1));
      e.replace(x, a.after(-y), new F(m, 4 - v, 0));
      let w = -1;
      e.doc.nodesBetween(x, e.doc.content.size, (S, T) => {
        if (w > -1)
          return !1;
        S.isTextblock && S.content.size === 0 && (w = T + 1);
      }), w > -1 && e.setSelection(X.near(e.doc.resolve(w))), e.scrollIntoView();
    }
    return !0;
  }
  const f = l.pos === a.end() ? u.contentMatchAt(0).defaultType : null, p = Ms(d, u.type.name, u.attrs), h = Ms(d, a.node().type.name, a.node().attrs);
  e.delete(a.pos, l.pos);
  const g = f ? [
    { type: o, attrs: p },
    { type: f, attrs: h }
  ] : [{ type: o, attrs: p }];
  if (!Ir(e.doc, a.pos, 2))
    return !1;
  if (r) {
    const { selection: m, storedMarks: v } = t, { splittableMarks: y } = i.extensionManager, k = v || m.$to.parentOffset && m.$from.marks();
    if (e.split(a.pos, 2, g).scrollIntoView(), !k || !r)
      return !0;
    const b = k.filter((x) => y.includes(x.type.name));
    e.ensureMarks(b);
  }
  return !0;
}, ka = (n, e) => {
  const t = Io((o) => o.type === e)(n.selection);
  if (!t)
    return !0;
  const r = n.doc.resolve(Math.max(0, t.pos - 1)).before(t.depth);
  if (r === void 0)
    return !0;
  const i = n.doc.nodeAt(r);
  return t.node.type === (i == null ? void 0 : i.type) && Rn(n.doc, t.pos) && n.join(t.pos), !0;
}, Ea = (n, e) => {
  const t = Io((o) => o.type === e)(n.selection);
  if (!t)
    return !0;
  const r = n.doc.resolve(t.start).after(t.depth);
  if (r === void 0)
    return !0;
  const i = n.doc.nodeAt(r);
  return t.node.type === (i == null ? void 0 : i.type) && Rn(n.doc, r) && n.join(r), !0;
}, jv = (n, e, t, r = {}) => ({ editor: i, tr: s, state: o, dispatch: a, chain: l, commands: c, can: u }) => {
  const { extensions: d, splittableMarks: f } = i.extensionManager, p = Fe(n, o.schema), h = Fe(e, o.schema), { selection: g, storedMarks: m } = o, { $from: v, $to: y } = g, k = v.blockRange(y), b = m || g.$to.parentOffset && g.$from.marks();
  if (!k)
    return !1;
  const x = Io((w) => fd(w.type.name, d))(g);
  if (k.depth >= 1 && x && k.depth - x.depth <= 1) {
    if (x.node.type === p)
      return c.liftListItem(h);
    if (fd(x.node.type.name, d) && p.validContent(x.node.content) && a)
      return l().command(() => (s.setNodeMarkup(x.pos, p), !0)).command(() => ka(s, p)).command(() => Ea(s, p)).run();
  }
  return !t || !b || !a ? l().command(() => u().wrapInList(p, r) ? !0 : c.clearNodes()).wrapInList(p, r).command(() => ka(s, p)).command(() => Ea(s, p)).run() : l().command(() => {
    const w = u().wrapInList(p, r), S = b.filter((T) => f.includes(T.type.name));
    return s.ensureMarks(S), w ? !0 : c.clearNodes();
  }).wrapInList(p, r).command(() => ka(s, p)).command(() => Ea(s, p)).run();
}, Jv = (n, e = {}, t = {}) => ({ state: r, commands: i }) => {
  const { extendEmptyMarkRange: s = !1 } = t, o = un(n, r.schema);
  return Cl(r, o, e) ? i.unsetMark(o, { extendEmptyMarkRange: s }) : i.setMark(o, e);
}, Yv = (n, e, t = {}) => ({ state: r, commands: i }) => {
  const s = Fe(n, r.schema), o = Fe(e, r.schema);
  return ir(r, s, t) ? i.setNode(o) : i.setNode(s, t);
}, Xv = (n, e = {}) => ({ state: t, commands: r }) => {
  const i = Fe(n, t.schema);
  return ir(t, i, e) ? r.lift(i) : r.wrapIn(i, e);
}, Qv = () => ({ state: n, dispatch: e }) => {
  const t = n.plugins;
  for (let r = 0; r < t.length; r += 1) {
    const i = t[r];
    let s;
    if (i.spec.isInputRules && (s = i.getState(n))) {
      if (e) {
        const o = n.tr, a = s.transform;
        for (let l = a.steps.length - 1; l >= 0; l -= 1)
          o.step(a.steps[l].invert(a.docs[l]));
        if (s.text) {
          const l = o.doc.resolve(s.from).marks();
          o.replaceWith(s.from, s.to, n.schema.text(s.text, l));
        } else
          o.delete(s.from, s.to);
      }
      return !0;
    }
  }
  return !1;
}, ew = () => ({ tr: n, dispatch: e }) => {
  const { selection: t } = n, { empty: r, ranges: i } = t;
  return r || e && i.forEach((s) => {
    n.removeMark(s.$from.pos, s.$to.pos);
  }), !0;
}, tw = (n, e = {}) => ({ tr: t, state: r, dispatch: i }) => {
  var s;
  const { extendEmptyMarkRange: o = !1 } = e, { selection: a } = t, l = un(n, r.schema), { $from: c, empty: u, ranges: d } = a;
  if (!i)
    return !0;
  if (u && o) {
    let { from: f, to: p } = a;
    const h = (s = c.marks().find((m) => m.type === l)) === null || s === void 0 ? void 0 : s.attrs, g = uc(c, l, h);
    g && (f = g.from, p = g.to), t.removeMark(f, p, l);
  } else
    d.forEach((f) => {
      t.removeMark(f.$from.pos, f.$to.pos, l);
    });
  return t.removeStoredMark(l), !0;
}, nw = (n, e = {}) => ({ tr: t, state: r, dispatch: i }) => {
  let s = null, o = null;
  const a = Do(typeof n == "string" ? n : n.name, r.schema);
  return a ? (a === "node" && (s = Fe(n, r.schema)), a === "mark" && (o = un(n, r.schema)), i && t.selection.ranges.forEach((l) => {
    const c = l.$from.pos, u = l.$to.pos;
    r.doc.nodesBetween(c, u, (d, f) => {
      s && s === d.type && t.setNodeMarkup(f, void 0, {
        ...d.attrs,
        ...e
      }), o && d.marks.length && d.marks.forEach((p) => {
        if (o === p.type) {
          const h = Math.max(f, c), g = Math.min(f + d.nodeSize, u);
          t.addMark(h, g, o.create({
            ...p.attrs,
            ...e
          }));
        }
      });
    });
  }), !0) : !1;
}, rw = (n, e = {}) => ({ state: t, dispatch: r }) => {
  const i = Fe(n, t.schema);
  return vy(i, e)(t, r);
}, iw = (n, e = {}) => ({ state: t, dispatch: r }) => {
  const i = Fe(n, t.schema);
  return wy(i, e)(t, r);
};
var sw = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  blur: zy,
  clearContent: Vy,
  clearNodes: qy,
  command: Uy,
  createParagraphNear: Ky,
  cut: Wy,
  deleteCurrentNode: Gy,
  deleteNode: Zy,
  deleteRange: jy,
  deleteSelection: Jy,
  enter: Yy,
  exitCode: Xy,
  extendMarkRange: ev,
  first: tv,
  focus: nv,
  forEach: rv,
  insertContent: iv,
  insertContentAt: av,
  joinUp: lv,
  joinDown: cv,
  joinBackward: uv,
  joinForward: dv,
  joinItemBackward: fv,
  joinItemForward: pv,
  keyboardShortcut: gv,
  lift: mv,
  liftEmptyBlock: bv,
  liftListItem: yv,
  newlineInCode: vv,
  resetAttributes: wv,
  scrollIntoView: kv,
  selectAll: Ev,
  selectNodeBackward: xv,
  selectNodeForward: Cv,
  selectParentNode: Sv,
  selectTextblockEnd: _v,
  selectTextblockStart: Mv,
  setContent: Av,
  setMark: zv,
  setMeta: Vv,
  setNode: qv,
  setNodeSelection: Uv,
  setTextSelection: Kv,
  sinkListItem: Wv,
  splitBlock: Gv,
  splitListItem: Zv,
  toggleList: jv,
  toggleMark: Jv,
  toggleNode: Yv,
  toggleWrap: Xv,
  undoInputRule: Qv,
  unsetAllMarks: ew,
  unsetMark: tw,
  updateAttributes: nw,
  wrapIn: rw,
  wrapInList: iw
});
const ow = Ee.create({
  name: "commands",
  addCommands() {
    return {
      ...sw
    };
  }
}), aw = Ee.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
}), lw = Ee.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor: n } = this;
    return [
      new Se({
        key: new Me("focusEvents"),
        props: {
          handleDOMEvents: {
            focus: (e, t) => {
              n.isFocused = !0;
              const r = n.state.tr.setMeta("focus", { event: t }).setMeta("addToHistory", !1);
              return e.dispatch(r), !1;
            },
            blur: (e, t) => {
              n.isFocused = !1;
              const r = n.state.tr.setMeta("blur", { event: t }).setMeta("addToHistory", !1);
              return e.dispatch(r), !1;
            }
          }
        }
      })
    ];
  }
}), cw = Ee.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const n = () => this.editor.commands.first(({ commands: o }) => [
      () => o.undoInputRule(),
      // maybe convert first text block node to default node
      () => o.command(({ tr: a }) => {
        const { selection: l, doc: c } = a, { empty: u, $anchor: d } = l, { pos: f, parent: p } = d, h = d.parent.isTextblock ? a.doc.resolve(f - 1) : d, g = h.parent.type.spec.isolating, m = d.pos - d.parentOffset, v = g && h.parent.childCount === 1 ? m === d.pos : ne.atStart(c).from === f;
        return !u || !v || !p.type.isTextblock || p.textContent.length ? !1 : o.clearNodes();
      }),
      () => o.deleteSelection(),
      () => o.joinBackward(),
      () => o.selectNodeBackward()
    ]), e = () => this.editor.commands.first(({ commands: o }) => [
      () => o.deleteSelection(),
      () => o.deleteCurrentNode(),
      () => o.joinForward(),
      () => o.selectNodeForward()
    ]), r = {
      Enter: () => this.editor.commands.first(({ commands: o }) => [
        () => o.newlineInCode(),
        () => o.createParagraphNear(),
        () => o.liftEmptyBlock(),
        () => o.splitBlock()
      ]),
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: n,
      "Mod-Backspace": n,
      "Shift-Backspace": n,
      Delete: e,
      "Mod-Delete": e,
      "Mod-a": () => this.editor.commands.selectAll()
    }, i = {
      ...r
    }, s = {
      ...r,
      "Ctrl-h": n,
      "Alt-Backspace": n,
      "Ctrl-d": e,
      "Ctrl-Alt-Backspace": e,
      "Alt-Delete": e,
      "Alt-d": e,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    return fc() || pc() ? s : i;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new Se({
        key: new Me("clearDocument"),
        appendTransaction: (n, e, t) => {
          if (!(n.some((h) => h.docChanged) && !e.doc.eq(t.doc)))
            return;
          const { empty: i, from: s, to: o } = e.selection, a = ne.atStart(e.doc).from, l = ne.atEnd(e.doc).to;
          if (i || !(s === a && o === l) || !(t.doc.textBetween(0, t.doc.content.size, " ", " ").length === 0))
            return;
          const d = t.tr, f = No({
            state: t,
            transaction: d
          }), { commands: p } = new Oo({
            editor: this.editor,
            state: f
          });
          if (p.clearNodes(), !!d.steps.length)
            return d;
        }
      })
    ];
  }
}), uw = Ee.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("tabindex"),
        props: {
          attributes: this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
});
var cg = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ClipboardTextSerializer: Fy,
  Commands: ow,
  Editable: aw,
  FocusEvents: lw,
  Keymap: cw,
  Tabindex: uw
});
const dw = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;
function fw(n, e, t) {
  const r = document.querySelector(`style[data-tiptap-style${t ? `-${t}` : ""}]`);
  if (r !== null)
    return r;
  const i = document.createElement("style");
  return e && i.setAttribute("nonce", e), i.setAttribute(`data-tiptap-style${t ? `-${t}` : ""}`, ""), i.innerHTML = n, document.getElementsByTagName("head")[0].appendChild(i), i;
}
class pw extends _y {
  constructor(e = {}) {
    super(), this.isFocused = !1, this.extensionStorage = {}, this.options = {
      element: document.createElement("div"),
      content: "",
      injectCSS: !0,
      injectNonce: void 0,
      extensions: [],
      autofocus: !1,
      editable: !0,
      editorProps: {},
      parseOptions: {},
      enableInputRules: !0,
      enablePasteRules: !0,
      enableCoreExtensions: !0,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null
    }, this.isCapturingTransaction = !1, this.capturedTransaction = null, this.setOptions(e), this.createExtensionManager(), this.createCommandManager(), this.createSchema(), this.on("beforeCreate", this.options.onBeforeCreate), this.emit("beforeCreate", { editor: this }), this.createView(), this.injectCSS(), this.on("create", this.options.onCreate), this.on("update", this.options.onUpdate), this.on("selectionUpdate", this.options.onSelectionUpdate), this.on("transaction", this.options.onTransaction), this.on("focus", this.options.onFocus), this.on("blur", this.options.onBlur), this.on("destroy", this.options.onDestroy), window.setTimeout(() => {
      this.isDestroyed || (this.commands.focus(this.options.autofocus), this.emit("create", { editor: this }));
    }, 0);
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    this.options.injectCSS && document && (this.css = fw(dw, this.options.injectNonce));
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(e = {}) {
    this.options = {
      ...this.options,
      ...e
    }, !(!this.view || !this.state || this.isDestroyed) && (this.options.editorProps && this.view.setProps(this.options.editorProps), this.view.updateState(this.state));
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(e, t = !0) {
    this.setOptions({ editable: e }), t && this.emit("update", { editor: this, transaction: this.state.tr });
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.view.state;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   */
  registerPlugin(e, t) {
    const r = ng(t) ? t(e, [...this.state.plugins]) : [...this.state.plugins, e], i = this.state.reconfigure({ plugins: r });
    this.view.updateState(i);
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKey The plugins name
   */
  unregisterPlugin(e) {
    if (this.isDestroyed)
      return;
    const t = typeof e == "string" ? `${e}$` : e.key, r = this.state.reconfigure({
      // @ts-ignore
      plugins: this.state.plugins.filter((i) => !i.key.startsWith(t))
    });
    this.view.updateState(r);
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    const t = [...this.options.enableCoreExtensions ? Object.values(cg) : [], ...this.options.extensions].filter((r) => ["extension", "node", "mark"].includes(r == null ? void 0 : r.type));
    this.extensionManager = new Nr(t, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new Oo({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView() {
    const e = og(this.options.content, this.schema, this.options.parseOptions), t = sg(e, this.options.autofocus);
    this.view = new K1(this.options.element, {
      ...this.options.editorProps,
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: Tr.create({
        doc: e,
        selection: t || void 0
      })
    });
    const r = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(r), this.createNodeViews(), this.prependClass();
    const i = this.view.dom;
    i.editor = this;
  }
  /**
   * Creates all node views.
   */
  createNodeViews() {
    this.view.setProps({
      nodeViews: this.extensionManager.nodeViews
    });
  }
  /**
   * Prepend class name to element.
   */
  prependClass() {
    this.view.dom.className = `tiptap ${this.view.dom.className}`;
  }
  captureTransaction(e) {
    this.isCapturingTransaction = !0, e(), this.isCapturingTransaction = !1;
    const t = this.capturedTransaction;
    return this.capturedTransaction = null, t;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(e) {
    if (this.view.isDestroyed)
      return;
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = e;
        return;
      }
      e.steps.forEach((o) => {
        var a;
        return (a = this.capturedTransaction) === null || a === void 0 ? void 0 : a.step(o);
      });
      return;
    }
    const t = this.state.apply(e), r = !this.state.selection.eq(t.selection);
    this.view.updateState(t), this.emit("transaction", {
      editor: this,
      transaction: e
    }), r && this.emit("selectionUpdate", {
      editor: this,
      transaction: e
    });
    const i = e.getMeta("focus"), s = e.getMeta("blur");
    i && this.emit("focus", {
      editor: this,
      event: i.event,
      transaction: e
    }), s && this.emit("blur", {
      editor: this,
      event: s.event,
      transaction: e
    }), !(!e.docChanged || e.getMeta("preventUpdate")) && this.emit("update", {
      editor: this,
      transaction: e
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(e) {
    return lg(this.state, e);
  }
  isActive(e, t) {
    const r = typeof e == "string" ? e : null, i = typeof e == "string" ? t : e;
    return Hv(this.state, r, i);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return hc(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(e) {
    const { blockSeparator: t = `

`, textSerializers: r = {} } = e || {};
    return Lv(this.state.doc, {
      blockSeparator: t,
      textSerializers: {
        ...ig(this.schema),
        ...r
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return Pv(this.state.doc);
  }
  /**
   * Get the number of characters for the current document.
   *
   * @deprecated
   */
  getCharacterCount() {
    return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'), this.state.doc.content.size - 2;
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    this.emit("destroy"), this.view && this.view.destroy(), this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var e;
    return !(!((e = this.view) === null || e === void 0) && e.docView);
  }
}
function sr(n) {
  return new Gi({
    find: n.find,
    handler: ({ state: e, range: t, match: r }) => {
      const i = ie(n.getAttributes, void 0, r);
      if (i === !1 || i === null)
        return null;
      const { tr: s } = e, o = r[r.length - 1], a = r[0];
      if (o) {
        const l = a.search(/\S/), c = t.from + a.indexOf(o), u = c + o.length;
        if (gc(t.from, t.to, e.doc).filter((p) => p.mark.type.excluded.find((g) => g === n.type && g !== p.mark.type)).filter((p) => p.to > c).length)
          return null;
        u < t.to && s.delete(u, t.to), c > t.from && s.delete(t.from + l, c);
        const f = t.from + l + o.length;
        s.addMark(t.from + l, f, n.type.create(i || {})), s.removeStoredMark(n.type);
      }
    }
  });
}
function bc(n) {
  return new Gi({
    find: n.find,
    handler: ({ state: e, range: t, match: r }) => {
      const i = ie(n.getAttributes, void 0, r) || {}, { tr: s } = e, o = t.from;
      let a = t.to;
      const l = n.type.create(i);
      if (r[1]) {
        const c = r[0].lastIndexOf(r[1]);
        let u = o + c;
        u > a ? u = a : a = u + r[1].length;
        const d = r[0][r[0].length - 1];
        s.insertText(d, o + r[0].length - 1), s.replaceWith(u, a, l);
      } else
        r[0] && s.insert(o - 1, n.type.create(i)).delete(s.mapping.map(o), s.mapping.map(a));
      s.scrollIntoView();
    }
  });
}
function Sl(n) {
  return new Gi({
    find: n.find,
    handler: ({ state: e, range: t, match: r }) => {
      const i = e.doc.resolve(t.from), s = ie(n.getAttributes, void 0, r) || {};
      if (!i.node(-1).canReplaceWith(i.index(-1), i.indexAfter(-1), n.type))
        return null;
      e.tr.delete(t.from, t.to).setBlockType(t.from, t.from, n.type, s);
    }
  });
}
function or(n) {
  return new Gi({
    find: n.find,
    handler: ({ state: e, range: t, match: r, chain: i }) => {
      const s = ie(n.getAttributes, void 0, r) || {}, o = e.tr.delete(t.from, t.to), l = o.doc.resolve(t.from).blockRange(), c = l && jl(l, n.type, s);
      if (!c)
        return null;
      if (o.wrap(l, c), n.keepMarks && n.editor) {
        const { selection: d, storedMarks: f } = e, { splittableMarks: p } = n.editor.extensionManager, h = f || d.$to.parentOffset && d.$from.marks();
        if (h) {
          const g = h.filter((m) => p.includes(m.type.name));
          o.ensureMarks(g);
        }
      }
      if (n.keepAttributes) {
        const d = n.type.name === "bulletList" || n.type.name === "orderedList" ? "listItem" : "taskList";
        i().updateAttributes(d, s).run();
      }
      const u = o.doc.resolve(t.from - 1).nodeBefore;
      u && u.type === n.type && Rn(o.doc, t.from - 1) && (!n.joinPredicate || n.joinPredicate(r, u)) && o.join(t.from - 1);
    }
  });
}
class Re {
  constructor(e = {}) {
    this.type = "mark", this.name = "mark", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = ie(K(this, "addOptions", {
      name: this.name
    }))), this.storage = ie(K(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new Re(e);
  }
  configure(e = {}) {
    const t = this.extend();
    return t.options = Ro(this.options, e), t.storage = ie(K(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
  extend(e = {}) {
    const t = new Re(e);
    return t.parent = this, this.child = t, t.name = e.name ? e.name : t.parent.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`), t.options = ie(K(t, "addOptions", {
      name: t.name
    })), t.storage = ie(K(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
  static handleExit({ editor: e, mark: t }) {
    const { tr: r } = e.state, i = e.state.selection.$from;
    if (i.pos === i.end()) {
      const o = i.marks();
      if (!!!o.find((c) => (c == null ? void 0 : c.type.name) === t.name))
        return !1;
      const l = o.find((c) => (c == null ? void 0 : c.type.name) === t.name);
      return l && r.removeStoredMark(l), r.insertText(" ", i.pos), e.view.dispatch(r), !0;
    }
    return !1;
  }
}
let le = class _l {
  constructor(e = {}) {
    this.type = "node", this.name = "node", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = ie(K(this, "addOptions", {
      name: this.name
    }))), this.storage = ie(K(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new _l(e);
  }
  configure(e = {}) {
    const t = this.extend();
    return t.options = Ro(this.options, e), t.storage = ie(K(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
  extend(e = {}) {
    const t = new _l(e);
    return t.parent = this, this.child = t, t.name = e.name ? e.name : t.parent.name, e.defaultOptions && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`), t.options = ie(K(t, "addOptions", {
      name: t.name
    })), t.storage = ie(K(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
};
function Ln(n) {
  return new Dy({
    find: n.find,
    handler: ({ state: e, range: t, match: r, pasteEvent: i }) => {
      const s = ie(n.getAttributes, void 0, r, i);
      if (s === !1 || s === null)
        return null;
      const { tr: o } = e, a = r[r.length - 1], l = r[0];
      let c = t.to;
      if (a) {
        const u = l.search(/\S/), d = t.from + l.indexOf(a), f = d + a.length;
        if (gc(t.from, t.to, e.doc).filter((h) => h.mark.type.excluded.find((m) => m === n.type && m !== h.mark.type)).filter((h) => h.to > d).length)
          return null;
        f < t.to && o.delete(f, t.to), d > t.from && o.delete(t.from + u, d), c = t.from + u + a.length, o.addMark(t.from + u, c, n.type.create(s || {})), o.removeStoredMark(n.type);
      }
    }
  });
}
function hw(n) {
  return n.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}
class me extends HTMLElement {
  constructor() {
    super();
    j(this, "template", "");
    j(this, "editor");
    j(this, "options");
  }
  registerClickListener() {
    this.addEventListener("click", () => {
      var r;
      const t = (r = this.editor) == null ? void 0 : r.chain();
      this.onClick(t), t == null || t.run();
    });
  }
  connectedCallback() {
    this.innerHTML = this.template;
  }
  // @ts-ignore
  onClick(t) {
  }
  onCreate(t, r) {
    this.editor = t.editor, this.options = r;
  }
  onTransaction(t) {
    const r = this.querySelector("div");
    r && (this.onActive(t.editor) ? r.classList.add("active") : r.classList.remove("active"));
  }
  // @ts-ignore
  onActive(t) {
    return !1;
  }
}
class gw extends me {
  constructor() {
    super();
    const e = `
        <div style="height: 16px">
            <svg style="width: 15px;height: 15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.82843 6.99955L8.36396 9.53509L6.94975 10.9493L2 5.99955L6.94975 1.0498L8.36396 2.46402L5.82843 4.99955H13C17.4183 4.99955 21 8.58127 21 12.9996C21 17.4178 17.4183 20.9996 13 20.9996H4V18.9996H13C16.3137 18.9996 19 16.3133 19 12.9996C19 9.68584 16.3137 6.99955 13 6.99955H5.82843Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.undo();
  }
}
class mw extends me {
  constructor() {
    super();
    const e = `
         <div style="height: 16px">
            <svg style="width: 15px;height: 15px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.1716 6.99955H11C7.68629 6.99955 5 9.68584 5 12.9996C5 16.3133 7.68629 18.9996 11 18.9996H20V20.9996H11C6.58172 20.9996 3 17.4178 3 12.9996C3 8.58127 6.58172 4.99955 11 4.99955H18.1716L15.636 2.46402L17.0503 1.0498L22 5.99955L17.0503 10.9493L15.636 9.53509L18.1716 6.99955Z"></path></svg>
         </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.redo();
  }
}
var ut = "top", Mt = "bottom", At = "right", dt = "left", yc = "auto", ji = [ut, Mt, At, dt], Ur = "start", Oi = "end", bw = "clippingParents", ug = "viewport", ii = "popper", yw = "reference", hd = /* @__PURE__ */ ji.reduce(function(n, e) {
  return n.concat([e + "-" + Ur, e + "-" + Oi]);
}, []), dg = /* @__PURE__ */ [].concat(ji, [yc]).reduce(function(n, e) {
  return n.concat([e, e + "-" + Ur, e + "-" + Oi]);
}, []), vw = "beforeRead", ww = "read", kw = "afterRead", Ew = "beforeMain", xw = "main", Cw = "afterMain", Sw = "beforeWrite", _w = "write", Mw = "afterWrite", Aw = [vw, ww, kw, Ew, xw, Cw, Sw, _w, Mw];
function Yt(n) {
  return n ? (n.nodeName || "").toLowerCase() : null;
}
function bt(n) {
  if (n == null)
    return window;
  if (n.toString() !== "[object Window]") {
    var e = n.ownerDocument;
    return e && e.defaultView || window;
  }
  return n;
}
function ar(n) {
  var e = bt(n).Element;
  return n instanceof e || n instanceof Element;
}
function _t(n) {
  var e = bt(n).HTMLElement;
  return n instanceof e || n instanceof HTMLElement;
}
function vc(n) {
  if (typeof ShadowRoot > "u")
    return !1;
  var e = bt(n).ShadowRoot;
  return n instanceof e || n instanceof ShadowRoot;
}
function Tw(n) {
  var e = n.state;
  Object.keys(e.elements).forEach(function(t) {
    var r = e.styles[t] || {}, i = e.attributes[t] || {}, s = e.elements[t];
    !_t(s) || !Yt(s) || (Object.assign(s.style, r), Object.keys(i).forEach(function(o) {
      var a = i[o];
      a === !1 ? s.removeAttribute(o) : s.setAttribute(o, a === !0 ? "" : a);
    }));
  });
}
function Nw(n) {
  var e = n.state, t = {
    popper: {
      position: e.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(e.elements.popper.style, t.popper), e.styles = t, e.elements.arrow && Object.assign(e.elements.arrow.style, t.arrow), function() {
    Object.keys(e.elements).forEach(function(r) {
      var i = e.elements[r], s = e.attributes[r] || {}, o = Object.keys(e.styles.hasOwnProperty(r) ? e.styles[r] : t[r]), a = o.reduce(function(l, c) {
        return l[c] = "", l;
      }, {});
      !_t(i) || !Yt(i) || (Object.assign(i.style, a), Object.keys(s).forEach(function(l) {
        i.removeAttribute(l);
      }));
    });
  };
}
const fg = {
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  fn: Tw,
  effect: Nw,
  requires: ["computeStyles"]
};
function Zt(n) {
  return n.split("-")[0];
}
var Xn = Math.max, Gs = Math.min, Kr = Math.round;
function Ml() {
  var n = navigator.userAgentData;
  return n != null && n.brands && Array.isArray(n.brands) ? n.brands.map(function(e) {
    return e.brand + "/" + e.version;
  }).join(" ") : navigator.userAgent;
}
function pg() {
  return !/^((?!chrome|android).)*safari/i.test(Ml());
}
function Wr(n, e, t) {
  e === void 0 && (e = !1), t === void 0 && (t = !1);
  var r = n.getBoundingClientRect(), i = 1, s = 1;
  e && _t(n) && (i = n.offsetWidth > 0 && Kr(r.width) / n.offsetWidth || 1, s = n.offsetHeight > 0 && Kr(r.height) / n.offsetHeight || 1);
  var o = ar(n) ? bt(n) : window, a = o.visualViewport, l = !pg() && t, c = (r.left + (l && a ? a.offsetLeft : 0)) / i, u = (r.top + (l && a ? a.offsetTop : 0)) / s, d = r.width / i, f = r.height / s;
  return {
    width: d,
    height: f,
    top: u,
    right: c + d,
    bottom: u + f,
    left: c,
    x: c,
    y: u
  };
}
function wc(n) {
  var e = Wr(n), t = n.offsetWidth, r = n.offsetHeight;
  return Math.abs(e.width - t) <= 1 && (t = e.width), Math.abs(e.height - r) <= 1 && (r = e.height), {
    x: n.offsetLeft,
    y: n.offsetTop,
    width: t,
    height: r
  };
}
function hg(n, e) {
  var t = e.getRootNode && e.getRootNode();
  if (n.contains(e))
    return !0;
  if (t && vc(t)) {
    var r = e;
    do {
      if (r && n.isSameNode(r))
        return !0;
      r = r.parentNode || r.host;
    } while (r);
  }
  return !1;
}
function cn(n) {
  return bt(n).getComputedStyle(n);
}
function Ow(n) {
  return ["table", "td", "th"].indexOf(Yt(n)) >= 0;
}
function In(n) {
  return ((ar(n) ? n.ownerDocument : (
    // $FlowFixMe[prop-missing]
    n.document
  )) || window.document).documentElement;
}
function Bo(n) {
  return Yt(n) === "html" ? n : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    n.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    n.parentNode || // DOM Element detected
    (vc(n) ? n.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    In(n)
  );
}
function gd(n) {
  return !_t(n) || // https://github.com/popperjs/popper-core/issues/837
  cn(n).position === "fixed" ? null : n.offsetParent;
}
function Lw(n) {
  var e = /firefox/i.test(Ml()), t = /Trident/i.test(Ml());
  if (t && _t(n)) {
    var r = cn(n);
    if (r.position === "fixed")
      return null;
  }
  var i = Bo(n);
  for (vc(i) && (i = i.host); _t(i) && ["html", "body"].indexOf(Yt(i)) < 0; ) {
    var s = cn(i);
    if (s.transform !== "none" || s.perspective !== "none" || s.contain === "paint" || ["transform", "perspective"].indexOf(s.willChange) !== -1 || e && s.willChange === "filter" || e && s.filter && s.filter !== "none")
      return i;
    i = i.parentNode;
  }
  return null;
}
function Ji(n) {
  for (var e = bt(n), t = gd(n); t && Ow(t) && cn(t).position === "static"; )
    t = gd(t);
  return t && (Yt(t) === "html" || Yt(t) === "body" && cn(t).position === "static") ? e : t || Lw(n) || e;
}
function kc(n) {
  return ["top", "bottom"].indexOf(n) >= 0 ? "x" : "y";
}
function bi(n, e, t) {
  return Xn(n, Gs(e, t));
}
function Rw(n, e, t) {
  var r = bi(n, e, t);
  return r > t ? t : r;
}
function gg() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function mg(n) {
  return Object.assign({}, gg(), n);
}
function bg(n, e) {
  return e.reduce(function(t, r) {
    return t[r] = n, t;
  }, {});
}
var Dw = function(e, t) {
  return e = typeof e == "function" ? e(Object.assign({}, t.rects, {
    placement: t.placement
  })) : e, mg(typeof e != "number" ? e : bg(e, ji));
};
function Iw(n) {
  var e, t = n.state, r = n.name, i = n.options, s = t.elements.arrow, o = t.modifiersData.popperOffsets, a = Zt(t.placement), l = kc(a), c = [dt, At].indexOf(a) >= 0, u = c ? "height" : "width";
  if (!(!s || !o)) {
    var d = Dw(i.padding, t), f = wc(s), p = l === "y" ? ut : dt, h = l === "y" ? Mt : At, g = t.rects.reference[u] + t.rects.reference[l] - o[l] - t.rects.popper[u], m = o[l] - t.rects.reference[l], v = Ji(s), y = v ? l === "y" ? v.clientHeight || 0 : v.clientWidth || 0 : 0, k = g / 2 - m / 2, b = d[p], x = y - f[u] - d[h], w = y / 2 - f[u] / 2 + k, S = bi(b, w, x), T = l;
    t.modifiersData[r] = (e = {}, e[T] = S, e.centerOffset = S - w, e);
  }
}
function Bw(n) {
  var e = n.state, t = n.options, r = t.element, i = r === void 0 ? "[data-popper-arrow]" : r;
  i != null && (typeof i == "string" && (i = e.elements.popper.querySelector(i), !i) || hg(e.elements.popper, i) && (e.elements.arrow = i));
}
const Hw = {
  name: "arrow",
  enabled: !0,
  phase: "main",
  fn: Iw,
  effect: Bw,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function Gr(n) {
  return n.split("-")[1];
}
var Pw = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function $w(n, e) {
  var t = n.x, r = n.y, i = e.devicePixelRatio || 1;
  return {
    x: Kr(t * i) / i || 0,
    y: Kr(r * i) / i || 0
  };
}
function md(n) {
  var e, t = n.popper, r = n.popperRect, i = n.placement, s = n.variation, o = n.offsets, a = n.position, l = n.gpuAcceleration, c = n.adaptive, u = n.roundOffsets, d = n.isFixed, f = o.x, p = f === void 0 ? 0 : f, h = o.y, g = h === void 0 ? 0 : h, m = typeof u == "function" ? u({
    x: p,
    y: g
  }) : {
    x: p,
    y: g
  };
  p = m.x, g = m.y;
  var v = o.hasOwnProperty("x"), y = o.hasOwnProperty("y"), k = dt, b = ut, x = window;
  if (c) {
    var w = Ji(t), S = "clientHeight", T = "clientWidth";
    if (w === bt(t) && (w = In(t), cn(w).position !== "static" && a === "absolute" && (S = "scrollHeight", T = "scrollWidth")), w = w, i === ut || (i === dt || i === At) && s === Oi) {
      b = Mt;
      var M = d && w === x && x.visualViewport ? x.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        w[S]
      );
      g -= M - r.height, g *= l ? 1 : -1;
    }
    if (i === dt || (i === ut || i === Mt) && s === Oi) {
      k = At;
      var L = d && w === x && x.visualViewport ? x.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        w[T]
      );
      p -= L - r.width, p *= l ? 1 : -1;
    }
  }
  var z = Object.assign({
    position: a
  }, c && Pw), G = u === !0 ? $w({
    x: p,
    y: g
  }, bt(t)) : {
    x: p,
    y: g
  };
  if (p = G.x, g = G.y, l) {
    var q;
    return Object.assign({}, z, (q = {}, q[b] = y ? "0" : "", q[k] = v ? "0" : "", q.transform = (x.devicePixelRatio || 1) <= 1 ? "translate(" + p + "px, " + g + "px)" : "translate3d(" + p + "px, " + g + "px, 0)", q));
  }
  return Object.assign({}, z, (e = {}, e[b] = y ? g + "px" : "", e[k] = v ? p + "px" : "", e.transform = "", e));
}
function Fw(n) {
  var e = n.state, t = n.options, r = t.gpuAcceleration, i = r === void 0 ? !0 : r, s = t.adaptive, o = s === void 0 ? !0 : s, a = t.roundOffsets, l = a === void 0 ? !0 : a, c = {
    placement: Zt(e.placement),
    variation: Gr(e.placement),
    popper: e.elements.popper,
    popperRect: e.rects.popper,
    gpuAcceleration: i,
    isFixed: e.options.strategy === "fixed"
  };
  e.modifiersData.popperOffsets != null && (e.styles.popper = Object.assign({}, e.styles.popper, md(Object.assign({}, c, {
    offsets: e.modifiersData.popperOffsets,
    position: e.options.strategy,
    adaptive: o,
    roundOffsets: l
  })))), e.modifiersData.arrow != null && (e.styles.arrow = Object.assign({}, e.styles.arrow, md(Object.assign({}, c, {
    offsets: e.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: l
  })))), e.attributes.popper = Object.assign({}, e.attributes.popper, {
    "data-popper-placement": e.placement
  });
}
const zw = {
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  fn: Fw,
  data: {}
};
var is = {
  passive: !0
};
function Vw(n) {
  var e = n.state, t = n.instance, r = n.options, i = r.scroll, s = i === void 0 ? !0 : i, o = r.resize, a = o === void 0 ? !0 : o, l = bt(e.elements.popper), c = [].concat(e.scrollParents.reference, e.scrollParents.popper);
  return s && c.forEach(function(u) {
    u.addEventListener("scroll", t.update, is);
  }), a && l.addEventListener("resize", t.update, is), function() {
    s && c.forEach(function(u) {
      u.removeEventListener("scroll", t.update, is);
    }), a && l.removeEventListener("resize", t.update, is);
  };
}
const qw = {
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  effect: Vw,
  data: {}
};
var Uw = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function As(n) {
  return n.replace(/left|right|bottom|top/g, function(e) {
    return Uw[e];
  });
}
var Kw = {
  start: "end",
  end: "start"
};
function bd(n) {
  return n.replace(/start|end/g, function(e) {
    return Kw[e];
  });
}
function Ec(n) {
  var e = bt(n), t = e.pageXOffset, r = e.pageYOffset;
  return {
    scrollLeft: t,
    scrollTop: r
  };
}
function xc(n) {
  return Wr(In(n)).left + Ec(n).scrollLeft;
}
function Ww(n, e) {
  var t = bt(n), r = In(n), i = t.visualViewport, s = r.clientWidth, o = r.clientHeight, a = 0, l = 0;
  if (i) {
    s = i.width, o = i.height;
    var c = pg();
    (c || !c && e === "fixed") && (a = i.offsetLeft, l = i.offsetTop);
  }
  return {
    width: s,
    height: o,
    x: a + xc(n),
    y: l
  };
}
function Gw(n) {
  var e, t = In(n), r = Ec(n), i = (e = n.ownerDocument) == null ? void 0 : e.body, s = Xn(t.scrollWidth, t.clientWidth, i ? i.scrollWidth : 0, i ? i.clientWidth : 0), o = Xn(t.scrollHeight, t.clientHeight, i ? i.scrollHeight : 0, i ? i.clientHeight : 0), a = -r.scrollLeft + xc(n), l = -r.scrollTop;
  return cn(i || t).direction === "rtl" && (a += Xn(t.clientWidth, i ? i.clientWidth : 0) - s), {
    width: s,
    height: o,
    x: a,
    y: l
  };
}
function Cc(n) {
  var e = cn(n), t = e.overflow, r = e.overflowX, i = e.overflowY;
  return /auto|scroll|overlay|hidden/.test(t + i + r);
}
function yg(n) {
  return ["html", "body", "#document"].indexOf(Yt(n)) >= 0 ? n.ownerDocument.body : _t(n) && Cc(n) ? n : yg(Bo(n));
}
function yi(n, e) {
  var t;
  e === void 0 && (e = []);
  var r = yg(n), i = r === ((t = n.ownerDocument) == null ? void 0 : t.body), s = bt(r), o = i ? [s].concat(s.visualViewport || [], Cc(r) ? r : []) : r, a = e.concat(o);
  return i ? a : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    a.concat(yi(Bo(o)))
  );
}
function Al(n) {
  return Object.assign({}, n, {
    left: n.x,
    top: n.y,
    right: n.x + n.width,
    bottom: n.y + n.height
  });
}
function Zw(n, e) {
  var t = Wr(n, !1, e === "fixed");
  return t.top = t.top + n.clientTop, t.left = t.left + n.clientLeft, t.bottom = t.top + n.clientHeight, t.right = t.left + n.clientWidth, t.width = n.clientWidth, t.height = n.clientHeight, t.x = t.left, t.y = t.top, t;
}
function yd(n, e, t) {
  return e === ug ? Al(Ww(n, t)) : ar(e) ? Zw(e, t) : Al(Gw(In(n)));
}
function jw(n) {
  var e = yi(Bo(n)), t = ["absolute", "fixed"].indexOf(cn(n).position) >= 0, r = t && _t(n) ? Ji(n) : n;
  return ar(r) ? e.filter(function(i) {
    return ar(i) && hg(i, r) && Yt(i) !== "body";
  }) : [];
}
function Jw(n, e, t, r) {
  var i = e === "clippingParents" ? jw(n) : [].concat(e), s = [].concat(i, [t]), o = s[0], a = s.reduce(function(l, c) {
    var u = yd(n, c, r);
    return l.top = Xn(u.top, l.top), l.right = Gs(u.right, l.right), l.bottom = Gs(u.bottom, l.bottom), l.left = Xn(u.left, l.left), l;
  }, yd(n, o, r));
  return a.width = a.right - a.left, a.height = a.bottom - a.top, a.x = a.left, a.y = a.top, a;
}
function vg(n) {
  var e = n.reference, t = n.element, r = n.placement, i = r ? Zt(r) : null, s = r ? Gr(r) : null, o = e.x + e.width / 2 - t.width / 2, a = e.y + e.height / 2 - t.height / 2, l;
  switch (i) {
    case ut:
      l = {
        x: o,
        y: e.y - t.height
      };
      break;
    case Mt:
      l = {
        x: o,
        y: e.y + e.height
      };
      break;
    case At:
      l = {
        x: e.x + e.width,
        y: a
      };
      break;
    case dt:
      l = {
        x: e.x - t.width,
        y: a
      };
      break;
    default:
      l = {
        x: e.x,
        y: e.y
      };
  }
  var c = i ? kc(i) : null;
  if (c != null) {
    var u = c === "y" ? "height" : "width";
    switch (s) {
      case Ur:
        l[c] = l[c] - (e[u] / 2 - t[u] / 2);
        break;
      case Oi:
        l[c] = l[c] + (e[u] / 2 - t[u] / 2);
        break;
    }
  }
  return l;
}
function Li(n, e) {
  e === void 0 && (e = {});
  var t = e, r = t.placement, i = r === void 0 ? n.placement : r, s = t.strategy, o = s === void 0 ? n.strategy : s, a = t.boundary, l = a === void 0 ? bw : a, c = t.rootBoundary, u = c === void 0 ? ug : c, d = t.elementContext, f = d === void 0 ? ii : d, p = t.altBoundary, h = p === void 0 ? !1 : p, g = t.padding, m = g === void 0 ? 0 : g, v = mg(typeof m != "number" ? m : bg(m, ji)), y = f === ii ? yw : ii, k = n.rects.popper, b = n.elements[h ? y : f], x = Jw(ar(b) ? b : b.contextElement || In(n.elements.popper), l, u, o), w = Wr(n.elements.reference), S = vg({
    reference: w,
    element: k,
    strategy: "absolute",
    placement: i
  }), T = Al(Object.assign({}, k, S)), M = f === ii ? T : w, L = {
    top: x.top - M.top + v.top,
    bottom: M.bottom - x.bottom + v.bottom,
    left: x.left - M.left + v.left,
    right: M.right - x.right + v.right
  }, z = n.modifiersData.offset;
  if (f === ii && z) {
    var G = z[i];
    Object.keys(L).forEach(function(q) {
      var A = [At, Mt].indexOf(q) >= 0 ? 1 : -1, H = [ut, Mt].indexOf(q) >= 0 ? "y" : "x";
      L[q] += G[H] * A;
    });
  }
  return L;
}
function Yw(n, e) {
  e === void 0 && (e = {});
  var t = e, r = t.placement, i = t.boundary, s = t.rootBoundary, o = t.padding, a = t.flipVariations, l = t.allowedAutoPlacements, c = l === void 0 ? dg : l, u = Gr(r), d = u ? a ? hd : hd.filter(function(h) {
    return Gr(h) === u;
  }) : ji, f = d.filter(function(h) {
    return c.indexOf(h) >= 0;
  });
  f.length === 0 && (f = d);
  var p = f.reduce(function(h, g) {
    return h[g] = Li(n, {
      placement: g,
      boundary: i,
      rootBoundary: s,
      padding: o
    })[Zt(g)], h;
  }, {});
  return Object.keys(p).sort(function(h, g) {
    return p[h] - p[g];
  });
}
function Xw(n) {
  if (Zt(n) === yc)
    return [];
  var e = As(n);
  return [bd(n), e, bd(e)];
}
function Qw(n) {
  var e = n.state, t = n.options, r = n.name;
  if (!e.modifiersData[r]._skip) {
    for (var i = t.mainAxis, s = i === void 0 ? !0 : i, o = t.altAxis, a = o === void 0 ? !0 : o, l = t.fallbackPlacements, c = t.padding, u = t.boundary, d = t.rootBoundary, f = t.altBoundary, p = t.flipVariations, h = p === void 0 ? !0 : p, g = t.allowedAutoPlacements, m = e.options.placement, v = Zt(m), y = v === m, k = l || (y || !h ? [As(m)] : Xw(m)), b = [m].concat(k).reduce(function(we, ue) {
      return we.concat(Zt(ue) === yc ? Yw(e, {
        placement: ue,
        boundary: u,
        rootBoundary: d,
        padding: c,
        flipVariations: h,
        allowedAutoPlacements: g
      }) : ue);
    }, []), x = e.rects.reference, w = e.rects.popper, S = /* @__PURE__ */ new Map(), T = !0, M = b[0], L = 0; L < b.length; L++) {
      var z = b[L], G = Zt(z), q = Gr(z) === Ur, A = [ut, Mt].indexOf(G) >= 0, H = A ? "width" : "height", C = Li(e, {
        placement: z,
        boundary: u,
        rootBoundary: d,
        altBoundary: f,
        padding: c
      }), E = A ? q ? At : dt : q ? Mt : ut;
      x[H] > w[H] && (E = As(E));
      var _ = As(E), D = [];
      if (s && D.push(C[G] <= 0), a && D.push(C[E] <= 0, C[_] <= 0), D.every(function(we) {
        return we;
      })) {
        M = z, T = !1;
        break;
      }
      S.set(z, D);
    }
    if (T)
      for (var P = h ? 3 : 1, W = function(ue) {
        var _e = b.find(function(st) {
          var ze = S.get(st);
          if (ze)
            return ze.slice(0, ue).every(function(ft) {
              return ft;
            });
        });
        if (_e)
          return M = _e, "break";
      }, ee = P; ee > 0; ee--) {
        var he = W(ee);
        if (he === "break")
          break;
      }
    e.placement !== M && (e.modifiersData[r]._skip = !0, e.placement = M, e.reset = !0);
  }
}
const ek = {
  name: "flip",
  enabled: !0,
  phase: "main",
  fn: Qw,
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
function vd(n, e, t) {
  return t === void 0 && (t = {
    x: 0,
    y: 0
  }), {
    top: n.top - e.height - t.y,
    right: n.right - e.width + t.x,
    bottom: n.bottom - e.height + t.y,
    left: n.left - e.width - t.x
  };
}
function wd(n) {
  return [ut, At, Mt, dt].some(function(e) {
    return n[e] >= 0;
  });
}
function tk(n) {
  var e = n.state, t = n.name, r = e.rects.reference, i = e.rects.popper, s = e.modifiersData.preventOverflow, o = Li(e, {
    elementContext: "reference"
  }), a = Li(e, {
    altBoundary: !0
  }), l = vd(o, r), c = vd(a, i, s), u = wd(l), d = wd(c);
  e.modifiersData[t] = {
    referenceClippingOffsets: l,
    popperEscapeOffsets: c,
    isReferenceHidden: u,
    hasPopperEscaped: d
  }, e.attributes.popper = Object.assign({}, e.attributes.popper, {
    "data-popper-reference-hidden": u,
    "data-popper-escaped": d
  });
}
const nk = {
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: tk
};
function rk(n, e, t) {
  var r = Zt(n), i = [dt, ut].indexOf(r) >= 0 ? -1 : 1, s = typeof t == "function" ? t(Object.assign({}, e, {
    placement: n
  })) : t, o = s[0], a = s[1];
  return o = o || 0, a = (a || 0) * i, [dt, At].indexOf(r) >= 0 ? {
    x: a,
    y: o
  } : {
    x: o,
    y: a
  };
}
function ik(n) {
  var e = n.state, t = n.options, r = n.name, i = t.offset, s = i === void 0 ? [0, 0] : i, o = dg.reduce(function(u, d) {
    return u[d] = rk(d, e.rects, s), u;
  }, {}), a = o[e.placement], l = a.x, c = a.y;
  e.modifiersData.popperOffsets != null && (e.modifiersData.popperOffsets.x += l, e.modifiersData.popperOffsets.y += c), e.modifiersData[r] = o;
}
const sk = {
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  fn: ik
};
function ok(n) {
  var e = n.state, t = n.name;
  e.modifiersData[t] = vg({
    reference: e.rects.reference,
    element: e.rects.popper,
    strategy: "absolute",
    placement: e.placement
  });
}
const ak = {
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  fn: ok,
  data: {}
};
function lk(n) {
  return n === "x" ? "y" : "x";
}
function ck(n) {
  var e = n.state, t = n.options, r = n.name, i = t.mainAxis, s = i === void 0 ? !0 : i, o = t.altAxis, a = o === void 0 ? !1 : o, l = t.boundary, c = t.rootBoundary, u = t.altBoundary, d = t.padding, f = t.tether, p = f === void 0 ? !0 : f, h = t.tetherOffset, g = h === void 0 ? 0 : h, m = Li(e, {
    boundary: l,
    rootBoundary: c,
    padding: d,
    altBoundary: u
  }), v = Zt(e.placement), y = Gr(e.placement), k = !y, b = kc(v), x = lk(b), w = e.modifiersData.popperOffsets, S = e.rects.reference, T = e.rects.popper, M = typeof g == "function" ? g(Object.assign({}, e.rects, {
    placement: e.placement
  })) : g, L = typeof M == "number" ? {
    mainAxis: M,
    altAxis: M
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, M), z = e.modifiersData.offset ? e.modifiersData.offset[e.placement] : null, G = {
    x: 0,
    y: 0
  };
  if (w) {
    if (s) {
      var q, A = b === "y" ? ut : dt, H = b === "y" ? Mt : At, C = b === "y" ? "height" : "width", E = w[b], _ = E + m[A], D = E - m[H], P = p ? -T[C] / 2 : 0, W = y === Ur ? S[C] : T[C], ee = y === Ur ? -T[C] : -S[C], he = e.elements.arrow, we = p && he ? wc(he) : {
        width: 0,
        height: 0
      }, ue = e.modifiersData["arrow#persistent"] ? e.modifiersData["arrow#persistent"].padding : gg(), _e = ue[A], st = ue[H], ze = bi(0, S[C], we[C]), ft = k ? S[C] / 2 - P - ze - _e - L.mainAxis : W - ze - _e - L.mainAxis, ot = k ? -S[C] / 2 + P + ze + st + L.mainAxis : ee + ze + st + L.mainAxis, vt = e.elements.arrow && Ji(e.elements.arrow), pt = vt ? b === "y" ? vt.clientTop || 0 : vt.clientLeft || 0 : 0, de = (q = z == null ? void 0 : z[b]) != null ? q : 0, Ae = E + ft - de - pt, Qe = E + ot - de, Oe = bi(p ? Gs(_, Ae) : _, E, p ? Xn(D, Qe) : D);
      w[b] = Oe, G[b] = Oe - E;
    }
    if (a) {
      var te, Nt = b === "x" ? ut : dt, V = b === "x" ? Mt : At, ce = w[x], be = x === "y" ? "height" : "width", oe = ce + m[Nt], Ge = ce - m[V], Ve = [ut, dt].indexOf(v) !== -1, $ = (te = z == null ? void 0 : z[x]) != null ? te : 0, U = Ve ? oe : ce - S[be] - T[be] - $ + L.altAxis, O = Ve ? ce + S[be] + T[be] - $ - L.altAxis : Ge, I = p && Ve ? Rw(U, ce, O) : bi(p ? U : oe, ce, p ? O : Ge);
      w[x] = I, G[x] = I - ce;
    }
    e.modifiersData[r] = G;
  }
}
const uk = {
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  fn: ck,
  requiresIfExists: ["offset"]
};
function dk(n) {
  return {
    scrollLeft: n.scrollLeft,
    scrollTop: n.scrollTop
  };
}
function fk(n) {
  return n === bt(n) || !_t(n) ? Ec(n) : dk(n);
}
function pk(n) {
  var e = n.getBoundingClientRect(), t = Kr(e.width) / n.offsetWidth || 1, r = Kr(e.height) / n.offsetHeight || 1;
  return t !== 1 || r !== 1;
}
function hk(n, e, t) {
  t === void 0 && (t = !1);
  var r = _t(e), i = _t(e) && pk(e), s = In(e), o = Wr(n, i, t), a = {
    scrollLeft: 0,
    scrollTop: 0
  }, l = {
    x: 0,
    y: 0
  };
  return (r || !r && !t) && ((Yt(e) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  Cc(s)) && (a = fk(e)), _t(e) ? (l = Wr(e, !0), l.x += e.clientLeft, l.y += e.clientTop) : s && (l.x = xc(s))), {
    x: o.left + a.scrollLeft - l.x,
    y: o.top + a.scrollTop - l.y,
    width: o.width,
    height: o.height
  };
}
function gk(n) {
  var e = /* @__PURE__ */ new Map(), t = /* @__PURE__ */ new Set(), r = [];
  n.forEach(function(s) {
    e.set(s.name, s);
  });
  function i(s) {
    t.add(s.name);
    var o = [].concat(s.requires || [], s.requiresIfExists || []);
    o.forEach(function(a) {
      if (!t.has(a)) {
        var l = e.get(a);
        l && i(l);
      }
    }), r.push(s);
  }
  return n.forEach(function(s) {
    t.has(s.name) || i(s);
  }), r;
}
function mk(n) {
  var e = gk(n);
  return Aw.reduce(function(t, r) {
    return t.concat(e.filter(function(i) {
      return i.phase === r;
    }));
  }, []);
}
function bk(n) {
  var e;
  return function() {
    return e || (e = new Promise(function(t) {
      Promise.resolve().then(function() {
        e = void 0, t(n());
      });
    })), e;
  };
}
function yk(n) {
  var e = n.reduce(function(t, r) {
    var i = t[r.name];
    return t[r.name] = i ? Object.assign({}, i, r, {
      options: Object.assign({}, i.options, r.options),
      data: Object.assign({}, i.data, r.data)
    }) : r, t;
  }, {});
  return Object.keys(e).map(function(t) {
    return e[t];
  });
}
var kd = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function Ed() {
  for (var n = arguments.length, e = new Array(n), t = 0; t < n; t++)
    e[t] = arguments[t];
  return !e.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
function vk(n) {
  n === void 0 && (n = {});
  var e = n, t = e.defaultModifiers, r = t === void 0 ? [] : t, i = e.defaultOptions, s = i === void 0 ? kd : i;
  return function(a, l, c) {
    c === void 0 && (c = s);
    var u = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, kd, s),
      modifiersData: {},
      elements: {
        reference: a,
        popper: l
      },
      attributes: {},
      styles: {}
    }, d = [], f = !1, p = {
      state: u,
      setOptions: function(v) {
        var y = typeof v == "function" ? v(u.options) : v;
        g(), u.options = Object.assign({}, s, u.options, y), u.scrollParents = {
          reference: ar(a) ? yi(a) : a.contextElement ? yi(a.contextElement) : [],
          popper: yi(l)
        };
        var k = mk(yk([].concat(r, u.options.modifiers)));
        return u.orderedModifiers = k.filter(function(b) {
          return b.enabled;
        }), h(), p.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!f) {
          var v = u.elements, y = v.reference, k = v.popper;
          if (Ed(y, k)) {
            u.rects = {
              reference: hk(y, Ji(k), u.options.strategy === "fixed"),
              popper: wc(k)
            }, u.reset = !1, u.placement = u.options.placement, u.orderedModifiers.forEach(function(L) {
              return u.modifiersData[L.name] = Object.assign({}, L.data);
            });
            for (var b = 0; b < u.orderedModifiers.length; b++) {
              if (u.reset === !0) {
                u.reset = !1, b = -1;
                continue;
              }
              var x = u.orderedModifiers[b], w = x.fn, S = x.options, T = S === void 0 ? {} : S, M = x.name;
              typeof w == "function" && (u = w({
                state: u,
                options: T,
                name: M,
                instance: p
              }) || u);
            }
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: bk(function() {
        return new Promise(function(m) {
          p.forceUpdate(), m(u);
        });
      }),
      destroy: function() {
        g(), f = !0;
      }
    };
    if (!Ed(a, l))
      return p;
    p.setOptions(c).then(function(m) {
      !f && c.onFirstUpdate && c.onFirstUpdate(m);
    });
    function h() {
      u.orderedModifiers.forEach(function(m) {
        var v = m.name, y = m.options, k = y === void 0 ? {} : y, b = m.effect;
        if (typeof b == "function") {
          var x = b({
            state: u,
            name: v,
            instance: p,
            options: k
          }), w = function() {
          };
          d.push(x || w);
        }
      });
    }
    function g() {
      d.forEach(function(m) {
        return m();
      }), d = [];
    }
    return p;
  };
}
var wk = [qw, ak, zw, fg, sk, ek, uk, Hw, nk], kk = /* @__PURE__ */ vk({
  defaultModifiers: wk
}), Ek = "tippy-box", wg = "tippy-content", xk = "tippy-backdrop", kg = "tippy-arrow", Eg = "tippy-svg-arrow", $n = {
  passive: !0,
  capture: !0
}, xg = function() {
  return document.body;
};
function Ck(n, e) {
  return {}.hasOwnProperty.call(n, e);
}
function xa(n, e, t) {
  if (Array.isArray(n)) {
    var r = n[e];
    return r ?? (Array.isArray(t) ? t[e] : t);
  }
  return n;
}
function Sc(n, e) {
  var t = {}.toString.call(n);
  return t.indexOf("[object") === 0 && t.indexOf(e + "]") > -1;
}
function Cg(n, e) {
  return typeof n == "function" ? n.apply(void 0, e) : n;
}
function xd(n, e) {
  if (e === 0)
    return n;
  var t;
  return function(r) {
    clearTimeout(t), t = setTimeout(function() {
      n(r);
    }, e);
  };
}
function Sk(n, e) {
  var t = Object.assign({}, n);
  return e.forEach(function(r) {
    delete t[r];
  }), t;
}
function _k(n) {
  return n.split(/\s+/).filter(Boolean);
}
function Sr(n) {
  return [].concat(n);
}
function Cd(n, e) {
  n.indexOf(e) === -1 && n.push(e);
}
function Mk(n) {
  return n.filter(function(e, t) {
    return n.indexOf(e) === t;
  });
}
function Ak(n) {
  return n.split("-")[0];
}
function Zs(n) {
  return [].slice.call(n);
}
function Sd(n) {
  return Object.keys(n).reduce(function(e, t) {
    return n[t] !== void 0 && (e[t] = n[t]), e;
  }, {});
}
function vi() {
  return document.createElement("div");
}
function Ri(n) {
  return ["Element", "Fragment"].some(function(e) {
    return Sc(n, e);
  });
}
function Tk(n) {
  return Sc(n, "NodeList");
}
function Nk(n) {
  return Sc(n, "MouseEvent");
}
function Ok(n) {
  return !!(n && n._tippy && n._tippy.reference === n);
}
function Lk(n) {
  return Ri(n) ? [n] : Tk(n) ? Zs(n) : Array.isArray(n) ? n : Zs(document.querySelectorAll(n));
}
function Ca(n, e) {
  n.forEach(function(t) {
    t && (t.style.transitionDuration = e + "ms");
  });
}
function _d(n, e) {
  n.forEach(function(t) {
    t && t.setAttribute("data-state", e);
  });
}
function Rk(n) {
  var e, t = Sr(n), r = t[0];
  return r != null && (e = r.ownerDocument) != null && e.body ? r.ownerDocument : document;
}
function Dk(n, e) {
  var t = e.clientX, r = e.clientY;
  return n.every(function(i) {
    var s = i.popperRect, o = i.popperState, a = i.props, l = a.interactiveBorder, c = Ak(o.placement), u = o.modifiersData.offset;
    if (!u)
      return !0;
    var d = c === "bottom" ? u.top.y : 0, f = c === "top" ? u.bottom.y : 0, p = c === "right" ? u.left.x : 0, h = c === "left" ? u.right.x : 0, g = s.top - r + d > l, m = r - s.bottom - f > l, v = s.left - t + p > l, y = t - s.right - h > l;
    return g || m || v || y;
  });
}
function Sa(n, e, t) {
  var r = e + "EventListener";
  ["transitionend", "webkitTransitionEnd"].forEach(function(i) {
    n[r](i, t);
  });
}
function Md(n, e) {
  for (var t = e; t; ) {
    var r;
    if (n.contains(t))
      return !0;
    t = t.getRootNode == null || (r = t.getRootNode()) == null ? void 0 : r.host;
  }
  return !1;
}
var zt = {
  isTouch: !1
}, Ad = 0;
function Ik() {
  zt.isTouch || (zt.isTouch = !0, window.performance && document.addEventListener("mousemove", Sg));
}
function Sg() {
  var n = performance.now();
  n - Ad < 20 && (zt.isTouch = !1, document.removeEventListener("mousemove", Sg)), Ad = n;
}
function Bk() {
  var n = document.activeElement;
  if (Ok(n)) {
    var e = n._tippy;
    n.blur && !e.state.isVisible && n.blur();
  }
}
function Hk() {
  document.addEventListener("touchstart", Ik, $n), window.addEventListener("blur", Bk);
}
var Pk = typeof window < "u" && typeof document < "u", $k = Pk ? (
  // @ts-ignore
  !!window.msCrypto
) : !1;
function mr(n) {
  var e = n === "destroy" ? "n already-" : " ";
  return [n + "() was called on a" + e + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
}
function Td(n) {
  var e = /[ \t]{2,}/g, t = /^[ \t]*/gm;
  return n.replace(e, " ").replace(t, "").trim();
}
function Fk(n) {
  return Td(`
  %ctippy.js

  %c` + Td(n) + `

  %c👷‍ This is a development-only message. It will be removed in production.
  `);
}
function _g(n) {
  return [
    Fk(n),
    // title
    "color: #00C584; font-size: 1.3em; font-weight: bold;",
    // message
    "line-height: 1.5",
    // footer
    "color: #a6a095;"
  ];
}
var Di;
({}).NODE_ENV !== "production" && zk();
function zk() {
  Di = /* @__PURE__ */ new Set();
}
function on(n, e) {
  if (n && !Di.has(e)) {
    var t;
    Di.add(e), (t = console).warn.apply(t, _g(e));
  }
}
function Tl(n, e) {
  if (n && !Di.has(e)) {
    var t;
    Di.add(e), (t = console).error.apply(t, _g(e));
  }
}
function Vk(n) {
  var e = !n, t = Object.prototype.toString.call(n) === "[object Object]" && !n.addEventListener;
  Tl(e, ["tippy() was passed", "`" + String(n) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" ")), Tl(t, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
}
var Mg = {
  animateFill: !1,
  followCursor: !1,
  inlinePositioning: !1,
  sticky: !1
}, qk = {
  allowHTML: !1,
  animation: "fade",
  arrow: !0,
  content: "",
  inertia: !1,
  maxWidth: 350,
  role: "tooltip",
  theme: "",
  zIndex: 9999
}, mt = Object.assign({
  appendTo: xg,
  aria: {
    content: "auto",
    expanded: "auto"
  },
  delay: 0,
  duration: [300, 250],
  getReferenceClientRect: null,
  hideOnClick: !0,
  ignoreAttributes: !1,
  interactive: !1,
  interactiveBorder: 2,
  interactiveDebounce: 0,
  moveTransition: "",
  offset: [0, 10],
  onAfterUpdate: function() {
  },
  onBeforeUpdate: function() {
  },
  onCreate: function() {
  },
  onDestroy: function() {
  },
  onHidden: function() {
  },
  onHide: function() {
  },
  onMount: function() {
  },
  onShow: function() {
  },
  onShown: function() {
  },
  onTrigger: function() {
  },
  onUntrigger: function() {
  },
  onClickOutside: function() {
  },
  placement: "top",
  plugins: [],
  popperOptions: {},
  render: null,
  showOnCreate: !1,
  touch: !0,
  trigger: "mouseenter focus",
  triggerTarget: null
}, Mg, qk), Uk = Object.keys(mt), Kk = function(e) {
  ({}).NODE_ENV !== "production" && Tg(e, []);
  var t = Object.keys(e);
  t.forEach(function(r) {
    mt[r] = e[r];
  });
};
function Ag(n) {
  var e = n.plugins || [], t = e.reduce(function(r, i) {
    var s = i.name, o = i.defaultValue;
    if (s) {
      var a;
      r[s] = n[s] !== void 0 ? n[s] : (a = mt[s]) != null ? a : o;
    }
    return r;
  }, {});
  return Object.assign({}, n, t);
}
function Wk(n, e) {
  var t = e ? Object.keys(Ag(Object.assign({}, mt, {
    plugins: e
  }))) : Uk, r = t.reduce(function(i, s) {
    var o = (n.getAttribute("data-tippy-" + s) || "").trim();
    if (!o)
      return i;
    if (s === "content")
      i[s] = o;
    else
      try {
        i[s] = JSON.parse(o);
      } catch {
        i[s] = o;
      }
    return i;
  }, {});
  return r;
}
function Nd(n, e) {
  var t = Object.assign({}, e, {
    content: Cg(e.content, [n])
  }, e.ignoreAttributes ? {} : Wk(n, e.plugins));
  return t.aria = Object.assign({}, mt.aria, t.aria), t.aria = {
    expanded: t.aria.expanded === "auto" ? e.interactive : t.aria.expanded,
    content: t.aria.content === "auto" ? e.interactive ? null : "describedby" : t.aria.content
  }, t;
}
function Tg(n, e) {
  n === void 0 && (n = {}), e === void 0 && (e = []);
  var t = Object.keys(n);
  t.forEach(function(r) {
    var i = Sk(mt, Object.keys(Mg)), s = !Ck(i, r);
    s && (s = e.filter(function(o) {
      return o.name === r;
    }).length === 0), on(s, ["`" + r + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", `

`, `All props: https://atomiks.github.io/tippyjs/v6/all-props/
`, "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
  });
}
var Gk = function() {
  return "innerHTML";
};
function Nl(n, e) {
  n[Gk()] = e;
}
function Od(n) {
  var e = vi();
  return n === !0 ? e.className = kg : (e.className = Eg, Ri(n) ? e.appendChild(n) : Nl(e, n)), e;
}
function Ld(n, e) {
  Ri(e.content) ? (Nl(n, ""), n.appendChild(e.content)) : typeof e.content != "function" && (e.allowHTML ? Nl(n, e.content) : n.textContent = e.content);
}
function Ol(n) {
  var e = n.firstElementChild, t = Zs(e.children);
  return {
    box: e,
    content: t.find(function(r) {
      return r.classList.contains(wg);
    }),
    arrow: t.find(function(r) {
      return r.classList.contains(kg) || r.classList.contains(Eg);
    }),
    backdrop: t.find(function(r) {
      return r.classList.contains(xk);
    })
  };
}
function Ng(n) {
  var e = vi(), t = vi();
  t.className = Ek, t.setAttribute("data-state", "hidden"), t.setAttribute("tabindex", "-1");
  var r = vi();
  r.className = wg, r.setAttribute("data-state", "hidden"), Ld(r, n.props), e.appendChild(t), t.appendChild(r), i(n.props, n.props);
  function i(s, o) {
    var a = Ol(e), l = a.box, c = a.content, u = a.arrow;
    o.theme ? l.setAttribute("data-theme", o.theme) : l.removeAttribute("data-theme"), typeof o.animation == "string" ? l.setAttribute("data-animation", o.animation) : l.removeAttribute("data-animation"), o.inertia ? l.setAttribute("data-inertia", "") : l.removeAttribute("data-inertia"), l.style.maxWidth = typeof o.maxWidth == "number" ? o.maxWidth + "px" : o.maxWidth, o.role ? l.setAttribute("role", o.role) : l.removeAttribute("role"), (s.content !== o.content || s.allowHTML !== o.allowHTML) && Ld(c, n.props), o.arrow ? u ? s.arrow !== o.arrow && (l.removeChild(u), l.appendChild(Od(o.arrow))) : l.appendChild(Od(o.arrow)) : u && l.removeChild(u);
  }
  return {
    popper: e,
    onUpdate: i
  };
}
Ng.$$tippy = !0;
var Zk = 1, ss = [], _a = [];
function jk(n, e) {
  var t = Nd(n, Object.assign({}, mt, Ag(Sd(e)))), r, i, s, o = !1, a = !1, l = !1, c = !1, u, d, f, p = [], h = xd(Ae, t.interactiveDebounce), g, m = Zk++, v = null, y = Mk(t.plugins), k = {
    // Is the instance currently enabled?
    isEnabled: !0,
    // Is the tippy currently showing and not transitioning out?
    isVisible: !1,
    // Has the instance been destroyed?
    isDestroyed: !1,
    // Is the tippy currently mounted to the DOM?
    isMounted: !1,
    // Has the tippy finished transitioning in?
    isShown: !1
  }, b = {
    // properties
    id: m,
    reference: n,
    popper: vi(),
    popperInstance: v,
    props: t,
    state: k,
    plugins: y,
    // methods
    clearDelayTimeouts: U,
    setProps: O,
    setContent: I,
    show: J,
    hide: se,
    hideWithInteractivity: De,
    enable: Ve,
    disable: $,
    unmount: ht,
    destroy: Qo
  };
  if (!t.render)
    return {}.NODE_ENV !== "production" && Tl(!0, "render() function has not been supplied."), b;
  var x = t.render(b), w = x.popper, S = x.onUpdate;
  w.setAttribute("data-tippy-root", ""), w.id = "tippy-" + b.id, b.popper = w, n._tippy = b, w._tippy = b;
  var T = y.map(function(N) {
    return N.fn(b);
  }), M = n.hasAttribute("aria-expanded");
  return vt(), P(), E(), _("onCreate", [b]), t.showOnCreate && oe(), w.addEventListener("mouseenter", function() {
    b.props.interactive && b.state.isVisible && b.clearDelayTimeouts();
  }), w.addEventListener("mouseleave", function() {
    b.props.interactive && b.props.trigger.indexOf("mouseenter") >= 0 && A().addEventListener("mousemove", h);
  }), b;
  function L() {
    var N = b.props.touch;
    return Array.isArray(N) ? N : [N, 0];
  }
  function z() {
    return L()[0] === "hold";
  }
  function G() {
    var N;
    return !!((N = b.props.render) != null && N.$$tippy);
  }
  function q() {
    return g || n;
  }
  function A() {
    var N = q().parentNode;
    return N ? Rk(N) : document;
  }
  function H() {
    return Ol(w);
  }
  function C(N) {
    return b.state.isMounted && !b.state.isVisible || zt.isTouch || u && u.type === "focus" ? 0 : xa(b.props.delay, N ? 0 : 1, mt.delay);
  }
  function E(N) {
    N === void 0 && (N = !1), w.style.pointerEvents = b.props.interactive && !N ? "" : "none", w.style.zIndex = "" + b.props.zIndex;
  }
  function _(N, Z, re) {
    if (re === void 0 && (re = !0), T.forEach(function(ge) {
      ge[N] && ge[N].apply(ge, Z);
    }), re) {
      var xe;
      (xe = b.props)[N].apply(xe, Z);
    }
  }
  function D() {
    var N = b.props.aria;
    if (N.content) {
      var Z = "aria-" + N.content, re = w.id, xe = Sr(b.props.triggerTarget || n);
      xe.forEach(function(ge) {
        var et = ge.getAttribute(Z);
        if (b.state.isVisible)
          ge.setAttribute(Z, et ? et + " " + re : re);
        else {
          var wt = et && et.replace(re, "").trim();
          wt ? ge.setAttribute(Z, wt) : ge.removeAttribute(Z);
        }
      });
    }
  }
  function P() {
    if (!(M || !b.props.aria.expanded)) {
      var N = Sr(b.props.triggerTarget || n);
      N.forEach(function(Z) {
        b.props.interactive ? Z.setAttribute("aria-expanded", b.state.isVisible && Z === q() ? "true" : "false") : Z.removeAttribute("aria-expanded");
      });
    }
  }
  function W() {
    A().removeEventListener("mousemove", h), ss = ss.filter(function(N) {
      return N !== h;
    });
  }
  function ee(N) {
    if (!(zt.isTouch && (l || N.type === "mousedown"))) {
      var Z = N.composedPath && N.composedPath()[0] || N.target;
      if (!(b.props.interactive && Md(w, Z))) {
        if (Sr(b.props.triggerTarget || n).some(function(re) {
          return Md(re, Z);
        })) {
          if (zt.isTouch || b.state.isVisible && b.props.trigger.indexOf("click") >= 0)
            return;
        } else
          _("onClickOutside", [b, N]);
        b.props.hideOnClick === !0 && (b.clearDelayTimeouts(), b.hide(), a = !0, setTimeout(function() {
          a = !1;
        }), b.state.isMounted || _e());
      }
    }
  }
  function he() {
    l = !0;
  }
  function we() {
    l = !1;
  }
  function ue() {
    var N = A();
    N.addEventListener("mousedown", ee, !0), N.addEventListener("touchend", ee, $n), N.addEventListener("touchstart", we, $n), N.addEventListener("touchmove", he, $n);
  }
  function _e() {
    var N = A();
    N.removeEventListener("mousedown", ee, !0), N.removeEventListener("touchend", ee, $n), N.removeEventListener("touchstart", we, $n), N.removeEventListener("touchmove", he, $n);
  }
  function st(N, Z) {
    ft(N, function() {
      !b.state.isVisible && w.parentNode && w.parentNode.contains(w) && Z();
    });
  }
  function ze(N, Z) {
    ft(N, Z);
  }
  function ft(N, Z) {
    var re = H().box;
    function xe(ge) {
      ge.target === re && (Sa(re, "remove", xe), Z());
    }
    if (N === 0)
      return Z();
    Sa(re, "remove", d), Sa(re, "add", xe), d = xe;
  }
  function ot(N, Z, re) {
    re === void 0 && (re = !1);
    var xe = Sr(b.props.triggerTarget || n);
    xe.forEach(function(ge) {
      ge.addEventListener(N, Z, re), p.push({
        node: ge,
        eventType: N,
        handler: Z,
        options: re
      });
    });
  }
  function vt() {
    z() && (ot("touchstart", de, {
      passive: !0
    }), ot("touchend", Qe, {
      passive: !0
    })), _k(b.props.trigger).forEach(function(N) {
      if (N !== "manual")
        switch (ot(N, de), N) {
          case "mouseenter":
            ot("mouseleave", Qe);
            break;
          case "focus":
            ot($k ? "focusout" : "blur", Oe);
            break;
          case "focusin":
            ot("focusout", Oe);
            break;
        }
    });
  }
  function pt() {
    p.forEach(function(N) {
      var Z = N.node, re = N.eventType, xe = N.handler, ge = N.options;
      Z.removeEventListener(re, xe, ge);
    }), p = [];
  }
  function de(N) {
    var Z, re = !1;
    if (!(!b.state.isEnabled || te(N) || a)) {
      var xe = ((Z = u) == null ? void 0 : Z.type) === "focus";
      u = N, g = N.currentTarget, P(), !b.state.isVisible && Nk(N) && ss.forEach(function(ge) {
        return ge(N);
      }), N.type === "click" && (b.props.trigger.indexOf("mouseenter") < 0 || o) && b.props.hideOnClick !== !1 && b.state.isVisible ? re = !0 : oe(N), N.type === "click" && (o = !re), re && !xe && Ge(N);
    }
  }
  function Ae(N) {
    var Z = N.target, re = q().contains(Z) || w.contains(Z);
    if (!(N.type === "mousemove" && re)) {
      var xe = be().concat(w).map(function(ge) {
        var et, wt = ge._tippy, fr = (et = wt.popperInstance) == null ? void 0 : et.state;
        return fr ? {
          popperRect: ge.getBoundingClientRect(),
          popperState: fr,
          props: t
        } : null;
      }).filter(Boolean);
      Dk(xe, N) && (W(), Ge(N));
    }
  }
  function Qe(N) {
    var Z = te(N) || b.props.trigger.indexOf("click") >= 0 && o;
    if (!Z) {
      if (b.props.interactive) {
        b.hideWithInteractivity(N);
        return;
      }
      Ge(N);
    }
  }
  function Oe(N) {
    b.props.trigger.indexOf("focusin") < 0 && N.target !== q() || b.props.interactive && N.relatedTarget && w.contains(N.relatedTarget) || Ge(N);
  }
  function te(N) {
    return zt.isTouch ? z() !== N.type.indexOf("touch") >= 0 : !1;
  }
  function Nt() {
    V();
    var N = b.props, Z = N.popperOptions, re = N.placement, xe = N.offset, ge = N.getReferenceClientRect, et = N.moveTransition, wt = G() ? Ol(w).arrow : null, fr = ge ? {
      getBoundingClientRect: ge,
      contextElement: ge.contextElement || q()
    } : n, uu = {
      name: "$$tippy",
      enabled: !0,
      phase: "beforeWrite",
      requires: ["computeStyles"],
      fn: function(Qi) {
        var pr = Qi.state;
        if (G()) {
          var Cb = H(), ta = Cb.box;
          ["placement", "reference-hidden", "escaped"].forEach(function(es) {
            es === "placement" ? ta.setAttribute("data-placement", pr.placement) : pr.attributes.popper["data-popper-" + es] ? ta.setAttribute("data-" + es, "") : ta.removeAttribute("data-" + es);
          }), pr.attributes.popper = {};
        }
      }
    }, Bn = [{
      name: "offset",
      options: {
        offset: xe
      }
    }, {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    }, {
      name: "flip",
      options: {
        padding: 5
      }
    }, {
      name: "computeStyles",
      options: {
        adaptive: !et
      }
    }, uu];
    G() && wt && Bn.push({
      name: "arrow",
      options: {
        element: wt,
        padding: 3
      }
    }), Bn.push.apply(Bn, (Z == null ? void 0 : Z.modifiers) || []), b.popperInstance = kk(fr, w, Object.assign({}, Z, {
      placement: re,
      onFirstUpdate: f,
      modifiers: Bn
    }));
  }
  function V() {
    b.popperInstance && (b.popperInstance.destroy(), b.popperInstance = null);
  }
  function ce() {
    var N = b.props.appendTo, Z, re = q();
    b.props.interactive && N === xg || N === "parent" ? Z = re.parentNode : Z = Cg(N, [re]), Z.contains(w) || Z.appendChild(w), b.state.isMounted = !0, Nt(), {}.NODE_ENV !== "production" && on(b.props.interactive && N === mt.appendTo && re.nextElementSibling !== w, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", `

`, "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", `

`, "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", `

`, "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
  }
  function be() {
    return Zs(w.querySelectorAll("[data-tippy-root]"));
  }
  function oe(N) {
    b.clearDelayTimeouts(), N && _("onTrigger", [b, N]), ue();
    var Z = C(!0), re = L(), xe = re[0], ge = re[1];
    zt.isTouch && xe === "hold" && ge && (Z = ge), Z ? r = setTimeout(function() {
      b.show();
    }, Z) : b.show();
  }
  function Ge(N) {
    if (b.clearDelayTimeouts(), _("onUntrigger", [b, N]), !b.state.isVisible) {
      _e();
      return;
    }
    if (!(b.props.trigger.indexOf("mouseenter") >= 0 && b.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(N.type) >= 0 && o)) {
      var Z = C(!1);
      Z ? i = setTimeout(function() {
        b.state.isVisible && b.hide();
      }, Z) : s = requestAnimationFrame(function() {
        b.hide();
      });
    }
  }
  function Ve() {
    b.state.isEnabled = !0;
  }
  function $() {
    b.hide(), b.state.isEnabled = !1;
  }
  function U() {
    clearTimeout(r), clearTimeout(i), cancelAnimationFrame(s);
  }
  function O(N) {
    if ({}.NODE_ENV !== "production" && on(b.state.isDestroyed, mr("setProps")), !b.state.isDestroyed) {
      _("onBeforeUpdate", [b, N]), pt();
      var Z = b.props, re = Nd(n, Object.assign({}, Z, Sd(N), {
        ignoreAttributes: !0
      }));
      b.props = re, vt(), Z.interactiveDebounce !== re.interactiveDebounce && (W(), h = xd(Ae, re.interactiveDebounce)), Z.triggerTarget && !re.triggerTarget ? Sr(Z.triggerTarget).forEach(function(xe) {
        xe.removeAttribute("aria-expanded");
      }) : re.triggerTarget && n.removeAttribute("aria-expanded"), P(), E(), S && S(Z, re), b.popperInstance && (Nt(), be().forEach(function(xe) {
        requestAnimationFrame(xe._tippy.popperInstance.forceUpdate);
      })), _("onAfterUpdate", [b, N]);
    }
  }
  function I(N) {
    b.setProps({
      content: N
    });
  }
  function J() {
    ({}).NODE_ENV !== "production" && on(b.state.isDestroyed, mr("show"));
    var N = b.state.isVisible, Z = b.state.isDestroyed, re = !b.state.isEnabled, xe = zt.isTouch && !b.props.touch, ge = xa(b.props.duration, 0, mt.duration);
    if (!(N || Z || re || xe) && !q().hasAttribute("disabled") && (_("onShow", [b], !1), b.props.onShow(b) !== !1)) {
      if (b.state.isVisible = !0, G() && (w.style.visibility = "visible"), E(), ue(), b.state.isMounted || (w.style.transition = "none"), G()) {
        var et = H(), wt = et.box, fr = et.content;
        Ca([wt, fr], 0);
      }
      f = function() {
        var Bn;
        if (!(!b.state.isVisible || c)) {
          if (c = !0, w.offsetHeight, w.style.transition = b.props.moveTransition, G() && b.props.animation) {
            var ea = H(), Qi = ea.box, pr = ea.content;
            Ca([Qi, pr], ge), _d([Qi, pr], "visible");
          }
          D(), P(), Cd(_a, b), (Bn = b.popperInstance) == null || Bn.forceUpdate(), _("onMount", [b]), b.props.animation && G() && ze(ge, function() {
            b.state.isShown = !0, _("onShown", [b]);
          });
        }
      }, ce();
    }
  }
  function se() {
    ({}).NODE_ENV !== "production" && on(b.state.isDestroyed, mr("hide"));
    var N = !b.state.isVisible, Z = b.state.isDestroyed, re = !b.state.isEnabled, xe = xa(b.props.duration, 1, mt.duration);
    if (!(N || Z || re) && (_("onHide", [b], !1), b.props.onHide(b) !== !1)) {
      if (b.state.isVisible = !1, b.state.isShown = !1, c = !1, o = !1, G() && (w.style.visibility = "hidden"), W(), _e(), E(!0), G()) {
        var ge = H(), et = ge.box, wt = ge.content;
        b.props.animation && (Ca([et, wt], xe), _d([et, wt], "hidden"));
      }
      D(), P(), b.props.animation ? G() && st(xe, b.unmount) : b.unmount();
    }
  }
  function De(N) {
    ({}).NODE_ENV !== "production" && on(b.state.isDestroyed, mr("hideWithInteractivity")), A().addEventListener("mousemove", h), Cd(ss, h), h(N);
  }
  function ht() {
    ({}).NODE_ENV !== "production" && on(b.state.isDestroyed, mr("unmount")), b.state.isVisible && b.hide(), b.state.isMounted && (V(), be().forEach(function(N) {
      N._tippy.unmount();
    }), w.parentNode && w.parentNode.removeChild(w), _a = _a.filter(function(N) {
      return N !== b;
    }), b.state.isMounted = !1, _("onHidden", [b]));
  }
  function Qo() {
    ({}).NODE_ENV !== "production" && on(b.state.isDestroyed, mr("destroy")), !b.state.isDestroyed && (b.clearDelayTimeouts(), b.unmount(), pt(), delete n._tippy, b.state.isDestroyed = !0, _("onDestroy", [b]));
  }
}
function Je(n, e) {
  e === void 0 && (e = {});
  var t = mt.plugins.concat(e.plugins || []);
  ({}).NODE_ENV !== "production" && (Vk(n), Tg(e, t)), Hk();
  var r = Object.assign({}, e, {
    plugins: t
  }), i = Lk(n);
  if ({}.NODE_ENV !== "production") {
    var s = Ri(r.content), o = i.length > 1;
    on(s && o, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", `

`, "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", `

`, `1) content: element.innerHTML
`, "2) content: () => element.cloneNode(true)"].join(" "));
  }
  var a = i.reduce(function(l, c) {
    var u = c && jk(c, r);
    return u && l.push(u), l;
  }, []);
  return Ri(n) ? a[0] : a;
}
Je.defaultProps = mt;
Je.setDefaultProps = Kk;
Je.currentInput = zt;
Object.assign({}, fg, {
  effect: function(e) {
    var t = e.state, r = {
      popper: {
        position: t.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(t.elements.popper.style, r.popper), t.styles = r, t.elements.arrow && Object.assign(t.elements.arrow.style, r.arrow);
  }
});
Je.setDefaultProps({
  render: Ng
});
class Yr extends me {
  constructor() {
    super(...arguments);
    j(this, "tippyInstance");
    j(this, "tippyEl");
    j(this, "textEl");
    j(this, "menuData", []);
    j(this, "menuTextWidth", "40px");
    j(this, "defaultMenuIndex", 0);
    j(this, "refreshMenuText", !0);
    j(this, "width", "48px");
    j(this, "dropDivWith", "100px");
    j(this, "dropDivHeight", "260px");
    j(this, "showItemsTip", !1);
  }
  renderTemplate() {
    this.template = `
         <div style="width: ${this.width};">
         <div style="display: flex" id="tippy">
             <span style="line-height: 18px;font-size: 14px;text-align:center;overflow: hidden; width: ${this.menuTextWidth}" id="text">
                ${this.onMenuTextRender(this.defaultMenuIndex)}
             </span>
             <div style="width: 18px;height: 18px;display: inline-block">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
             </div>
         </div>
         </div>
        `;
  }
  connectedCallback() {
    this.renderTemplate(), super.connectedCallback(), this.textEl = this.querySelector("#text"), this.tippyInstance = Je(this.querySelector("#tippy"), {
      content: this.createMenuElement(),
      appendTo: this.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const t = document.createElement("div");
    t.style.height = this.dropDivHeight, t.style.width = this.dropDivWith, t.classList.add("aie-dropdown-container");
    for (let r = 0; r < this.menuData.length; r++) {
      const i = document.createElement("div");
      if (i.classList.add("aie-dropdown-item"), i.innerHTML = `
            <div class="red-dot-container" id="item${r}"><div class="${r == 0 ? "red-dot" : ""}"></div></div>
            <div class="text">${this.onDropdownItemRender(r)}</div>
            `, i.addEventListener("click", () => {
        this.onDropdownItemClick(r), this.tippyInstance.hide();
      }), this.showItemsTip) {
        const s = this.menuData[r];
        Je(i, {
          appendTo: () => this.closest(".aie-container"),
          content: s.tip || s.title,
          theme: "aietip",
          arrow: !0,
          placement: "right"
        });
      }
      t.appendChild(i);
    }
    return this.tippyEl = t, t;
  }
  onTransaction(t) {
    var s, o;
    const r = (s = this.tippyEl) == null ? void 0 : s.querySelector(".red-dot");
    r && r.classList.remove("red-dot");
    let i = this.defaultMenuIndex;
    for (let a = 0; a < this.menuData.length; a++)
      if (this.onDropdownActive(t.editor, a)) {
        i = a;
        break;
      }
    if ((o = this.tippyEl) == null || o.querySelector(`#item${i}`).children[0].classList.add("red-dot"), this.refreshMenuText && this.textEl) {
      const a = this.onMenuTextRender(i);
      typeof a == "string" || typeof a == "number" ? this.textEl.innerHTML = a : (this.textEl.removeChild(this.textEl.firstChild), this.textEl.appendChild(a));
    }
  }
}
const Jk = {
  type: "logger",
  log(n) {
    this.output("log", n);
  },
  warn(n) {
    this.output("warn", n);
  },
  error(n) {
    this.output("error", n);
  },
  output(n, e) {
    console && console[n] && console[n].apply(console, e);
  }
};
class js {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.init(e, t);
  }
  init(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.prefix = t.prefix || "i18next:", this.logger = e || Jk, this.options = t, this.debug = t.debug;
  }
  log() {
    for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
      t[r] = arguments[r];
    return this.forward(t, "log", "", !0);
  }
  warn() {
    for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
      t[r] = arguments[r];
    return this.forward(t, "warn", "", !0);
  }
  error() {
    for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
      t[r] = arguments[r];
    return this.forward(t, "error", "");
  }
  deprecate() {
    for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
      t[r] = arguments[r];
    return this.forward(t, "warn", "WARNING DEPRECATED: ", !0);
  }
  forward(e, t, r, i) {
    return i && !this.debug ? null : (typeof e[0] == "string" && (e[0] = `${r}${this.prefix} ${e[0]}`), this.logger[t](e));
  }
  create(e) {
    return new js(this.logger, {
      prefix: `${this.prefix}:${e}:`,
      ...this.options
    });
  }
  clone(e) {
    return e = e || this.options, e.prefix = e.prefix || this.prefix, new js(this.logger, e);
  }
}
var Kt = new js();
class Ho {
  constructor() {
    this.observers = {};
  }
  on(e, t) {
    return e.split(" ").forEach((r) => {
      this.observers[r] = this.observers[r] || [], this.observers[r].push(t);
    }), this;
  }
  off(e, t) {
    if (this.observers[e]) {
      if (!t) {
        delete this.observers[e];
        return;
      }
      this.observers[e] = this.observers[e].filter((r) => r !== t);
    }
  }
  emit(e) {
    for (var t = arguments.length, r = new Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++)
      r[i - 1] = arguments[i];
    this.observers[e] && [].concat(this.observers[e]).forEach((o) => {
      o(...r);
    }), this.observers["*"] && [].concat(this.observers["*"]).forEach((o) => {
      o.apply(o, [e, ...r]);
    });
  }
}
function si() {
  let n, e;
  const t = new Promise((r, i) => {
    n = r, e = i;
  });
  return t.resolve = n, t.reject = e, t;
}
function Rd(n) {
  return n == null ? "" : "" + n;
}
function Yk(n, e, t) {
  n.forEach((r) => {
    e[r] && (t[r] = e[r]);
  });
}
function _c(n, e, t) {
  function r(o) {
    return o && o.indexOf("###") > -1 ? o.replace(/###/g, ".") : o;
  }
  function i() {
    return !n || typeof n == "string";
  }
  const s = typeof e != "string" ? [].concat(e) : e.split(".");
  for (; s.length > 1; ) {
    if (i())
      return {};
    const o = r(s.shift());
    !n[o] && t && (n[o] = new t()), Object.prototype.hasOwnProperty.call(n, o) ? n = n[o] : n = {};
  }
  return i() ? {} : {
    obj: n,
    k: r(s.shift())
  };
}
function Dd(n, e, t) {
  const {
    obj: r,
    k: i
  } = _c(n, e, Object);
  r[i] = t;
}
function Xk(n, e, t, r) {
  const {
    obj: i,
    k: s
  } = _c(n, e, Object);
  i[s] = i[s] || [], r && (i[s] = i[s].concat(t)), r || i[s].push(t);
}
function Js(n, e) {
  const {
    obj: t,
    k: r
  } = _c(n, e);
  if (t)
    return t[r];
}
function Qk(n, e, t) {
  const r = Js(n, t);
  return r !== void 0 ? r : Js(e, t);
}
function Og(n, e, t) {
  for (const r in e)
    r !== "__proto__" && r !== "constructor" && (r in n ? typeof n[r] == "string" || n[r] instanceof String || typeof e[r] == "string" || e[r] instanceof String ? t && (n[r] = e[r]) : Og(n[r], e[r], t) : n[r] = e[r]);
  return n;
}
function br(n) {
  return n.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}
var eE = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#39;",
  "/": "&#x2F;"
};
function tE(n) {
  return typeof n == "string" ? n.replace(/[&<>"'\/]/g, (e) => eE[e]) : n;
}
const nE = [" ", ",", "?", "!", ";"];
function rE(n, e, t) {
  e = e || "", t = t || "";
  const r = nE.filter((o) => e.indexOf(o) < 0 && t.indexOf(o) < 0);
  if (r.length === 0)
    return !0;
  const i = new RegExp(`(${r.map((o) => o === "?" ? "\\?" : o).join("|")})`);
  let s = !i.test(n);
  if (!s) {
    const o = n.indexOf(t);
    o > 0 && !i.test(n.substring(0, o)) && (s = !0);
  }
  return s;
}
function Ys(n, e) {
  let t = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
  if (!n)
    return;
  if (n[e])
    return n[e];
  const r = e.split(t);
  let i = n;
  for (let s = 0; s < r.length; ++s) {
    if (!i || typeof i[r[s]] == "string" && s + 1 < r.length)
      return;
    if (i[r[s]] === void 0) {
      let o = 2, a = r.slice(s, s + o).join(t), l = i[a];
      for (; l === void 0 && r.length > s + o; )
        o++, a = r.slice(s, s + o).join(t), l = i[a];
      if (l === void 0)
        return;
      if (l === null)
        return null;
      if (e.endsWith(a)) {
        if (typeof l == "string")
          return l;
        if (a && typeof l[a] == "string")
          return l[a];
      }
      const c = r.slice(s + o).join(t);
      return c ? Ys(l, c, t) : void 0;
    }
    i = i[r[s]];
  }
  return i;
}
function Xs(n) {
  return n && n.indexOf("_") > 0 ? n.replace("_", "-") : n;
}
class Id extends Ho {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      ns: ["translation"],
      defaultNS: "translation"
    };
    super(), this.data = e || {}, this.options = t, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.options.ignoreJSONStructure === void 0 && (this.options.ignoreJSONStructure = !0);
  }
  addNamespaces(e) {
    this.options.ns.indexOf(e) < 0 && this.options.ns.push(e);
  }
  removeNamespaces(e) {
    const t = this.options.ns.indexOf(e);
    t > -1 && this.options.ns.splice(t, 1);
  }
  getResource(e, t, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    const s = i.keySeparator !== void 0 ? i.keySeparator : this.options.keySeparator, o = i.ignoreJSONStructure !== void 0 ? i.ignoreJSONStructure : this.options.ignoreJSONStructure;
    let a = [e, t];
    r && typeof r != "string" && (a = a.concat(r)), r && typeof r == "string" && (a = a.concat(s ? r.split(s) : r)), e.indexOf(".") > -1 && (a = e.split("."));
    const l = Js(this.data, a);
    return l || !o || typeof r != "string" ? l : Ys(this.data && this.data[e] && this.data[e][t], r, s);
  }
  addResource(e, t, r, i) {
    let s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
      silent: !1
    };
    const o = s.keySeparator !== void 0 ? s.keySeparator : this.options.keySeparator;
    let a = [e, t];
    r && (a = a.concat(o ? r.split(o) : r)), e.indexOf(".") > -1 && (a = e.split("."), i = t, t = a[1]), this.addNamespaces(t), Dd(this.data, a, i), s.silent || this.emit("added", e, t, r, i);
  }
  addResources(e, t, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
      silent: !1
    };
    for (const s in r)
      (typeof r[s] == "string" || Object.prototype.toString.apply(r[s]) === "[object Array]") && this.addResource(e, t, s, r[s], {
        silent: !0
      });
    i.silent || this.emit("added", e, t, r);
  }
  addResourceBundle(e, t, r, i, s) {
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
      silent: !1
    }, a = [e, t];
    e.indexOf(".") > -1 && (a = e.split("."), i = r, r = t, t = a[1]), this.addNamespaces(t);
    let l = Js(this.data, a) || {};
    i ? Og(l, r, s) : l = {
      ...l,
      ...r
    }, Dd(this.data, a, l), o.silent || this.emit("added", e, t, r);
  }
  removeResourceBundle(e, t) {
    this.hasResourceBundle(e, t) && delete this.data[e][t], this.removeNamespaces(t), this.emit("removed", e, t);
  }
  hasResourceBundle(e, t) {
    return this.getResource(e, t) !== void 0;
  }
  getResourceBundle(e, t) {
    return t || (t = this.options.defaultNS), this.options.compatibilityAPI === "v1" ? {
      ...this.getResource(e, t)
    } : this.getResource(e, t);
  }
  getDataByLanguage(e) {
    return this.data[e];
  }
  hasLanguageSomeTranslations(e) {
    const t = this.getDataByLanguage(e);
    return !!(t && Object.keys(t) || []).find((i) => t[i] && Object.keys(t[i]).length > 0);
  }
  toJSON() {
    return this.data;
  }
}
var Lg = {
  processors: {},
  addPostProcessor(n) {
    this.processors[n.name] = n;
  },
  handle(n, e, t, r, i) {
    return n.forEach((s) => {
      this.processors[s] && (e = this.processors[s].process(e, t, r, i));
    }), e;
  }
};
const Bd = {};
class Qs extends Ho {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    super(), Yk(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], e, this), this.options = t, this.options.keySeparator === void 0 && (this.options.keySeparator = "."), this.logger = Kt.create("translator");
  }
  changeLanguage(e) {
    e && (this.language = e);
  }
  exists(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    };
    if (e == null)
      return !1;
    const r = this.resolve(e, t);
    return r && r.res !== void 0;
  }
  extractFromKey(e, t) {
    let r = t.nsSeparator !== void 0 ? t.nsSeparator : this.options.nsSeparator;
    r === void 0 && (r = ":");
    const i = t.keySeparator !== void 0 ? t.keySeparator : this.options.keySeparator;
    let s = t.ns || this.options.defaultNS || [];
    const o = r && e.indexOf(r) > -1, a = !this.options.userDefinedKeySeparator && !t.keySeparator && !this.options.userDefinedNsSeparator && !t.nsSeparator && !rE(e, r, i);
    if (o && !a) {
      const l = e.match(this.interpolator.nestingRegexp);
      if (l && l.length > 0)
        return {
          key: e,
          namespaces: s
        };
      const c = e.split(r);
      (r !== i || r === i && this.options.ns.indexOf(c[0]) > -1) && (s = c.shift()), e = c.join(i);
    }
    return typeof s == "string" && (s = [s]), {
      key: e,
      namespaces: s
    };
  }
  translate(e, t, r) {
    if (typeof t != "object" && this.options.overloadTranslationOptionHandler && (t = this.options.overloadTranslationOptionHandler(arguments)), typeof t == "object" && (t = {
      ...t
    }), t || (t = {}), e == null)
      return "";
    Array.isArray(e) || (e = [String(e)]);
    const i = t.returnDetails !== void 0 ? t.returnDetails : this.options.returnDetails, s = t.keySeparator !== void 0 ? t.keySeparator : this.options.keySeparator, {
      key: o,
      namespaces: a
    } = this.extractFromKey(e[e.length - 1], t), l = a[a.length - 1], c = t.lng || this.language, u = t.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
    if (c && c.toLowerCase() === "cimode") {
      if (u) {
        const b = t.nsSeparator || this.options.nsSeparator;
        return i ? {
          res: `${l}${b}${o}`,
          usedKey: o,
          exactUsedKey: o,
          usedLng: c,
          usedNS: l,
          usedParams: this.getUsedParamsDetails(t)
        } : `${l}${b}${o}`;
      }
      return i ? {
        res: o,
        usedKey: o,
        exactUsedKey: o,
        usedLng: c,
        usedNS: l,
        usedParams: this.getUsedParamsDetails(t)
      } : o;
    }
    const d = this.resolve(e, t);
    let f = d && d.res;
    const p = d && d.usedKey || o, h = d && d.exactUsedKey || o, g = Object.prototype.toString.apply(f), m = ["[object Number]", "[object Function]", "[object RegExp]"], v = t.joinArrays !== void 0 ? t.joinArrays : this.options.joinArrays, y = !this.i18nFormat || this.i18nFormat.handleAsObject;
    if (y && f && (typeof f != "string" && typeof f != "boolean" && typeof f != "number") && m.indexOf(g) < 0 && !(typeof v == "string" && g === "[object Array]")) {
      if (!t.returnObjects && !this.options.returnObjects) {
        this.options.returnedObjectHandler || this.logger.warn("accessing an object - but returnObjects options is not enabled!");
        const b = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(p, f, {
          ...t,
          ns: a
        }) : `key '${o} (${this.language})' returned an object instead of string.`;
        return i ? (d.res = b, d.usedParams = this.getUsedParamsDetails(t), d) : b;
      }
      if (s) {
        const b = g === "[object Array]", x = b ? [] : {}, w = b ? h : p;
        for (const S in f)
          if (Object.prototype.hasOwnProperty.call(f, S)) {
            const T = `${w}${s}${S}`;
            x[S] = this.translate(T, {
              ...t,
              joinArrays: !1,
              ns: a
            }), x[S] === T && (x[S] = f[S]);
          }
        f = x;
      }
    } else if (y && typeof v == "string" && g === "[object Array]")
      f = f.join(v), f && (f = this.extendTranslation(f, e, t, r));
    else {
      let b = !1, x = !1;
      const w = t.count !== void 0 && typeof t.count != "string", S = Qs.hasDefaultValue(t), T = w ? this.pluralResolver.getSuffix(c, t.count, t) : "", M = t.ordinal && w ? this.pluralResolver.getSuffix(c, t.count, {
        ordinal: !1
      }) : "", L = t[`defaultValue${T}`] || t[`defaultValue${M}`] || t.defaultValue;
      !this.isValidLookup(f) && S && (b = !0, f = L), this.isValidLookup(f) || (x = !0, f = o);
      const G = (t.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey) && x ? void 0 : f, q = S && L !== f && this.options.updateMissing;
      if (x || b || q) {
        if (this.logger.log(q ? "updateKey" : "missingKey", c, l, o, q ? L : f), s) {
          const E = this.resolve(o, {
            ...t,
            keySeparator: !1
          });
          E && E.res && this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
        }
        let A = [];
        const H = this.languageUtils.getFallbackCodes(this.options.fallbackLng, t.lng || this.language);
        if (this.options.saveMissingTo === "fallback" && H && H[0])
          for (let E = 0; E < H.length; E++)
            A.push(H[E]);
        else
          this.options.saveMissingTo === "all" ? A = this.languageUtils.toResolveHierarchy(t.lng || this.language) : A.push(t.lng || this.language);
        const C = (E, _, D) => {
          const P = S && D !== f ? D : G;
          this.options.missingKeyHandler ? this.options.missingKeyHandler(E, l, _, P, q, t) : this.backendConnector && this.backendConnector.saveMissing && this.backendConnector.saveMissing(E, l, _, P, q, t), this.emit("missingKey", E, l, _, f);
        };
        this.options.saveMissing && (this.options.saveMissingPlurals && w ? A.forEach((E) => {
          this.pluralResolver.getSuffixes(E, t).forEach((_) => {
            C([E], o + _, t[`defaultValue${_}`] || L);
          });
        }) : C(A, o, L));
      }
      f = this.extendTranslation(f, e, t, d, r), x && f === o && this.options.appendNamespaceToMissingKey && (f = `${l}:${o}`), (x || b) && this.options.parseMissingKeyHandler && (this.options.compatibilityAPI !== "v1" ? f = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${l}:${o}` : o, b ? f : void 0) : f = this.options.parseMissingKeyHandler(f));
    }
    return i ? (d.res = f, d.usedParams = this.getUsedParamsDetails(t), d) : f;
  }
  extendTranslation(e, t, r, i, s) {
    var o = this;
    if (this.i18nFormat && this.i18nFormat.parse)
      e = this.i18nFormat.parse(e, {
        ...this.options.interpolation.defaultVariables,
        ...r
      }, r.lng || this.language || i.usedLng, i.usedNS, i.usedKey, {
        resolved: i
      });
    else if (!r.skipInterpolation) {
      r.interpolation && this.interpolator.init({
        ...r,
        interpolation: {
          ...this.options.interpolation,
          ...r.interpolation
        }
      });
      const c = typeof e == "string" && (r && r.interpolation && r.interpolation.skipOnVariables !== void 0 ? r.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
      let u;
      if (c) {
        const f = e.match(this.interpolator.nestingRegexp);
        u = f && f.length;
      }
      let d = r.replace && typeof r.replace != "string" ? r.replace : r;
      if (this.options.interpolation.defaultVariables && (d = {
        ...this.options.interpolation.defaultVariables,
        ...d
      }), e = this.interpolator.interpolate(e, d, r.lng || this.language, r), c) {
        const f = e.match(this.interpolator.nestingRegexp), p = f && f.length;
        u < p && (r.nest = !1);
      }
      !r.lng && this.options.compatibilityAPI !== "v1" && i && i.res && (r.lng = i.usedLng), r.nest !== !1 && (e = this.interpolator.nest(e, function() {
        for (var f = arguments.length, p = new Array(f), h = 0; h < f; h++)
          p[h] = arguments[h];
        return s && s[0] === p[0] && !r.context ? (o.logger.warn(`It seems you are nesting recursively key: ${p[0]} in key: ${t[0]}`), null) : o.translate(...p, t);
      }, r)), r.interpolation && this.interpolator.reset();
    }
    const a = r.postProcess || this.options.postProcess, l = typeof a == "string" ? [a] : a;
    return e != null && l && l.length && r.applyPostProcessor !== !1 && (e = Lg.handle(l, e, t, this.options && this.options.postProcessPassResolved ? {
      i18nResolved: {
        ...i,
        usedParams: this.getUsedParamsDetails(r)
      },
      ...r
    } : r, this)), e;
  }
  resolve(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r, i, s, o, a;
    return typeof e == "string" && (e = [e]), e.forEach((l) => {
      if (this.isValidLookup(r))
        return;
      const c = this.extractFromKey(l, t), u = c.key;
      i = u;
      let d = c.namespaces;
      this.options.fallbackNS && (d = d.concat(this.options.fallbackNS));
      const f = t.count !== void 0 && typeof t.count != "string", p = f && !t.ordinal && t.count === 0 && this.pluralResolver.shouldUseIntlApi(), h = t.context !== void 0 && (typeof t.context == "string" || typeof t.context == "number") && t.context !== "", g = t.lngs ? t.lngs : this.languageUtils.toResolveHierarchy(t.lng || this.language, t.fallbackLng);
      d.forEach((m) => {
        this.isValidLookup(r) || (a = m, !Bd[`${g[0]}-${m}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(a) && (Bd[`${g[0]}-${m}`] = !0, this.logger.warn(`key "${i}" for languages "${g.join(", ")}" won't get resolved as namespace "${a}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")), g.forEach((v) => {
          if (this.isValidLookup(r))
            return;
          o = v;
          const y = [u];
          if (this.i18nFormat && this.i18nFormat.addLookupKeys)
            this.i18nFormat.addLookupKeys(y, u, v, m, t);
          else {
            let b;
            f && (b = this.pluralResolver.getSuffix(v, t.count, t));
            const x = `${this.options.pluralSeparator}zero`, w = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
            if (f && (y.push(u + b), t.ordinal && b.indexOf(w) === 0 && y.push(u + b.replace(w, this.options.pluralSeparator)), p && y.push(u + x)), h) {
              const S = `${u}${this.options.contextSeparator}${t.context}`;
              y.push(S), f && (y.push(S + b), t.ordinal && b.indexOf(w) === 0 && y.push(S + b.replace(w, this.options.pluralSeparator)), p && y.push(S + x));
            }
          }
          let k;
          for (; k = y.pop(); )
            this.isValidLookup(r) || (s = k, r = this.getResource(v, m, k, t));
        }));
      });
    }), {
      res: r,
      usedKey: i,
      exactUsedKey: s,
      usedLng: o,
      usedNS: a
    };
  }
  isValidLookup(e) {
    return e !== void 0 && !(!this.options.returnNull && e === null) && !(!this.options.returnEmptyString && e === "");
  }
  getResource(e, t, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return this.i18nFormat && this.i18nFormat.getResource ? this.i18nFormat.getResource(e, t, r, i) : this.resourceStore.getResource(e, t, r, i);
  }
  getUsedParamsDetails() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const t = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"], r = e.replace && typeof e.replace != "string";
    let i = r ? e.replace : e;
    if (r && typeof e.count < "u" && (i.count = e.count), this.options.interpolation.defaultVariables && (i = {
      ...this.options.interpolation.defaultVariables,
      ...i
    }), !r) {
      i = {
        ...i
      };
      for (const s of t)
        delete i[s];
    }
    return i;
  }
  static hasDefaultValue(e) {
    const t = "defaultValue";
    for (const r in e)
      if (Object.prototype.hasOwnProperty.call(e, r) && t === r.substring(0, t.length) && e[r] !== void 0)
        return !0;
    return !1;
  }
}
function Ma(n) {
  return n.charAt(0).toUpperCase() + n.slice(1);
}
class Hd {
  constructor(e) {
    this.options = e, this.supportedLngs = this.options.supportedLngs || !1, this.logger = Kt.create("languageUtils");
  }
  getScriptPartFromCode(e) {
    if (e = Xs(e), !e || e.indexOf("-") < 0)
      return null;
    const t = e.split("-");
    return t.length === 2 || (t.pop(), t[t.length - 1].toLowerCase() === "x") ? null : this.formatLanguageCode(t.join("-"));
  }
  getLanguagePartFromCode(e) {
    if (e = Xs(e), !e || e.indexOf("-") < 0)
      return e;
    const t = e.split("-");
    return this.formatLanguageCode(t[0]);
  }
  formatLanguageCode(e) {
    if (typeof e == "string" && e.indexOf("-") > -1) {
      const t = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
      let r = e.split("-");
      return this.options.lowerCaseLng ? r = r.map((i) => i.toLowerCase()) : r.length === 2 ? (r[0] = r[0].toLowerCase(), r[1] = r[1].toUpperCase(), t.indexOf(r[1].toLowerCase()) > -1 && (r[1] = Ma(r[1].toLowerCase()))) : r.length === 3 && (r[0] = r[0].toLowerCase(), r[1].length === 2 && (r[1] = r[1].toUpperCase()), r[0] !== "sgn" && r[2].length === 2 && (r[2] = r[2].toUpperCase()), t.indexOf(r[1].toLowerCase()) > -1 && (r[1] = Ma(r[1].toLowerCase())), t.indexOf(r[2].toLowerCase()) > -1 && (r[2] = Ma(r[2].toLowerCase()))), r.join("-");
    }
    return this.options.cleanCode || this.options.lowerCaseLng ? e.toLowerCase() : e;
  }
  isSupportedCode(e) {
    return (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) && (e = this.getLanguagePartFromCode(e)), !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(e) > -1;
  }
  getBestMatchFromCodes(e) {
    if (!e)
      return null;
    let t;
    return e.forEach((r) => {
      if (t)
        return;
      const i = this.formatLanguageCode(r);
      (!this.options.supportedLngs || this.isSupportedCode(i)) && (t = i);
    }), !t && this.options.supportedLngs && e.forEach((r) => {
      if (t)
        return;
      const i = this.getLanguagePartFromCode(r);
      if (this.isSupportedCode(i))
        return t = i;
      t = this.options.supportedLngs.find((s) => {
        if (s === i)
          return s;
        if (!(s.indexOf("-") < 0 && i.indexOf("-") < 0) && s.indexOf(i) === 0)
          return s;
      });
    }), t || (t = this.getFallbackCodes(this.options.fallbackLng)[0]), t;
  }
  getFallbackCodes(e, t) {
    if (!e)
      return [];
    if (typeof e == "function" && (e = e(t)), typeof e == "string" && (e = [e]), Object.prototype.toString.apply(e) === "[object Array]")
      return e;
    if (!t)
      return e.default || [];
    let r = e[t];
    return r || (r = e[this.getScriptPartFromCode(t)]), r || (r = e[this.formatLanguageCode(t)]), r || (r = e[this.getLanguagePartFromCode(t)]), r || (r = e.default), r || [];
  }
  toResolveHierarchy(e, t) {
    const r = this.getFallbackCodes(t || this.options.fallbackLng || [], e), i = [], s = (o) => {
      o && (this.isSupportedCode(o) ? i.push(o) : this.logger.warn(`rejecting language code not found in supportedLngs: ${o}`));
    };
    return typeof e == "string" && (e.indexOf("-") > -1 || e.indexOf("_") > -1) ? (this.options.load !== "languageOnly" && s(this.formatLanguageCode(e)), this.options.load !== "languageOnly" && this.options.load !== "currentOnly" && s(this.getScriptPartFromCode(e)), this.options.load !== "currentOnly" && s(this.getLanguagePartFromCode(e))) : typeof e == "string" && s(this.formatLanguageCode(e)), r.forEach((o) => {
      i.indexOf(o) < 0 && s(this.formatLanguageCode(o));
    }), i;
  }
}
let iE = [{
  lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
  nr: [1, 2],
  fc: 1
}, {
  lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
  nr: [1, 2],
  fc: 2
}, {
  lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
  nr: [1],
  fc: 3
}, {
  lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
  nr: [1, 2, 5],
  fc: 4
}, {
  lngs: ["ar"],
  nr: [0, 1, 2, 3, 11, 100],
  fc: 5
}, {
  lngs: ["cs", "sk"],
  nr: [1, 2, 5],
  fc: 6
}, {
  lngs: ["csb", "pl"],
  nr: [1, 2, 5],
  fc: 7
}, {
  lngs: ["cy"],
  nr: [1, 2, 3, 8],
  fc: 8
}, {
  lngs: ["fr"],
  nr: [1, 2],
  fc: 9
}, {
  lngs: ["ga"],
  nr: [1, 2, 3, 7, 11],
  fc: 10
}, {
  lngs: ["gd"],
  nr: [1, 2, 3, 20],
  fc: 11
}, {
  lngs: ["is"],
  nr: [1, 2],
  fc: 12
}, {
  lngs: ["jv"],
  nr: [0, 1],
  fc: 13
}, {
  lngs: ["kw"],
  nr: [1, 2, 3, 4],
  fc: 14
}, {
  lngs: ["lt"],
  nr: [1, 2, 10],
  fc: 15
}, {
  lngs: ["lv"],
  nr: [1, 2, 0],
  fc: 16
}, {
  lngs: ["mk"],
  nr: [1, 2],
  fc: 17
}, {
  lngs: ["mnk"],
  nr: [0, 1, 2],
  fc: 18
}, {
  lngs: ["mt"],
  nr: [1, 2, 11, 20],
  fc: 19
}, {
  lngs: ["or"],
  nr: [2, 1],
  fc: 2
}, {
  lngs: ["ro"],
  nr: [1, 2, 20],
  fc: 20
}, {
  lngs: ["sl"],
  nr: [5, 1, 2, 3],
  fc: 21
}, {
  lngs: ["he", "iw"],
  nr: [1, 2, 20, 21],
  fc: 22
}], sE = {
  1: function(n) {
    return +(n > 1);
  },
  2: function(n) {
    return +(n != 1);
  },
  3: function(n) {
    return 0;
  },
  4: function(n) {
    return n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
  },
  5: function(n) {
    return n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
  },
  6: function(n) {
    return n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2;
  },
  7: function(n) {
    return n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
  },
  8: function(n) {
    return n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3;
  },
  9: function(n) {
    return +(n >= 2);
  },
  10: function(n) {
    return n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4;
  },
  11: function(n) {
    return n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3;
  },
  12: function(n) {
    return +(n % 10 != 1 || n % 100 == 11);
  },
  13: function(n) {
    return +(n !== 0);
  },
  14: function(n) {
    return n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3;
  },
  15: function(n) {
    return n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2;
  },
  16: function(n) {
    return n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2;
  },
  17: function(n) {
    return n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1;
  },
  18: function(n) {
    return n == 0 ? 0 : n == 1 ? 1 : 2;
  },
  19: function(n) {
    return n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3;
  },
  20: function(n) {
    return n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2;
  },
  21: function(n) {
    return n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0;
  },
  22: function(n) {
    return n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3;
  }
};
const oE = ["v1", "v2", "v3"], aE = ["v4"], Pd = {
  zero: 0,
  one: 1,
  two: 2,
  few: 3,
  many: 4,
  other: 5
};
function lE() {
  const n = {};
  return iE.forEach((e) => {
    e.lngs.forEach((t) => {
      n[t] = {
        numbers: e.nr,
        plurals: sE[e.fc]
      };
    });
  }), n;
}
class cE {
  constructor(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this.languageUtils = e, this.options = t, this.logger = Kt.create("pluralResolver"), (!this.options.compatibilityJSON || aE.includes(this.options.compatibilityJSON)) && (typeof Intl > "u" || !Intl.PluralRules) && (this.options.compatibilityJSON = "v3", this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")), this.rules = lE();
  }
  addRule(e, t) {
    this.rules[e] = t;
  }
  getRule(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (this.shouldUseIntlApi())
      try {
        return new Intl.PluralRules(Xs(e), {
          type: t.ordinal ? "ordinal" : "cardinal"
        });
      } catch {
        return;
      }
    return this.rules[e] || this.rules[this.languageUtils.getLanguagePartFromCode(e)];
  }
  needsPlural(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const r = this.getRule(e, t);
    return this.shouldUseIntlApi() ? r && r.resolvedOptions().pluralCategories.length > 1 : r && r.numbers.length > 1;
  }
  getPluralFormsOfKey(e, t) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    return this.getSuffixes(e, r).map((i) => `${t}${i}`);
  }
  getSuffixes(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    const r = this.getRule(e, t);
    return r ? this.shouldUseIntlApi() ? r.resolvedOptions().pluralCategories.sort((i, s) => Pd[i] - Pd[s]).map((i) => `${this.options.prepend}${t.ordinal ? `ordinal${this.options.prepend}` : ""}${i}`) : r.numbers.map((i) => this.getSuffix(e, i, t)) : [];
  }
  getSuffix(e, t) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    const i = this.getRule(e, r);
    return i ? this.shouldUseIntlApi() ? `${this.options.prepend}${r.ordinal ? `ordinal${this.options.prepend}` : ""}${i.select(t)}` : this.getSuffixRetroCompatible(i, t) : (this.logger.warn(`no plural rule found for: ${e}`), "");
  }
  getSuffixRetroCompatible(e, t) {
    const r = e.noAbs ? e.plurals(t) : e.plurals(Math.abs(t));
    let i = e.numbers[r];
    this.options.simplifyPluralSuffix && e.numbers.length === 2 && e.numbers[0] === 1 && (i === 2 ? i = "plural" : i === 1 && (i = ""));
    const s = () => this.options.prepend && i.toString() ? this.options.prepend + i.toString() : i.toString();
    return this.options.compatibilityJSON === "v1" ? i === 1 ? "" : typeof i == "number" ? `_plural_${i.toString()}` : s() : this.options.compatibilityJSON === "v2" || this.options.simplifyPluralSuffix && e.numbers.length === 2 && e.numbers[0] === 1 ? s() : this.options.prepend && r.toString() ? this.options.prepend + r.toString() : r.toString();
  }
  shouldUseIntlApi() {
    return !oE.includes(this.options.compatibilityJSON);
  }
}
function $d(n, e, t) {
  let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".", i = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : !0, s = Qk(n, e, t);
  return !s && i && typeof t == "string" && (s = Ys(n, t, r), s === void 0 && (s = Ys(e, t, r))), s;
}
class uE {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = Kt.create("interpolator"), this.options = e, this.format = e.interpolation && e.interpolation.format || ((t) => t), this.init(e);
  }
  init() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    e.interpolation || (e.interpolation = {
      escapeValue: !0
    });
    const t = e.interpolation;
    this.escape = t.escape !== void 0 ? t.escape : tE, this.escapeValue = t.escapeValue !== void 0 ? t.escapeValue : !0, this.useRawValueToEscape = t.useRawValueToEscape !== void 0 ? t.useRawValueToEscape : !1, this.prefix = t.prefix ? br(t.prefix) : t.prefixEscaped || "{{", this.suffix = t.suffix ? br(t.suffix) : t.suffixEscaped || "}}", this.formatSeparator = t.formatSeparator ? t.formatSeparator : t.formatSeparator || ",", this.unescapePrefix = t.unescapeSuffix ? "" : t.unescapePrefix || "-", this.unescapeSuffix = this.unescapePrefix ? "" : t.unescapeSuffix || "", this.nestingPrefix = t.nestingPrefix ? br(t.nestingPrefix) : t.nestingPrefixEscaped || br("$t("), this.nestingSuffix = t.nestingSuffix ? br(t.nestingSuffix) : t.nestingSuffixEscaped || br(")"), this.nestingOptionsSeparator = t.nestingOptionsSeparator ? t.nestingOptionsSeparator : t.nestingOptionsSeparator || ",", this.maxReplaces = t.maxReplaces ? t.maxReplaces : 1e3, this.alwaysFormat = t.alwaysFormat !== void 0 ? t.alwaysFormat : !1, this.resetRegExp();
  }
  reset() {
    this.options && this.init(this.options);
  }
  resetRegExp() {
    const e = `${this.prefix}(.+?)${this.suffix}`;
    this.regexp = new RegExp(e, "g");
    const t = `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`;
    this.regexpUnescape = new RegExp(t, "g");
    const r = `${this.nestingPrefix}(.+?)${this.nestingSuffix}`;
    this.nestingRegexp = new RegExp(r, "g");
  }
  interpolate(e, t, r, i) {
    let s, o, a;
    const l = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
    function c(h) {
      return h.replace(/\$/g, "$$$$");
    }
    const u = (h) => {
      if (h.indexOf(this.formatSeparator) < 0) {
        const y = $d(t, l, h, this.options.keySeparator, this.options.ignoreJSONStructure);
        return this.alwaysFormat ? this.format(y, void 0, r, {
          ...i,
          ...t,
          interpolationkey: h
        }) : y;
      }
      const g = h.split(this.formatSeparator), m = g.shift().trim(), v = g.join(this.formatSeparator).trim();
      return this.format($d(t, l, m, this.options.keySeparator, this.options.ignoreJSONStructure), v, r, {
        ...i,
        ...t,
        interpolationkey: m
      });
    };
    this.resetRegExp();
    const d = i && i.missingInterpolationHandler || this.options.missingInterpolationHandler, f = i && i.interpolation && i.interpolation.skipOnVariables !== void 0 ? i.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
    return [{
      regex: this.regexpUnescape,
      safeValue: (h) => c(h)
    }, {
      regex: this.regexp,
      safeValue: (h) => this.escapeValue ? c(this.escape(h)) : c(h)
    }].forEach((h) => {
      for (a = 0; s = h.regex.exec(e); ) {
        const g = s[1].trim();
        if (o = u(g), o === void 0)
          if (typeof d == "function") {
            const v = d(e, s, i);
            o = typeof v == "string" ? v : "";
          } else if (i && Object.prototype.hasOwnProperty.call(i, g))
            o = "";
          else if (f) {
            o = s[0];
            continue;
          } else
            this.logger.warn(`missed to pass in variable ${g} for interpolating ${e}`), o = "";
        else
          typeof o != "string" && !this.useRawValueToEscape && (o = Rd(o));
        const m = h.safeValue(o);
        if (e = e.replace(s[0], m), f ? (h.regex.lastIndex += o.length, h.regex.lastIndex -= s[0].length) : h.regex.lastIndex = 0, a++, a >= this.maxReplaces)
          break;
      }
    }), e;
  }
  nest(e, t) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i, s, o;
    function a(l, c) {
      const u = this.nestingOptionsSeparator;
      if (l.indexOf(u) < 0)
        return l;
      const d = l.split(new RegExp(`${u}[ ]*{`));
      let f = `{${d[1]}`;
      l = d[0], f = this.interpolate(f, o);
      const p = f.match(/'/g), h = f.match(/"/g);
      (p && p.length % 2 === 0 && !h || h.length % 2 !== 0) && (f = f.replace(/'/g, '"'));
      try {
        o = JSON.parse(f), c && (o = {
          ...c,
          ...o
        });
      } catch (g) {
        return this.logger.warn(`failed parsing options string in nesting for key ${l}`, g), `${l}${u}${f}`;
      }
      return delete o.defaultValue, l;
    }
    for (; i = this.nestingRegexp.exec(e); ) {
      let l = [];
      o = {
        ...r
      }, o = o.replace && typeof o.replace != "string" ? o.replace : o, o.applyPostProcessor = !1, delete o.defaultValue;
      let c = !1;
      if (i[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(i[1])) {
        const u = i[1].split(this.formatSeparator).map((d) => d.trim());
        i[1] = u.shift(), l = u, c = !0;
      }
      if (s = t(a.call(this, i[1].trim(), o), o), s && i[0] === e && typeof s != "string")
        return s;
      typeof s != "string" && (s = Rd(s)), s || (this.logger.warn(`missed to resolve ${i[1]} for nesting ${e}`), s = ""), c && (s = l.reduce((u, d) => this.format(u, d, r.lng, {
        ...r,
        interpolationkey: i[1].trim()
      }), s.trim())), e = e.replace(i[0], s), this.regexp.lastIndex = 0;
    }
    return e;
  }
}
function dE(n) {
  let e = n.toLowerCase().trim();
  const t = {};
  if (n.indexOf("(") > -1) {
    const r = n.split("(");
    e = r[0].toLowerCase().trim();
    const i = r[1].substring(0, r[1].length - 1);
    e === "currency" && i.indexOf(":") < 0 ? t.currency || (t.currency = i.trim()) : e === "relativetime" && i.indexOf(":") < 0 ? t.range || (t.range = i.trim()) : i.split(";").forEach((o) => {
      if (!o)
        return;
      const [a, ...l] = o.split(":"), c = l.join(":").trim().replace(/^'+|'+$/g, "");
      t[a.trim()] || (t[a.trim()] = c), c === "false" && (t[a.trim()] = !1), c === "true" && (t[a.trim()] = !0), isNaN(c) || (t[a.trim()] = parseInt(c, 10));
    });
  }
  return {
    formatName: e,
    formatOptions: t
  };
}
function yr(n) {
  const e = {};
  return function(r, i, s) {
    const o = i + JSON.stringify(s);
    let a = e[o];
    return a || (a = n(Xs(i), s), e[o] = a), a(r);
  };
}
class fE {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    this.logger = Kt.create("formatter"), this.options = e, this.formats = {
      number: yr((t, r) => {
        const i = new Intl.NumberFormat(t, {
          ...r
        });
        return (s) => i.format(s);
      }),
      currency: yr((t, r) => {
        const i = new Intl.NumberFormat(t, {
          ...r,
          style: "currency"
        });
        return (s) => i.format(s);
      }),
      datetime: yr((t, r) => {
        const i = new Intl.DateTimeFormat(t, {
          ...r
        });
        return (s) => i.format(s);
      }),
      relativetime: yr((t, r) => {
        const i = new Intl.RelativeTimeFormat(t, {
          ...r
        });
        return (s) => i.format(s, r.range || "day");
      }),
      list: yr((t, r) => {
        const i = new Intl.ListFormat(t, {
          ...r
        });
        return (s) => i.format(s);
      })
    }, this.init(e);
  }
  init(e) {
    const r = (arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
      interpolation: {}
    }).interpolation;
    this.formatSeparator = r.formatSeparator ? r.formatSeparator : r.formatSeparator || ",";
  }
  add(e, t) {
    this.formats[e.toLowerCase().trim()] = t;
  }
  addCached(e, t) {
    this.formats[e.toLowerCase().trim()] = yr(t);
  }
  format(e, t, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    return t.split(this.formatSeparator).reduce((a, l) => {
      const {
        formatName: c,
        formatOptions: u
      } = dE(l);
      if (this.formats[c]) {
        let d = a;
        try {
          const f = i && i.formatParams && i.formatParams[i.interpolationkey] || {}, p = f.locale || f.lng || i.locale || i.lng || r;
          d = this.formats[c](a, p, {
            ...u,
            ...i,
            ...f
          });
        } catch (f) {
          this.logger.warn(f);
        }
        return d;
      } else
        this.logger.warn(`there was no format function for ${c}`);
      return a;
    }, e);
  }
}
function pE(n, e) {
  n.pending[e] !== void 0 && (delete n.pending[e], n.pendingCount--);
}
class hE extends Ho {
  constructor(e, t, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    super(), this.backend = e, this.store = t, this.services = r, this.languageUtils = r.languageUtils, this.options = i, this.logger = Kt.create("backendConnector"), this.waitingReads = [], this.maxParallelReads = i.maxParallelReads || 10, this.readingCalls = 0, this.maxRetries = i.maxRetries >= 0 ? i.maxRetries : 5, this.retryTimeout = i.retryTimeout >= 1 ? i.retryTimeout : 350, this.state = {}, this.queue = [], this.backend && this.backend.init && this.backend.init(r, i.backend, i);
  }
  queueLoad(e, t, r, i) {
    const s = {}, o = {}, a = {}, l = {};
    return e.forEach((c) => {
      let u = !0;
      t.forEach((d) => {
        const f = `${c}|${d}`;
        !r.reload && this.store.hasResourceBundle(c, d) ? this.state[f] = 2 : this.state[f] < 0 || (this.state[f] === 1 ? o[f] === void 0 && (o[f] = !0) : (this.state[f] = 1, u = !1, o[f] === void 0 && (o[f] = !0), s[f] === void 0 && (s[f] = !0), l[d] === void 0 && (l[d] = !0)));
      }), u || (a[c] = !0);
    }), (Object.keys(s).length || Object.keys(o).length) && this.queue.push({
      pending: o,
      pendingCount: Object.keys(o).length,
      loaded: {},
      errors: [],
      callback: i
    }), {
      toLoad: Object.keys(s),
      pending: Object.keys(o),
      toLoadLanguages: Object.keys(a),
      toLoadNamespaces: Object.keys(l)
    };
  }
  loaded(e, t, r) {
    const i = e.split("|"), s = i[0], o = i[1];
    t && this.emit("failedLoading", s, o, t), r && this.store.addResourceBundle(s, o, r), this.state[e] = t ? -1 : 2;
    const a = {};
    this.queue.forEach((l) => {
      Xk(l.loaded, [s], o), pE(l, e), t && l.errors.push(t), l.pendingCount === 0 && !l.done && (Object.keys(l.loaded).forEach((c) => {
        a[c] || (a[c] = {});
        const u = l.loaded[c];
        u.length && u.forEach((d) => {
          a[c][d] === void 0 && (a[c][d] = !0);
        });
      }), l.done = !0, l.errors.length ? l.callback(l.errors) : l.callback());
    }), this.emit("loaded", a), this.queue = this.queue.filter((l) => !l.done);
  }
  read(e, t, r) {
    let i = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0, s = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout, o = arguments.length > 5 ? arguments[5] : void 0;
    if (!e.length)
      return o(null, {});
    if (this.readingCalls >= this.maxParallelReads) {
      this.waitingReads.push({
        lng: e,
        ns: t,
        fcName: r,
        tried: i,
        wait: s,
        callback: o
      });
      return;
    }
    this.readingCalls++;
    const a = (c, u) => {
      if (this.readingCalls--, this.waitingReads.length > 0) {
        const d = this.waitingReads.shift();
        this.read(d.lng, d.ns, d.fcName, d.tried, d.wait, d.callback);
      }
      if (c && u && i < this.maxRetries) {
        setTimeout(() => {
          this.read.call(this, e, t, r, i + 1, s * 2, o);
        }, s);
        return;
      }
      o(c, u);
    }, l = this.backend[r].bind(this.backend);
    if (l.length === 2) {
      try {
        const c = l(e, t);
        c && typeof c.then == "function" ? c.then((u) => a(null, u)).catch(a) : a(null, c);
      } catch (c) {
        a(c);
      }
      return;
    }
    return l(e, t, a);
  }
  prepareLoading(e, t) {
    let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, i = arguments.length > 3 ? arguments[3] : void 0;
    if (!this.backend)
      return this.logger.warn("No backend was added via i18next.use. Will not load resources."), i && i();
    typeof e == "string" && (e = this.languageUtils.toResolveHierarchy(e)), typeof t == "string" && (t = [t]);
    const s = this.queueLoad(e, t, r, i);
    if (!s.toLoad.length)
      return s.pending.length || i(), null;
    s.toLoad.forEach((o) => {
      this.loadOne(o);
    });
  }
  load(e, t, r) {
    this.prepareLoading(e, t, {}, r);
  }
  reload(e, t, r) {
    this.prepareLoading(e, t, {
      reload: !0
    }, r);
  }
  loadOne(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    const r = e.split("|"), i = r[0], s = r[1];
    this.read(i, s, "read", void 0, void 0, (o, a) => {
      o && this.logger.warn(`${t}loading namespace ${s} for language ${i} failed`, o), !o && a && this.logger.log(`${t}loaded namespace ${s} for language ${i}`, a), this.loaded(e, o, a);
    });
  }
  saveMissing(e, t, r, i, s) {
    let o = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {}, a = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
    };
    if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(t)) {
      this.logger.warn(`did not save key "${r}" as the namespace "${t}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
      return;
    }
    if (!(r == null || r === "")) {
      if (this.backend && this.backend.create) {
        const l = {
          ...o,
          isUpdate: s
        }, c = this.backend.create.bind(this.backend);
        if (c.length < 6)
          try {
            let u;
            c.length === 5 ? u = c(e, t, r, i, l) : u = c(e, t, r, i), u && typeof u.then == "function" ? u.then((d) => a(null, d)).catch(a) : a(null, u);
          } catch (u) {
            a(u);
          }
        else
          c(e, t, r, i, a, l);
      }
      !e || !e[0] || this.store.addResource(e[0], t, r, i);
    }
  }
}
function Fd() {
  return {
    debug: !1,
    initImmediate: !0,
    ns: ["translation"],
    defaultNS: ["translation"],
    fallbackLng: ["dev"],
    fallbackNS: !1,
    supportedLngs: !1,
    nonExplicitSupportedLngs: !1,
    load: "all",
    preload: !1,
    simplifyPluralSuffix: !0,
    keySeparator: ".",
    nsSeparator: ":",
    pluralSeparator: "_",
    contextSeparator: "_",
    partialBundledLanguages: !1,
    saveMissing: !1,
    updateMissing: !1,
    saveMissingTo: "fallback",
    saveMissingPlurals: !0,
    missingKeyHandler: !1,
    missingInterpolationHandler: !1,
    postProcess: !1,
    postProcessPassResolved: !1,
    returnNull: !1,
    returnEmptyString: !0,
    returnObjects: !1,
    joinArrays: !1,
    returnedObjectHandler: !1,
    parseMissingKeyHandler: !1,
    appendNamespaceToMissingKey: !1,
    appendNamespaceToCIMode: !1,
    overloadTranslationOptionHandler: function(e) {
      let t = {};
      if (typeof e[1] == "object" && (t = e[1]), typeof e[1] == "string" && (t.defaultValue = e[1]), typeof e[2] == "string" && (t.tDescription = e[2]), typeof e[2] == "object" || typeof e[3] == "object") {
        const r = e[3] || e[2];
        Object.keys(r).forEach((i) => {
          t[i] = r[i];
        });
      }
      return t;
    },
    interpolation: {
      escapeValue: !0,
      format: (n, e, t, r) => n,
      prefix: "{{",
      suffix: "}}",
      formatSeparator: ",",
      unescapePrefix: "-",
      nestingPrefix: "$t(",
      nestingSuffix: ")",
      nestingOptionsSeparator: ",",
      maxReplaces: 1e3,
      skipOnVariables: !0
    }
  };
}
function zd(n) {
  return typeof n.ns == "string" && (n.ns = [n.ns]), typeof n.fallbackLng == "string" && (n.fallbackLng = [n.fallbackLng]), typeof n.fallbackNS == "string" && (n.fallbackNS = [n.fallbackNS]), n.supportedLngs && n.supportedLngs.indexOf("cimode") < 0 && (n.supportedLngs = n.supportedLngs.concat(["cimode"])), n;
}
function as() {
}
function gE(n) {
  Object.getOwnPropertyNames(Object.getPrototypeOf(n)).forEach((t) => {
    typeof n[t] == "function" && (n[t] = n[t].bind(n));
  });
}
class Ii extends Ho {
  constructor() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 ? arguments[1] : void 0;
    if (super(), this.options = zd(e), this.services = {}, this.logger = Kt, this.modules = {
      external: []
    }, gE(this), t && !this.isInitialized && !e.isClone) {
      if (!this.options.initImmediate)
        return this.init(e, t), this;
      setTimeout(() => {
        this.init(e, t);
      }, 0);
    }
  }
  init() {
    var e = this;
    let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, r = arguments.length > 1 ? arguments[1] : void 0;
    typeof t == "function" && (r = t, t = {}), !t.defaultNS && t.defaultNS !== !1 && t.ns && (typeof t.ns == "string" ? t.defaultNS = t.ns : t.ns.indexOf("translation") < 0 && (t.defaultNS = t.ns[0]));
    const i = Fd();
    this.options = {
      ...i,
      ...this.options,
      ...zd(t)
    }, this.options.compatibilityAPI !== "v1" && (this.options.interpolation = {
      ...i.interpolation,
      ...this.options.interpolation
    }), t.keySeparator !== void 0 && (this.options.userDefinedKeySeparator = t.keySeparator), t.nsSeparator !== void 0 && (this.options.userDefinedNsSeparator = t.nsSeparator);
    function s(u) {
      return u ? typeof u == "function" ? new u() : u : null;
    }
    if (!this.options.isClone) {
      this.modules.logger ? Kt.init(s(this.modules.logger), this.options) : Kt.init(null, this.options);
      let u;
      this.modules.formatter ? u = this.modules.formatter : typeof Intl < "u" && (u = fE);
      const d = new Hd(this.options);
      this.store = new Id(this.options.resources, this.options);
      const f = this.services;
      f.logger = Kt, f.resourceStore = this.store, f.languageUtils = d, f.pluralResolver = new cE(d, {
        prepend: this.options.pluralSeparator,
        compatibilityJSON: this.options.compatibilityJSON,
        simplifyPluralSuffix: this.options.simplifyPluralSuffix
      }), u && (!this.options.interpolation.format || this.options.interpolation.format === i.interpolation.format) && (f.formatter = s(u), f.formatter.init(f, this.options), this.options.interpolation.format = f.formatter.format.bind(f.formatter)), f.interpolator = new uE(this.options), f.utils = {
        hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
      }, f.backendConnector = new hE(s(this.modules.backend), f.resourceStore, f, this.options), f.backendConnector.on("*", function(p) {
        for (var h = arguments.length, g = new Array(h > 1 ? h - 1 : 0), m = 1; m < h; m++)
          g[m - 1] = arguments[m];
        e.emit(p, ...g);
      }), this.modules.languageDetector && (f.languageDetector = s(this.modules.languageDetector), f.languageDetector.init && f.languageDetector.init(f, this.options.detection, this.options)), this.modules.i18nFormat && (f.i18nFormat = s(this.modules.i18nFormat), f.i18nFormat.init && f.i18nFormat.init(this)), this.translator = new Qs(this.services, this.options), this.translator.on("*", function(p) {
        for (var h = arguments.length, g = new Array(h > 1 ? h - 1 : 0), m = 1; m < h; m++)
          g[m - 1] = arguments[m];
        e.emit(p, ...g);
      }), this.modules.external.forEach((p) => {
        p.init && p.init(this);
      });
    }
    if (this.format = this.options.interpolation.format, r || (r = as), this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
      const u = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
      u.length > 0 && u[0] !== "dev" && (this.options.lng = u[0]);
    }
    !this.services.languageDetector && !this.options.lng && this.logger.warn("init: no languageDetector is used and no lng is defined"), ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"].forEach((u) => {
      this[u] = function() {
        return e.store[u](...arguments);
      };
    }), ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"].forEach((u) => {
      this[u] = function() {
        return e.store[u](...arguments), e;
      };
    });
    const l = si(), c = () => {
      const u = (d, f) => {
        this.isInitialized && !this.initializedStoreOnce && this.logger.warn("init: i18next is already initialized. You should call init just once!"), this.isInitialized = !0, this.options.isClone || this.logger.log("initialized", this.options), this.emit("initialized", this.options), l.resolve(f), r(d, f);
      };
      if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized)
        return u(null, this.t.bind(this));
      this.changeLanguage(this.options.lng, u);
    };
    return this.options.resources || !this.options.initImmediate ? c() : setTimeout(c, 0), l;
  }
  loadResources(e) {
    let r = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : as;
    const i = typeof e == "string" ? e : this.language;
    if (typeof e == "function" && (r = e), !this.options.resources || this.options.partialBundledLanguages) {
      if (i && i.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0))
        return r();
      const s = [], o = (a) => {
        if (!a || a === "cimode")
          return;
        this.services.languageUtils.toResolveHierarchy(a).forEach((c) => {
          c !== "cimode" && s.indexOf(c) < 0 && s.push(c);
        });
      };
      i ? o(i) : this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((l) => o(l)), this.options.preload && this.options.preload.forEach((a) => o(a)), this.services.backendConnector.load(s, this.options.ns, (a) => {
        !a && !this.resolvedLanguage && this.language && this.setResolvedLanguage(this.language), r(a);
      });
    } else
      r(null);
  }
  reloadResources(e, t, r) {
    const i = si();
    return e || (e = this.languages), t || (t = this.options.ns), r || (r = as), this.services.backendConnector.reload(e, t, (s) => {
      i.resolve(), r(s);
    }), i;
  }
  use(e) {
    if (!e)
      throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
    if (!e.type)
      throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
    return e.type === "backend" && (this.modules.backend = e), (e.type === "logger" || e.log && e.warn && e.error) && (this.modules.logger = e), e.type === "languageDetector" && (this.modules.languageDetector = e), e.type === "i18nFormat" && (this.modules.i18nFormat = e), e.type === "postProcessor" && Lg.addPostProcessor(e), e.type === "formatter" && (this.modules.formatter = e), e.type === "3rdParty" && this.modules.external.push(e), this;
  }
  setResolvedLanguage(e) {
    if (!(!e || !this.languages) && !(["cimode", "dev"].indexOf(e) > -1))
      for (let t = 0; t < this.languages.length; t++) {
        const r = this.languages[t];
        if (!(["cimode", "dev"].indexOf(r) > -1) && this.store.hasLanguageSomeTranslations(r)) {
          this.resolvedLanguage = r;
          break;
        }
      }
  }
  changeLanguage(e, t) {
    var r = this;
    this.isLanguageChangingTo = e;
    const i = si();
    this.emit("languageChanging", e);
    const s = (l) => {
      this.language = l, this.languages = this.services.languageUtils.toResolveHierarchy(l), this.resolvedLanguage = void 0, this.setResolvedLanguage(l);
    }, o = (l, c) => {
      c ? (s(c), this.translator.changeLanguage(c), this.isLanguageChangingTo = void 0, this.emit("languageChanged", c), this.logger.log("languageChanged", c)) : this.isLanguageChangingTo = void 0, i.resolve(function() {
        return r.t(...arguments);
      }), t && t(l, function() {
        return r.t(...arguments);
      });
    }, a = (l) => {
      !e && !l && this.services.languageDetector && (l = []);
      const c = typeof l == "string" ? l : this.services.languageUtils.getBestMatchFromCodes(l);
      c && (this.language || s(c), this.translator.language || this.translator.changeLanguage(c), this.services.languageDetector && this.services.languageDetector.cacheUserLanguage && this.services.languageDetector.cacheUserLanguage(c)), this.loadResources(c, (u) => {
        o(u, c);
      });
    };
    return !e && this.services.languageDetector && !this.services.languageDetector.async ? a(this.services.languageDetector.detect()) : !e && this.services.languageDetector && this.services.languageDetector.async ? this.services.languageDetector.detect.length === 0 ? this.services.languageDetector.detect().then(a) : this.services.languageDetector.detect(a) : a(e), i;
  }
  getFixedT(e, t, r) {
    var i = this;
    const s = function(o, a) {
      let l;
      if (typeof a != "object") {
        for (var c = arguments.length, u = new Array(c > 2 ? c - 2 : 0), d = 2; d < c; d++)
          u[d - 2] = arguments[d];
        l = i.options.overloadTranslationOptionHandler([o, a].concat(u));
      } else
        l = {
          ...a
        };
      l.lng = l.lng || s.lng, l.lngs = l.lngs || s.lngs, l.ns = l.ns || s.ns, l.keyPrefix = l.keyPrefix || r || s.keyPrefix;
      const f = i.options.keySeparator || ".";
      let p;
      return l.keyPrefix && Array.isArray(o) ? p = o.map((h) => `${l.keyPrefix}${f}${h}`) : p = l.keyPrefix ? `${l.keyPrefix}${f}${o}` : o, i.t(p, l);
    };
    return typeof e == "string" ? s.lng = e : s.lngs = e, s.ns = t, s.keyPrefix = r, s;
  }
  t() {
    return this.translator && this.translator.translate(...arguments);
  }
  exists() {
    return this.translator && this.translator.exists(...arguments);
  }
  setDefaultNamespace(e) {
    this.options.defaultNS = e;
  }
  hasLoadedNamespace(e) {
    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (!this.isInitialized)
      return this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages), !1;
    if (!this.languages || !this.languages.length)
      return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages), !1;
    const r = t.lng || this.resolvedLanguage || this.languages[0], i = this.options ? this.options.fallbackLng : !1, s = this.languages[this.languages.length - 1];
    if (r.toLowerCase() === "cimode")
      return !0;
    const o = (a, l) => {
      const c = this.services.backendConnector.state[`${a}|${l}`];
      return c === -1 || c === 2;
    };
    if (t.precheck) {
      const a = t.precheck(this, o);
      if (a !== void 0)
        return a;
    }
    return !!(this.hasResourceBundle(r, e) || !this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages || o(r, e) && (!i || o(s, e)));
  }
  loadNamespaces(e, t) {
    const r = si();
    return this.options.ns ? (typeof e == "string" && (e = [e]), e.forEach((i) => {
      this.options.ns.indexOf(i) < 0 && this.options.ns.push(i);
    }), this.loadResources((i) => {
      r.resolve(), t && t(i);
    }), r) : (t && t(), Promise.resolve());
  }
  loadLanguages(e, t) {
    const r = si();
    typeof e == "string" && (e = [e]);
    const i = this.options.preload || [], s = e.filter((o) => i.indexOf(o) < 0);
    return s.length ? (this.options.preload = i.concat(s), this.loadResources((o) => {
      r.resolve(), t && t(o);
    }), r) : (t && t(), Promise.resolve());
  }
  dir(e) {
    if (e || (e = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language)), !e)
      return "rtl";
    const t = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"], r = this.services && this.services.languageUtils || new Hd(Fd());
    return t.indexOf(r.getLanguagePartFromCode(e)) > -1 || e.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
  }
  static createInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 ? arguments[1] : void 0;
    return new Ii(e, t);
  }
  cloneInstance() {
    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : as;
    const r = e.forkResourceStore;
    r && delete e.forkResourceStore;
    const i = {
      ...this.options,
      ...e,
      isClone: !0
    }, s = new Ii(i);
    return (e.debug !== void 0 || e.prefix !== void 0) && (s.logger = s.logger.clone(e)), ["store", "services", "language"].forEach((a) => {
      s[a] = this[a];
    }), s.services = {
      ...this.services
    }, s.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, r && (s.store = new Id(this.store.data, i), s.services.resourceStore = s.store), s.translator = new Qs(s.services, i), s.translator.on("*", function(a) {
      for (var l = arguments.length, c = new Array(l > 1 ? l - 1 : 0), u = 1; u < l; u++)
        c[u - 1] = arguments[u];
      s.emit(a, ...c);
    }), s.init(i, t), s.translator.options = i, s.translator.backendConnector.services.utils = {
      hasLoadedNamespace: s.hasLoadedNamespace.bind(s)
    }, s;
  }
  toJSON() {
    return {
      options: this.options,
      store: this.store,
      language: this.language,
      languages: this.languages,
      resolvedLanguage: this.resolvedLanguage
    };
  }
}
const We = Ii.createInstance();
We.createInstance = Ii.createInstance;
We.createInstance;
We.dir;
We.init;
We.loadResources;
We.reloadResources;
We.use;
We.changeLanguage;
We.getFixedT;
const ae = We.t;
We.exists;
We.setDefaultNamespace;
We.hasLoadedNamespace;
We.loadNamespaces;
We.loadLanguages;
const mE = ["paragraph", "h1", "h2", "h3", "h4", "h5", "h6"];
let bE = class extends Yr {
  constructor() {
    super(), this.menuData = mE.map((e) => ae(e)), this.dropDivHeight = "265px", this.dropDivWith = "150px";
  }
  onDropdownActive(e, t) {
    return t == 0 ? e.isActive("paragraph") : e.isActive("heading", { level: t });
  }
  onDropdownItemClick(e) {
    e == 0 ? this.editor.chain().setParagraph().run() : this.editor.chain().setHeading({ level: e }).run();
  }
  onDropdownItemRender(e) {
    return e == 0 ? this.menuData[e] : `<h${e}>${this.menuData[e]}</h${e}>`;
  }
  onMenuTextRender(e) {
    return this.menuData[e].replace(" ", "");
  }
};
const yE = [
  { name: "宋体", value: "SimSun" },
  { name: "仿宋", value: "FangSong" },
  { name: "黑体", value: "SimHei" },
  { name: "楷体", value: "KaiTi" },
  { name: "微软雅黑", value: "Microsoft YaHei" },
  { name: "方正仿宋简体_GBK", value: "FangSong_GB2312" },
  { name: "Arial", value: "Arial" }
];
let vE = class extends Yr {
  constructor() {
    super(), this.width = "72px", this.menuTextWidth = "60px", this.dropDivWith = "150px";
  }
  onCreate(e, t) {
    var r;
    super.onCreate(e, t), this.menuData = ((r = t.fontFamily) == null ? void 0 : r.values) || yE, this.menuData = [
      { name: ae("default-font-family"), value: "" }
    ].concat(this.menuData);
  }
  onDropdownActive(e, t) {
    return e.isActive("textStyle", { fontFamily: this.menuData[t].value });
  }
  onDropdownItemClick(e) {
    const t = this.menuData[e].value;
    t ? this.editor.chain().setFontFamily(t).run() : this.editor.chain().unsetFontFamily().run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e].name;
  }
  onMenuTextRender(e) {
    return this.menuData[e].name;
  }
};
const wE = [
  { name: "9", value: 9 },
  { name: "10", value: 10 },
  { name: "11", value: 11 },
  { name: "12", value: 12 },
  { name: "14", value: 14 },
  { name: "18", value: 18 },
  { name: "20", value: 20 },
  { name: "22", value: 22 },
  { name: "24", value: 24 },
  { name: "26", value: 26 },
  { name: "28", value: 28 },
  { name: "30", value: 30 },
  { name: "36", value: 36 },
  { name: "42", value: 42 },
  { name: "48", value: 48 },
  { name: "56", value: 56 },
  { name: "72", value: 72 }
];
class kE extends Yr {
  constructor() {
    super(), this.dropDivWith = "134px";
  }
  onCreate(e, t) {
    var r;
    super.onCreate(e, t), this.menuData = ((r = t.fontSize) == null ? void 0 : r.values) || wE;
    for (let i = 0; i < this.menuData.length; i++)
      if (this.menuData[i].value == 14) {
        this.defaultMenuIndex = i, this.menuData[i].name = `14（${ae("default")}）`;
        break;
      }
  }
  onDropdownActive(e, t) {
    return e.isActive("textStyle", { fontSize: `${this.menuData[t].value}px` });
  }
  onDropdownItemClick(e) {
    var r, i;
    const t = this.menuData[e].value;
    t == 14 ? (r = this.editor) == null || r.chain().focus().unsetFontSize().run() : (i = this.editor) == null || i.chain().focus().setFontSize(`${t}px`).run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e].name;
  }
  onMenuTextRender(e) {
    const t = this.menuData[e];
    return t.value == 14 ? ae("default-font-size") : t.name;
  }
}
let EE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 11H12.5C13.8807 11 15 9.88071 15 8.5C15 7.11929 13.8807 6 12.5 6H8V11ZM18 15.5C18 17.9853 15.9853 20 13.5 20H6V4H12.5C14.9853 4 17 6.01472 17 8.5C17 9.70431 16.5269 10.7981 15.7564 11.6058C17.0979 12.3847 18 13.837 18 15.5ZM8 13V18H13.5C14.8807 18 16 16.8807 16 15.5C16 14.1193 14.8807 13 13.5 13H8Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleBold();
  }
  onActive(e) {
    return e.isActive("bold");
  }
}, xE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 20H7V18H9.92661L12.0425 6H9V4H17V6H14.0734L11.9575 18H15V20Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleItalic();
  }
  onActive(e) {
    return e.isActive("italic");
  }
}, CE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 3V12C8 14.2091 9.79086 16 12 16C14.2091 16 16 14.2091 16 12V3H18V12C18 15.3137 15.3137 18 12 18C8.68629 18 6 15.3137 6 12V3H8ZM4 20H20V22H4V20Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleUnderline();
  }
  onActive(e) {
    return e.isActive("underline");
  }
}, SE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.1538 14C17.3846 14.5161 17.5 15.0893 17.5 15.7196C17.5 17.0625 16.9762 18.1116 15.9286 18.867C14.8809 19.6223 13.4335 20 11.5862 20C9.94674 20 8.32335 19.6185 6.71592 18.8555V16.6009C8.23538 17.4783 9.7908 17.917 11.3822 17.917C13.9333 17.917 15.2128 17.1846 15.2208 15.7196C15.2208 15.0939 15.0049 14.5598 14.5731 14.1173C14.5339 14.0772 14.4939 14.0381 14.4531 14H3V12H21V14H17.1538ZM13.076 11H7.62908C7.4566 10.8433 7.29616 10.6692 7.14776 10.4778C6.71592 9.92084 6.5 9.24559 6.5 8.45207C6.5 7.21602 6.96583 6.165 7.89749 5.299C8.82916 4.43299 10.2706 4 12.2219 4C13.6934 4 15.1009 4.32808 16.4444 4.98426V7.13591C15.2448 6.44921 13.9293 6.10587 12.4978 6.10587C10.0187 6.10587 8.77917 6.88793 8.77917 8.45207C8.77917 8.87172 8.99709 9.23796 9.43293 9.55079C9.86878 9.86362 10.4066 10.1135 11.0463 10.3004C11.6665 10.4816 12.3431 10.7148 13.076 11H13.076Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleStrike();
  }
  onActive(e) {
    return e.isActive("strike");
  }
}, _E = class extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.59567 4L10.5 9.92831L15.4043 4H18L11.7978 11.4971L18 18.9943V19H15.4091L10.5 13.0659L5.59092 19H3V18.9943L9.20216 11.4971L3 4H5.59567ZM21.8 16C21.8 15.5582 21.4418 15.2 21 15.2C20.5582 15.2 20.2 15.5582 20.2 16C20.2 16.0762 20.2107 16.15 20.2306 16.2198L19.0765 16.5496C19.0267 16.375 19 16.1906 19 16C19 14.8954 19.8954 14 21 14C22.1046 14 23 14.8954 23 16C23 16.5727 22.7593 17.0892 22.3735 17.4538L20.7441 19H23V20H19V19L21.5507 16.5803C21.7042 16.4345 21.8 16.2284 21.8 16Z"></path></svg>
         </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleSubscript();
  }
  onActive(e) {
    return e.isActive("subscript");
  }
}, ME = class extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.59567 5L10.5 10.9283L15.4043 5H18L11.7978 12.4971L18 19.9943V20H15.4091L10.5 14.0659L5.59092 20H3V19.9943L9.20216 12.4971L3 5H5.59567ZM21.5507 6.5803C21.7042 6.43453 21.8 6.22845 21.8 6C21.8 5.55817 21.4418 5.2 21 5.2C20.5582 5.2 20.2 5.55817 20.2 6C20.2 6.07624 20.2107 6.14999 20.2306 6.21983L19.0765 6.54958C19.0267 6.37497 19 6.1906 19 6C19 4.89543 19.8954 4 21 4C22.1046 4 23 4.89543 23 6C23 6.57273 22.7593 7.08923 22.3735 7.45384L20.7441 9H23V10H19V9L21.5507 6.5803V6.5803Z"></path></svg>
         </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleSuperscript();
  }
  onActive(e) {
    return e.isActive("superscript");
  }
};
const AE = [
  "ffffff",
  "000000",
  "e9d989",
  "2972f4",
  "609eec",
  "de3c36",
  "a1d533",
  "7334c5",
  "27b5d9",
  "ff8926",
  "f2f2f2",
  "7f7f7f",
  "ddd9c3",
  "c6d9f0",
  "dbe5f1",
  "f2dcdb",
  "ebf1dd",
  "e5e0ec",
  "dbeef3",
  "fdeada",
  "d8d8d8",
  "595959",
  "c4bd97",
  "8db3e2",
  "b8cce4",
  "e5b9b7",
  "d7e3bc",
  "ccc1d9",
  "b7dde8",
  "fbd5b5",
  "bfbfbf",
  "3f3f3f",
  "938953",
  "548dd4",
  "95b3d7",
  "d99694",
  "c3d69b",
  "b2a2c7",
  "92cddc",
  "fac08f",
  "a5a5a5",
  "262626",
  "494429",
  "17365d",
  "366092",
  "953734",
  "76923c",
  "5f497a",
  "31859b",
  "e36c09",
  "6e6e6e",
  "0c0c0c",
  "1d1b10",
  "0f243e",
  "244061",
  "632423",
  "4f6128",
  "3f3151",
  "205867",
  "974806"
], TE = ["c00000", "ff0000", "ffc000", "ffff00", "92d050", "00b050", "00b0f0", "0070c0", "002060", "7030a0"];
class Rg extends me {
  constructor() {
    super();
    j(this, "historyColorsKey", "historyColors");
    j(this, "historyColors", []);
    j(this, "iconSvg");
    j(this, "menuColorEL");
    j(this, "onColorItemClick");
    j(this, "onDefaultColorClick");
  }
  connectedCallback() {
    this.template = `
            <div style="width: 36px;height: 18px;display: flex;padding-right: 0">
                <div style="width: 18px;height: 18px" class="currentColor">
                    <div style="height: 15px;width: 15px;padding:0 1.5px;line-height: 18px">${this.iconSvg}</div>
                    <div style="width: 18px;height: 3px;background: #333" id="menuColorEL"></div>
                </div>
                <div style="width: 18px;height: 18px" id="dropdown">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
                </div>
            </div>
            `, super.connectedCallback();
    const t = localStorage.getItem(this.historyColorsKey);
    t && (this.historyColors = JSON.parse(t)), this.querySelector(".currentColor").addEventListener("click", () => {
      this.onColorItemClick(this.historyColors.length > 0 ? this.historyColors[0] : "#ccc");
    }), this.menuColorEL = this.querySelector("#menuColorEL"), this.historyColors && this.historyColors.length > 0 && (this.menuColorEL.style.background = this.historyColors[0]), Je(this.querySelector("#dropdown"), {
      content: this.createMenuElement(),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const t = document.createElement("div");
    return t.style.height = "278px", t.style.width = "250px", t.classList.add("aie-dropdown-container"), t.innerHTML = `
        <div class="color-panel">
            <div class="color-panel-default-button" id="defaultColor">${ae("default")}</div>
            <div style="display: flex;flex-wrap: wrap;padding-top: 5px">
                ${AE.map((r, i) => `<div class="color-item" data-color="#${r}" style="width: 18px;height:18px;margin:1px;padding:1px;border:1px solid #${i == 0 ? "efefef" : r};background: #${r}"></div>`).join(" ")}
            </div>
            <div class="color-panel-title">${ae("standardColors")}</div>
            <div style="display: flex;flex-wrap: wrap;">
                ${TE.map((r) => `<div class="color-item" data-color="#${r}" style="width: 18px;height:18px;margin:1px;padding:1px;border:1px solid #${r};background: #${r}"></div>`).join(" ")}
            </div>
            <div class="color-panel-title">${ae("historyColors")}</div>
            <div style="display: flex;flex-wrap: wrap;" id="history-colors">
               ${this.historyColors.map((r) => `<div class="history-color-item" data-color="${r}" style="width: 22px;height: 23px;margin: 1px;background: ${r}"></div>`).join(" ")}
            </div>
        </div>
        `, t.querySelector("#defaultColor").addEventListener("click", () => {
      this.onDefaultColorClick();
    }), t.querySelectorAll(".color-item").forEach((r) => {
      r.addEventListener("click", () => {
        this.invokeColorItemClick(t, r);
      }), r.addEventListener("mouseover", () => {
        r.style.border = "solid 1px #999";
      }), r.addEventListener("mouseout", () => {
        let i = r.getAttribute("data-color");
        i === "#ffffff" && (i = "#efefef"), r.style.border = `solid 1px ${i}`;
      });
    }), t.querySelector("#history-colors").addEventListener("click", (r) => {
      const i = r.target.closest(".history-color-item");
      i && this.invokeColorItemClick(t, i);
    }), t;
  }
  invokeColorItemClick(t, r) {
    const i = r.getAttribute("data-color");
    this.historyColors = this.historyColors.filter((s) => s !== i), this.historyColors.unshift(i), this.historyColors.length > 7 && (this.historyColors = this.historyColors.slice(0, 7)), t.querySelector("#history-colors").innerHTML = `
                ${this.historyColors.map((s) => `<div class="history-color-item" data-color="${s}" style="width: 22px;height: 23px;margin: 1px;background: ${s}"></div>`).join(" ")}
                `, localStorage.setItem(this.historyColorsKey, JSON.stringify(this.historyColors)), this.menuColorEL.style.background = i, this.onColorItemClick(i);
  }
}
let NE = class extends Rg {
  constructor() {
    super(), this.historyColorsKey = "highlightHistoryColors", this.iconSvg = '<svg style="width: 14px;height: 14px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.2427 4.51138L8.50547 11.2486L7.79836 13.3699L6.7574 14.4109L9.58583 17.2393L10.6268 16.1983L12.7481 15.4912L19.4853 8.75402L15.2427 4.51138ZM21.6066 8.04692C21.9972 8.43744 21.9972 9.0706 21.6066 9.46113L13.8285 17.2393L11.7071 17.9464L10.2929 19.3606C9.90241 19.7511 9.26925 19.7511 8.87872 19.3606L4.63608 15.118C4.24556 14.7275 4.24556 14.0943 4.63608 13.7038L6.0503 12.2896L6.7574 10.1682L14.5356 2.39006C14.9261 1.99954 15.5593 1.99954 15.9498 2.39006L21.6066 8.04692ZM15.2427 7.33981L16.6569 8.75402L11.7071 13.7038L10.2929 12.2896L15.2427 7.33981ZM4.28253 16.8858L7.11096 19.7142L5.69674 21.1284L1.4541 19.7142L4.28253 16.8858Z"></path></svg>', this.onDefaultColorClick = () => {
      var e;
      (e = this.editor) == null || e.chain().focus().unsetHighlight().run();
    }, this.onColorItemClick = (e) => {
      var t;
      (t = this.editor) == null || t.chain().focus().setHighlight({ color: e }).run();
    };
  }
  onActive(e) {
    return e.isActive("highlight");
  }
};
class OE extends Rg {
  constructor() {
    super(), this.historyColorsKey = "fontHistoryColors", this.iconSvg = '<svg style="width: 14px;height: 14px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5.55446 22H3.40039L11.0004 3H13.0004L20.6004 22H18.4463L16.0463 16H7.95446L5.55446 22ZM8.75446 14H15.2463L12.0004 5.88517L8.75446 14Z"></path></svg>', this.onDefaultColorClick = () => {
      var e;
      (e = this.editor) == null || e.chain().focus().unsetColor().run();
    }, this.onColorItemClick = (e) => {
      var t;
      (t = this.editor) == null || t.chain().focus().setColor(e).run();
    };
  }
  onActive(e) {
    return e.isActive("textStyle");
  }
}
class LE extends me {
  constructor() {
    super();
    const e = `
        <div no-hover style="width: 1px;height: 20px; display: flex">
            <div class="aie-menu-divider" />
        </div>
        `;
    this.template = e;
  }
}
let RE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
             <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 4H21V6H8V4ZM3 3.5H6V6.5H3V3.5ZM3 10.5H6V13.5H3V10.5ZM3 17.5H6V20.5H3V17.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleBulletList();
  }
  onActive(e) {
    return e.isActive("bulletList");
  }
}, DE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
               <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 4H21V6H8V4ZM5 3V6H6V7H3V6H4V4H3V3H5ZM3 14V11.5H5V11H3V10H6V12.5H4V13H6V14H3ZM5 19.5H3V18.5H5V18H3V17H6V21H3V20H5V19.5ZM8 11H21V13H8V11ZM8 18H21V20H8V18Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleOrderedList();
  }
  onActive(e) {
    return e.isActive("orderedList");
  }
};
class IE extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM3 12.5L7 9V16L3 12.5Z"></path></svg>
         </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.outdent();
  }
}
class BE extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H21V21H3V19ZM11 14H21V16H11V14ZM11 9H21V11H11V9ZM7 12.5L3 16V9L7 12.5Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.indent();
  }
}
const HE = [
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z"></path></svg></div>',
    title: "align-left",
    value: "left"
  },
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z"></path></svg></div>',
    title: "align-center",
    value: "center"
  },
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z"></path></svg></div>',
    title: "align-right",
    value: "right"
  },
  {
    icon: '<div style="width:18px;height: 18px;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H21V21H3V19ZM3 14H21V16H3V14ZM3 9H21V11H3V9Z"></path></svg></div>',
    title: "align-justify",
    value: "justify"
  }
];
class PE extends Yr {
  constructor() {
    super(), this.menuData = HE.map((e) => ({ ...e, title: ae(e.title) })), this.dropDivHeight = "112px", this.dropDivWith = "60px", this.width = "36px", this.menuTextWidth = "20px", this.showItemsTip = !0;
  }
  onDropdownActive(e, t) {
    return e.isActive({ textAlign: this.menuData[t].value });
  }
  onDropdownItemClick(e) {
    this.editor.chain().focus().setTextAlign(this.menuData[e].value).run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e].icon;
  }
  onMenuTextRender(e) {
    return this.menuData[e].icon;
  }
}
class Dg {
  constructor() {
    j(this, "tippyInstance");
    j(this, "content");
    j(this, "onConfirmClickFunc");
    j(this, "onShowFunc");
  }
  setContent(e) {
    this.content = e;
  }
  onConfirmClick(e) {
    this.onConfirmClickFunc = e;
  }
  onShow(e) {
    this.onShowFunc = e;
  }
  setTrigger(e, t = "bottom") {
    this.tippyInstance = Je(e, {
      content: this.createContentElement(),
      appendTo: e.closest(".aie-container"),
      placement: t,
      trigger: "click",
      interactive: !0,
      arrow: !1,
      onShow: (r) => {
        this.onShowFunc && this.onShowFunc(r);
      }
    });
  }
  createContentElement() {
    const e = `
            <div class="aie-popover">
              <div class="aie-popover-header">
               <svg class="aie-popover-header-close" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12.0007 10.5865L16.9504 5.63672L18.3646 7.05093L13.4149 12.0007L18.3646 16.9504L16.9504 18.3646L12.0007 13.4149L7.05093 18.3646L5.63672 16.9504L10.5865 12.0007L5.63672 7.05093L7.05093 5.63672L12.0007 10.5865Z"></path></svg>
              </div>
              <div class="aie-popover-content">${this.content}</div>
              <div class="aie-popover-footer">
              <button class="aie-popover-footer-confirm" type="button">${ae("confirm")}</button>
              </div>
            </div>
        `, t = document.createElement("div");
    return t.innerHTML = e, t.querySelector(".aie-popover-header-close").addEventListener("click", () => {
      this.tippyInstance.hide();
    }), t.querySelector(".aie-popover-footer-confirm").addEventListener("click", () => {
      this.onConfirmClickFunc && this.onConfirmClickFunc(this.tippyInstance), this.tippyInstance.hide();
    }), t;
  }
}
let $E = class extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.6572 14.8282L16.2429 13.414L17.6572 11.9998C19.2193 10.4377 19.2193 7.90506 17.6572 6.34296C16.0951 4.78086 13.5624 4.78086 12.0003 6.34296L10.5861 7.75717L9.17188 6.34296L10.5861 4.92875C12.9292 2.5856 16.7282 2.5856 19.0714 4.92875C21.4145 7.27189 21.4145 11.0709 19.0714 13.414L17.6572 14.8282ZM14.8287 17.6567L13.4145 19.0709C11.0714 21.414 7.27238 21.414 4.92923 19.0709C2.58609 16.7277 2.58609 12.9287 4.92923 10.5856L6.34345 9.17139L7.75766 10.5856L6.34345 11.9998C4.78135 13.5619 4.78135 16.0946 6.34345 17.6567C7.90555 19.2188 10.4382 19.2188 12.0003 17.6567L13.4145 16.2425L14.8287 17.6567ZM14.8287 7.75717L16.2429 9.17139L9.17188 16.2425L7.75766 14.8282L14.8287 7.75717Z"></path></svg>
        </div>
        `;
    this.template = e;
  }
  connectedCallback() {
    super.connectedCallback();
    const e = new Dg();
    e.setContent(`
            <div style="width: 250px">${ae("link-address")}</div>
             <div style="width: 250px">
             <input type="text" id="href" style="width: 250px">
            </div>
            
            <div style="margin-top: 10px">${ae("link-open-type")}</div>
            <div>
            <select id="target" style="width: 250px">
               <option value="">${ae("default")}</option>
               <option value="_blank">${ae("link-open-blank")}</option>
            </select>
            </div>
        `), e.onConfirmClick((t) => {
      var s, o;
      const r = t.popper.querySelector("#href").value;
      if (r.trim() === "") {
        (s = this.editor) == null || s.chain().focus().extendMarkRange("link").unsetLink().run();
        return;
      }
      let i = t.popper.querySelector("#target").value;
      i.trim() === "" && (i = null), (o = this.editor) == null || o.chain().focus().extendMarkRange("link").setLink({
        href: r,
        target: i,
        rel: null
      }).run();
    }), e.onShow((t) => {
      var i;
      const r = (i = this.editor) == null ? void 0 : i.getAttributes("link");
      r && r.href ? t.popper.querySelector("#href").value = r.href : t.popper.querySelector("#href").value = "", r && r.target ? t.popper.querySelector("#target").value = r.target : t.popper.querySelector("#target").value = "";
    }), e.setTrigger(this.querySelector("div"), "bottom");
  }
};
class FE extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM5 5V19H19V5H5ZM11.0026 16L6.75999 11.7574L8.17421 10.3431L11.0026 13.1716L16.6595 7.51472L18.0737 8.92893L11.0026 16Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleTaskList();
  }
  onActive(e) {
    return e.isActive("taskList");
  }
}
const zE = ["1.0", "1.25", "1.5", "2.0", "2.5", "3.0"];
class VE extends Yr {
  constructor() {
    super(), this.menuData = zE, this.refreshMenuText = !1, this.dropDivHeight = "180px", this.dropDivWith = "70px", this.width = "36px", this.menuTextWidth = "20px";
  }
  onDropdownActive(e, t) {
    return t == 0 ? e.isActive("paragraph") : e.isActive("heading", { level: t });
  }
  onDropdownItemClick(e) {
    const t = `${(Number(this.menuData[e]) * 100).toFixed(0)}%`;
    this.editor.chain().setLineHeight(t).run();
  }
  onDropdownItemRender(e) {
    return this.menuData[e];
  }
  onMenuTextRender(e) {
    return `
              <div style="width:18px;height: 18px;">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11 4H21V6H11V4ZM6 7V11H4V7H1L5 3L9 7H6ZM6 17H9L5 21L1 17H4V13H6V17ZM11 18H21V20H11V18ZM9 11H21V13H9V11Z"></path></svg>
              </div>
         `;
  }
}
class qE extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4.58341 17.3211C3.55316 16.2275 3 15 3 13.0104C3 9.51092 5.45651 6.37372 9.03059 4.82324L9.92328 6.20085C6.58804 8.00545 5.93618 10.3461 5.67564 11.8221C6.21263 11.5444 6.91558 11.4467 7.60471 11.5106C9.40908 11.6778 10.8312 13.1591 10.8312 15C10.8312 16.933 9.26416 18.5 7.33116 18.5C6.2581 18.5 5.23196 18.0096 4.58341 17.3211ZM14.5834 17.3211C13.5532 16.2275 13 15 13 13.0104C13 9.51092 15.4565 6.37372 19.0306 4.82324L19.9233 6.20085C16.588 8.00545 15.9362 10.3461 15.6756 11.8221C16.2126 11.5444 16.9156 11.4467 17.6047 11.5106C19.4091 11.6778 20.8312 13.1591 20.8312 15C20.8312 16.933 19.2642 18.5 17.3312 18.5C16.2581 18.5 15.232 18.0096 14.5834 17.3211Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleBlockquote();
  }
}
let UE = class extends me {
  constructor() {
    super();
    j(this, "fileInput");
    const t = `
        <div>
        <input type="file" accept="image/*" multiple  style="display: none">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.9918 21C2.44405 21 2 20.5551 2 20.0066V3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918ZM20 15V5H4V19L14 9L20 15ZM20 17.8284L14 11.8284L6.82843 19H20V17.8284ZM8 11C6.89543 11 6 10.1046 6 9C6 7.89543 6.89543 7 8 7C9.10457 7 10 7.89543 10 9C10 10.1046 9.10457 11 8 11Z"></path></svg>
        </div>
        `;
    this.template = t, this.registerClickListener();
  }
  connectedCallback() {
    var t, r;
    super.connectedCallback(), (r = (t = this.options) == null ? void 0 : t.image) != null && r.customMenuInvoke ? this.querySelector("input").remove() : (this.fileInput = this.querySelector("input"), this.fileInput.addEventListener("change", () => {
      var s, o;
      const i = (s = this.fileInput) == null ? void 0 : s.files;
      if (i && i.length > 0)
        for (let a of i)
          (o = this.editor) == null || o.commands.uploadImage(a);
      this.fileInput.value = "";
    }));
  }
  // @ts-ignore
  onClick(t) {
    var r, i, s;
    (i = (r = this.options) == null ? void 0 : r.image) != null && i.customMenuInvoke ? this.options.image.customMenuInvoke(this.editor) : (s = this.fileInput) == null || s.click();
  }
};
class KE extends me {
  constructor() {
    super();
    j(this, "fileInput");
    const t = `
        <div>
        <input type="file" accept="video/*" style="display: none">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M2 3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918C2.44405 21 2 20.5551 2 20.0066V3.9934ZM4 5V19H20V5H4ZM10.6219 8.41459L15.5008 11.6672C15.6846 11.7897 15.7343 12.0381 15.6117 12.2219C15.5824 12.2658 15.5447 12.3035 15.5008 12.3328L10.6219 15.5854C10.4381 15.708 10.1897 15.6583 10.0672 15.4745C10.0234 15.4088 10 15.3316 10 15.2526V8.74741C10 8.52649 10.1791 8.34741 10.4 8.34741C10.479 8.34741 10.5562 8.37078 10.6219 8.41459Z"></path></svg>
        </div>
        `;
    this.template = t, this.registerClickListener();
  }
  connectedCallback() {
    var t, r;
    super.connectedCallback(), (r = (t = this.options) == null ? void 0 : t.video) != null && r.customMenuInvoke ? this.querySelector("input").remove() : (this.fileInput = this.querySelector("input"), this.fileInput.addEventListener("change", () => {
      var s, o;
      const i = (s = this.fileInput) == null ? void 0 : s.files;
      if (i && i.length > 0)
        for (let a of i)
          (o = this.editor) == null || o.commands.uploadVideo(a);
      this.fileInput.value = "";
    }));
  }
  // @ts-ignore
  onClick(t) {
    var r, i, s;
    (i = (r = this.options) == null ? void 0 : r.video) != null && i.customMenuInvoke ? this.options.video.customMenuInvoke(this.editor) : (s = this.fileInput) == null || s.click();
  }
}
let WE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23 11.9998L15.9289 19.0708L14.5147 17.6566L20.1716 11.9998L14.5147 6.34292L15.9289 4.92871L23 11.9998ZM3.82843 11.9998L9.48528 17.6566L8.07107 19.0708L1 11.9998L8.07107 4.92871L9.48528 6.34292L3.82843 11.9998Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleCode();
  }
  onActive(e) {
    return e.isActive("code");
  }
}, GE = class extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 3H21C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3ZM4 5V19H20V5H4ZM20 12L16.4645 15.5355L15.0503 14.1213L17.1716 12L15.0503 9.87868L16.4645 8.46447L20 12ZM6.82843 12L8.94975 14.1213L7.53553 15.5355L4 12L7.53553 8.46447L8.94975 9.87868L6.82843 12ZM11.2443 17H9.11597L12.7557 7H14.884L11.2443 17Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.toggleCodeBlock();
  }
  onActive(e) {
    return e.isActive("codeBlock");
  }
};
class ZE extends me {
  constructor() {
    super();
    const e = `
        <div style="height: 16px">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M13.9999 18.9967H20.9999V20.9967H11.9999L8.00229 20.9992L1.51457 14.5115C1.12405 14.1209 1.12405 13.4878 1.51457 13.0972L12.1212 2.49065C12.5117 2.10012 13.1449 2.10012 13.5354 2.49065L21.3136 10.2688C21.7041 10.6593 21.7041 11.2925 21.3136 11.683L13.9999 18.9967ZM15.6567 14.5115L19.1922 10.9759L12.8283 4.61197L9.29275 8.1475L15.6567 14.5115Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.unsetAllMarks();
  }
}
class jE extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2 11H4V13H2V11ZM6 11H18V13H6V11ZM20 11H22V13H20V11Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.setHorizontalRule();
  }
}
let JE = class extends me {
  constructor() {
    super();
    j(this, "instance");
    const t = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14 10H10V14H14V10ZM16 10V14H19V10H16ZM14 19V16H10V19H14ZM16 19H19V16H16V19ZM14 5H10V8H14V5ZM16 5V8H19V5H16ZM8 10H5V14H8V10ZM8 19V16H5V19H8ZM8 5H5V8H8V5ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3Z"></path></svg>
        </div>
        `;
    this.template = t;
  }
  connectedCallback() {
    super.connectedCallback(), this.instance = Je(this.querySelector("svg"), {
      content: this.createMenuElement(),
      appendTo: this.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const t = document.createElement("div");
    t.classList.add("aie-dropdown-container"), t.innerHTML = `
        <div style="margin: 5px">
            <div style="padding: 5px 0;font-size: 14px;display: flex"><span>${ae("insertTable")}</span><span style="margin-left: auto" id="columnRows"></span></div>
            <div style="display: flex;flex-wrap: wrap;width: 240px;height: 200px" id="table-cells">
            ${[...Array(8).keys()].map((i, s) => [...Array(10).keys()].map((o, a) => `<div data-i="${s}" data-j="${a}" class="table-cell" style="width: 20px;height: 20px;margin:1px;"></div>`).join("")).join("")}
            </div>
        </div>
        `;
    const r = t.querySelector("#table-cells");
    return r.addEventListener("click", (i) => {
      var o, a;
      const s = i.target.closest(".table-cell");
      if (s) {
        let l = s.getAttribute("data-i"), c = s.getAttribute("data-j");
        (o = this.editor) == null || o.commands.insertTable({ rows: Number(l) + 1, cols: Number(c) + 1, withHeaderRow: !0 }), (a = this.instance) == null || a.hide();
      }
    }), r.addEventListener("mouseover", (i) => {
      const s = i.target.closest(".table-cell");
      if (s) {
        let o = Number(s.getAttribute("data-i")), a = Number(s.getAttribute("data-j"));
        const l = r.querySelectorAll("div"), c = t.querySelector("#columnRows");
        c.textContent = `${o + 1} ${ae("row")} x ${a + 1} ${ae("column")}`, l.forEach((u) => {
          let d = Number(u.getAttribute("data-i")), f = Number(u.getAttribute("data-j"));
          d <= o && f <= a ? u.classList.add("active") : u.classList.remove("active");
        });
      }
    }), r.addEventListener("mouseleave", () => {
      r.querySelectorAll("div").forEach((o) => {
        o.classList.remove("active");
      });
      const s = t.querySelector("#columnRows");
      s.textContent = "";
    }), t;
  }
};
class YE extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15 18H16.5C17.8807 18 19 16.8807 19 15.5C19 14.1193 17.8807 13 16.5 13H3V11H16.5C18.9853 11 21 13.0147 21 15.5C21 17.9853 18.9853 20 16.5 20H15V22L11 19L15 16V18ZM3 4H21V6H3V4ZM9 18V20H3V18H9Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    e.setHardBreak();
  }
}
class XE extends me {
  constructor() {
    super();
    j(this, "fileInput");
    const t = `
        <div>
        <input type="file" style="display: none">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.8287 7.7574L9.1718 13.4143C8.78127 13.8048 8.78127 14.4379 9.1718 14.8285C9.56232 15.219 10.1955 15.219 10.586 14.8285L16.2429 9.17161C17.4144 8.00004 17.4144 6.10055 16.2429 4.92897C15.0713 3.7574 13.1718 3.7574 12.0002 4.92897L6.34337 10.5858C4.39075 12.5384 4.39075 15.7043 6.34337 17.6569C8.29599 19.6095 11.4618 19.6095 13.4144 17.6569L19.0713 12L20.4855 13.4143L14.8287 19.0711C12.095 21.8048 7.66283 21.8048 4.92916 19.0711C2.19549 16.3374 2.19549 11.9053 4.92916 9.17161L10.586 3.51476C12.5386 1.56214 15.7045 1.56214 17.6571 3.51476C19.6097 5.46738 19.6097 8.63321 17.6571 10.5858L12.0002 16.2427C10.8287 17.4143 8.92916 17.4143 7.75759 16.2427C6.58601 15.0711 6.58601 13.1716 7.75759 12L13.4144 6.34319L14.8287 7.7574Z"></path></svg>
        </div>
        `;
    this.template = t, this.registerClickListener();
  }
  connectedCallback() {
    var t, r;
    super.connectedCallback(), (r = (t = this.options) == null ? void 0 : t.attachment) != null && r.customMenuInvoke ? this.querySelector("input").remove() : (this.fileInput = this.querySelector("input"), this.fileInput.addEventListener("change", () => {
      var s, o;
      const i = (s = this.fileInput) == null ? void 0 : s.files;
      if (i && i.length > 0)
        for (let a of i)
          (o = this.editor) == null || o.commands.uploadAttachment(a);
      this.fileInput.value = "";
    }));
  }
  // @ts-ignore
  onClick(t) {
    var r, i, s;
    (i = (r = this.options) == null ? void 0 : r.attachment) != null && i.customMenuInvoke ? this.options.attachment.customMenuInvoke(this.editor) : (s = this.fileInput) == null || s.click();
  }
}
class QE extends me {
  constructor() {
    super();
    j(this, "fullscreenSvg", '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8 3V5H4V9H2V3H8ZM2 21V15H4V19H8V21H2ZM22 21H16V19H20V15H22V21ZM22 9H20V5H16V3H22V9Z"></path></svg>');
    j(this, "fullscreenExitSvg", '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18 7H22V9H16V3H18V7ZM8 9H2V7H6V3H8V9ZM18 17V21H16V15H22V17H18ZM8 15V21H6V17H2V15H8Z"></path></svg>');
    j(this, "isFullscreen", !1);
    const t = `
        <div>
        ${this.fullscreenSvg}
        </div>
        `;
    this.template = t, this.registerClickListener();
  }
  // @ts-ignore
  onClick(t) {
    const r = this.closest(".aie-container");
    this.isFullscreen ? (r.style.height = "100%", r.style.width = "", r.style.background = "", r.style.position = "", r.style.top = "", r.style.left = "", r.style.zIndex = "") : (r.style.height = "calc(100vh - 2px)", r.style.width = "calc(100% - 2px)", r.style.position = "absolute", r.style.top = "0", r.style.left = "0", r.style.zIndex = "9999"), this.isFullscreen = !this.isFullscreen, this.querySelector("div").innerHTML = this.isFullscreen ? this.fullscreenExitSvg : this.fullscreenSvg;
  }
}
class ex extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17 2C17.5523 2 18 2.44772 18 3V7H21C21.5523 7 22 7.44772 22 8V18C22 18.5523 21.5523 19 21 19H18V21C18 21.5523 17.5523 22 17 22H7C6.44772 22 6 21.5523 6 21V19H3C2.44772 19 2 18.5523 2 18V8C2 7.44772 2.44772 7 3 7H6V3C6 2.44772 6.44772 2 7 2H17ZM16 17H8V20H16V17ZM20 9H4V17H6V16C6 15.4477 6.44772 15 7 15H17C17.5523 15 18 15.4477 18 16V17H20V9ZM8 10V12H5V10H8ZM16 4H8V7H16V4Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    const t = this.closest(".aie-container").querySelector(".aie-content").innerHTML, i = Array.from(document.querySelectorAll("style, link")).map((l) => l.outerHTML).join("") + t, s = document.createElement("iframe");
    s.id = "aie-print-iframe", s.setAttribute("style", "position: absolute; width: 0; height: 0; top: -10px; left: -10px;"), document.body.appendChild(s);
    const o = s.contentWindow, a = s.contentDocument || s.contentWindow && s.contentWindow.document;
    a && (a.open(), a.write(i), a.close()), o && (s.onload = function() {
      try {
        setTimeout(() => {
          o.focus();
          try {
            o.document.execCommand("print", !1) || o.print();
          } catch {
            o.print();
          }
          o.close();
        }, 10);
      } catch (l) {
        console.error(l);
      }
      setTimeout(function() {
        document.body.removeChild(s);
      }, 100);
    });
  }
}
const tx = [
  "😀",
  "😃",
  "😄",
  "😁",
  "😆",
  "😅",
  "🤣",
  "😂",
  "🙂",
  "🙃",
  "😉",
  "😊",
  "😇",
  "🥰",
  "😍",
  "🤩",
  "😘",
  "😗",
  "😚",
  "😙",
  "🥲",
  "😋",
  "😛",
  "😜",
  "🤪",
  "😝",
  "🤑",
  "🤗",
  "🤭",
  "🤫",
  "🤔",
  "🤐",
  "🤨",
  "😐",
  "😑",
  "😶",
  "😶‍🌫",
  "😏",
  "😒",
  "🙄",
  "😬",
  "😮‍💨",
  "🤥",
  "😌",
  "😔",
  "😪",
  "🤤",
  "😴",
  "😷",
  "🤒",
  "🤕",
  "🤢",
  "🤮",
  "🤧",
  "🥵",
  "🥶",
  "🥴",
  "😵",
  "😵‍💫",
  "🤯",
  "🤠",
  "🥳",
  "🥸",
  "😎",
  "🤓",
  "🧐",
  "😕",
  "😟",
  "🙁",
  "😮",
  "😲",
  "😳",
  "🥺",
  "😦",
  "😧",
  "😨",
  "😰",
  "😥",
  "😢",
  "😭",
  "😱",
  "😖",
  "😣",
  "😞",
  "😓",
  "😩",
  "😫",
  "🥱",
  "😤",
  "😡",
  "😠",
  "🤬",
  "😈",
  "👿",
  "💀",
  "☠️",
  "💩",
  "🤡",
  "👹",
  "👺",
  "👻",
  "👽",
  "👾",
  "🤖",
  "😺",
  "😸",
  "😹",
  "😻",
  "😼",
  "😽",
  "🙀",
  "😿",
  "😾",
  "🙈",
  "🙉",
  "🙊",
  "💌",
  "💘",
  "💝",
  "💖",
  "💗",
  "💓",
  "💞",
  "💕",
  "💟",
  "❣️",
  "💔",
  "💋",
  "💯",
  "💢",
  "💥",
  "💫",
  "💦",
  "💨",
  "💤"
];
class nx extends me {
  constructor() {
    super();
    const e = `
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22ZM12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM8 13H16C16 15.2091 14.2091 17 12 17C9.79086 17 8 15.2091 8 13ZM8 11C7.17157 11 6.5 10.3284 6.5 9.5C6.5 8.67157 7.17157 8 8 8C8.82843 8 9.5 8.67157 9.5 9.5C9.5 10.3284 8.82843 11 8 11ZM16 11C15.1716 11 14.5 10.3284 14.5 9.5C14.5 8.67157 15.1716 8 16 8C16.8284 8 17.5 8.67157 17.5 9.5C17.5 10.3284 16.8284 11 16 11Z"></path></svg>
        </div>
        `;
    this.template = e;
  }
  connectedCallback() {
    super.connectedCallback(), Je(this.querySelector("svg"), {
      content: this.createMenuElement(),
      appendTo: this.closest(".aie-container"),
      placement: "bottom",
      trigger: "click",
      interactive: !0,
      arrow: !1
    });
  }
  createMenuElement() {
    const e = document.createElement("div");
    return e.style.height = "220px", e.style.width = "400px", e.classList.add("aie-dropdown-container"), e.innerHTML = `
        <div style="margin: 5px">
            <div class="emoji-cells">
            ${tx.map((t) => `<div  class="emoji-cell">${t}</div>`).join("")}
            </div>
        </div>
        `, e.querySelector(".emoji-cells").addEventListener("click", (t) => {
      var i;
      const r = t.target.closest(".emoji-cell");
      r && ((i = this.editor) == null || i.commands.insertContent(r.innerHTML));
    }), e;
  }
}
class rx extends me {
  constructor() {
    super();
    j(this, "svg", '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 4.99658V7.99658H19V4.99658H5ZM4 2.99658H20C20.5523 2.99658 21 3.4443 21 3.99658V8.99658C21 9.54887 20.5523 9.99658 20 9.99658H4C3.44772 9.99658 3 9.54887 3 8.99658V3.99658C3 3.4443 3.44772 2.99658 4 2.99658ZM6 11.9966H12C12.5523 11.9966 13 12.4443 13 12.9966V15.9966H14V21.9966H10V15.9966H11V13.9966H5C4.44772 13.9966 4 13.5489 4 12.9966V10.9966H6V11.9966ZM17.7322 13.7288L19.5 11.961L21.2678 13.7288C22.2441 14.7051 22.2441 16.288 21.2678 17.2643C20.2915 18.2407 18.7085 18.2407 17.7322 17.2643C16.7559 16.288 16.7559 14.7051 17.7322 13.7288Z"></path></svg>');
    const t = `
        <div style="height: 16px">
        ${this.svg}
        </div>
        `;
    this.template = t, this.registerClickListener();
  }
  // @ts-ignore
  onClick(t) {
    var r;
    t.setPainter((r = this.editor) == null ? void 0 : r.state.selection.$head.marks());
  }
}
class ix {
  constructor(e) {
    j(this, "url");
    j(this, "webSocket");
    j(this, "isOpen", !1);
    j(this, "text");
    this.url = e;
  }
  start(e) {
    this.text = e, this.webSocket = new WebSocket(this.url), this.webSocket.onopen = (t) => this.onOpen(t), this.webSocket.onmessage = (t) => this.onMessage(t), this.webSocket.onclose = (t) => this.onClose(t), this.webSocket.onerror = (t) => this.onError(t);
  }
  stop() {
    this.webSocket && (this.webSocket.close(), this.webSocket = void 0);
  }
  send(e) {
    this.webSocket && this.isOpen && this.webSocket.send(e);
  }
  onOpen(e) {
    this.isOpen = !0, this.send(this.text);
  }
  onMessage(e) {
  }
  onClose(e) {
    this.isOpen = !1;
  }
  onError(e) {
    this.isOpen = !1;
  }
}
const Po = () => "10000000-1000-4000-8000-100000000000".replace(
  /[018]/g,
  (n) => (n ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> n / 4).toString(16)
);
class sx extends ix {
  constructor(t, r, i, s) {
    super(t);
    j(this, "appId");
    j(this, "version");
    j(this, "editor");
    j(this, "from");
    this.appId = r, this.version = i, this.editor = s, this.from = s.view.state.selection.from;
  }
  getDomain() {
    switch (this.version) {
      case "v3.1":
        return "generalv3";
      case "v2.1":
        return "generalv2";
      default:
        return "general";
    }
  }
  send(t) {
    const r = {
      header: {
        app_id: this.appId,
        uid: Po()
      },
      parameter: {
        chat: {
          domain: this.getDomain(),
          temperature: 0.5,
          max_tokens: 2048
        }
      },
      payload: {
        message: {
          text: [
            // {"role": "user", "content": "你会做什么"}
          ]
        }
      }
    };
    r.payload.message.text.push(
      { role: "user", content: t }
    ), super.send(JSON.stringify(r));
  }
  onMessage(t) {
    const r = t.data, i = JSON.parse(r);
    let s = i.payload.choices.text[0].content;
    if (s) {
      const { state: { tr: o }, view: a } = this.editor;
      if (a.dispatch(o.insertText(s)), i.header.status == 2) {
        const l = this.editor.state.selection.to, c = this.editor.state.doc.textBetween(this.from, l), u = this.editor.parseMarkdown(c), { state: { tr: d }, view: f } = this.editor;
        f.dispatch(d.replaceWith(this.from, l, u));
      }
      this.editor.commands.scrollIntoView();
    }
  }
}
var xn = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Xr(n) {
  return n && n.__esModule && Object.prototype.hasOwnProperty.call(n, "default") ? n.default : n;
}
function Ig(n) {
  if (n.__esModule)
    return n;
  var e = n.default;
  if (typeof e == "function") {
    var t = function r() {
      return this instanceof r ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    t.prototype = e.prototype;
  } else
    t = {};
  return Object.defineProperty(t, "__esModule", { value: !0 }), Object.keys(n).forEach(function(r) {
    var i = Object.getOwnPropertyDescriptor(n, r);
    Object.defineProperty(t, r, i.get ? i : {
      enumerable: !0,
      get: function() {
        return n[r];
      }
    });
  }), t;
}
var Bg = { exports: {} };
function ox(n) {
  throw new Error('Could not dynamically require "' + n + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var Aa = { exports: {} };
const ax = {}, lx = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: ax
}, Symbol.toStringTag, { value: "Module" })), cx = /* @__PURE__ */ Ig(lx);
var Vd;
function $o() {
  return Vd || (Vd = 1, function(n, e) {
    (function(t, r) {
      n.exports = r();
    })(xn, function() {
      var t = t || function(r, i) {
        var s;
        if (typeof window < "u" && window.crypto && (s = window.crypto), typeof self < "u" && self.crypto && (s = self.crypto), typeof globalThis < "u" && globalThis.crypto && (s = globalThis.crypto), !s && typeof window < "u" && window.msCrypto && (s = window.msCrypto), !s && typeof xn < "u" && xn.crypto && (s = xn.crypto), !s && typeof ox == "function")
          try {
            s = cx;
          } catch {
          }
        var o = function() {
          if (s) {
            if (typeof s.getRandomValues == "function")
              try {
                return s.getRandomValues(new Uint32Array(1))[0];
              } catch {
              }
            if (typeof s.randomBytes == "function")
              try {
                return s.randomBytes(4).readInt32LE();
              } catch {
              }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        }, a = Object.create || function() {
          function y() {
          }
          return function(k) {
            var b;
            return y.prototype = k, b = new y(), y.prototype = null, b;
          };
        }(), l = {}, c = l.lib = {}, u = c.Base = function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(y) {
              var k = a(this);
              return y && k.mixIn(y), (!k.hasOwnProperty("init") || this.init === k.init) && (k.init = function() {
                k.$super.init.apply(this, arguments);
              }), k.init.prototype = k, k.$super = this, k;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var y = this.extend();
              return y.init.apply(y, arguments), y;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(y) {
              for (var k in y)
                y.hasOwnProperty(k) && (this[k] = y[k]);
              y.hasOwnProperty("toString") && (this.toString = y.toString);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }(), d = c.WordArray = u.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(y, k) {
            y = this.words = y || [], k != i ? this.sigBytes = k : this.sigBytes = y.length * 4;
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(y) {
            return (y || p).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(y) {
            var k = this.words, b = y.words, x = this.sigBytes, w = y.sigBytes;
            if (this.clamp(), x % 4)
              for (var S = 0; S < w; S++) {
                var T = b[S >>> 2] >>> 24 - S % 4 * 8 & 255;
                k[x + S >>> 2] |= T << 24 - (x + S) % 4 * 8;
              }
            else
              for (var M = 0; M < w; M += 4)
                k[x + M >>> 2] = b[M >>> 2];
            return this.sigBytes += w, this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var y = this.words, k = this.sigBytes;
            y[k >>> 2] &= 4294967295 << 32 - k % 4 * 8, y.length = r.ceil(k / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var y = u.clone.call(this);
            return y.words = this.words.slice(0), y;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(y) {
            for (var k = [], b = 0; b < y; b += 4)
              k.push(o());
            return new d.init(k, y);
          }
        }), f = l.enc = {}, p = f.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(y) {
            for (var k = y.words, b = y.sigBytes, x = [], w = 0; w < b; w++) {
              var S = k[w >>> 2] >>> 24 - w % 4 * 8 & 255;
              x.push((S >>> 4).toString(16)), x.push((S & 15).toString(16));
            }
            return x.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(y) {
            for (var k = y.length, b = [], x = 0; x < k; x += 2)
              b[x >>> 3] |= parseInt(y.substr(x, 2), 16) << 24 - x % 8 * 4;
            return new d.init(b, k / 2);
          }
        }, h = f.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(y) {
            for (var k = y.words, b = y.sigBytes, x = [], w = 0; w < b; w++) {
              var S = k[w >>> 2] >>> 24 - w % 4 * 8 & 255;
              x.push(String.fromCharCode(S));
            }
            return x.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(y) {
            for (var k = y.length, b = [], x = 0; x < k; x++)
              b[x >>> 2] |= (y.charCodeAt(x) & 255) << 24 - x % 4 * 8;
            return new d.init(b, k);
          }
        }, g = f.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(y) {
            try {
              return decodeURIComponent(escape(h.stringify(y)));
            } catch {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(y) {
            return h.parse(unescape(encodeURIComponent(y)));
          }
        }, m = c.BufferedBlockAlgorithm = u.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new d.init(), this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(y) {
            typeof y == "string" && (y = g.parse(y)), this._data.concat(y), this._nDataBytes += y.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(y) {
            var k, b = this._data, x = b.words, w = b.sigBytes, S = this.blockSize, T = S * 4, M = w / T;
            y ? M = r.ceil(M) : M = r.max((M | 0) - this._minBufferSize, 0);
            var L = M * S, z = r.min(L * 4, w);
            if (L) {
              for (var G = 0; G < L; G += S)
                this._doProcessBlock(x, G);
              k = x.splice(0, L), b.sigBytes -= z;
            }
            return new d.init(k, z);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var y = u.clone.call(this);
            return y._data = this._data.clone(), y;
          },
          _minBufferSize: 0
        });
        c.Hasher = m.extend({
          /**
           * Configuration options.
           */
          cfg: u.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(y) {
            this.cfg = this.cfg.extend(y), this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            m.reset.call(this), this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(y) {
            return this._append(y), this._process(), this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(y) {
            y && this._append(y);
            var k = this._doFinalize();
            return k;
          },
          blockSize: 16,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(y) {
            return function(k, b) {
              return new y.init(b).finalize(k);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(y) {
            return function(k, b) {
              return new v.HMAC.init(y, b).finalize(k);
            };
          }
        });
        var v = l.algo = {};
        return l;
      }(Math);
      return t;
    });
  }(Aa)), Aa.exports;
}
var Ta = { exports: {} }, qd;
function ux() {
  return qd || (qd = 1, function(n, e) {
    (function(t, r) {
      n.exports = r($o());
    })(xn, function(t) {
      return function(r) {
        var i = t, s = i.lib, o = s.WordArray, a = s.Hasher, l = i.algo, c = [], u = [];
        (function() {
          function p(v) {
            for (var y = r.sqrt(v), k = 2; k <= y; k++)
              if (!(v % k))
                return !1;
            return !0;
          }
          function h(v) {
            return (v - (v | 0)) * 4294967296 | 0;
          }
          for (var g = 2, m = 0; m < 64; )
            p(g) && (m < 8 && (c[m] = h(r.pow(g, 1 / 2))), u[m] = h(r.pow(g, 1 / 3)), m++), g++;
        })();
        var d = [], f = l.SHA256 = a.extend({
          _doReset: function() {
            this._hash = new o.init(c.slice(0));
          },
          _doProcessBlock: function(p, h) {
            for (var g = this._hash.words, m = g[0], v = g[1], y = g[2], k = g[3], b = g[4], x = g[5], w = g[6], S = g[7], T = 0; T < 64; T++) {
              if (T < 16)
                d[T] = p[h + T] | 0;
              else {
                var M = d[T - 15], L = (M << 25 | M >>> 7) ^ (M << 14 | M >>> 18) ^ M >>> 3, z = d[T - 2], G = (z << 15 | z >>> 17) ^ (z << 13 | z >>> 19) ^ z >>> 10;
                d[T] = L + d[T - 7] + G + d[T - 16];
              }
              var q = b & x ^ ~b & w, A = m & v ^ m & y ^ v & y, H = (m << 30 | m >>> 2) ^ (m << 19 | m >>> 13) ^ (m << 10 | m >>> 22), C = (b << 26 | b >>> 6) ^ (b << 21 | b >>> 11) ^ (b << 7 | b >>> 25), E = S + C + q + u[T] + d[T], _ = H + A;
              S = w, w = x, x = b, b = k + E | 0, k = y, y = v, v = m, m = E + _ | 0;
            }
            g[0] = g[0] + m | 0, g[1] = g[1] + v | 0, g[2] = g[2] + y | 0, g[3] = g[3] + k | 0, g[4] = g[4] + b | 0, g[5] = g[5] + x | 0, g[6] = g[6] + w | 0, g[7] = g[7] + S | 0;
          },
          _doFinalize: function() {
            var p = this._data, h = p.words, g = this._nDataBytes * 8, m = p.sigBytes * 8;
            return h[m >>> 5] |= 128 << 24 - m % 32, h[(m + 64 >>> 9 << 4) + 14] = r.floor(g / 4294967296), h[(m + 64 >>> 9 << 4) + 15] = g, p.sigBytes = h.length * 4, this._process(), this._hash;
          },
          clone: function() {
            var p = a.clone.call(this);
            return p._hash = this._hash.clone(), p;
          }
        });
        i.SHA256 = a._createHelper(f), i.HmacSHA256 = a._createHmacHelper(f);
      }(Math), t.SHA256;
    });
  }(Ta)), Ta.exports;
}
var Na = { exports: {} }, Ud;
function dx() {
  return Ud || (Ud = 1, function(n, e) {
    (function(t, r) {
      n.exports = r($o());
    })(xn, function(t) {
      (function() {
        var r = t, i = r.lib, s = i.Base, o = r.enc, a = o.Utf8, l = r.algo;
        l.HMAC = s.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(c, u) {
            c = this._hasher = new c.init(), typeof u == "string" && (u = a.parse(u));
            var d = c.blockSize, f = d * 4;
            u.sigBytes > f && (u = c.finalize(u)), u.clamp();
            for (var p = this._oKey = u.clone(), h = this._iKey = u.clone(), g = p.words, m = h.words, v = 0; v < d; v++)
              g[v] ^= 1549556828, m[v] ^= 909522486;
            p.sigBytes = h.sigBytes = f, this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var c = this._hasher;
            c.reset(), c.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(c) {
            return this._hasher.update(c), this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(c) {
            var u = this._hasher, d = u.finalize(c);
            u.reset();
            var f = u.finalize(this._oKey.clone().concat(d));
            return f;
          }
        });
      })();
    });
  }(Na)), Na.exports;
}
(function(n, e) {
  (function(t, r, i) {
    n.exports = r($o(), ux(), dx());
  })(xn, function(t) {
    return t.HmacSHA256;
  });
})(Bg);
var fx = Bg.exports;
const px = /* @__PURE__ */ Xr(fx);
var Hg = { exports: {} };
(function(n, e) {
  (function(t, r) {
    n.exports = r($o());
  })(xn, function(t) {
    return function() {
      var r = t, i = r.lib, s = i.WordArray, o = r.enc;
      o.Base64 = {
        /**
         * Converts a word array to a Base64 string.
         *
         * @param {WordArray} wordArray The word array.
         *
         * @return {string} The Base64 string.
         *
         * @static
         *
         * @example
         *
         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
         */
        stringify: function(l) {
          var c = l.words, u = l.sigBytes, d = this._map;
          l.clamp();
          for (var f = [], p = 0; p < u; p += 3)
            for (var h = c[p >>> 2] >>> 24 - p % 4 * 8 & 255, g = c[p + 1 >>> 2] >>> 24 - (p + 1) % 4 * 8 & 255, m = c[p + 2 >>> 2] >>> 24 - (p + 2) % 4 * 8 & 255, v = h << 16 | g << 8 | m, y = 0; y < 4 && p + y * 0.75 < u; y++)
              f.push(d.charAt(v >>> 6 * (3 - y) & 63));
          var k = d.charAt(64);
          if (k)
            for (; f.length % 4; )
              f.push(k);
          return f.join("");
        },
        /**
         * Converts a Base64 string to a word array.
         *
         * @param {string} base64Str The Base64 string.
         *
         * @return {WordArray} The word array.
         *
         * @static
         *
         * @example
         *
         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
         */
        parse: function(l) {
          var c = l.length, u = this._map, d = this._reverseMap;
          if (!d) {
            d = this._reverseMap = [];
            for (var f = 0; f < u.length; f++)
              d[u.charCodeAt(f)] = f;
          }
          var p = u.charAt(64);
          if (p) {
            var h = l.indexOf(p);
            h !== -1 && (c = h);
          }
          return a(l, c, d);
        },
        _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
      };
      function a(l, c, u) {
        for (var d = [], f = 0, p = 0; p < c; p++)
          if (p % 4) {
            var h = u[l.charCodeAt(p - 1)] << p % 4 * 2, g = u[l.charCodeAt(p)] >>> 6 - p % 4 * 2, m = h | g;
            d[f >>> 2] |= m << 24 - f % 4 * 8, f++;
          }
        return s.create(d, f);
      }
    }(), t.enc.Base64;
  });
})(Hg);
var hx = Hg.exports;
const gx = /* @__PURE__ */ Xr(hx);
class mx {
  constructor(e) {
    j(this, "protocol");
    j(this, "appId");
    j(this, "apiKey");
    j(this, "apiSecret");
    j(this, "version");
    j(this, "urlSignatureAlgorithm");
    var l;
    const { protocol: t, appId: r, apiKey: i, apiSecret: s, version: o, urlSignatureAlgorithm: a } = (l = e.ai) == null ? void 0 : l.model.xinghuo;
    this.protocol = t || "ws", this.appId = r, this.apiKey = i, this.apiSecret = s, this.version = o || "v3.1", this.urlSignatureAlgorithm = a;
  }
  start(e, t, r) {
    const i = this.urlSignatureAlgorithm ? this.urlSignatureAlgorithm(this) : this.createUrl();
    new sx(i, this.appId, this.version, r).start(`"${e}"
${t}`);
  }
  createUrl() {
    const e = (/* @__PURE__ */ new Date()).toUTCString().replace("GMT", "+0000");
    let t = `host: spark-api.xf-yun.com
`;
    t += "date: " + e + `
`, t += `GET /${this.version}/chat HTTP/1.1`;
    const r = px(t, this.apiSecret), i = gx.stringify(r), s = `api_key="${this.apiKey}", algorithm="hmac-sha256", headers="host date request-line", signature="${i}"`, o = btoa(s);
    return `${this.protocol}://spark-api.xf-yun.com/${this.version}/chat?authorization=${o}&date=${encodeURIComponent(e)}&host=spark-api.xf-yun.com`;
  }
}
class Mc {
  static create(e, t) {
    let r = this.models[e];
    return r || (e === "xinghuo" && (r = new mx(t)), r && (this.models[e] = r), r);
  }
}
j(Mc, "models", {});
const bx = [
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M4 18.9997H20V13.9997H22V19.9997C22 20.552 21.5523 20.9997 21 20.9997H3C2.44772 20.9997 2 20.552 2 19.9997V13.9997H4V18.9997ZM16.1716 6.9997L12.2218 3.04996L13.636 1.63574L20 7.9997L13.636 14.3637L12.2218 12.9495L16.1716 8.9997H5V6.9997H16.1716Z"></path></svg>',
    name: "AI 续写",
    prompt: "请帮我继续扩展一些这段话的内容",
    text: "focusBefore",
    model: "xinghuo"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M15 5.25C16.7949 5.25 18.25 3.79493 18.25 2H19.75C19.75 3.79493 21.2051 5.25 23 5.25V6.75C21.2051 6.75 19.75 8.20507 19.75 10H18.25C18.25 8.20507 16.7949 6.75 15 6.75V5.25ZM4 7C4 5.89543 4.89543 5 6 5H13V3H6C3.79086 3 2 4.79086 2 7V17C2 19.2091 3.79086 21 6 21H18C20.2091 21 22 19.2091 22 17V12H20V17C20 18.1046 19.1046 19 18 19H6C4.89543 19 4 18.1046 4 17V7Z"></path></svg>',
    name: "AI 优化",
    prompt: "请帮我优化一下这段文字的内容，并返回结果",
    text: "selected",
    model: "xinghuo"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M17.934 3.0359L19.666 4.0359L18.531 6H21V8H19V12H21V14H19V21H17V14L13.9157 14.0004C13.5914 16.8623 12.3522 19.3936 10.5466 21.1933L8.98361 19.9233C10.5031 18.4847 11.5801 16.4008 11.9008 14.0009L10 14V12L12 11.999V8H10V6H12.467L11.334 4.0359L13.066 3.0359L14.777 6H16.221L17.934 3.0359ZM5 13.803L3 14.339V12.268L5 11.732V8H3V6H5V3H7V6H9V8H7V11.197L9 10.661V12.731L7 13.267V18.5C7 19.8807 5.88071 21 4.5 21H3V19H4.5C4.74546 19 4.94961 18.8231 4.99194 18.5899L5 18.5V13.803ZM17 8H14V12H17V8Z"></path></svg>',
    name: "AI 校对",
    prompt: "请帮我找出这段话的错别字，把错别字修改后，并返回结果，不要解释或其他多余的内容",
    text: "selected",
    model: "xinghuo"
  },
  {
    icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M5 15V17C5 18.0544 5.81588 18.9182 6.85074 18.9945L7 19H10V21H7C4.79086 21 3 19.2091 3 17V15H5ZM18 10L22.4 21H20.245L19.044 18H14.954L13.755 21H11.601L16 10H18ZM17 12.8852L15.753 16H18.245L17 12.8852ZM8 2V4H12V11H8V14H6V11H2V4H6V2H8ZM17 3C19.2091 3 21 4.79086 21 7V9H19V7C19 5.89543 18.1046 5 17 5H14V3H17ZM6 6H4V9H6V6ZM10 6H8V9H10V6Z"></path></svg>',
    name: "AI 翻译",
    prompt: "请帮我把这段内容翻译为英语，直接返回英语结果",
    text: "selected",
    model: "xinghuo"
  }
];
class yx extends Yr {
  constructor() {
    super(), this.dropDivHeight = "auto", this.dropDivWith = "94px", this.width = "36px", this.menuTextWidth = "20px";
  }
  onCreate(e, t) {
    var r;
    super.onCreate(e, t), this.menuData = ((r = t.ai) == null ? void 0 : r.menus) || bx;
  }
  renderTemplate() {
    this.template = `
         <div style="width: ${this.width};">
         <div id="tippy" class="menu-ai" id="text">
             <span> AI </span>
             <div style="width: 18px;height: 18px;display: inline-block" >
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 14L8 10H16L12 14Z"></path></svg>
             </div>
         </div>
         </div>
        `;
  }
  createMenuElement() {
    const e = document.createElement("div");
    e.style.height = this.dropDivHeight, e.style.width = this.dropDivWith, e.classList.add("aie-dropdown-container");
    for (let t = 0; t < this.menuData.length; t++) {
      const r = document.createElement("div");
      r.classList.add("aie-dropdown-item"), r.innerHTML = `
            <div class="text" style="display: flex;padding-left: 5px">${this.onDropdownItemRender(t)}</div>
            `, r.addEventListener("click", () => {
        this.onDropdownItemClick(t), this.tippyInstance.hide();
      }), e.appendChild(r);
    }
    return this.tippyEl = e, e;
  }
  onTransaction(e) {
  }
  onDropdownActive(e, t) {
    return !1;
  }
  getSelectedText(e) {
    if (e === "selected") {
      const { selection: t, doc: r } = this.editor.state;
      return r.textBetween(t.from, t.to);
    } else
      return this.editor.state.selection.$head.parent.textContent;
  }
  onDropdownItemClick(e) {
    const t = this.menuData[e], r = this.getSelectedText(t.text);
    if (r) {
      const i = Mc.create(t.model, this.options);
      i ? i == null || i.start(r, t.prompt, this.editor) : console.error("Ai model config error.");
    } else
      console.error("Can not get selected text.");
  }
  onDropdownItemRender(e) {
    return `<div style="width:18px;height: 18px;">${this.menuData[e].icon}</div><div style="margin-left: 10px">${this.menuData[e].name}</div>`;
  }
  onMenuTextRender(e) {
    return this.menuData[e].icon;
  }
}
class vx extends me {
  constructor() {
    super();
    const e = `
        <div>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M21 3C21.5523 3 22 3.44772 22 4V20C22 20.5523 21.5523 21 21 21H3C2.44772 21 2 20.5523 2 20V4C2 3.44772 2.44772 3 3 3H21ZM20 5H4V19H20V5ZM18 15V17H6V15H18Z"></path></svg>
        </div>
        `;
    this.template = e, this.registerClickListener();
  }
  // @ts-ignore
  onClick(e) {
    var t;
    (t = this.editor) != null && t.isActive("container") ? e.unsetContainer() : e.setContainer("warning"), e.focus();
  }
}
window.customElements.define("aie-undo", gw);
window.customElements.define("aie-redo", mw);
window.customElements.define("aie-brush", rx);
window.customElements.define("aie-container", vx);
window.customElements.define("aie-eraser", ZE);
window.customElements.define("aie-heading", bE);
window.customElements.define("aie-font-family", vE);
window.customElements.define("aie-font-size", kE);
window.customElements.define("aie-bold", EE);
window.customElements.define("aie-italic", xE);
window.customElements.define("aie-underline", CE);
window.customElements.define("aie-strike", SE);
window.customElements.define("aie-link", $E);
window.customElements.define("aie-code", WE);
window.customElements.define("aie-subscript", _E);
window.customElements.define("aie-superscript", ME);
window.customElements.define("aie-highlight", NE);
window.customElements.define("aie-font-color", OE);
window.customElements.define("aie-divider", LE);
window.customElements.define("aie-bullet-list", RE);
window.customElements.define("aie-ordered-list", DE);
window.customElements.define("aie-indent-decrease", IE);
window.customElements.define("aie-indent-increase", BE);
window.customElements.define("aie-align", PE);
window.customElements.define("aie-todo", FE);
window.customElements.define("aie-line-height", VE);
window.customElements.define("aie-break", YE);
window.customElements.define("aie-quote", qE);
window.customElements.define("aie-image", UE);
window.customElements.define("aie-video", KE);
window.customElements.define("aie-code-block", GE);
window.customElements.define("aie-hr", jE);
window.customElements.define("aie-table", JE);
window.customElements.define("aie-attachment", XE);
window.customElements.define("aie-fullscreen", QE);
window.customElements.define("aie-printer", ex);
window.customElements.define("aie-emoji", nx);
window.customElements.define("aie-ai", yx);
const wx = [
  "undo",
  "redo",
  "brush",
  "eraser",
  "divider",
  "heading",
  "font-family",
  "font-size",
  "divider",
  "bold",
  "italic",
  "underline",
  "strike",
  "link",
  "code",
  "subscript",
  "superscript",
  "hr",
  "todo",
  "emoji",
  "divider",
  "highlight",
  "font-color",
  "divider",
  "align",
  "line-height",
  "divider",
  "bullet-list",
  "ordered-list",
  "indent-decrease",
  "indent-increase",
  "break",
  "divider",
  "image",
  "video",
  "attachment",
  "quote",
  "container",
  "code-block",
  "table",
  "divider",
  "printer",
  "fullscreen",
  "ai"
];
class kx extends HTMLElement {
  constructor() {
    super();
    // template:string;
    j(this, "menuButtons", []);
  }
  connectedCallback() {
    const t = document.createElement("div");
    for (let r of this.menuButtons)
      t.appendChild(r);
    t.style.display = "flex", t.style.flexWrap = "wrap", this.appendChild(t);
  }
  onCreate(t, r) {
    let i = r.toolbarKeys || wx;
    for (let s of i)
      if (s) {
        s = s.trim(), s === "|" && (s = "divider");
        try {
          const o = document.createElement("aie-" + s);
          if (o.classList.add("aie-menu-item"), o.onCreate(t, r), s !== "divider") {
            const a = ae(s);
            a && Je(o, {
              appendTo: () => t.editor.view.dom.closest(".aie-container"),
              content: a,
              theme: "aietip",
              arrow: !0
              // trigger:"click",
              // interactive:true,
            });
          }
          this.menuButtons.push(o);
        } catch {
          console.error("Can not create toolbar by key: " + s);
        }
      }
  }
  onTransaction(t) {
    for (let r of this.menuButtons)
      r.onTransaction(t);
  }
}
class Ex extends HTMLElement {
  constructor() {
    super();
    j(this, "count", 0);
    let t, r, i = 300, s = 300, o, a, l;
    const c = (d) => {
      d.preventDefault(), document.removeEventListener("mouseup", c), document.removeEventListener("mousemove", u);
    }, u = (d) => {
      const f = d.clientX - t, p = d.clientY - r;
      if (f == 0 && p == 0)
        return;
      let h = o + f, g = a + p;
      h < i && (h = i), g < s && (g = s), l.style.width = `${h}px`, l.style.height = `${g}px`;
    };
    this.addEventListener("mousedown", (d) => {
      var p;
      d.target.closest("svg") && (d.preventDefault(), document.addEventListener("mouseup", c), document.addEventListener("mousemove", u), l = (p = d.target.closest(".aie-container")) == null ? void 0 : p.parentElement, o = l.clientWidth, a = l.clientHeight, t = d.clientX, r = d.clientY);
    }), this.addEventListener("mouseup", c);
  }
  updateCharacters() {
    this.innerHTML = `
        <div style="display: flex"> 
            <span> Powered by AiEditor, Characters: ${this.count} </span>
            <div style="width: 20px;height: 20px;overflow: hidden">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 16L6 10H18L12 16Z"></path></svg>
            </div>
        </div>
        `;
  }
  onCreate(t, r) {
    this.count = t.editor.storage.characterCount.characters(), this.updateCharacters();
  }
  onTransaction(t) {
    const r = t.editor.storage.characterCount.characters();
    r != this.count && (this.count = r, this.updateCharacters());
  }
}
const xx = /^\s*>\s$/, Cx = le.create({
  name: "blockquote",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  group: "block",
  defining: !0,
  parseHTML() {
    return [
      { tag: "blockquote" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["blockquote", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setBlockquote: () => ({ commands: n }) => n.wrapIn(this.name),
      toggleBlockquote: () => ({ commands: n }) => n.toggleWrap(this.name),
      unsetBlockquote: () => ({ commands: n }) => n.lift(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-b": () => this.editor.commands.toggleBlockquote()
    };
  },
  addInputRules() {
    return [
      or({
        find: xx,
        type: this.type
      })
    ];
  }
}), Sx = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/, _x = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g, Mx = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/, Ax = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/g, Tx = Re.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (n) => n.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight",
        getAttrs: (n) => /^(bold(er)?|[5-9]\d{2,})$/.test(n) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["strong", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setBold: () => ({ commands: n }) => n.setMark(this.name),
      toggleBold: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetBold: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      sr({
        find: Sx,
        type: this.type
      }),
      sr({
        find: Mx,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ln({
        find: _x,
        type: this.type
      }),
      Ln({
        find: Ax,
        type: this.type
      })
    ];
  }
}), Nx = le.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", pe(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), Kd = Re.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (n) => n.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: n, commands: e }) => {
        const t = Zi(n, this.type);
        return Object.entries(t).some(([, i]) => !!i) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), Wd = /^\s*([-+*])\s$/, Ox = le.create({
  name: "bulletList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      { tag: "ul" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["ul", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleBulletList: () => ({ commands: n, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(Nx.name, this.editor.getAttributes(Kd.name)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-8": () => this.editor.commands.toggleBulletList()
    };
  },
  addInputRules() {
    let n = or({
      find: Wd,
      type: this.type
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = or({
      find: Wd,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: () => this.editor.getAttributes(Kd.name),
      editor: this.editor
    })), [
      n
    ];
  }
}), Lx = /(?:^|\s)((?:`)((?:[^`]+))(?:`))$/, Rx = /(?:^|\s)((?:`)((?:[^`]+))(?:`))/g, Dx = Re.create({
  name: "code",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  excludes: "_",
  code: !0,
  exitable: !0,
  parseHTML() {
    return [
      { tag: "code" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["code", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setCode: () => ({ commands: n }) => n.setMark(this.name),
      toggleCode: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetCode: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-e": () => this.editor.commands.toggleCode()
    };
  },
  addInputRules() {
    return [
      sr({
        find: Lx,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ln({
        find: Rx,
        type: this.type
      })
    ];
  }
}), Ix = /^```([a-z]+)?[\s\n]$/, Bx = /^~~~([a-z]+)?[\s\n]$/, Pg = le.create({
  name: "codeBlock",
  addOptions() {
    return {
      languageClassPrefix: "language-",
      exitOnTripleEnter: !0,
      exitOnArrowDown: !0,
      HTMLAttributes: {}
    };
  },
  content: "text*",
  marks: "",
  group: "block",
  code: !0,
  defining: !0,
  addAttributes() {
    return {
      language: {
        default: null,
        parseHTML: (n) => {
          var e;
          const { languageClassPrefix: t } = this.options, s = [...((e = n.firstElementChild) === null || e === void 0 ? void 0 : e.classList) || []].filter((o) => o.startsWith(t)).map((o) => o.replace(t, ""))[0];
          return s || null;
        },
        rendered: !1
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "pre",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [
      "pre",
      pe(this.options.HTMLAttributes, e),
      [
        "code",
        {
          class: n.attrs.language ? this.options.languageClassPrefix + n.attrs.language : null
        },
        0
      ]
    ];
  },
  addCommands() {
    return {
      setCodeBlock: (n) => ({ commands: e }) => e.setNode(this.name, n),
      toggleCodeBlock: (n) => ({ commands: e }) => e.toggleNode(this.name, "paragraph", n)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-c": () => this.editor.commands.toggleCodeBlock(),
      // remove code block when at start of document or code block is empty
      Backspace: () => {
        const { empty: n, $anchor: e } = this.editor.state.selection, t = e.pos === 1;
        return !n || e.parent.type.name !== this.name ? !1 : t || !e.parent.textContent.length ? this.editor.commands.clearNodes() : !1;
      },
      // exit node on triple enter
      Enter: ({ editor: n }) => {
        if (!this.options.exitOnTripleEnter)
          return !1;
        const { state: e } = n, { selection: t } = e, { $from: r, empty: i } = t;
        if (!i || r.parent.type !== this.type)
          return !1;
        const s = r.parentOffset === r.parent.nodeSize - 2, o = r.parent.textContent.endsWith(`

`);
        return !s || !o ? !1 : n.chain().command(({ tr: a }) => (a.delete(r.pos - 2, r.pos), !0)).exitCode().run();
      },
      // exit node on arrow down
      ArrowDown: ({ editor: n }) => {
        if (!this.options.exitOnArrowDown)
          return !1;
        const { state: e } = n, { selection: t, doc: r } = e, { $from: i, empty: s } = t;
        if (!s || i.parent.type !== this.type || !(i.parentOffset === i.parent.nodeSize - 2))
          return !1;
        const a = i.after();
        return a === void 0 || r.nodeAt(a) ? !1 : n.commands.exitCode();
      }
    };
  },
  addInputRules() {
    return [
      Sl({
        find: Ix,
        type: this.type,
        getAttributes: (n) => ({
          language: n[1]
        })
      }),
      Sl({
        find: Bx,
        type: this.type,
        getAttributes: (n) => ({
          language: n[1]
        })
      })
    ];
  },
  addProseMirrorPlugins() {
    return [
      // this plugin creates a code block for pasted content from VS Code
      // we can also detect the copied code language
      new Se({
        key: new Me("codeBlockVSCodeHandler"),
        props: {
          handlePaste: (n, e) => {
            if (!e.clipboardData || this.editor.isActive(this.type.name))
              return !1;
            const t = e.clipboardData.getData("text/plain"), r = e.clipboardData.getData("vscode-editor-data"), i = r ? JSON.parse(r) : void 0, s = i == null ? void 0 : i.mode;
            if (!t || !s)
              return !1;
            const { tr: o } = n.state;
            return o.replaceSelectionWith(this.type.create({ language: s })), o.setSelection(X.near(o.doc.resolve(Math.max(0, o.selection.from - 2)))), o.insertText(t.replace(/\r\n?/g, `
`)), o.setMeta("paste", !0), n.dispatch(o), !0;
          }
        }
      })
    ];
  }
}), Hx = le.create({
  name: "doc",
  topNode: !0,
  content: "block+"
});
function Px(n = {}) {
  return new Se({
    view(e) {
      return new $x(e, n);
    }
  });
}
class $x {
  constructor(e, t) {
    var r;
    this.editorView = e, this.cursorPos = null, this.element = null, this.timeout = -1, this.width = (r = t.width) !== null && r !== void 0 ? r : 1, this.color = t.color === !1 ? void 0 : t.color || "black", this.class = t.class, this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((i) => {
      let s = (o) => {
        this[i](o);
      };
      return e.dom.addEventListener(i, s), { name: i, handler: s };
    });
  }
  destroy() {
    this.handlers.forEach(({ name: e, handler: t }) => this.editorView.dom.removeEventListener(e, t));
  }
  update(e, t) {
    this.cursorPos != null && t.doc != e.state.doc && (this.cursorPos > e.state.doc.content.size ? this.setCursor(null) : this.updateOverlay());
  }
  setCursor(e) {
    e != this.cursorPos && (this.cursorPos = e, e == null ? (this.element.parentNode.removeChild(this.element), this.element = null) : this.updateOverlay());
  }
  updateOverlay() {
    let e = this.editorView.state.doc.resolve(this.cursorPos), t = !e.parent.inlineContent, r;
    if (t) {
      let a = e.nodeBefore, l = e.nodeAfter;
      if (a || l) {
        let c = this.editorView.nodeDOM(this.cursorPos - (a ? a.nodeSize : 0));
        if (c) {
          let u = c.getBoundingClientRect(), d = a ? u.bottom : u.top;
          a && l && (d = (d + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2), r = { left: u.left, right: u.right, top: d - this.width / 2, bottom: d + this.width / 2 };
        }
      }
    }
    if (!r) {
      let a = this.editorView.coordsAtPos(this.cursorPos);
      r = { left: a.left - this.width / 2, right: a.left + this.width / 2, top: a.top, bottom: a.bottom };
    }
    let i = this.editorView.dom.offsetParent;
    this.element || (this.element = i.appendChild(document.createElement("div")), this.class && (this.element.className = this.class), this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;", this.color && (this.element.style.backgroundColor = this.color)), this.element.classList.toggle("prosemirror-dropcursor-block", t), this.element.classList.toggle("prosemirror-dropcursor-inline", !t);
    let s, o;
    if (!i || i == document.body && getComputedStyle(i).position == "static")
      s = -pageXOffset, o = -pageYOffset;
    else {
      let a = i.getBoundingClientRect();
      s = a.left - i.scrollLeft, o = a.top - i.scrollTop;
    }
    this.element.style.left = r.left - s + "px", this.element.style.top = r.top - o + "px", this.element.style.width = r.right - r.left + "px", this.element.style.height = r.bottom - r.top + "px";
  }
  scheduleRemoval(e) {
    clearTimeout(this.timeout), this.timeout = setTimeout(() => this.setCursor(null), e);
  }
  dragover(e) {
    if (!this.editorView.editable)
      return;
    let t = this.editorView.posAtCoords({ left: e.clientX, top: e.clientY }), r = t && t.inside >= 0 && this.editorView.state.doc.nodeAt(t.inside), i = r && r.type.spec.disableDropCursor, s = typeof i == "function" ? i(this.editorView, t, e) : i;
    if (t && !s) {
      let o = t.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let a = ch(this.editorView.state.doc, o, this.editorView.dragging.slice);
        a != null && (o = a);
      }
      this.setCursor(o), this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(e) {
    (e.target == this.editorView.dom || !this.editorView.dom.contains(e.relatedTarget)) && this.setCursor(null);
  }
}
const Fx = Ee.create({
  name: "dropCursor",
  addOptions() {
    return {
      color: "currentColor",
      width: 1,
      class: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      Px(this.options)
    ];
  }
});
class Le extends ne {
  /**
  Create a gap cursor.
  */
  constructor(e) {
    super(e, e);
  }
  map(e, t) {
    let r = e.resolve(t.map(this.head));
    return Le.valid(r) ? new Le(r) : ne.near(r);
  }
  content() {
    return F.empty;
  }
  eq(e) {
    return e instanceof Le && e.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new Le(e.resolve(t.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new Ac(this.anchor);
  }
  /**
  @internal
  */
  static valid(e) {
    let t = e.parent;
    if (t.isTextblock || !zx(e) || !Vx(e))
      return !1;
    let r = t.type.spec.allowGapCursor;
    if (r != null)
      return r;
    let i = t.contentMatchAt(e.index()).defaultType;
    return i && i.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom(e, t, r = !1) {
    e:
      for (; ; ) {
        if (!r && Le.valid(e))
          return e;
        let i = e.pos, s = null;
        for (let o = e.depth; ; o--) {
          let a = e.node(o);
          if (t > 0 ? e.indexAfter(o) < a.childCount : e.index(o) > 0) {
            s = a.child(t > 0 ? e.indexAfter(o) : e.index(o) - 1);
            break;
          } else if (o == 0)
            return null;
          i += t;
          let l = e.doc.resolve(i);
          if (Le.valid(l))
            return l;
        }
        for (; ; ) {
          let o = t > 0 ? s.firstChild : s.lastChild;
          if (!o) {
            if (s.isAtom && !s.isText && !Q.isSelectable(s)) {
              e = e.doc.resolve(i + s.nodeSize * t), r = !1;
              continue e;
            }
            break;
          }
          s = o, i += t;
          let a = e.doc.resolve(i);
          if (Le.valid(a))
            return a;
        }
        return null;
      }
  }
}
Le.prototype.visible = !1;
Le.findFrom = Le.findGapCursorFrom;
ne.jsonID("gapcursor", Le);
class Ac {
  constructor(e) {
    this.pos = e;
  }
  map(e) {
    return new Ac(e.map(this.pos));
  }
  resolve(e) {
    let t = e.resolve(this.pos);
    return Le.valid(t) ? new Le(t) : ne.near(t);
  }
}
function zx(n) {
  for (let e = n.depth; e >= 0; e--) {
    let t = n.index(e), r = n.node(e);
    if (t == 0) {
      if (r.type.spec.isolating)
        return !0;
      continue;
    }
    for (let i = r.child(t - 1); ; i = i.lastChild) {
      if (i.childCount == 0 && !i.inlineContent || i.isAtom || i.type.spec.isolating)
        return !0;
      if (i.inlineContent)
        return !1;
    }
  }
  return !0;
}
function Vx(n) {
  for (let e = n.depth; e >= 0; e--) {
    let t = n.indexAfter(e), r = n.node(e);
    if (t == r.childCount) {
      if (r.type.spec.isolating)
        return !0;
      continue;
    }
    for (let i = r.child(t); ; i = i.firstChild) {
      if (i.childCount == 0 && !i.inlineContent || i.isAtom || i.type.spec.isolating)
        return !0;
      if (i.inlineContent)
        return !1;
    }
  }
  return !0;
}
function qx() {
  return new Se({
    props: {
      decorations: Gx,
      createSelectionBetween(n, e, t) {
        return e.pos == t.pos && Le.valid(t) ? new Le(t) : null;
      },
      handleClick: Kx,
      handleKeyDown: Ux,
      handleDOMEvents: { beforeinput: Wx }
    }
  });
}
const Ux = lc({
  ArrowLeft: ls("horiz", -1),
  ArrowRight: ls("horiz", 1),
  ArrowUp: ls("vert", -1),
  ArrowDown: ls("vert", 1)
});
function ls(n, e) {
  const t = n == "vert" ? e > 0 ? "down" : "up" : e > 0 ? "right" : "left";
  return function(r, i, s) {
    let o = r.selection, a = e > 0 ? o.$to : o.$from, l = o.empty;
    if (o instanceof X) {
      if (!s.endOfTextblock(t) || a.depth == 0)
        return !1;
      l = !1, a = r.doc.resolve(e > 0 ? a.after() : a.before());
    }
    let c = Le.findGapCursorFrom(a, e, l);
    return c ? (i && i(r.tr.setSelection(new Le(c))), !0) : !1;
  };
}
function Kx(n, e, t) {
  if (!n || !n.editable)
    return !1;
  let r = n.state.doc.resolve(e);
  if (!Le.valid(r))
    return !1;
  let i = n.posAtCoords({ left: t.clientX, top: t.clientY });
  return i && i.inside > -1 && Q.isSelectable(n.state.doc.nodeAt(i.inside)) ? !1 : (n.dispatch(n.state.tr.setSelection(new Le(r))), !0);
}
function Wx(n, e) {
  if (e.inputType != "insertCompositionText" || !(n.state.selection instanceof Le))
    return !1;
  let { $from: t } = n.state.selection, r = t.parent.contentMatchAt(t.index()).findWrapping(n.state.schema.nodes.text);
  if (!r)
    return !1;
  let i = R.empty;
  for (let o = r.length - 1; o >= 0; o--)
    i = R.from(r[o].createAndFill(null, i));
  let s = n.state.tr.replace(t.pos, t.pos, new F(i, 0, 0));
  return s.setSelection(X.near(s.doc.resolve(t.pos + 1))), n.dispatch(s), !1;
}
function Gx(n) {
  if (!(n.selection instanceof Le))
    return null;
  let e = document.createElement("div");
  return e.className = "ProseMirror-gapcursor", ke.create(n.doc, [Be.widget(n.selection.head, e, { key: "gapcursor" })]);
}
const Zx = Ee.create({
  name: "gapCursor",
  addProseMirrorPlugins() {
    return [
      qx()
    ];
  },
  extendNodeSchema(n) {
    var e;
    const t = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      allowGapCursor: (e = ie(K(n, "allowGapCursor", t))) !== null && e !== void 0 ? e : null
    };
  }
}), jx = le.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: !0,
      HTMLAttributes: {}
    };
  },
  inline: !0,
  group: "inline",
  selectable: !1,
  parseHTML() {
    return [
      { tag: "br" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["br", pe(this.options.HTMLAttributes, n)];
  },
  renderText() {
    return `
`;
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: n, chain: e, state: t, editor: r }) => n.first([
        () => n.exitCode(),
        () => n.command(() => {
          const { selection: i, storedMarks: s } = t;
          if (i.$from.parent.type.spec.isolating)
            return !1;
          const { keepMarks: o } = this.options, { splittableMarks: a } = r.extensionManager, l = s || i.$to.parentOffset && i.$from.marks();
          return e().insertContent({ type: this.name }).command(({ tr: c, dispatch: u }) => {
            if (u && l && o) {
              const d = l.filter((f) => a.includes(f.type.name));
              c.ensureMarks(d);
            }
            return !0;
          }).run();
        })
      ])
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
}), Jx = le.create({
  name: "heading",
  addOptions() {
    return {
      levels: [1, 2, 3, 4, 5, 6],
      HTMLAttributes: {}
    };
  },
  content: "inline*",
  group: "block",
  defining: !0,
  addAttributes() {
    return {
      level: {
        default: 1,
        rendered: !1
      }
    };
  },
  parseHTML() {
    return this.options.levels.map((n) => ({
      tag: `h${n}`,
      attrs: { level: n }
    }));
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [`h${this.options.levels.includes(n.attrs.level) ? n.attrs.level : this.options.levels[0]}`, pe(this.options.HTMLAttributes, e), 0];
  },
  addCommands() {
    return {
      setHeading: (n) => ({ commands: e }) => this.options.levels.includes(n.level) ? e.setNode(this.name, n) : !1,
      toggleHeading: (n) => ({ commands: e }) => this.options.levels.includes(n.level) ? e.toggleNode(this.name, "paragraph", n) : !1
    };
  },
  addKeyboardShortcuts() {
    return this.options.levels.reduce((n, e) => ({
      ...n,
      [`Mod-Alt-${e}`]: () => this.editor.commands.toggleHeading({ level: e })
    }), {});
  },
  addInputRules() {
    return this.options.levels.map((n) => Sl({
      find: new RegExp(`^(#{1,${n}})\\s$`),
      type: this.type,
      getAttributes: {
        level: n
      }
    }));
  }
});
var eo = 200, $e = function() {
};
$e.prototype.append = function(e) {
  return e.length ? (e = $e.from(e), !this.length && e || e.length < eo && this.leafAppend(e) || this.length < eo && e.leafPrepend(this) || this.appendInner(e)) : this;
};
$e.prototype.prepend = function(e) {
  return e.length ? $e.from(e).append(this) : this;
};
$e.prototype.appendInner = function(e) {
  return new Yx(this, e);
};
$e.prototype.slice = function(e, t) {
  return e === void 0 && (e = 0), t === void 0 && (t = this.length), e >= t ? $e.empty : this.sliceInner(Math.max(0, e), Math.min(this.length, t));
};
$e.prototype.get = function(e) {
  if (!(e < 0 || e >= this.length))
    return this.getInner(e);
};
$e.prototype.forEach = function(e, t, r) {
  t === void 0 && (t = 0), r === void 0 && (r = this.length), t <= r ? this.forEachInner(e, t, r, 0) : this.forEachInvertedInner(e, t, r, 0);
};
$e.prototype.map = function(e, t, r) {
  t === void 0 && (t = 0), r === void 0 && (r = this.length);
  var i = [];
  return this.forEach(function(s, o) {
    return i.push(e(s, o));
  }, t, r), i;
};
$e.from = function(e) {
  return e instanceof $e ? e : e && e.length ? new $g(e) : $e.empty;
};
var $g = /* @__PURE__ */ function(n) {
  function e(r) {
    n.call(this), this.values = r;
  }
  n && (e.__proto__ = n), e.prototype = Object.create(n && n.prototype), e.prototype.constructor = e;
  var t = { length: { configurable: !0 }, depth: { configurable: !0 } };
  return e.prototype.flatten = function() {
    return this.values;
  }, e.prototype.sliceInner = function(i, s) {
    return i == 0 && s == this.length ? this : new e(this.values.slice(i, s));
  }, e.prototype.getInner = function(i) {
    return this.values[i];
  }, e.prototype.forEachInner = function(i, s, o, a) {
    for (var l = s; l < o; l++)
      if (i(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.forEachInvertedInner = function(i, s, o, a) {
    for (var l = s - 1; l >= o; l--)
      if (i(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.leafAppend = function(i) {
    if (this.length + i.length <= eo)
      return new e(this.values.concat(i.flatten()));
  }, e.prototype.leafPrepend = function(i) {
    if (this.length + i.length <= eo)
      return new e(i.flatten().concat(this.values));
  }, t.length.get = function() {
    return this.values.length;
  }, t.depth.get = function() {
    return 0;
  }, Object.defineProperties(e.prototype, t), e;
}($e);
$e.empty = new $g([]);
var Yx = /* @__PURE__ */ function(n) {
  function e(t, r) {
    n.call(this), this.left = t, this.right = r, this.length = t.length + r.length, this.depth = Math.max(t.depth, r.depth) + 1;
  }
  return n && (e.__proto__ = n), e.prototype = Object.create(n && n.prototype), e.prototype.constructor = e, e.prototype.flatten = function() {
    return this.left.flatten().concat(this.right.flatten());
  }, e.prototype.getInner = function(r) {
    return r < this.left.length ? this.left.get(r) : this.right.get(r - this.left.length);
  }, e.prototype.forEachInner = function(r, i, s, o) {
    var a = this.left.length;
    if (i < a && this.left.forEachInner(r, i, Math.min(s, a), o) === !1 || s > a && this.right.forEachInner(r, Math.max(i - a, 0), Math.min(this.length, s) - a, o + a) === !1)
      return !1;
  }, e.prototype.forEachInvertedInner = function(r, i, s, o) {
    var a = this.left.length;
    if (i > a && this.right.forEachInvertedInner(r, i - a, Math.max(s, a) - a, o + a) === !1 || s < a && this.left.forEachInvertedInner(r, Math.min(i, a), s, o) === !1)
      return !1;
  }, e.prototype.sliceInner = function(r, i) {
    if (r == 0 && i == this.length)
      return this;
    var s = this.left.length;
    return i <= s ? this.left.slice(r, i) : r >= s ? this.right.slice(r - s, i - s) : this.left.slice(r, s).append(this.right.slice(0, i - s));
  }, e.prototype.leafAppend = function(r) {
    var i = this.right.leafAppend(r);
    if (i)
      return new e(this.left, i);
  }, e.prototype.leafPrepend = function(r) {
    var i = this.left.leafPrepend(r);
    if (i)
      return new e(i, this.right);
  }, e.prototype.appendInner = function(r) {
    return this.left.depth >= Math.max(this.right.depth, r.depth) + 1 ? new e(this.left, new e(this.right, r)) : new e(this, r);
  }, e;
}($e);
const Xx = 500;
class Lt {
  constructor(e, t) {
    this.items = e, this.eventCount = t;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(e, t) {
    if (this.eventCount == 0)
      return null;
    let r = this.items.length;
    for (; ; r--)
      if (this.items.get(r - 1).selection) {
        --r;
        break;
      }
    let i, s;
    t && (i = this.remapping(r, this.items.length), s = i.maps.length);
    let o = e.tr, a, l, c = [], u = [];
    return this.items.forEach((d, f) => {
      if (!d.step) {
        i || (i = this.remapping(r, f + 1), s = i.maps.length), s--, u.push(d);
        return;
      }
      if (i) {
        u.push(new Ht(d.map));
        let p = d.step.map(i.slice(s)), h;
        p && o.maybeStep(p).doc && (h = o.mapping.maps[o.mapping.maps.length - 1], c.push(new Ht(h, void 0, void 0, c.length + u.length))), s--, h && i.appendMap(h, s);
      } else
        o.maybeStep(d.step);
      if (d.selection)
        return a = i ? d.selection.map(i.slice(s)) : d.selection, l = new Lt(this.items.slice(0, r).append(u.reverse().concat(c)), this.eventCount - 1), !1;
    }, this.items.length, 0), { remaining: l, transform: o, selection: a };
  }
  // Create a new branch with the given transform added.
  addTransform(e, t, r, i) {
    let s = [], o = this.eventCount, a = this.items, l = !i && a.length ? a.get(a.length - 1) : null;
    for (let u = 0; u < e.steps.length; u++) {
      let d = e.steps[u].invert(e.docs[u]), f = new Ht(e.mapping.maps[u], d, t), p;
      (p = l && l.merge(f)) && (f = p, u ? s.pop() : a = a.slice(0, a.length - 1)), s.push(f), t && (o++, t = void 0), i || (l = f);
    }
    let c = o - r.depth;
    return c > eC && (a = Qx(a, c), o -= c), new Lt(a.append(s), o);
  }
  remapping(e, t) {
    let r = new Dr();
    return this.items.forEach((i, s) => {
      let o = i.mirrorOffset != null && s - i.mirrorOffset >= e ? r.maps.length - i.mirrorOffset : void 0;
      r.appendMap(i.map, o);
    }, e, t), r;
  }
  addMaps(e) {
    return this.eventCount == 0 ? this : new Lt(this.items.append(e.map((t) => new Ht(t))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(e, t) {
    if (!this.eventCount)
      return this;
    let r = [], i = Math.max(0, this.items.length - t), s = e.mapping, o = e.steps.length, a = this.eventCount;
    this.items.forEach((f) => {
      f.selection && a--;
    }, i);
    let l = t;
    this.items.forEach((f) => {
      let p = s.getMirror(--l);
      if (p == null)
        return;
      o = Math.min(o, p);
      let h = s.maps[p];
      if (f.step) {
        let g = e.steps[p].invert(e.docs[p]), m = f.selection && f.selection.map(s.slice(l + 1, p));
        m && a++, r.push(new Ht(h, g, m));
      } else
        r.push(new Ht(h));
    }, i);
    let c = [];
    for (let f = t; f < o; f++)
      c.push(new Ht(s.maps[f]));
    let u = this.items.slice(0, i).append(c).append(r), d = new Lt(u, a);
    return d.emptyItemCount() > Xx && (d = d.compress(this.items.length - r.length)), d;
  }
  emptyItemCount() {
    let e = 0;
    return this.items.forEach((t) => {
      t.step || e++;
    }), e;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(e = this.items.length) {
    let t = this.remapping(0, e), r = t.maps.length, i = [], s = 0;
    return this.items.forEach((o, a) => {
      if (a >= e)
        i.push(o), o.selection && s++;
      else if (o.step) {
        let l = o.step.map(t.slice(r)), c = l && l.getMap();
        if (r--, c && t.appendMap(c, r), l) {
          let u = o.selection && o.selection.map(t.slice(r));
          u && s++;
          let d = new Ht(c.invert(), l, u), f, p = i.length - 1;
          (f = i.length && i[p].merge(d)) ? i[p] = f : i.push(d);
        }
      } else
        o.map && r--;
    }, this.items.length, 0), new Lt($e.from(i.reverse()), s);
  }
}
Lt.empty = new Lt($e.empty, 0);
function Qx(n, e) {
  let t;
  return n.forEach((r, i) => {
    if (r.selection && e-- == 0)
      return t = i, !1;
  }), n.slice(t);
}
class Ht {
  constructor(e, t, r, i) {
    this.map = e, this.step = t, this.selection = r, this.mirrorOffset = i;
  }
  merge(e) {
    if (this.step && e.step && !e.selection) {
      let t = e.step.merge(this.step);
      if (t)
        return new Ht(t.getMap().invert(), t, this.selection);
    }
  }
}
class hn {
  constructor(e, t, r, i, s) {
    this.done = e, this.undone = t, this.prevRanges = r, this.prevTime = i, this.prevComposition = s;
  }
}
const eC = 20;
function tC(n, e, t, r) {
  let i = t.getMeta(Tn), s;
  if (i)
    return i.historyState;
  t.getMeta(rC) && (n = new hn(n.done, n.undone, null, 0, -1));
  let o = t.getMeta("appendedTransaction");
  if (t.steps.length == 0)
    return n;
  if (o && o.getMeta(Tn))
    return o.getMeta(Tn).redo ? new hn(n.done.addTransform(t, void 0, r, Ts(e)), n.undone, Gd(t.mapping.maps[t.steps.length - 1]), n.prevTime, n.prevComposition) : new hn(n.done, n.undone.addTransform(t, void 0, r, Ts(e)), null, n.prevTime, n.prevComposition);
  if (t.getMeta("addToHistory") !== !1 && !(o && o.getMeta("addToHistory") === !1)) {
    let a = t.getMeta("composition"), l = n.prevTime == 0 || !o && n.prevComposition != a && (n.prevTime < (t.time || 0) - r.newGroupDelay || !nC(t, n.prevRanges)), c = o ? Oa(n.prevRanges, t.mapping) : Gd(t.mapping.maps[t.steps.length - 1]);
    return new hn(n.done.addTransform(t, l ? e.selection.getBookmark() : void 0, r, Ts(e)), Lt.empty, c, t.time, a ?? n.prevComposition);
  } else
    return (s = t.getMeta("rebased")) ? new hn(n.done.rebased(t, s), n.undone.rebased(t, s), Oa(n.prevRanges, t.mapping), n.prevTime, n.prevComposition) : new hn(n.done.addMaps(t.mapping.maps), n.undone.addMaps(t.mapping.maps), Oa(n.prevRanges, t.mapping), n.prevTime, n.prevComposition);
}
function nC(n, e) {
  if (!e)
    return !1;
  if (!n.docChanged)
    return !0;
  let t = !1;
  return n.mapping.maps[0].forEach((r, i) => {
    for (let s = 0; s < e.length; s += 2)
      r <= e[s + 1] && i >= e[s] && (t = !0);
  }), t;
}
function Gd(n) {
  let e = [];
  return n.forEach((t, r, i, s) => e.push(i, s)), e;
}
function Oa(n, e) {
  if (!n)
    return null;
  let t = [];
  for (let r = 0; r < n.length; r += 2) {
    let i = e.map(n[r], 1), s = e.map(n[r + 1], -1);
    i <= s && t.push(i, s);
  }
  return t;
}
function Fg(n, e, t, r) {
  let i = Ts(e), s = Tn.get(e).spec.config, o = (r ? n.undone : n.done).popEvent(e, i);
  if (!o)
    return;
  let a = o.selection.resolve(o.transform.doc), l = (r ? n.done : n.undone).addTransform(o.transform, e.selection.getBookmark(), s, i), c = new hn(r ? l : o.remaining, r ? o.remaining : l, null, 0, -1);
  t(o.transform.setSelection(a).setMeta(Tn, { redo: r, historyState: c }).scrollIntoView());
}
let La = !1, Zd = null;
function Ts(n) {
  let e = n.plugins;
  if (Zd != e) {
    La = !1, Zd = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].spec.historyPreserveItems) {
        La = !0;
        break;
      }
  }
  return La;
}
const Tn = new Me("history"), rC = new Me("closeHistory");
function iC(n = {}) {
  return n = {
    depth: n.depth || 100,
    newGroupDelay: n.newGroupDelay || 500
  }, new Se({
    key: Tn,
    state: {
      init() {
        return new hn(Lt.empty, Lt.empty, null, 0, -1);
      },
      apply(e, t, r) {
        return tC(t, r, e, n);
      }
    },
    config: n,
    props: {
      handleDOMEvents: {
        beforeinput(e, t) {
          let r = t.inputType, i = r == "historyUndo" ? zg : r == "historyRedo" ? Vg : null;
          return i ? (t.preventDefault(), i(e.state, e.dispatch)) : !1;
        }
      }
    }
  });
}
const zg = (n, e) => {
  let t = Tn.getState(n);
  return !t || t.done.eventCount == 0 ? !1 : (e && Fg(t, n, e, !1), !0);
}, Vg = (n, e) => {
  let t = Tn.getState(n);
  return !t || t.undone.eventCount == 0 ? !1 : (e && Fg(t, n, e, !0), !0);
}, sC = Ee.create({
  name: "history",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state: n, dispatch: e }) => zg(n, e),
      redo: () => ({ state: n, dispatch: e }) => Vg(n, e)
    };
  },
  addProseMirrorPlugins() {
    return [
      iC(this.options)
    ];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Mod-Z": () => this.editor.commands.undo(),
      "Mod-y": () => this.editor.commands.redo(),
      "Mod-Y": () => this.editor.commands.redo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      "Shift-Mod-Z": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
}), oC = le.create({
  name: "horizontalRule",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  parseHTML() {
    return [{ tag: "hr" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["hr", pe(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setHorizontalRule: () => ({ chain: n, state: e }) => {
        const { $to: t } = e.selection, r = n();
        return t.parentOffset === 0 ? r.insertContentAt(Math.max(t.pos - 2, 0), { type: this.name }) : r.insertContent({ type: this.name }), r.command(({ tr: i, dispatch: s }) => {
          var o;
          if (s) {
            const { $to: a } = i.selection, l = a.end();
            if (a.nodeAfter)
              a.nodeAfter.isTextblock ? i.setSelection(X.create(i.doc, a.pos + 1)) : a.nodeAfter.isBlock ? i.setSelection(Q.create(i.doc, a.pos)) : i.setSelection(X.create(i.doc, a.pos));
            else {
              const c = (o = a.parent.type.contentMatch.defaultType) === null || o === void 0 ? void 0 : o.create();
              c && (i.insert(l, c), i.setSelection(X.create(i.doc, l + 1)));
            }
            i.scrollIntoView();
          }
          return !0;
        }).run();
      }
    };
  },
  addInputRules() {
    return [
      bc({
        find: /^(?:---|—-|___\s|\*\*\*\s)$/,
        type: this.type
      })
    ];
  }
}), aC = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/, lC = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g, cC = /(?:^|\s)((?:_)((?:[^_]+))(?:_))$/, uC = /(?:^|\s)((?:_)((?:[^_]+))(?:_))/g, dC = Re.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (n) => n.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["em", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: n }) => n.setMark(this.name),
      toggleItalic: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetItalic: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      sr({
        find: aC,
        type: this.type
      }),
      sr({
        find: cC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ln({
        find: lC,
        type: this.type
      }),
      Ln({
        find: uC,
        type: this.type
      })
    ];
  }
}), fC = le.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", pe(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), pC = le.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", pe(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), jd = Re.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (n) => n.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: n, commands: e }) => {
        const t = Zi(n, this.type);
        return Object.entries(t).some(([, i]) => !!i) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), Jd = /^(\d+)\.\s$/, hC = le.create({
  name: "orderedList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  addAttributes() {
    return {
      start: {
        default: 1,
        parseHTML: (n) => n.hasAttribute("start") ? parseInt(n.getAttribute("start") || "", 10) : 1
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "ol"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { start: e, ...t } = n;
    return e === 1 ? ["ol", pe(this.options.HTMLAttributes, t), 0] : ["ol", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleOrderedList: () => ({ commands: n, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(pC.name, this.editor.getAttributes(jd.name)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-7": () => this.editor.commands.toggleOrderedList()
    };
  },
  addInputRules() {
    let n = or({
      find: Jd,
      type: this.type,
      getAttributes: (e) => ({ start: +e[1] }),
      joinPredicate: (e, t) => t.childCount + t.attrs.start === +e[1]
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = or({
      find: Jd,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: (e) => ({ start: +e[1], ...this.editor.getAttributes(jd.name) }),
      joinPredicate: (e, t) => t.childCount + t.attrs.start === +e[1],
      editor: this.editor
    })), [
      n
    ];
  }
}), gC = le.create({
  name: "paragraph",
  priority: 1e3,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      { tag: "p" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["p", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: n }) => n.setNode(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-0": () => this.editor.commands.setParagraph()
    };
  }
}), mC = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/, bC = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g, yC = Re.create({
  name: "strike",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "s"
      },
      {
        tag: "del"
      },
      {
        tag: "strike"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("line-through") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["s", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setStrike: () => ({ commands: n }) => n.setMark(this.name),
      toggleStrike: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetStrike: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    const n = {};
    return pc() ? n["Mod-Shift-s"] = () => this.editor.commands.toggleStrike() : n["Ctrl-Shift-s"] = () => this.editor.commands.toggleStrike(), n;
  },
  addInputRules() {
    return [
      sr({
        find: mC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ln({
        find: bC,
        type: this.type
      })
    ];
  }
}), vC = le.create({
  name: "text",
  group: "inline"
}), Yd = Ee.create({
  name: "starterKit",
  addExtensions() {
    var n, e, t, r, i, s, o, a, l, c, u, d, f, p, h, g, m, v;
    const y = [];
    return this.options.blockquote !== !1 && y.push(Cx.configure((n = this.options) === null || n === void 0 ? void 0 : n.blockquote)), this.options.bold !== !1 && y.push(Tx.configure((e = this.options) === null || e === void 0 ? void 0 : e.bold)), this.options.bulletList !== !1 && y.push(Ox.configure((t = this.options) === null || t === void 0 ? void 0 : t.bulletList)), this.options.code !== !1 && y.push(Dx.configure((r = this.options) === null || r === void 0 ? void 0 : r.code)), this.options.codeBlock !== !1 && y.push(Pg.configure((i = this.options) === null || i === void 0 ? void 0 : i.codeBlock)), this.options.document !== !1 && y.push(Hx.configure((s = this.options) === null || s === void 0 ? void 0 : s.document)), this.options.dropcursor !== !1 && y.push(Fx.configure((o = this.options) === null || o === void 0 ? void 0 : o.dropcursor)), this.options.gapcursor !== !1 && y.push(Zx.configure((a = this.options) === null || a === void 0 ? void 0 : a.gapcursor)), this.options.hardBreak !== !1 && y.push(jx.configure((l = this.options) === null || l === void 0 ? void 0 : l.hardBreak)), this.options.heading !== !1 && y.push(Jx.configure((c = this.options) === null || c === void 0 ? void 0 : c.heading)), this.options.history !== !1 && y.push(sC.configure((u = this.options) === null || u === void 0 ? void 0 : u.history)), this.options.horizontalRule !== !1 && y.push(oC.configure((d = this.options) === null || d === void 0 ? void 0 : d.horizontalRule)), this.options.italic !== !1 && y.push(dC.configure((f = this.options) === null || f === void 0 ? void 0 : f.italic)), this.options.listItem !== !1 && y.push(fC.configure((p = this.options) === null || p === void 0 ? void 0 : p.listItem)), this.options.orderedList !== !1 && y.push(hC.configure((h = this.options) === null || h === void 0 ? void 0 : h.orderedList)), this.options.paragraph !== !1 && y.push(gC.configure((g = this.options) === null || g === void 0 ? void 0 : g.paragraph)), this.options.strike !== !1 && y.push(yC.configure((m = this.options) === null || m === void 0 ? void 0 : m.strike)), this.options.text !== !1 && y.push(vC.configure((v = this.options) === null || v === void 0 ? void 0 : v.text)), y;
  }
}), wC = Re.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("underline") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["u", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: n }) => n.setMark(this.name),
      toggleUnderline: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetUnderline: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
}), kC = Re.create({
  name: "textStyle",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (n) => n.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: n, commands: e }) => {
        const t = Zi(n, this.type);
        return Object.entries(t).some(([, i]) => !!i) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), EC = Ee.create({
  name: "fontFamily",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          fontFamily: {
            default: null,
            parseHTML: (n) => {
              var e;
              return (e = n.style.fontFamily) === null || e === void 0 ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.fontFamily ? {
              style: `font-family: ${n.fontFamily}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setFontFamily: (n) => ({ chain: e }) => e().setMark("textStyle", { fontFamily: n }).run(),
      unsetFontFamily: () => ({ chain: n }) => n().setMark("textStyle", { fontFamily: null }).removeEmptyTextStyle().run()
    };
  }
}), qg = (n) => {
  const e = document.createElement("div");
  return e.classList.add("aie-loader-placeholder"), e.innerHTML = `
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 3C16.9706 3 21 7.02944 21 12H19C19 8.13401 15.866 5 12 5V3Z"></path></svg>
    `, Be.widget(n.pos, e, { id: n.id });
}, xC = (n) => {
  const e = document.createElement("div");
  return e.classList.add("aie-loader-placeholder"), e.style.height = "20px", e.style.display = "inline-block", e.innerHTML = `
    <svg style="width: 16px" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 3C16.9706 3 21 7.02944 21 12H19C19 8.13401 15.866 5 12 5V3Z"></path></svg>
   ${n.text}
    `, Be.widget(n.pos, e, { id: n.id });
}, CC = (n, e, t, r) => {
  const i = new FormData();
  return i.append(r, n), new Promise((s, o) => {
    fetch(e, {
      method: "post",
      headers: { Accept: "application/json", ...t },
      body: i
    }).then((a) => a.json()).then((a) => {
      s(a);
    }).catch((a) => {
      o(a);
    });
  });
}, SC = (n, e, t, r) => {
  let i = new FileReader();
  return new Promise((s, o) => {
    i.onload = () => s({ errorCode: 0, data: { src: i.result, href: n.name } }), i.onerror = () => o(i.error), setTimeout(() => i.readAsDataURL(n), 5e3 * Math.random());
  });
}, Tc = (n) => n ? CC : SC, Xd = new Me("aie-attachment-plugin"), oi = "attachment_action", _C = Ee.create({
  name: "attachment",
  addOptions() {
    return {
      uploadUrl: "",
      uploadHeaders: {},
      HTMLAttributes: {}
    };
  },
  addCommands() {
    return {
      uploadAttachment: (n) => () => {
        const e = Po(), { state: { tr: t }, view: r, schema: i } = this.editor;
        return t.selection.empty || t.deleteSelection(), r.dispatch(t.setMeta(oi, {
          type: "add",
          id: e,
          pos: t.selection.from,
          text: n.name
        })), (this.options.uploader || Tc(this.options.uploadUrl))(n, this.options.uploadUrl, this.options.uploadHeaders, "attachment").then((o) => {
          if (o.errorCode === 0 && o.data && o.data.href) {
            let l = Xd.getState(this.editor.state).find(void 0, void 0, (u) => u.id == e);
            const c = o.data.fileName || n.name;
            r.dispatch(r.state.tr.insertText(` ${c} `, l[0].from).addMark(l[0].from + 1, c.length + l[0].from + 1, i.marks.link.create({
              href: o.data.href,
              target: "_blank"
            })).setMeta(oi, { type: "remove", id: e }));
          } else
            r.dispatch(t.setMeta(oi, { type: "remove", id: e }));
        }).catch(() => {
          const { state: { tr: o }, view: a } = this.editor;
          a.dispatch(o.setMeta(oi, { type: "remove", id: e }));
        }), !0;
      }
    };
  },
  addProseMirrorPlugins() {
    const n = this.editor;
    return [
      new Se({
        key: Xd,
        state: {
          init: () => ke.empty,
          apply: (e, t) => {
            const r = e.getMeta(oi);
            return t = t.map(e.mapping, e.doc), r && r.type === "add" ? t = t.add(e.doc, [xC(r)]) : r && r.type === "remove" && (t = t.remove(t.find(
              void 0,
              void 0,
              (i) => i.id == r.id
            ))), t;
          }
        },
        props: {
          decorations(e) {
            return this.getState(e);
          },
          handleDOMEvents: {
            drop(e, t) {
              if (!(t.dataTransfer && t.dataTransfer.files && t.dataTransfer.files.length))
                return !1;
              const i = Array.from(t.dataTransfer.files).filter((s) => !/video/i.test(s.type) && !/image/i.test(s.type));
              return t.preventDefault(), i.forEach((s) => {
                n.commands.uploadAttachment(s);
              }), !0;
            }
          }
        }
      })
    ];
  }
}), MC = Ee.create({
  name: "painter",
  addCommands() {
    return {
      setPainter: (n) => ({ view: { dispatch: e, state: { tr: t }, dom: r } }) => (r.style.cursor = "context-menu", e(t.setMeta("painterAction", { type: "start", marks: n })), !0)
    };
  },
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("aie-painter"),
        state: {
          init: () => [],
          apply: (n, e) => {
            const t = n.getMeta("painterAction");
            return t && t.type === "start" ? e = t.marks : t && t.type === "end" && (e = []), e;
          }
        },
        props: {
          handleDOMEvents: {
            mousedown(n, e) {
              const t = this.getState(n.state);
              if (!t || t.length == 0)
                return !1;
              const r = () => {
                document.removeEventListener("mouseup", r);
                let { dispatch: i, state: { tr: s, selection: o }, dom: a } = n;
                a.style.cursor = "", s = s.removeMark(o.from, o.to);
                for (let l of t)
                  l.type.name != "link" && (s = s.addMark(o.from, o.to, l));
                i(s.setMeta("painterAction", { type: "end" }));
              };
              return document.addEventListener("mouseup", r), !0;
            }
          }
        }
      })
    ];
  }
}), AC = /(?:^|\s)((?:==)((?:[^~=]+))(?:==))$/, TC = /(?:^|\s)((?:==)((?:[^~=]+))(?:==))/g, NC = Re.create({
  name: "highlight",
  addOptions() {
    return {
      multicolor: !1,
      HTMLAttributes: {}
    };
  },
  addAttributes() {
    return this.options.multicolor ? {
      color: {
        default: null,
        parseHTML: (n) => n.getAttribute("data-color") || n.style.backgroundColor,
        renderHTML: (n) => n.color ? {
          "data-color": n.color,
          style: `background-color: ${n.color}; color: inherit`
        } : {}
      }
    } : {};
  },
  parseHTML() {
    return [
      {
        tag: "mark"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["mark", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setHighlight: (n) => ({ commands: e }) => e.setMark(this.name, n),
      toggleHighlight: (n) => ({ commands: e }) => e.toggleMark(this.name, n),
      unsetHighlight: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-h": () => this.editor.commands.toggleHighlight()
    };
  },
  addInputRules() {
    return [
      sr({
        find: AC,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      Ln({
        find: TC,
        type: this.type
      })
    ];
  }
}), OC = Ee.create({
  name: "color",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          color: {
            default: null,
            parseHTML: (n) => {
              var e;
              return (e = n.style.color) === null || e === void 0 ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.color ? {
              style: `color: ${n.color}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setColor: (n) => ({ chain: e }) => e().setMark("textStyle", { color: n }).run(),
      unsetColor: () => ({ chain: n }) => n().setMark("textStyle", { color: null }).removeEmptyTextStyle().run()
    };
  }
}), LC = Ee.create({
  name: "fontSize",
  addOptions() {
    return {
      types: ["textStyle"]
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          fontSize: {
            default: null,
            parseHTML: (n) => {
              var e;
              return (e = n.style.fontSize) == null ? void 0 : e.replace(/['"]+/g, "");
            },
            renderHTML: (n) => n.fontSize ? {
              style: `font-size: ${n.fontSize}`
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setFontSize: (n) => ({ chain: e }) => e().setMark("textStyle", { fontSize: n }).run(),
      unsetFontSize: () => ({ chain: n }) => n().setMark("textStyle", { fontSize: null }).removeEmptyTextStyle().run()
    };
  }
}), RC = Ee.create({
  name: "lineHeight",
  addOptions() {
    return {
      types: ["heading", "paragraph"],
      heights: ["100%", "125%", "150%", "200%", "250%", "300%"],
      defaultHeight: "100%"
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          lineHeight: {
            default: this.options.defaultHeight,
            parseHTML: (n) => n.style.lineHeight || this.options.defaultHeight,
            renderHTML: (n) => n.lineHeight === this.options.defaultHeight ? {} : { style: `line-height: ${n.lineHeight}` }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setLineHeight: (n) => ({ commands: e }) => this.options.heights.includes(n) ? this.options.types.every(
        (t) => e.updateAttributes(t, { lineHeight: n })
      ) : !1,
      unsetLineHeight: () => ({ commands: n }) => this.options.types.every(
        (e) => n.resetAttributes(e, "lineHeight")
      )
    };
  }
}), DC = Ee.create({
  name: "textAlign",
  addOptions() {
    return {
      types: [],
      alignments: ["left", "center", "right", "justify"],
      defaultAlignment: "left"
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          textAlign: {
            default: this.options.defaultAlignment,
            parseHTML: (n) => n.style.textAlign || this.options.defaultAlignment,
            renderHTML: (n) => n.textAlign === this.options.defaultAlignment ? {} : { style: `text-align: ${n.textAlign}` }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlign: (n) => ({ commands: e }) => this.options.alignments.includes(n) ? this.options.types.every((t) => e.updateAttributes(t, { textAlign: n })) : !1,
      unsetTextAlign: () => ({ commands: n }) => this.options.types.every((e) => n.resetAttributes(e, "textAlign"))
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
      "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
      "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
      "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify")
    };
  }
}), IC = Ee.create({
  name: "indent",
  addOptions() {
    return {
      types: ["listItem", "paragraph"],
      minLevel: 0,
      maxLevel: 8
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          indent: {
            default: 0,
            parseHTML: (n) => {
              const e = Number(n.getAttribute("data-indent"));
              return e && e > this.options.minLevel ? e : null;
            },
            renderHTML: (n) => n.indent ? {
              style: `text-indent: ${(n == null ? void 0 : n.indent) * 10}px`,
              "data-indent": n == null ? void 0 : n.indent
            } : {}
          }
        }
      }
    ];
  },
  addCommands() {
    const n = (r, i, s) => {
      var a;
      const o = (a = r == null ? void 0 : r.doc) == null ? void 0 : a.nodeAt(i);
      if (o) {
        const l = (o.attrs.indent || 0) + s, { minLevel: c, maxLevel: u } = this.options, d = l < c ? c : l > u ? u : l;
        if (d !== o.attrs.indent) {
          const { indent: f, ...p } = o.attrs, h = d > c ? { ...p, indent: d } : p;
          return r.setNodeMarkup(i, o.type, h, o.marks);
        }
      }
      return r;
    }, e = (r, i) => {
      const { doc: s, selection: o } = r;
      if (s && o && (o instanceof X || o instanceof Ct)) {
        const { from: a, to: l } = o;
        s.nodesBetween(a, l, (c, u) => this.options.types.includes(c.type.name) ? (r = n(r, u, i), !1) : !0);
      }
      return r;
    }, t = (r) => () => ({ tr: i, state: s, dispatch: o }) => {
      const { selection: a } = s;
      return i = i.setSelection(a), i = e(i, r), i.docChanged ? (o == null || o(i), !0) : !1;
    };
    return {
      indent: t(1),
      outdent: t(-1)
    };
  },
  addKeyboardShortcuts() {
    return {
      Tab: () => this.editor.commands.indent(),
      "Shift-Tab": () => this.editor.commands.outdent()
    };
  }
}), BC = /(?:^|\s)(!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\))$/, HC = le.create({
  name: "image",
  addOptions() {
    return {
      inline: !1,
      allowBase64: !1,
      HTMLAttributes: {}
    };
  },
  inline() {
    return this.options.inline;
  },
  group() {
    return this.options.inline ? "inline" : "block";
  },
  draggable: !0,
  addAttributes() {
    return {
      src: {
        default: null
      },
      alt: {
        default: null
      },
      title: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["img", pe(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setImage: (n) => ({ commands: e }) => e.insertContent({
        type: this.name,
        attrs: n
      })
    };
  },
  addInputRules() {
    return [
      bc({
        find: BC,
        type: this.type,
        getAttributes: (n) => {
          const [, , e, t, r] = n;
          return { src: t, alt: e, title: r };
        }
      })
    ];
  }
}), Ug = (n, e, t) => {
  const r = n.querySelector(".resize-obj"), i = 10;
  let s, o, a, l;
  const c = (f) => {
    f.preventDefault(), e.addEventListener("mousemove", u), e.addEventListener("mouseup", d), e.addEventListener("mouseleave", d), s = f.clientX, o = Number(r.getAttribute("data-with")) || r.clientWidth, a = f.target.getAttribute("data-position"), l = e.clientWidth - 100;
  }, u = (f) => {
    const p = f.clientX - s;
    if (p == 0)
      return;
    const h = a === "right" ? p > 0 : p < 0;
    let g = o + Math.abs(p) * (h ? 1 : -1);
    g >= l && (g = l), g < i && (g = i), r.style.width = `${g}px`, r.setAttribute("data-width", g.toString());
  }, d = () => {
    e.removeEventListener("mousemove", u), e.removeEventListener("mouseup", d), e.removeEventListener("mouseleave", d);
    const f = { width: Number(r.getAttribute("data-width")) };
    t(f);
  };
  for (let f of n.querySelector(".aie-resize").children)
    f.addEventListener("mousedown", c);
}, Qd = new Me("aie-image-plugin"), ai = "image_action", PC = HC.extend(
  {
    name: "image",
    draggable: !0,
    selectable: !0,
    addOptions() {
      var n;
      return {
        ...(n = this.parent) == null ? void 0 : n.call(this),
        uploadUrl: "",
        uploadHeaders: {},
        uploader: void 0
      };
    },
    allowGapCursor() {
      return !this.options.inline;
    },
    addAttributes() {
      return {
        src: {
          default: "",
          parseHTML: (n) => `${n.getAttribute("src") ?? ""}`
        },
        alt: {
          default: ""
        },
        title: {
          default: ""
        },
        width: {
          default: 350
        },
        height: {
          default: "auto"
        },
        align: {
          default: "left"
        }
      };
    },
    parseHTML() {
      return [
        {
          tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
        }
      ];
    },
    renderHTML({ HTMLAttributes: n }) {
      return [
        "img",
        pe(this.options.HTMLAttributes, n)
      ];
    },
    addCommands() {
      var n;
      return {
        ...(n = this.parent) == null ? void 0 : n.call(this),
        uploadImage: (e) => () => {
          const t = Po(), { state: { tr: r }, view: i, schema: s } = this.editor;
          return r.selection.empty || r.deleteSelection(), i.dispatch(r.setMeta(ai, {
            type: "add",
            id: t,
            pos: r.selection.from
          })), (this.options.uploader || Tc(this.options.uploadUrl))(e, this.options.uploadUrl, this.options.uploadHeaders, "image").then((a) => {
            if (a.errorCode === 0 && a.data && a.data.src) {
              let c = Qd.getState(this.editor.state).find(void 0, void 0, (u) => u.id == t);
              i.dispatch(i.state.tr.insert(c[0].from, s.nodes.image.create({
                src: a.data.src,
                alt: a.data.alt
              })).setMeta(ai, { type: "remove", id: t }));
            } else
              i.dispatch(r.setMeta(ai, { type: "remove", id: t }));
          }).catch(() => {
            i.dispatch(r.setMeta(ai, { type: "remove", id: t }));
          }), !0;
        }
      };
    },
    addNodeView() {
      return (n) => {
        const e = document.createElement("div"), { src: t, width: r, height: i, align: s } = n.node.attrs;
        return e.classList.add(`align-${s}`), e.innerHTML = `
                    <div class="aie-resize-wrapper">
                        <div class="aie-resize">
                            <div class="aie-resize-btn-top-left" data-position="left" draggable="true"></div>
                            <div class="aie-resize-btn-top-right" data-position="right" draggable="true"></div>
                            <div class="aie-resize-btn-bottom-left" data-position="left" draggable="true"></div>
                            <div class="aie-resize-btn-bottom-right" data-position="right" draggable="true"></div>
                        </div>
                        <img src="${t}" style="width: ${r}px; height: ${i}" class="align-${s} resize-obj">
                    </div>
                `, Ug(e, n.editor.view.dom, (o) => n.editor.commands.updateAttributes("image", o)), {
          dom: e
        };
      };
    },
    addProseMirrorPlugins() {
      const n = this.editor;
      return [
        new Se({
          key: Qd,
          state: {
            init: () => ke.empty,
            apply: (e, t) => {
              const r = e.getMeta(ai);
              if (r) {
                let i = !1;
                const s = t.map(e.mapping, e.doc, {
                  onRemove: (o) => {
                    i = !0;
                  }
                });
                i || (t = s), r.type === "add" ? t = t.add(e.doc, [qg(r)]) : r.type === "remove" && (t = t.remove(t.find(
                  void 0,
                  void 0,
                  (o) => o.id == r.id
                )));
              }
              return t;
            }
          },
          props: {
            decorations(e) {
              return this.getState(e);
            },
            handlePaste: (e, t) => {
              var i;
              const r = Array.from(((i = t.clipboardData) == null ? void 0 : i.items) || []);
              for (const s of r)
                if (s.type.indexOf("image") === 0) {
                  t.preventDefault();
                  const o = s.getAsFile();
                  o && this.editor.commands.uploadImage(o);
                }
            },
            handleDOMEvents: {
              drop(e, t) {
                if (!(t.dataTransfer && t.dataTransfer.files && t.dataTransfer.files.length))
                  return !1;
                const i = Array.from(t.dataTransfer.files).filter((c) => /image/i.test(c.type));
                if (i.length === 0)
                  return !1;
                t.preventDefault();
                const { state: { tr: s, doc: o }, dispatch: a } = e, l = e.posAtCoords({ left: t.clientX, top: t.clientY });
                return a(s.setSelection(X.create(o, l.pos)).scrollIntoView()), i.forEach((c) => {
                  n.commands.uploadImage(c);
                }), !0;
              }
            }
          }
        })
      ];
    }
  }
);
var Ll, Rl;
if (typeof WeakMap < "u") {
  let n = /* @__PURE__ */ new WeakMap();
  Ll = (e) => n.get(e), Rl = (e, t) => (n.set(e, t), t);
} else {
  const n = [];
  let t = 0;
  Ll = (r) => {
    for (let i = 0; i < n.length; i += 2)
      if (n[i] == r)
        return n[i + 1];
  }, Rl = (r, i) => (t == 10 && (t = 0), n[t++] = r, n[t++] = i);
}
var Ne = class {
  constructor(n, e, t, r) {
    this.width = n, this.height = e, this.map = t, this.problems = r;
  }
  // Find the dimensions of the cell at the given position.
  findCell(n) {
    for (let e = 0; e < this.map.length; e++) {
      const t = this.map[e];
      if (t != n)
        continue;
      const r = e % this.width, i = e / this.width | 0;
      let s = r + 1, o = i + 1;
      for (let a = 1; s < this.width && this.map[e + a] == t; a++)
        s++;
      for (let a = 1; o < this.height && this.map[e + this.width * a] == t; a++)
        o++;
      return { left: r, top: i, right: s, bottom: o };
    }
    throw new RangeError(`No cell with offset ${n} found`);
  }
  // Find the left side of the cell at the given position.
  colCount(n) {
    for (let e = 0; e < this.map.length; e++)
      if (this.map[e] == n)
        return e % this.width;
    throw new RangeError(`No cell with offset ${n} found`);
  }
  // Find the next cell in the given direction, starting from the cell
  // at `pos`, if any.
  nextCell(n, e, t) {
    const { left: r, right: i, top: s, bottom: o } = this.findCell(n);
    return e == "horiz" ? (t < 0 ? r == 0 : i == this.width) ? null : this.map[s * this.width + (t < 0 ? r - 1 : i)] : (t < 0 ? s == 0 : o == this.height) ? null : this.map[r + this.width * (t < 0 ? s - 1 : o)];
  }
  // Get the rectangle spanning the two given cells.
  rectBetween(n, e) {
    const {
      left: t,
      right: r,
      top: i,
      bottom: s
    } = this.findCell(n), {
      left: o,
      right: a,
      top: l,
      bottom: c
    } = this.findCell(e);
    return {
      left: Math.min(t, o),
      top: Math.min(i, l),
      right: Math.max(r, a),
      bottom: Math.max(s, c)
    };
  }
  // Return the position of all cells that have the top left corner in
  // the given rectangle.
  cellsInRect(n) {
    const e = [], t = {};
    for (let r = n.top; r < n.bottom; r++)
      for (let i = n.left; i < n.right; i++) {
        const s = r * this.width + i, o = this.map[s];
        t[o] || (t[o] = !0, !(i == n.left && i && this.map[s - 1] == o || r == n.top && r && this.map[s - this.width] == o) && e.push(o));
      }
    return e;
  }
  // Return the position at which the cell at the given row and column
  // starts, or would start, if a cell started there.
  positionAt(n, e, t) {
    for (let r = 0, i = 0; ; r++) {
      const s = i + t.child(r).nodeSize;
      if (r == n) {
        let o = e + n * this.width;
        const a = (n + 1) * this.width;
        for (; o < a && this.map[o] < i; )
          o++;
        return o == a ? s - 1 : this.map[o];
      }
      i = s;
    }
  }
  // Find the table map for the given table node.
  static get(n) {
    return Ll(n) || Rl(n, $C(n));
  }
};
function $C(n) {
  if (n.type.spec.tableRole != "table")
    throw new RangeError("Not a table node: " + n.type.name);
  const e = FC(n), t = n.childCount, r = [];
  let i = 0, s = null;
  const o = [];
  for (let c = 0, u = e * t; c < u; c++)
    r[c] = 0;
  for (let c = 0, u = 0; c < t; c++) {
    const d = n.child(c);
    u++;
    for (let h = 0; ; h++) {
      for (; i < r.length && r[i] != 0; )
        i++;
      if (h == d.childCount)
        break;
      const g = d.child(h), { colspan: m, rowspan: v, colwidth: y } = g.attrs;
      for (let k = 0; k < v; k++) {
        if (k + c >= t) {
          (s || (s = [])).push({
            type: "overlong_rowspan",
            pos: u,
            n: v - k
          });
          break;
        }
        const b = i + k * e;
        for (let x = 0; x < m; x++) {
          r[b + x] == 0 ? r[b + x] = u : (s || (s = [])).push({
            type: "collision",
            row: c,
            pos: u,
            n: m - x
          });
          const w = y && y[x];
          if (w) {
            const S = (b + x) % e * 2, T = o[S];
            T == null || T != w && o[S + 1] == 1 ? (o[S] = w, o[S + 1] = 1) : T == w && o[S + 1]++;
          }
        }
      }
      i += m, u += g.nodeSize;
    }
    const f = (c + 1) * e;
    let p = 0;
    for (; i < f; )
      r[i++] == 0 && p++;
    p && (s || (s = [])).push({ type: "missing", row: c, n: p }), u++;
  }
  const a = new Ne(e, t, r, s);
  let l = !1;
  for (let c = 0; !l && c < o.length; c += 2)
    o[c] != null && o[c + 1] < t && (l = !0);
  return l && zC(a, o, n), a;
}
function FC(n) {
  let e = -1, t = !1;
  for (let r = 0; r < n.childCount; r++) {
    const i = n.child(r);
    let s = 0;
    if (t)
      for (let o = 0; o < r; o++) {
        const a = n.child(o);
        for (let l = 0; l < a.childCount; l++) {
          const c = a.child(l);
          o + c.attrs.rowspan > r && (s += c.attrs.colspan);
        }
      }
    for (let o = 0; o < i.childCount; o++) {
      const a = i.child(o);
      s += a.attrs.colspan, a.attrs.rowspan > 1 && (t = !0);
    }
    e == -1 ? e = s : e != s && (e = Math.max(e, s));
  }
  return e;
}
function zC(n, e, t) {
  n.problems || (n.problems = []);
  const r = {};
  for (let i = 0; i < n.map.length; i++) {
    const s = n.map[i];
    if (r[s])
      continue;
    r[s] = !0;
    const o = t.nodeAt(s);
    if (!o)
      throw new RangeError(`No cell with offset ${s} found`);
    let a = null;
    const l = o.attrs;
    for (let c = 0; c < l.colspan; c++) {
      const u = (i + c) % n.width, d = e[u * 2];
      d != null && (!l.colwidth || l.colwidth[c] != d) && ((a || (a = VC(l)))[c] = d);
    }
    a && n.problems.unshift({
      type: "colwidth mismatch",
      pos: s,
      colwidth: a
    });
  }
}
function VC(n) {
  if (n.colwidth)
    return n.colwidth.slice();
  const e = [];
  for (let t = 0; t < n.colspan; t++)
    e.push(0);
  return e;
}
function Ye(n) {
  let e = n.cached.tableNodeTypes;
  if (!e) {
    e = n.cached.tableNodeTypes = {};
    for (const t in n.nodes) {
      const r = n.nodes[t], i = r.spec.tableRole;
      i && (e[i] = r);
    }
  }
  return e;
}
var yn = new Me("selectingCells");
function Qr(n) {
  for (let e = n.depth - 1; e > 0; e--)
    if (n.node(e).type.spec.tableRole == "row")
      return n.node(0).resolve(n.before(e + 1));
  return null;
}
function qC(n) {
  for (let e = n.depth; e > 0; e--) {
    const t = n.node(e).type.spec.tableRole;
    if (t === "cell" || t === "header_cell")
      return n.node(e);
  }
  return null;
}
function Dt(n) {
  const e = n.selection.$head;
  for (let t = e.depth; t > 0; t--)
    if (e.node(t).type.spec.tableRole == "row")
      return !0;
  return !1;
}
function Fo(n) {
  const e = n.selection;
  if ("$anchorCell" in e && e.$anchorCell)
    return e.$anchorCell.pos > e.$headCell.pos ? e.$anchorCell : e.$headCell;
  if ("node" in e && e.node && e.node.type.spec.tableRole == "cell")
    return e.$anchor;
  const t = Qr(e.$head) || UC(e.$head);
  if (t)
    return t;
  throw new RangeError(`No cell found around position ${e.head}`);
}
function UC(n) {
  for (let e = n.nodeAfter, t = n.pos; e; e = e.firstChild, t++) {
    const r = e.type.spec.tableRole;
    if (r == "cell" || r == "header_cell")
      return n.doc.resolve(t);
  }
  for (let e = n.nodeBefore, t = n.pos; e; e = e.lastChild, t--) {
    const r = e.type.spec.tableRole;
    if (r == "cell" || r == "header_cell")
      return n.doc.resolve(t - e.nodeSize);
  }
}
function Dl(n) {
  return n.parent.type.spec.tableRole == "row" && !!n.nodeAfter;
}
function KC(n) {
  return n.node(0).resolve(n.pos + n.nodeAfter.nodeSize);
}
function Nc(n, e) {
  return n.depth == e.depth && n.pos >= e.start(-1) && n.pos <= e.end(-1);
}
function Kg(n, e, t) {
  const r = n.node(-1), i = Ne.get(r), s = n.start(-1), o = i.nextCell(n.pos - s, e, t);
  return o == null ? null : n.node(0).resolve(s + o);
}
function lr(n, e, t = 1) {
  const r = { ...n, colspan: n.colspan - t };
  return r.colwidth && (r.colwidth = r.colwidth.slice(), r.colwidth.splice(e, t), r.colwidth.some((i) => i > 0) || (r.colwidth = null)), r;
}
function Wg(n, e, t = 1) {
  const r = { ...n, colspan: n.colspan + t };
  if (r.colwidth) {
    r.colwidth = r.colwidth.slice();
    for (let i = 0; i < t; i++)
      r.colwidth.splice(e, 0, 0);
  }
  return r;
}
function WC(n, e, t) {
  const r = Ye(e.type.schema).header_cell;
  for (let i = 0; i < n.height; i++)
    if (e.nodeAt(n.map[t + i * n.width]).type != r)
      return !1;
  return !0;
}
var fe = class extends ne {
  // A table selection is identified by its anchor and head cells. The
  // positions given to this constructor should point _before_ two
  // cells in the same table. They may be the same, to select a single
  // cell.
  constructor(n, e = n) {
    const t = n.node(-1), r = Ne.get(t), i = n.start(-1), s = r.rectBetween(
      n.pos - i,
      e.pos - i
    ), o = n.node(0), a = r.cellsInRect(s).filter((c) => c != e.pos - i);
    a.unshift(e.pos - i);
    const l = a.map((c) => {
      const u = t.nodeAt(c);
      if (!u)
        throw RangeError(`No cell with offset ${c} found`);
      const d = i + c + 1;
      return new hh(
        o.resolve(d),
        o.resolve(d + u.content.size)
      );
    });
    super(l[0].$from, l[0].$to, l), this.$anchorCell = n, this.$headCell = e;
  }
  map(n, e) {
    const t = n.resolve(e.map(this.$anchorCell.pos)), r = n.resolve(e.map(this.$headCell.pos));
    if (Dl(t) && Dl(r) && Nc(t, r)) {
      const i = this.$anchorCell.node(-1) != t.node(-1);
      return i && this.isRowSelection() ? fe.rowSelection(t, r) : i && this.isColSelection() ? fe.colSelection(t, r) : new fe(t, r);
    }
    return X.between(t, r);
  }
  // Returns a rectangular slice of table rows containing the selected
  // cells.
  content() {
    const n = this.$anchorCell.node(-1), e = Ne.get(n), t = this.$anchorCell.start(-1), r = e.rectBetween(
      this.$anchorCell.pos - t,
      this.$headCell.pos - t
    ), i = {}, s = [];
    for (let a = r.top; a < r.bottom; a++) {
      const l = [];
      for (let c = a * e.width + r.left, u = r.left; u < r.right; u++, c++) {
        const d = e.map[c];
        if (i[d])
          continue;
        i[d] = !0;
        const f = e.findCell(d);
        let p = n.nodeAt(d);
        if (!p)
          throw RangeError(`No cell with offset ${d} found`);
        const h = r.left - f.left, g = f.right - r.right;
        if (h > 0 || g > 0) {
          let m = p.attrs;
          if (h > 0 && (m = lr(m, 0, h)), g > 0 && (m = lr(
            m,
            m.colspan - g,
            g
          )), f.left < r.left) {
            if (p = p.type.createAndFill(m), !p)
              throw RangeError(
                `Could not create cell with attrs ${JSON.stringify(m)}`
              );
          } else
            p = p.type.create(m, p.content);
        }
        if (f.top < r.top || f.bottom > r.bottom) {
          const m = {
            ...p.attrs,
            rowspan: Math.min(f.bottom, r.bottom) - Math.max(f.top, r.top)
          };
          f.top < r.top ? p = p.type.createAndFill(m) : p = p.type.create(m, p.content);
        }
        l.push(p);
      }
      s.push(n.child(a).copy(R.from(l)));
    }
    const o = this.isColSelection() && this.isRowSelection() ? n : s;
    return new F(R.from(o), 1, 1);
  }
  replace(n, e = F.empty) {
    const t = n.steps.length, r = this.ranges;
    for (let s = 0; s < r.length; s++) {
      const { $from: o, $to: a } = r[s], l = n.mapping.slice(t);
      n.replace(
        l.map(o.pos),
        l.map(a.pos),
        s ? F.empty : e
      );
    }
    const i = ne.findFrom(
      n.doc.resolve(n.mapping.slice(t).map(this.to)),
      -1
    );
    i && n.setSelection(i);
  }
  replaceWith(n, e) {
    this.replace(n, new F(R.from(e), 0, 0));
  }
  forEachCell(n) {
    const e = this.$anchorCell.node(-1), t = Ne.get(e), r = this.$anchorCell.start(-1), i = t.cellsInRect(
      t.rectBetween(
        this.$anchorCell.pos - r,
        this.$headCell.pos - r
      )
    );
    for (let s = 0; s < i.length; s++)
      n(e.nodeAt(i[s]), r + i[s]);
  }
  // True if this selection goes all the way from the top to the
  // bottom of the table.
  isColSelection() {
    const n = this.$anchorCell.index(-1), e = this.$headCell.index(-1);
    if (Math.min(n, e) > 0)
      return !1;
    const t = n + this.$anchorCell.nodeAfter.attrs.rowspan, r = e + this.$headCell.nodeAfter.attrs.rowspan;
    return Math.max(t, r) == this.$headCell.node(-1).childCount;
  }
  // Returns the smallest column selection that covers the given anchor
  // and head cell.
  static colSelection(n, e = n) {
    const t = n.node(-1), r = Ne.get(t), i = n.start(-1), s = r.findCell(n.pos - i), o = r.findCell(e.pos - i), a = n.node(0);
    return s.top <= o.top ? (s.top > 0 && (n = a.resolve(i + r.map[s.left])), o.bottom < r.height && (e = a.resolve(
      i + r.map[r.width * (r.height - 1) + o.right - 1]
    ))) : (o.top > 0 && (e = a.resolve(i + r.map[o.left])), s.bottom < r.height && (n = a.resolve(
      i + r.map[r.width * (r.height - 1) + s.right - 1]
    ))), new fe(n, e);
  }
  // True if this selection goes all the way from the left to the
  // right of the table.
  isRowSelection() {
    const n = this.$anchorCell.node(-1), e = Ne.get(n), t = this.$anchorCell.start(-1), r = e.colCount(this.$anchorCell.pos - t), i = e.colCount(this.$headCell.pos - t);
    if (Math.min(r, i) > 0)
      return !1;
    const s = r + this.$anchorCell.nodeAfter.attrs.colspan, o = i + this.$headCell.nodeAfter.attrs.colspan;
    return Math.max(s, o) == e.width;
  }
  eq(n) {
    return n instanceof fe && n.$anchorCell.pos == this.$anchorCell.pos && n.$headCell.pos == this.$headCell.pos;
  }
  // Returns the smallest row selection that covers the given anchor
  // and head cell.
  static rowSelection(n, e = n) {
    const t = n.node(-1), r = Ne.get(t), i = n.start(-1), s = r.findCell(n.pos - i), o = r.findCell(e.pos - i), a = n.node(0);
    return s.left <= o.left ? (s.left > 0 && (n = a.resolve(
      i + r.map[s.top * r.width]
    )), o.right < r.width && (e = a.resolve(
      i + r.map[r.width * (o.top + 1) - 1]
    ))) : (o.left > 0 && (e = a.resolve(i + r.map[o.top * r.width])), s.right < r.width && (n = a.resolve(
      i + r.map[r.width * (s.top + 1) - 1]
    ))), new fe(n, e);
  }
  toJSON() {
    return {
      type: "cell",
      anchor: this.$anchorCell.pos,
      head: this.$headCell.pos
    };
  }
  static fromJSON(n, e) {
    return new fe(n.resolve(e.anchor), n.resolve(e.head));
  }
  static create(n, e, t = e) {
    return new fe(n.resolve(e), n.resolve(t));
  }
  getBookmark() {
    return new Gg(this.$anchorCell.pos, this.$headCell.pos);
  }
};
fe.prototype.visible = !1;
ne.jsonID("cell", fe);
var Gg = class {
  constructor(n, e) {
    this.anchor = n, this.head = e;
  }
  map(n) {
    return new Gg(n.map(this.anchor), n.map(this.head));
  }
  resolve(n) {
    const e = n.resolve(this.anchor), t = n.resolve(this.head);
    return e.parent.type.spec.tableRole == "row" && t.parent.type.spec.tableRole == "row" && e.index() < e.parent.childCount && t.index() < t.parent.childCount && Nc(e, t) ? new fe(e, t) : ne.near(t, 1);
  }
};
function GC(n) {
  if (!(n.selection instanceof fe))
    return null;
  const e = [];
  return n.selection.forEachCell((t, r) => {
    e.push(
      Be.node(r, r + t.nodeSize, { class: "selectedCell" })
    );
  }), ke.create(n.doc, e);
}
function ZC({ $from: n, $to: e }) {
  if (n.pos == e.pos || n.pos < n.pos - 6)
    return !1;
  let t = n.pos, r = e.pos, i = n.depth;
  for (; i >= 0 && !(n.after(i + 1) < n.end(i)); i--, t++)
    ;
  for (let s = e.depth; s >= 0 && !(e.before(s + 1) > e.start(s)); s--, r--)
    ;
  return t == r && /row|table/.test(n.node(i).type.spec.tableRole);
}
function jC({ $from: n, $to: e }) {
  let t, r;
  for (let i = n.depth; i > 0; i--) {
    const s = n.node(i);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      t = s;
      break;
    }
  }
  for (let i = e.depth; i > 0; i--) {
    const s = e.node(i);
    if (s.type.spec.tableRole === "cell" || s.type.spec.tableRole === "header_cell") {
      r = s;
      break;
    }
  }
  return t !== r && e.parentOffset === 0;
}
function JC(n, e, t) {
  const r = (e || n).selection, i = (e || n).doc;
  let s, o;
  if (r instanceof Q && (o = r.node.type.spec.tableRole)) {
    if (o == "cell" || o == "header_cell")
      s = fe.create(i, r.from);
    else if (o == "row") {
      const a = i.resolve(r.from + 1);
      s = fe.rowSelection(a, a);
    } else if (!t) {
      const a = Ne.get(r.node), l = r.from + 1, c = l + a.map[a.width * a.height - 1];
      s = fe.create(i, l + 1, c);
    }
  } else
    r instanceof X && ZC(r) ? s = X.create(i, r.from) : r instanceof X && jC(r) && (s = X.create(i, r.$from.start(), r.$from.end()));
  return s && (e || (e = n.tr)).setSelection(s), e;
}
var YC = new Me("fix-tables");
function Zg(n, e, t, r) {
  const i = n.childCount, s = e.childCount;
  e:
    for (let o = 0, a = 0; o < s; o++) {
      const l = e.child(o);
      for (let c = a, u = Math.min(i, o + 3); c < u; c++)
        if (n.child(c) == l) {
          a = c + 1, t += l.nodeSize;
          continue e;
        }
      r(l, t), a < i && n.child(a).sameMarkup(l) ? Zg(n.child(a), l, t + 1, r) : l.nodesBetween(0, l.content.size, r, t + 1), t += l.nodeSize;
    }
}
function jg(n, e) {
  let t;
  const r = (i, s) => {
    i.type.spec.tableRole == "table" && (t = XC(n, i, s, t));
  };
  return e ? e.doc != n.doc && Zg(e.doc, n.doc, 0, r) : n.doc.descendants(r), t;
}
function XC(n, e, t, r) {
  const i = Ne.get(e);
  if (!i.problems)
    return r;
  r || (r = n.tr);
  const s = [];
  for (let l = 0; l < i.height; l++)
    s.push(0);
  for (let l = 0; l < i.problems.length; l++) {
    const c = i.problems[l];
    if (c.type == "collision") {
      const u = e.nodeAt(c.pos);
      if (!u)
        continue;
      const d = u.attrs;
      for (let f = 0; f < d.rowspan; f++)
        s[c.row + f] += c.n;
      r.setNodeMarkup(
        r.mapping.map(t + 1 + c.pos),
        null,
        lr(d, d.colspan - c.n, c.n)
      );
    } else if (c.type == "missing")
      s[c.row] += c.n;
    else if (c.type == "overlong_rowspan") {
      const u = e.nodeAt(c.pos);
      if (!u)
        continue;
      r.setNodeMarkup(r.mapping.map(t + 1 + c.pos), null, {
        ...u.attrs,
        rowspan: u.attrs.rowspan - c.n
      });
    } else if (c.type == "colwidth mismatch") {
      const u = e.nodeAt(c.pos);
      if (!u)
        continue;
      r.setNodeMarkup(r.mapping.map(t + 1 + c.pos), null, {
        ...u.attrs,
        colwidth: c.colwidth
      });
    }
  }
  let o, a;
  for (let l = 0; l < s.length; l++)
    s[l] && (o == null && (o = l), a = l);
  for (let l = 0, c = t + 1; l < i.height; l++) {
    const u = e.child(l), d = c + u.nodeSize, f = s[l];
    if (f > 0) {
      let p = "cell";
      u.firstChild && (p = u.firstChild.type.spec.tableRole);
      const h = [];
      for (let m = 0; m < f; m++) {
        const v = Ye(n.schema)[p].createAndFill();
        v && h.push(v);
      }
      const g = (l == 0 || o == l - 1) && a == l ? c + 1 : d - 1;
      r.insert(r.mapping.map(g), h);
    }
    c = d;
  }
  return r.setMeta(YC, { fixTables: !0 });
}
function QC(n) {
  if (!n.size)
    return null;
  let { content: e, openStart: t, openEnd: r } = n;
  for (; e.childCount == 1 && (t > 0 && r > 0 || e.child(0).type.spec.tableRole == "table"); )
    t--, r--, e = e.child(0).content;
  const i = e.child(0), s = i.type.spec.tableRole, o = i.type.schema, a = [];
  if (s == "row")
    for (let l = 0; l < e.childCount; l++) {
      let c = e.child(l).content;
      const u = l ? 0 : Math.max(0, t - 1), d = l < e.childCount - 1 ? 0 : Math.max(0, r - 1);
      (u || d) && (c = Il(
        Ye(o).row,
        new F(c, u, d)
      ).content), a.push(c);
    }
  else if (s == "cell" || s == "header_cell")
    a.push(
      t || r ? Il(
        Ye(o).row,
        new F(e, t, r)
      ).content : e
    );
  else
    return null;
  return eS(o, a);
}
function eS(n, e) {
  const t = [];
  for (let i = 0; i < e.length; i++) {
    const s = e[i];
    for (let o = s.childCount - 1; o >= 0; o--) {
      const { rowspan: a, colspan: l } = s.child(o).attrs;
      for (let c = i; c < i + a; c++)
        t[c] = (t[c] || 0) + l;
    }
  }
  let r = 0;
  for (let i = 0; i < t.length; i++)
    r = Math.max(r, t[i]);
  for (let i = 0; i < t.length; i++)
    if (i >= e.length && e.push(R.empty), t[i] < r) {
      const s = Ye(n).cell.createAndFill(), o = [];
      for (let a = t[i]; a < r; a++)
        o.push(s);
      e[i] = e[i].append(R.from(o));
    }
  return { height: e.length, width: r, rows: e };
}
function Il(n, e) {
  const t = n.createAndFill();
  return new Yl(t).replace(0, t.content.size, e).doc;
}
function tS({ width: n, height: e, rows: t }, r, i) {
  if (n != r) {
    const s = [], o = [];
    for (let a = 0; a < t.length; a++) {
      const l = t[a], c = [];
      for (let u = s[a] || 0, d = 0; u < r; d++) {
        let f = l.child(d % l.childCount);
        u + f.attrs.colspan > r && (f = f.type.createChecked(
          lr(
            f.attrs,
            f.attrs.colspan,
            u + f.attrs.colspan - r
          ),
          f.content
        )), c.push(f), u += f.attrs.colspan;
        for (let p = 1; p < f.attrs.rowspan; p++)
          s[a + p] = (s[a + p] || 0) + f.attrs.colspan;
      }
      o.push(R.from(c));
    }
    t = o, n = r;
  }
  if (e != i) {
    const s = [];
    for (let o = 0, a = 0; o < i; o++, a++) {
      const l = [], c = t[a % e];
      for (let u = 0; u < c.childCount; u++) {
        let d = c.child(u);
        o + d.attrs.rowspan > i && (d = d.type.create(
          {
            ...d.attrs,
            rowspan: Math.max(1, i - d.attrs.rowspan)
          },
          d.content
        )), l.push(d);
      }
      s.push(R.from(l));
    }
    t = s, e = i;
  }
  return { width: n, height: e, rows: t };
}
function nS(n, e, t, r, i, s, o) {
  const a = n.doc.type.schema, l = Ye(a);
  let c, u;
  if (i > e.width)
    for (let d = 0, f = 0; d < e.height; d++) {
      const p = t.child(d);
      f += p.nodeSize;
      const h = [];
      let g;
      p.lastChild == null || p.lastChild.type == l.cell ? g = c || (c = l.cell.createAndFill()) : g = u || (u = l.header_cell.createAndFill());
      for (let m = e.width; m < i; m++)
        h.push(g);
      n.insert(n.mapping.slice(o).map(f - 1 + r), h);
    }
  if (s > e.height) {
    const d = [];
    for (let h = 0, g = (e.height - 1) * e.width; h < Math.max(e.width, i); h++) {
      const m = h >= e.width ? !1 : t.nodeAt(e.map[g + h]).type == l.header_cell;
      d.push(
        m ? u || (u = l.header_cell.createAndFill()) : c || (c = l.cell.createAndFill())
      );
    }
    const f = l.row.create(null, R.from(d)), p = [];
    for (let h = e.height; h < s; h++)
      p.push(f);
    n.insert(n.mapping.slice(o).map(r + t.nodeSize - 2), p);
  }
  return !!(c || u);
}
function ef(n, e, t, r, i, s, o, a) {
  if (o == 0 || o == e.height)
    return !1;
  let l = !1;
  for (let c = i; c < s; c++) {
    const u = o * e.width + c, d = e.map[u];
    if (e.map[u - e.width] == d) {
      l = !0;
      const f = t.nodeAt(d), { top: p, left: h } = e.findCell(d);
      n.setNodeMarkup(n.mapping.slice(a).map(d + r), null, {
        ...f.attrs,
        rowspan: o - p
      }), n.insert(
        n.mapping.slice(a).map(e.positionAt(o, h, t)),
        f.type.createAndFill({
          ...f.attrs,
          rowspan: p + f.attrs.rowspan - o
        })
      ), c += f.attrs.colspan - 1;
    }
  }
  return l;
}
function tf(n, e, t, r, i, s, o, a) {
  if (o == 0 || o == e.width)
    return !1;
  let l = !1;
  for (let c = i; c < s; c++) {
    const u = c * e.width + o, d = e.map[u];
    if (e.map[u - 1] == d) {
      l = !0;
      const f = t.nodeAt(d), p = e.colCount(d), h = n.mapping.slice(a).map(d + r);
      n.setNodeMarkup(
        h,
        null,
        lr(
          f.attrs,
          o - p,
          f.attrs.colspan - (o - p)
        )
      ), n.insert(
        h + f.nodeSize,
        f.type.createAndFill(
          lr(f.attrs, 0, o - p)
        )
      ), c += f.attrs.rowspan - 1;
    }
  }
  return l;
}
function nf(n, e, t, r, i) {
  let s = t ? n.doc.nodeAt(t - 1) : n.doc;
  if (!s)
    throw new Error("No table found");
  let o = Ne.get(s);
  const { top: a, left: l } = r, c = l + i.width, u = a + i.height, d = n.tr;
  let f = 0;
  function p() {
    if (s = t ? d.doc.nodeAt(t - 1) : d.doc, !s)
      throw new Error("No table found");
    o = Ne.get(s), f = d.mapping.maps.length;
  }
  nS(d, o, s, t, c, u, f) && p(), ef(d, o, s, t, l, c, a, f) && p(), ef(d, o, s, t, l, c, u, f) && p(), tf(d, o, s, t, a, u, l, f) && p(), tf(d, o, s, t, a, u, c, f) && p();
  for (let h = a; h < u; h++) {
    const g = o.positionAt(h, l, s), m = o.positionAt(h, c, s);
    d.replace(
      d.mapping.slice(f).map(g + t),
      d.mapping.slice(f).map(m + t),
      new F(i.rows[h - a], 0, 0)
    );
  }
  p(), d.setSelection(
    new fe(
      d.doc.resolve(t + o.positionAt(a, l, s)),
      d.doc.resolve(t + o.positionAt(u - 1, c - 1, s))
    )
  ), e(d);
}
var rS = lc({
  ArrowLeft: cs("horiz", -1),
  ArrowRight: cs("horiz", 1),
  ArrowUp: cs("vert", -1),
  ArrowDown: cs("vert", 1),
  "Shift-ArrowLeft": us("horiz", -1),
  "Shift-ArrowRight": us("horiz", 1),
  "Shift-ArrowUp": us("vert", -1),
  "Shift-ArrowDown": us("vert", 1),
  Backspace: ds,
  "Mod-Backspace": ds,
  Delete: ds,
  "Mod-Delete": ds
});
function Ns(n, e, t) {
  return t.eq(n.selection) ? !1 : (e && e(n.tr.setSelection(t).scrollIntoView()), !0);
}
function cs(n, e) {
  return (t, r, i) => {
    if (!i)
      return !1;
    const s = t.selection;
    if (s instanceof fe)
      return Ns(
        t,
        r,
        ne.near(s.$headCell, e)
      );
    if (n != "horiz" && !s.empty)
      return !1;
    const o = Jg(i, n, e);
    if (o == null)
      return !1;
    if (n == "horiz")
      return Ns(
        t,
        r,
        ne.near(t.doc.resolve(s.head + e), e)
      );
    {
      const a = t.doc.resolve(o), l = Kg(a, n, e);
      let c;
      return l ? c = ne.near(l, 1) : e < 0 ? c = ne.near(t.doc.resolve(a.before(-1)), -1) : c = ne.near(t.doc.resolve(a.after(-1)), 1), Ns(t, r, c);
    }
  };
}
function us(n, e) {
  return (t, r, i) => {
    if (!i)
      return !1;
    const s = t.selection;
    let o;
    if (s instanceof fe)
      o = s;
    else {
      const l = Jg(i, n, e);
      if (l == null)
        return !1;
      o = new fe(t.doc.resolve(l));
    }
    const a = Kg(o.$headCell, n, e);
    return a ? Ns(
      t,
      r,
      new fe(o.$anchorCell, a)
    ) : !1;
  };
}
function ds(n, e) {
  const t = n.selection;
  if (!(t instanceof fe))
    return !1;
  if (e) {
    const r = n.tr, i = Ye(n.schema).cell.createAndFill().content;
    t.forEachCell((s, o) => {
      s.content.eq(i) || r.replace(
        r.mapping.map(o + 1),
        r.mapping.map(o + s.nodeSize - 1),
        new F(i, 0, 0)
      );
    }), r.docChanged && e(r);
  }
  return !0;
}
function iS(n, e) {
  const t = n.state.doc, r = Qr(t.resolve(e));
  return r ? (n.dispatch(n.state.tr.setSelection(new fe(r))), !0) : !1;
}
function sS(n, e, t) {
  if (!Dt(n.state))
    return !1;
  let r = QC(t);
  const i = n.state.selection;
  if (i instanceof fe) {
    r || (r = {
      width: 1,
      height: 1,
      rows: [
        R.from(
          Il(Ye(n.state.schema).cell, t)
        )
      ]
    });
    const s = i.$anchorCell.node(-1), o = i.$anchorCell.start(-1), a = Ne.get(s).rectBetween(
      i.$anchorCell.pos - o,
      i.$headCell.pos - o
    );
    return r = tS(r, a.right - a.left, a.bottom - a.top), nf(n.state, n.dispatch, o, a, r), !0;
  } else if (r) {
    const s = Fo(n.state), o = s.start(-1);
    return nf(
      n.state,
      n.dispatch,
      o,
      Ne.get(s.node(-1)).findCell(s.pos - o),
      r
    ), !0;
  } else
    return !1;
}
function oS(n, e) {
  var t;
  if (e.ctrlKey || e.metaKey)
    return;
  const r = rf(n, e.target);
  let i;
  if (e.shiftKey && n.state.selection instanceof fe)
    s(n.state.selection.$anchorCell, e), e.preventDefault();
  else if (e.shiftKey && r && (i = Qr(n.state.selection.$anchor)) != null && ((t = Ra(n, e)) == null ? void 0 : t.pos) != i.pos)
    s(i, e), e.preventDefault();
  else if (!r)
    return;
  function s(l, c) {
    let u = Ra(n, c);
    const d = yn.getState(n.state) == null;
    if (!u || !Nc(l, u))
      if (d)
        u = l;
      else
        return;
    const f = new fe(l, u);
    if (d || !n.state.selection.eq(f)) {
      const p = n.state.tr.setSelection(f);
      d && p.setMeta(yn, l.pos), n.dispatch(p);
    }
  }
  function o() {
    n.root.removeEventListener("mouseup", o), n.root.removeEventListener("dragstart", o), n.root.removeEventListener("mousemove", a), yn.getState(n.state) != null && n.dispatch(n.state.tr.setMeta(yn, -1));
  }
  function a(l) {
    const c = l, u = yn.getState(n.state);
    let d;
    if (u != null)
      d = n.state.doc.resolve(u);
    else if (rf(n, c.target) != r && (d = Ra(n, e), !d))
      return o();
    d && s(d, c);
  }
  n.root.addEventListener("mouseup", o), n.root.addEventListener("dragstart", o), n.root.addEventListener("mousemove", a);
}
function Jg(n, e, t) {
  if (!(n.state.selection instanceof X))
    return null;
  const { $head: r } = n.state.selection;
  for (let i = r.depth - 1; i >= 0; i--) {
    const s = r.node(i);
    if ((t < 0 ? r.index(i) : r.indexAfter(i)) != (t < 0 ? 0 : s.childCount))
      return null;
    if (s.type.spec.tableRole == "cell" || s.type.spec.tableRole == "header_cell") {
      const a = r.before(i), l = e == "vert" ? t > 0 ? "down" : "up" : t > 0 ? "right" : "left";
      return n.endOfTextblock(l) ? a : null;
    }
  }
  return null;
}
function rf(n, e) {
  for (; e && e != n.dom; e = e.parentNode)
    if (e.nodeName == "TD" || e.nodeName == "TH")
      return e;
  return null;
}
function Ra(n, e) {
  const t = n.posAtCoords({
    left: e.clientX,
    top: e.clientY
  });
  return t && t ? Qr(n.state.doc.resolve(t.pos)) : null;
}
var aS = class {
  constructor(e, t) {
    this.node = e, this.cellMinWidth = t, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.colgroup = this.table.appendChild(document.createElement("colgroup")), Bl(e, this.colgroup, this.table, t), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(e) {
    return e.type != this.node.type ? !1 : (this.node = e, Bl(e, this.colgroup, this.table, this.cellMinWidth), !0);
  }
  ignoreMutation(e) {
    return e.type == "attributes" && (e.target == this.table || this.colgroup.contains(e.target));
  }
};
function Bl(n, e, t, r, i, s) {
  var o;
  let a = 0, l = !0, c = e.firstChild;
  const u = n.firstChild;
  if (u) {
    for (let d = 0, f = 0; d < u.childCount; d++) {
      const { colspan: p, colwidth: h } = u.child(d).attrs;
      for (let g = 0; g < p; g++, f++) {
        const m = i == f ? s : h && h[g], v = m ? m + "px" : "";
        a += m || r, m || (l = !1), c ? (c.style.width != v && (c.style.width = v), c = c.nextSibling) : e.appendChild(document.createElement("col")).style.width = v;
      }
    }
    for (; c; ) {
      const d = c.nextSibling;
      (o = c.parentNode) == null || o.removeChild(c), c = d;
    }
    l ? (t.style.width = a + "px", t.style.minWidth = "") : (t.style.width = "", t.style.minWidth = a + "px");
  }
}
var xt = new Me(
  "tableColumnResizing"
);
function lS({
  handleWidth: n = 5,
  cellMinWidth: e = 25,
  View: t = aS,
  lastColumnResizable: r = !0
} = {}) {
  const i = new Se({
    key: xt,
    state: {
      init(s, o) {
        return i.spec.props.nodeViews[Ye(o.schema).table.name] = (a, l) => new t(a, e, l), new Os(-1, !1);
      },
      apply(s, o) {
        return o.apply(s);
      }
    },
    props: {
      attributes: (s) => {
        const o = xt.getState(s);
        return o && o.activeHandle > -1 ? { class: "resize-cursor" } : {};
      },
      handleDOMEvents: {
        mousemove: (s, o) => {
          cS(
            s,
            o,
            n,
            e,
            r
          );
        },
        mouseleave: (s) => {
          uS(s);
        },
        mousedown: (s, o) => {
          dS(s, o, e);
        }
      },
      decorations: (s) => {
        const o = xt.getState(s);
        if (o && o.activeHandle > -1)
          return bS(s, o.activeHandle);
      },
      nodeViews: {}
    }
  });
  return i;
}
var Os = class {
  constructor(n, e) {
    this.activeHandle = n, this.dragging = e;
  }
  apply(n) {
    const e = this, t = n.getMeta(xt);
    if (t && t.setHandle != null)
      return new Os(t.setHandle, !1);
    if (t && t.setDragging !== void 0)
      return new Os(e.activeHandle, t.setDragging);
    if (e.activeHandle > -1 && n.docChanged) {
      let r = n.mapping.map(e.activeHandle, -1);
      return Dl(n.doc.resolve(r)) || (r = -1), new Os(r, e.dragging);
    }
    return e;
  }
};
function cS(n, e, t, r, i) {
  const s = xt.getState(n.state);
  if (s && !s.dragging) {
    const o = pS(e.target);
    let a = -1;
    if (o) {
      const { left: l, right: c } = o.getBoundingClientRect();
      e.clientX - l <= t ? a = sf(n, e, "left", t) : c - e.clientX <= t && (a = sf(n, e, "right", t));
    }
    if (a != s.activeHandle) {
      if (!i && a !== -1) {
        const l = n.state.doc.resolve(a), c = l.node(-1), u = Ne.get(c), d = l.start(-1);
        if (u.colCount(l.pos - d) + l.nodeAfter.attrs.colspan - 1 == u.width - 1)
          return;
      }
      Yg(n, a);
    }
  }
}
function uS(n) {
  const e = xt.getState(n.state);
  e && e.activeHandle > -1 && !e.dragging && Yg(n, -1);
}
function dS(n, e, t) {
  const r = xt.getState(n.state);
  if (!r || r.activeHandle == -1 || r.dragging)
    return !1;
  const i = n.state.doc.nodeAt(r.activeHandle), s = fS(n, r.activeHandle, i.attrs);
  n.dispatch(
    n.state.tr.setMeta(xt, {
      setDragging: { startX: e.clientX, startWidth: s }
    })
  );
  function o(l) {
    window.removeEventListener("mouseup", o), window.removeEventListener("mousemove", a);
    const c = xt.getState(n.state);
    c != null && c.dragging && (hS(
      n,
      c.activeHandle,
      of(c.dragging, l, t)
    ), n.dispatch(
      n.state.tr.setMeta(xt, { setDragging: null })
    ));
  }
  function a(l) {
    if (!l.which)
      return o(l);
    const c = xt.getState(n.state);
    if (c && c.dragging) {
      const u = of(c.dragging, l, t);
      gS(n, c.activeHandle, u, t);
    }
  }
  return window.addEventListener("mouseup", o), window.addEventListener("mousemove", a), e.preventDefault(), !0;
}
function fS(n, e, { colspan: t, colwidth: r }) {
  const i = r && r[r.length - 1];
  if (i)
    return i;
  const s = n.domAtPos(e);
  let a = s.node.childNodes[s.offset].offsetWidth, l = t;
  if (r)
    for (let c = 0; c < t; c++)
      r[c] && (a -= r[c], l--);
  return a / l;
}
function pS(n) {
  for (; n && n.nodeName != "TD" && n.nodeName != "TH"; )
    n = n.classList && n.classList.contains("ProseMirror") ? null : n.parentNode;
  return n;
}
function sf(n, e, t, r) {
  const i = t == "right" ? -r : r, s = n.posAtCoords({
    left: e.clientX + i,
    top: e.clientY
  });
  if (!s)
    return -1;
  const { pos: o } = s, a = Qr(n.state.doc.resolve(o));
  if (!a)
    return -1;
  if (t == "right")
    return a.pos;
  const l = Ne.get(a.node(-1)), c = a.start(-1), u = l.map.indexOf(a.pos - c);
  return u % l.width == 0 ? -1 : c + l.map[u - 1];
}
function of(n, e, t) {
  const r = e.clientX - n.startX;
  return Math.max(t, n.startWidth + r);
}
function Yg(n, e) {
  n.dispatch(
    n.state.tr.setMeta(xt, { setHandle: e })
  );
}
function hS(n, e, t) {
  const r = n.state.doc.resolve(e), i = r.node(-1), s = Ne.get(i), o = r.start(-1), a = s.colCount(r.pos - o) + r.nodeAfter.attrs.colspan - 1, l = n.state.tr;
  for (let c = 0; c < s.height; c++) {
    const u = c * s.width + a;
    if (c && s.map[u] == s.map[u - s.width])
      continue;
    const d = s.map[u], f = i.nodeAt(d).attrs, p = f.colspan == 1 ? 0 : a - s.colCount(d);
    if (f.colwidth && f.colwidth[p] == t)
      continue;
    const h = f.colwidth ? f.colwidth.slice() : mS(f.colspan);
    h[p] = t, l.setNodeMarkup(o + d, null, { ...f, colwidth: h });
  }
  l.docChanged && n.dispatch(l);
}
function gS(n, e, t, r) {
  const i = n.state.doc.resolve(e), s = i.node(-1), o = i.start(-1), a = Ne.get(s).colCount(i.pos - o) + i.nodeAfter.attrs.colspan - 1;
  let l = n.domAtPos(i.start(-1)).node;
  for (; l && l.nodeName != "TABLE"; )
    l = l.parentNode;
  l && Bl(
    s,
    l.firstChild,
    l,
    r,
    a,
    t
  );
}
function mS(n) {
  return Array(n).fill(0);
}
function bS(n, e) {
  const t = [], r = n.doc.resolve(e), i = r.node(-1);
  if (!i)
    return ke.empty;
  const s = Ne.get(i), o = r.start(-1), a = s.colCount(r.pos - o) + r.nodeAfter.attrs.colspan;
  for (let l = 0; l < s.height; l++) {
    const c = a + l * s.width - 1;
    if ((a == s.width || s.map[c] != s.map[c + 1]) && (l == 0 || s.map[c] != s.map[c - s.width])) {
      const u = s.map[c], d = o + u + i.nodeAt(u).nodeSize - 1, f = document.createElement("div");
      f.className = "column-resize-handle", t.push(Be.widget(d, f));
    }
  }
  return ke.create(n.doc, t);
}
function Xt(n) {
  const e = n.selection, t = Fo(n), r = t.node(-1), i = t.start(-1), s = Ne.get(r);
  return { ...e instanceof fe ? s.rectBetween(
    e.$anchorCell.pos - i,
    e.$headCell.pos - i
  ) : s.findCell(t.pos - i), tableStart: i, map: s, table: r };
}
function Xg(n, { map: e, tableStart: t, table: r }, i) {
  let s = i > 0 ? -1 : 0;
  WC(e, r, i + s) && (s = i == 0 || i == e.width ? null : 0);
  for (let o = 0; o < e.height; o++) {
    const a = o * e.width + i;
    if (i > 0 && i < e.width && e.map[a - 1] == e.map[a]) {
      const l = e.map[a], c = r.nodeAt(l);
      n.setNodeMarkup(
        n.mapping.map(t + l),
        null,
        Wg(c.attrs, i - e.colCount(l))
      ), o += c.attrs.rowspan - 1;
    } else {
      const l = s == null ? Ye(r.type.schema).cell : r.nodeAt(e.map[a + s]).type, c = e.positionAt(o, i, r);
      n.insert(n.mapping.map(t + c), l.createAndFill());
    }
  }
  return n;
}
function yS(n, e) {
  if (!Dt(n))
    return !1;
  if (e) {
    const t = Xt(n);
    e(Xg(n.tr, t, t.left));
  }
  return !0;
}
function vS(n, e) {
  if (!Dt(n))
    return !1;
  if (e) {
    const t = Xt(n);
    e(Xg(n.tr, t, t.right));
  }
  return !0;
}
function wS(n, { map: e, table: t, tableStart: r }, i) {
  const s = n.mapping.maps.length;
  for (let o = 0; o < e.height; ) {
    const a = o * e.width + i, l = e.map[a], c = t.nodeAt(l), u = c.attrs;
    if (i > 0 && e.map[a - 1] == l || i < e.width - 1 && e.map[a + 1] == l)
      n.setNodeMarkup(
        n.mapping.slice(s).map(r + l),
        null,
        lr(u, i - e.colCount(l))
      );
    else {
      const d = n.mapping.slice(s).map(r + l);
      n.delete(d, d + c.nodeSize);
    }
    o += u.rowspan;
  }
}
function kS(n, e) {
  if (!Dt(n))
    return !1;
  if (e) {
    const t = Xt(n), r = n.tr;
    if (t.left == 0 && t.right == t.map.width)
      return !1;
    for (let i = t.right - 1; wS(r, t, i), i != t.left; i--) {
      const s = t.tableStart ? r.doc.nodeAt(t.tableStart - 1) : r.doc;
      if (!s)
        throw RangeError("No table found");
      t.table = s, t.map = Ne.get(s);
    }
    e(r);
  }
  return !0;
}
function ES(n, e, t) {
  var r;
  const i = Ye(e.type.schema).header_cell;
  for (let s = 0; s < n.width; s++)
    if (((r = e.nodeAt(n.map[s + t * n.width])) == null ? void 0 : r.type) != i)
      return !1;
  return !0;
}
function Qg(n, { map: e, tableStart: t, table: r }, i) {
  var s;
  let o = t;
  for (let c = 0; c < i; c++)
    o += r.child(c).nodeSize;
  const a = [];
  let l = i > 0 ? -1 : 0;
  ES(e, r, i + l) && (l = i == 0 || i == e.height ? null : 0);
  for (let c = 0, u = e.width * i; c < e.width; c++, u++)
    if (i > 0 && i < e.height && e.map[u] == e.map[u - e.width]) {
      const d = e.map[u], f = r.nodeAt(d).attrs;
      n.setNodeMarkup(t + d, null, {
        ...f,
        rowspan: f.rowspan + 1
      }), c += f.colspan - 1;
    } else {
      const d = l == null ? Ye(r.type.schema).cell : (s = r.nodeAt(e.map[u + l * e.width])) == null ? void 0 : s.type, f = d == null ? void 0 : d.createAndFill();
      f && a.push(f);
    }
  return n.insert(o, Ye(r.type.schema).row.create(null, a)), n;
}
function xS(n, e) {
  if (!Dt(n))
    return !1;
  if (e) {
    const t = Xt(n);
    e(Qg(n.tr, t, t.top));
  }
  return !0;
}
function CS(n, e) {
  if (!Dt(n))
    return !1;
  if (e) {
    const t = Xt(n);
    e(Qg(n.tr, t, t.bottom));
  }
  return !0;
}
function SS(n, { map: e, table: t, tableStart: r }, i) {
  let s = 0;
  for (let l = 0; l < i; l++)
    s += t.child(l).nodeSize;
  const o = s + t.child(i).nodeSize, a = n.mapping.maps.length;
  n.delete(s + r, o + r);
  for (let l = 0, c = i * e.width; l < e.width; l++, c++) {
    const u = e.map[c];
    if (i > 0 && u == e.map[c - e.width]) {
      const d = t.nodeAt(u).attrs;
      n.setNodeMarkup(n.mapping.slice(a).map(u + r), null, {
        ...d,
        rowspan: d.rowspan - 1
      }), l += d.colspan - 1;
    } else if (i < e.width && u == e.map[c + e.width]) {
      const d = t.nodeAt(u), f = d.attrs, p = d.type.create(
        { ...f, rowspan: d.attrs.rowspan - 1 },
        d.content
      ), h = e.positionAt(i + 1, l, t);
      n.insert(n.mapping.slice(a).map(r + h), p), l += f.colspan - 1;
    }
  }
}
function _S(n, e) {
  if (!Dt(n))
    return !1;
  if (e) {
    const t = Xt(n), r = n.tr;
    if (t.top == 0 && t.bottom == t.map.height)
      return !1;
    for (let i = t.bottom - 1; SS(r, t, i), i != t.top; i--) {
      const s = t.tableStart ? r.doc.nodeAt(t.tableStart - 1) : r.doc;
      if (!s)
        throw RangeError("No table found");
      t.table = s, t.map = Ne.get(t.table);
    }
    e(r);
  }
  return !0;
}
function af(n) {
  const e = n.content;
  return e.childCount == 1 && e.child(0).isTextblock && e.child(0).childCount == 0;
}
function MS({ width: n, height: e, map: t }, r) {
  let i = r.top * n + r.left, s = i, o = (r.bottom - 1) * n + r.left, a = i + (r.right - r.left - 1);
  for (let l = r.top; l < r.bottom; l++) {
    if (r.left > 0 && t[s] == t[s - 1] || r.right < n && t[a] == t[a + 1])
      return !0;
    s += n, a += n;
  }
  for (let l = r.left; l < r.right; l++) {
    if (r.top > 0 && t[i] == t[i - n] || r.bottom < e && t[o] == t[o + n])
      return !0;
    i++, o++;
  }
  return !1;
}
function lf(n, e) {
  const t = n.selection;
  if (!(t instanceof fe) || t.$anchorCell.pos == t.$headCell.pos)
    return !1;
  const r = Xt(n), { map: i } = r;
  if (MS(i, r))
    return !1;
  if (e) {
    const s = n.tr, o = {};
    let a = R.empty, l, c;
    for (let u = r.top; u < r.bottom; u++)
      for (let d = r.left; d < r.right; d++) {
        const f = i.map[u * i.width + d], p = r.table.nodeAt(f);
        if (!(o[f] || !p))
          if (o[f] = !0, l == null)
            l = f, c = p;
          else {
            af(p) || (a = a.append(p.content));
            const h = s.mapping.map(f + r.tableStart);
            s.delete(h, h + p.nodeSize);
          }
      }
    if (l == null || c == null)
      return !0;
    if (s.setNodeMarkup(l + r.tableStart, null, {
      ...Wg(
        c.attrs,
        c.attrs.colspan,
        r.right - r.left - c.attrs.colspan
      ),
      rowspan: r.bottom - r.top
    }), a.size) {
      const u = l + 1 + c.content.size, d = af(c) ? l + 1 : u;
      s.replaceWith(d + r.tableStart, u + r.tableStart, a);
    }
    s.setSelection(
      new fe(s.doc.resolve(l + r.tableStart))
    ), e(s);
  }
  return !0;
}
function cf(n, e) {
  const t = Ye(n.schema);
  return AS(({ node: r }) => t[r.type.spec.tableRole])(n, e);
}
function AS(n) {
  return (e, t) => {
    var r;
    const i = e.selection;
    let s, o;
    if (i instanceof fe) {
      if (i.$anchorCell.pos != i.$headCell.pos)
        return !1;
      s = i.$anchorCell.nodeAfter, o = i.$anchorCell.pos;
    } else {
      if (s = qC(i.$from), !s)
        return !1;
      o = (r = Qr(i.$from)) == null ? void 0 : r.pos;
    }
    if (s == null || o == null || s.attrs.colspan == 1 && s.attrs.rowspan == 1)
      return !1;
    if (t) {
      let a = s.attrs;
      const l = [], c = a.colwidth;
      a.rowspan > 1 && (a = { ...a, rowspan: 1 }), a.colspan > 1 && (a = { ...a, colspan: 1 });
      const u = Xt(e), d = e.tr;
      for (let p = 0; p < u.right - u.left; p++)
        l.push(
          c ? {
            ...a,
            colwidth: c && c[p] ? [c[p]] : null
          } : a
        );
      let f;
      for (let p = u.top; p < u.bottom; p++) {
        let h = u.map.positionAt(p, u.left, u.table);
        p == u.top && (h += s.nodeSize);
        for (let g = u.left, m = 0; g < u.right; g++, m++)
          g == u.left && p == u.top || d.insert(
            f = d.mapping.map(h + u.tableStart, 1),
            n({ node: s, row: p, col: g }).createAndFill(l[m])
          );
      }
      d.setNodeMarkup(
        o,
        n({ node: s, row: u.top, col: u.left }),
        l[0]
      ), i instanceof fe && d.setSelection(
        new fe(
          d.doc.resolve(i.$anchorCell.pos),
          f ? d.doc.resolve(f) : void 0
        )
      ), t(d);
    }
    return !0;
  };
}
function TS(n, e) {
  return function(t, r) {
    if (!Dt(t))
      return !1;
    const i = Fo(t);
    if (i.nodeAfter.attrs[n] === e)
      return !1;
    if (r) {
      const s = t.tr;
      t.selection instanceof fe ? t.selection.forEachCell((o, a) => {
        o.attrs[n] !== e && s.setNodeMarkup(a, null, {
          ...o.attrs,
          [n]: e
        });
      }) : s.setNodeMarkup(i.pos, null, {
        ...i.nodeAfter.attrs,
        [n]: e
      }), r(s);
    }
    return !0;
  };
}
function NS(n) {
  return function(e, t) {
    if (!Dt(e))
      return !1;
    if (t) {
      const r = Ye(e.schema), i = Xt(e), s = e.tr, o = i.map.cellsInRect(
        n == "column" ? {
          left: i.left,
          top: 0,
          right: i.right,
          bottom: i.map.height
        } : n == "row" ? {
          left: 0,
          top: i.top,
          right: i.map.width,
          bottom: i.bottom
        } : i
      ), a = o.map((l) => i.table.nodeAt(l));
      for (let l = 0; l < o.length; l++)
        a[l].type == r.header_cell && s.setNodeMarkup(
          i.tableStart + o[l],
          r.cell,
          a[l].attrs
        );
      if (s.steps.length == 0)
        for (let l = 0; l < o.length; l++)
          s.setNodeMarkup(
            i.tableStart + o[l],
            r.header_cell,
            a[l].attrs
          );
      t(s);
    }
    return !0;
  };
}
function uf(n, e, t) {
  const r = e.map.cellsInRect({
    left: 0,
    top: 0,
    right: n == "row" ? e.map.width : 1,
    bottom: n == "column" ? e.map.height : 1
  });
  for (let i = 0; i < r.length; i++) {
    const s = e.table.nodeAt(r[i]);
    if (s && s.type !== t.header_cell)
      return !1;
  }
  return !0;
}
function Bi(n, e) {
  return e = e || { useDeprecatedLogic: !1 }, e.useDeprecatedLogic ? NS(n) : function(t, r) {
    if (!Dt(t))
      return !1;
    if (r) {
      const i = Ye(t.schema), s = Xt(t), o = t.tr, a = uf("row", s, i), l = uf(
        "column",
        s,
        i
      ), u = (n === "column" ? a : n === "row" ? l : !1) ? 1 : 0, d = n == "column" ? {
        left: 0,
        top: u,
        right: 1,
        bottom: s.map.height
      } : n == "row" ? {
        left: u,
        top: 0,
        right: s.map.width,
        bottom: 1
      } : s, f = n == "column" ? l ? i.cell : i.header_cell : n == "row" ? a ? i.cell : i.header_cell : i.cell;
      s.map.cellsInRect(d).forEach((p) => {
        const h = p + s.tableStart, g = o.doc.nodeAt(h);
        g && o.setNodeMarkup(h, f, g.attrs);
      }), r(o);
    }
    return !0;
  };
}
Bi("row", {
  useDeprecatedLogic: !0
});
Bi("column", {
  useDeprecatedLogic: !0
});
var OS = Bi("cell", {
  useDeprecatedLogic: !0
});
function LS(n, e) {
  if (e < 0) {
    const t = n.nodeBefore;
    if (t)
      return n.pos - t.nodeSize;
    for (let r = n.index(-1) - 1, i = n.before(); r >= 0; r--) {
      const s = n.node(-1).child(r), o = s.lastChild;
      if (o)
        return i - 1 - o.nodeSize;
      i -= s.nodeSize;
    }
  } else {
    if (n.index() < n.parent.childCount - 1)
      return n.pos + n.nodeAfter.nodeSize;
    const t = n.node(-1);
    for (let r = n.indexAfter(-1), i = n.after(); r < t.childCount; r++) {
      const s = t.child(r);
      if (s.childCount)
        return i + 1;
      i += s.nodeSize;
    }
  }
  return null;
}
function df(n) {
  return function(e, t) {
    if (!Dt(e))
      return !1;
    const r = LS(Fo(e), n);
    if (r == null)
      return !1;
    if (t) {
      const i = e.doc.resolve(r);
      t(
        e.tr.setSelection(X.between(i, KC(i))).scrollIntoView()
      );
    }
    return !0;
  };
}
function RS(n, e) {
  const t = n.selection.$anchor;
  for (let r = t.depth; r > 0; r--)
    if (t.node(r).type.spec.tableRole == "table")
      return e && e(
        n.tr.delete(t.before(r), t.after(r)).scrollIntoView()
      ), !0;
  return !1;
}
function DS({
  allowTableNodeSelection: n = !1
} = {}) {
  return new Se({
    key: yn,
    // This piece of state is used to remember when a mouse-drag
    // cell-selection is happening, so that it can continue even as
    // transactions (which might move its anchor cell) come in.
    state: {
      init() {
        return null;
      },
      apply(e, t) {
        const r = e.getMeta(yn);
        if (r != null)
          return r == -1 ? null : r;
        if (t == null || !e.docChanged)
          return t;
        const { deleted: i, pos: s } = e.mapping.mapResult(t);
        return i ? null : s;
      }
    },
    props: {
      decorations: GC,
      handleDOMEvents: {
        mousedown: oS
      },
      createSelectionBetween(e) {
        return yn.getState(e.state) != null ? e.state.selection : null;
      },
      handleTripleClick: iS,
      handleKeyDown: rS,
      handlePaste: sS
    },
    appendTransaction(e, t, r) {
      return JC(
        r,
        jg(r, t),
        n
      );
    }
  });
}
function ff(n, e, t, r, i, s) {
  let o = 0, a = !0, l = e.firstChild;
  const c = n.firstChild;
  for (let u = 0, d = 0; u < c.childCount; u += 1) {
    const { colspan: f, colwidth: p } = c.child(u).attrs;
    for (let h = 0; h < f; h += 1, d += 1) {
      const g = i === d ? s : p && p[h], m = g ? `${g}px` : "";
      o += g || r, g || (a = !1), l ? (l.style.width !== m && (l.style.width = m), l = l.nextSibling) : e.appendChild(document.createElement("col")).style.width = m;
    }
  }
  for (; l; ) {
    const u = l.nextSibling;
    l.parentNode.removeChild(l), l = u;
  }
  a ? (t.style.width = `${o}px`, t.style.minWidth = "") : (t.style.width = "", t.style.minWidth = `${o}px`);
}
class IS {
  constructor(e, t) {
    this.node = e, this.cellMinWidth = t, this.dom = document.createElement("div"), this.dom.className = "tableWrapper", this.table = this.dom.appendChild(document.createElement("table")), this.colgroup = this.table.appendChild(document.createElement("colgroup")), ff(e, this.colgroup, this.table, t), this.contentDOM = this.table.appendChild(document.createElement("tbody"));
  }
  update(e) {
    return e.type !== this.node.type ? !1 : (this.node = e, ff(e, this.colgroup, this.table, this.cellMinWidth), !0);
  }
  ignoreMutation(e) {
    return e.type === "attributes" && (e.target === this.table || this.colgroup.contains(e.target));
  }
}
function pf(n, e) {
  return e ? n.createChecked(null, e) : n.createAndFill();
}
function BS(n) {
  if (n.cached.tableNodeTypes)
    return n.cached.tableNodeTypes;
  const e = {};
  return Object.keys(n.nodes).forEach((t) => {
    const r = n.nodes[t];
    r.spec.tableRole && (e[r.spec.tableRole] = r);
  }), n.cached.tableNodeTypes = e, e;
}
function HS(n, e, t, r, i) {
  const s = BS(n), o = [], a = [];
  for (let c = 0; c < t; c += 1) {
    const u = pf(s.cell, i);
    if (u && a.push(u), r) {
      const d = pf(s.header_cell, i);
      d && o.push(d);
    }
  }
  const l = [];
  for (let c = 0; c < e; c += 1)
    l.push(s.row.createChecked(null, r && c === 0 ? o : a));
  return s.table.createChecked(null, l);
}
function PS(n) {
  return n instanceof fe;
}
const fs = ({ editor: n }) => {
  const { selection: e } = n.state;
  if (!PS(e))
    return !1;
  let t = 0;
  const r = ag(e.ranges[0].$from, (s) => s.type.name === "table");
  return r == null || r.node.descendants((s) => {
    if (s.type.name === "table")
      return !1;
    ["tableCell", "tableHeader"].includes(s.type.name) && (t += 1);
  }), t === e.ranges.length ? (n.commands.deleteTable(), !0) : !1;
}, $S = le.create({
  name: "table",
  // @ts-ignore
  addOptions() {
    return {
      HTMLAttributes: {},
      resizable: !1,
      handleWidth: 5,
      cellMinWidth: 25,
      // TODO: fix
      View: IS,
      lastColumnResizable: !0,
      allowTableNodeSelection: !1
    };
  },
  content: "tableRow+",
  tableRole: "table",
  isolating: !0,
  group: "block",
  parseHTML() {
    return [{ tag: "table" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["table", pe(this.options.HTMLAttributes, n), ["tbody", 0]];
  },
  addCommands() {
    return {
      insertTable: ({ rows: n = 3, cols: e = 3, withHeaderRow: t = !0 } = {}) => ({ tr: r, dispatch: i, editor: s }) => {
        const o = HS(s.schema, n, e, t);
        if (i) {
          const a = r.selection.anchor + 1;
          r.replaceSelectionWith(o).scrollIntoView().setSelection(X.near(r.doc.resolve(a)));
        }
        return !0;
      },
      addColumnBefore: () => ({ state: n, dispatch: e }) => yS(n, e),
      addColumnAfter: () => ({ state: n, dispatch: e }) => vS(n, e),
      deleteColumn: () => ({ state: n, dispatch: e }) => kS(n, e),
      addRowBefore: () => ({ state: n, dispatch: e }) => xS(n, e),
      addRowAfter: () => ({ state: n, dispatch: e }) => CS(n, e),
      deleteRow: () => ({ state: n, dispatch: e }) => _S(n, e),
      deleteTable: () => ({ state: n, dispatch: e }) => RS(n, e),
      mergeCells: () => ({ state: n, dispatch: e }) => lf(n, e),
      splitCell: () => ({ state: n, dispatch: e }) => cf(n, e),
      toggleHeaderColumn: () => ({ state: n, dispatch: e }) => Bi("column")(n, e),
      toggleHeaderRow: () => ({ state: n, dispatch: e }) => Bi("row")(n, e),
      toggleHeaderCell: () => ({ state: n, dispatch: e }) => OS(n, e),
      mergeOrSplit: () => ({ state: n, dispatch: e }) => lf(n, e) ? !0 : cf(n, e),
      setCellAttribute: (n, e) => ({ state: t, dispatch: r }) => TS(n, e)(t, r),
      goToNextCell: () => ({ state: n, dispatch: e }) => df(1)(n, e),
      goToPreviousCell: () => ({ state: n, dispatch: e }) => df(-1)(n, e),
      fixTables: () => ({ state: n, dispatch: e }) => (e && jg(n), !0),
      setCellSelection: (n) => ({ tr: e, dispatch: t }) => {
        if (t) {
          const r = fe.create(e.doc, n.anchorCell, n.headCell);
          e.setSelection(r);
        }
        return !0;
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      Tab: () => this.editor.commands.goToNextCell() ? !0 : this.editor.can().addRowAfter() ? this.editor.chain().addRowAfter().goToNextCell().run() : !1,
      "Shift-Tab": () => this.editor.commands.goToPreviousCell(),
      Backspace: fs,
      "Mod-Backspace": fs,
      Delete: fs,
      "Mod-Delete": fs
    };
  },
  addProseMirrorPlugins() {
    return [
      ...this.options.resizable && this.editor.isEditable ? [
        lS({
          handleWidth: this.options.handleWidth,
          cellMinWidth: this.options.cellMinWidth,
          // @ts-ignore (incorrect type)
          View: this.options.View,
          // TODO: PR for @types/prosemirror-tables
          // @ts-ignore (incorrect type)
          lastColumnResizable: this.options.lastColumnResizable
        })
      ] : [],
      DS({
        allowTableNodeSelection: this.options.allowTableNodeSelection
      })
    ];
  },
  extendNodeSchema(n) {
    const e = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      tableRole: ie(K(n, "tableRole", e))
    };
  }
}), FS = le.create({
  name: "tableRow",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "(tableCell | tableHeader)*",
  tableRole: "row",
  parseHTML() {
    return [
      { tag: "tr" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["tr", pe(this.options.HTMLAttributes, n), 0];
  }
}), zS = le.create({
  name: "tableHeader",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (n) => {
          const e = n.getAttribute("colwidth");
          return e ? [parseInt(e, 10)] : null;
        }
      }
    };
  },
  tableRole: "header_cell",
  isolating: !0,
  parseHTML() {
    return [
      { tag: "th" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["th", pe(this.options.HTMLAttributes, n), 0];
  }
}), VS = le.create({
  name: "tableCell",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  addAttributes() {
    return {
      colspan: {
        default: 1
      },
      rowspan: {
        default: 1
      },
      colwidth: {
        default: null,
        parseHTML: (n) => {
          const e = n.getAttribute("colwidth");
          return e ? [parseInt(e, 10)] : null;
        }
      }
    };
  },
  tableRole: "cell",
  isolating: !0,
  parseHTML() {
    return [
      { tag: "td" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["td", pe(this.options.HTMLAttributes, n), 0];
  }
}), qS = Ee.create({
  name: "characterCount",
  addOptions() {
    return {
      limit: null,
      mode: "textSize"
    };
  },
  addStorage() {
    return {
      characters: () => 0,
      words: () => 0
    };
  },
  onBeforeCreate() {
    this.storage.characters = (n) => {
      const e = (n == null ? void 0 : n.node) || this.editor.state.doc;
      return ((n == null ? void 0 : n.mode) || this.options.mode) === "textSize" ? e.textBetween(0, e.content.size, void 0, " ").length : e.nodeSize;
    }, this.storage.words = (n) => {
      const e = (n == null ? void 0 : n.node) || this.editor.state.doc;
      return e.textBetween(0, e.content.size, " ", " ").split(" ").filter((i) => i !== "").length;
    };
  },
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("characterCount"),
        filterTransaction: (n, e) => {
          const t = this.options.limit;
          if (!n.docChanged || t === 0 || t === null || t === void 0)
            return !0;
          const r = this.storage.characters({ node: e.doc }), i = this.storage.characters({ node: n.doc });
          if (i <= t || r > t && i > t && i <= r)
            return !0;
          if (r > t && i > t && i > r || !n.getMeta("paste"))
            return !1;
          const o = n.selection.$head.pos, a = i - t, l = o - a, c = o;
          return n.deleteRange(l, c), !(this.storage.characters({ node: n.doc }) > t);
        }
      })
    ];
  }
}), US = "aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2", KS = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2", Zr = (n, e) => {
  for (const t in e)
    n[t] = e[t];
  return n;
}, Hl = "numeric", Pl = "ascii", $l = "alpha", Ls = "asciinumeric", ps = "alphanumeric", Fl = "domain", em = "emoji", WS = "scheme", GS = "slashscheme", hf = "whitespace";
function ZS(n, e) {
  return n in e || (e[n] = []), e[n];
}
function Kn(n, e, t) {
  e[Hl] && (e[Ls] = !0, e[ps] = !0), e[Pl] && (e[Ls] = !0, e[$l] = !0), e[Ls] && (e[ps] = !0), e[$l] && (e[ps] = !0), e[ps] && (e[Fl] = !0), e[em] && (e[Fl] = !0);
  for (const r in e) {
    const i = ZS(r, t);
    i.indexOf(n) < 0 && i.push(n);
  }
}
function jS(n, e) {
  const t = {};
  for (const r in e)
    e[r].indexOf(n) >= 0 && (t[r] = !0);
  return t;
}
function lt(n) {
  n === void 0 && (n = null), this.j = {}, this.jr = [], this.jd = null, this.t = n;
}
lt.groups = {};
lt.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(n) {
    const e = this, t = e.j[n];
    if (t)
      return t;
    for (let r = 0; r < e.jr.length; r++) {
      const i = e.jr[r][0], s = e.jr[r][1];
      if (s && i.test(n))
        return s;
    }
    return e.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(n, e) {
    return e === void 0 && (e = !1), e ? n in this.j : !!this.go(n);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(n, e, t, r) {
    for (let i = 0; i < n.length; i++)
      this.tt(n[i], e, t, r);
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(n, e, t, r) {
    r = r || lt.groups;
    let i;
    return e && e.j ? i = e : (i = new lt(e), t && r && Kn(e, t, r)), this.jr.push([n, i]), i;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(n, e, t, r) {
    let i = this;
    const s = n.length;
    if (!s)
      return i;
    for (let o = 0; o < s - 1; o++)
      i = i.tt(n[o]);
    return i.tt(n[s - 1], e, t, r);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(n, e, t, r) {
    r = r || lt.groups;
    const i = this;
    if (e && e.j)
      return i.j[n] = e, e;
    const s = e;
    let o, a = i.go(n);
    if (a ? (o = new lt(), Zr(o.j, a.j), o.jr.push.apply(o.jr, a.jr), o.jd = a.jd, o.t = a.t) : o = new lt(), s) {
      if (r)
        if (o.t && typeof o.t == "string") {
          const l = Zr(jS(o.t, r), t);
          Kn(s, l, r);
        } else
          t && Kn(s, t, r);
      o.t = s;
    }
    return i.j[n] = o, o;
  }
};
const Y = (n, e, t, r, i) => n.ta(e, t, r, i), kt = (n, e, t, r, i) => n.tr(e, t, r, i), gf = (n, e, t, r, i) => n.ts(e, t, r, i), B = (n, e, t, r, i) => n.tt(e, t, r, i), nn = "WORD", zl = "UWORD", Hi = "LOCALHOST", Vl = "TLD", ql = "UTLD", Rs = "SCHEME", _r = "SLASH_SCHEME", Oc = "NUM", tm = "WS", Lc = "NL", Or = "OPENBRACE", wi = "OPENBRACKET", ki = "OPENANGLEBRACKET", Ei = "OPENPAREN", zn = "CLOSEBRACE", Lr = "CLOSEBRACKET", Rr = "CLOSEANGLEBRACKET", Vn = "CLOSEPAREN", to = "AMPERSAND", no = "APOSTROPHE", ro = "ASTERISK", gn = "AT", io = "BACKSLASH", so = "BACKTICK", oo = "CARET", vn = "COLON", Rc = "COMMA", ao = "DOLLAR", Pt = "DOT", lo = "EQUALS", Dc = "EXCLAMATION", $t = "HYPHEN", co = "PERCENT", uo = "PIPE", fo = "PLUS", po = "POUND", ho = "QUERY", Ic = "QUOTE", Bc = "SEMI", Ft = "SLASH", xi = "TILDE", go = "UNDERSCORE", nm = "EMOJI", mo = "SYM";
var rm = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  WORD: nn,
  UWORD: zl,
  LOCALHOST: Hi,
  TLD: Vl,
  UTLD: ql,
  SCHEME: Rs,
  SLASH_SCHEME: _r,
  NUM: Oc,
  WS: tm,
  NL: Lc,
  OPENBRACE: Or,
  OPENBRACKET: wi,
  OPENANGLEBRACKET: ki,
  OPENPAREN: Ei,
  CLOSEBRACE: zn,
  CLOSEBRACKET: Lr,
  CLOSEANGLEBRACKET: Rr,
  CLOSEPAREN: Vn,
  AMPERSAND: to,
  APOSTROPHE: no,
  ASTERISK: ro,
  AT: gn,
  BACKSLASH: io,
  BACKTICK: so,
  CARET: oo,
  COLON: vn,
  COMMA: Rc,
  DOLLAR: ao,
  DOT: Pt,
  EQUALS: lo,
  EXCLAMATION: Dc,
  HYPHEN: $t,
  PERCENT: co,
  PIPE: uo,
  PLUS: fo,
  POUND: po,
  QUERY: ho,
  QUOTE: Ic,
  SEMI: Bc,
  SLASH: Ft,
  TILDE: xi,
  UNDERSCORE: go,
  EMOJI: nm,
  SYM: mo
});
const vr = /[a-z]/, Da = /\p{L}/u, Ia = /\p{Emoji}/u, Ba = /\d/, mf = /\s/, bf = `
`, JS = "️", YS = "‍";
let hs = null, gs = null;
function XS(n) {
  n === void 0 && (n = []);
  const e = {};
  lt.groups = e;
  const t = new lt();
  hs == null && (hs = yf(US)), gs == null && (gs = yf(KS)), B(t, "'", no), B(t, "{", Or), B(t, "[", wi), B(t, "<", ki), B(t, "(", Ei), B(t, "}", zn), B(t, "]", Lr), B(t, ">", Rr), B(t, ")", Vn), B(t, "&", to), B(t, "*", ro), B(t, "@", gn), B(t, "`", so), B(t, "^", oo), B(t, ":", vn), B(t, ",", Rc), B(t, "$", ao), B(t, ".", Pt), B(t, "=", lo), B(t, "!", Dc), B(t, "-", $t), B(t, "%", co), B(t, "|", uo), B(t, "+", fo), B(t, "#", po), B(t, "?", ho), B(t, '"', Ic), B(t, "/", Ft), B(t, ";", Bc), B(t, "~", xi), B(t, "_", go), B(t, "\\", io);
  const r = kt(t, Ba, Oc, {
    [Hl]: !0
  });
  kt(r, Ba, r);
  const i = kt(t, vr, nn, {
    [Pl]: !0
  });
  kt(i, vr, i);
  const s = kt(t, Da, zl, {
    [$l]: !0
  });
  kt(s, vr), kt(s, Da, s);
  const o = kt(t, mf, tm, {
    [hf]: !0
  });
  B(t, bf, Lc, {
    [hf]: !0
  }), B(o, bf), kt(o, mf, o);
  const a = kt(t, Ia, nm, {
    [em]: !0
  });
  kt(a, Ia, a), B(a, JS, a);
  const l = B(a, YS);
  kt(l, Ia, a);
  const c = [[vr, i]], u = [[vr, null], [Da, s]];
  for (let d = 0; d < hs.length; d++)
    dn(t, hs[d], Vl, nn, c);
  for (let d = 0; d < gs.length; d++)
    dn(t, gs[d], ql, zl, u);
  Kn(Vl, {
    tld: !0,
    ascii: !0
  }, e), Kn(ql, {
    utld: !0,
    alpha: !0
  }, e), dn(t, "file", Rs, nn, c), dn(t, "mailto", Rs, nn, c), dn(t, "http", _r, nn, c), dn(t, "https", _r, nn, c), dn(t, "ftp", _r, nn, c), dn(t, "ftps", _r, nn, c), Kn(Rs, {
    scheme: !0,
    ascii: !0
  }, e), Kn(_r, {
    slashscheme: !0,
    ascii: !0
  }, e), n = n.sort((d, f) => d[0] > f[0] ? 1 : -1);
  for (let d = 0; d < n.length; d++) {
    const f = n[d][0], h = n[d][1] ? {
      [WS]: !0
    } : {
      [GS]: !0
    };
    f.indexOf("-") >= 0 ? h[Fl] = !0 : vr.test(f) ? Ba.test(f) ? h[Ls] = !0 : h[Pl] = !0 : h[Hl] = !0, gf(t, f, f, h);
  }
  return gf(t, "localhost", Hi, {
    ascii: !0
  }), t.jd = new lt(mo), {
    start: t,
    tokens: Zr({
      groups: e
    }, rm)
  };
}
function QS(n, e) {
  const t = e_(e.replace(/[A-Z]/g, (a) => a.toLowerCase())), r = t.length, i = [];
  let s = 0, o = 0;
  for (; o < r; ) {
    let a = n, l = null, c = 0, u = null, d = -1, f = -1;
    for (; o < r && (l = a.go(t[o])); )
      a = l, a.accepts() ? (d = 0, f = 0, u = a) : d >= 0 && (d += t[o].length, f++), c += t[o].length, s += t[o].length, o++;
    s -= d, o -= f, c -= d, i.push({
      t: u.t,
      // token type/name
      v: e.slice(s - c, s),
      // string value
      s: s - c,
      // start index
      e: s
      // end index (excluding)
    });
  }
  return i;
}
function e_(n) {
  const e = [], t = n.length;
  let r = 0;
  for (; r < t; ) {
    let i = n.charCodeAt(r), s, o = i < 55296 || i > 56319 || r + 1 === t || (s = n.charCodeAt(r + 1)) < 56320 || s > 57343 ? n[r] : n.slice(r, r + 2);
    e.push(o), r += o.length;
  }
  return e;
}
function dn(n, e, t, r, i) {
  let s;
  const o = e.length;
  for (let a = 0; a < o - 1; a++) {
    const l = e[a];
    n.j[l] ? s = n.j[l] : (s = new lt(r), s.jr = i.slice(), n.j[l] = s), n = s;
  }
  return s = new lt(t), s.jr = i.slice(), n.j[e[o - 1]] = s, s;
}
function yf(n) {
  const e = [], t = [];
  let r = 0, i = "0123456789";
  for (; r < n.length; ) {
    let s = 0;
    for (; i.indexOf(n[r + s]) >= 0; )
      s++;
    if (s > 0) {
      e.push(t.join(""));
      for (let o = parseInt(n.substring(r, r + s), 10); o > 0; o--)
        t.pop();
      r += s;
    } else
      t.push(n[r]), r++;
  }
  return e;
}
const Pi = {
  defaultProtocol: "http",
  events: null,
  format: vf,
  formatHref: vf,
  nl2br: !1,
  tagName: "a",
  target: null,
  rel: null,
  validate: !0,
  truncate: 1 / 0,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Hc(n, e) {
  e === void 0 && (e = null);
  let t = Zr({}, Pi);
  n && (t = Zr(t, n instanceof Hc ? n.o : n));
  const r = t.ignoreTags, i = [];
  for (let s = 0; s < r.length; s++)
    i.push(r[s].toUpperCase());
  this.o = t, e && (this.defaultRender = e), this.ignoreTags = i;
}
Hc.prototype = {
  o: Pi,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(n) {
    return n;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(n) {
    return this.get("validate", n.toString(), n);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(n, e, t) {
    const r = e != null;
    let i = this.o[n];
    return i && (typeof i == "object" ? (i = t.t in i ? i[t.t] : Pi[n], typeof i == "function" && r && (i = i(e, t))) : typeof i == "function" && r && (i = i(e, t.t, t)), i);
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(n, e, t) {
    let r = this.o[n];
    return typeof r == "function" && e != null && (r = r(e, t.t, t)), r;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(n) {
    const e = n.render(this);
    return (this.get("render", null, n) || this.defaultRender)(e, n.t, n);
  }
};
function vf(n) {
  return n;
}
function im(n, e) {
  this.t = "token", this.v = n, this.tk = e;
}
im.prototype = {
  isLink: !1,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
  */
  toHref(n) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(n) {
    const e = this.toString(), t = n.get("truncate", e, this), r = n.get("format", e, this);
    return t && r.length > t ? r.substring(0, t) + "…" : r;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(n) {
    return n.get("formatHref", this.toHref(n.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(n) {
    return n === void 0 && (n = Pi.defaultProtocol), {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(n) {
    return {
      type: this.t,
      value: this.toFormattedString(n),
      isLink: this.isLink,
      href: this.toFormattedHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(n) {
    return n.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(n) {
    const e = this, t = this.toHref(n.get("defaultProtocol")), r = n.get("formatHref", t, this), i = n.get("tagName", t, e), s = this.toFormattedString(n), o = {}, a = n.get("className", t, e), l = n.get("target", t, e), c = n.get("rel", t, e), u = n.getObj("attributes", t, e), d = n.getObj("events", t, e);
    return o.href = r, a && (o.class = a), l && (o.target = l), c && (o.rel = c), u && Zr(o, u), {
      tagName: i,
      attributes: o,
      content: s,
      eventListeners: d
    };
  }
};
function zo(n, e) {
  class t extends im {
    constructor(i, s) {
      super(i, s), this.t = n;
    }
  }
  for (const r in e)
    t.prototype[r] = e[r];
  return t.t = n, t;
}
const wf = zo("email", {
  isLink: !0,
  toHref() {
    return "mailto:" + this.toString();
  }
}), kf = zo("text"), t_ = zo("nl"), Hn = zo("url", {
  isLink: !0,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(n) {
    return n === void 0 && (n = Pi.defaultProtocol), this.hasProtocol() ? this.v : `${n}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const n = this.tk;
    return n.length >= 2 && n[0].t !== Hi && n[1].t === vn;
  }
}), He = (n) => new lt(n);
function n_(n) {
  let {
    groups: e
  } = n;
  const t = e.domain.concat([to, ro, gn, io, so, oo, ao, lo, $t, Oc, co, uo, fo, po, Ft, mo, xi, go]), r = [no, Rr, zn, Lr, Vn, vn, Rc, Pt, Dc, ki, Or, wi, Ei, ho, Ic, Bc], i = [to, no, ro, io, so, oo, zn, ao, lo, $t, Or, co, uo, fo, po, ho, Ft, mo, xi, go], s = He(), o = B(s, xi);
  Y(o, i, o), Y(o, e.domain, o);
  const a = He(), l = He(), c = He();
  Y(s, e.domain, a), Y(s, e.scheme, l), Y(s, e.slashscheme, c), Y(a, i, o), Y(a, e.domain, a);
  const u = B(a, gn);
  B(o, gn, u), B(l, gn, u), B(c, gn, u);
  const d = B(o, Pt);
  Y(d, i, o), Y(d, e.domain, o);
  const f = He();
  Y(u, e.domain, f), Y(f, e.domain, f);
  const p = B(f, Pt);
  Y(p, e.domain, f);
  const h = He(wf);
  Y(p, e.tld, h), Y(p, e.utld, h), B(u, Hi, h);
  const g = B(f, $t);
  Y(g, e.domain, f), Y(h, e.domain, f), B(h, Pt, p), B(h, $t, g);
  const m = B(h, vn);
  Y(m, e.numeric, wf);
  const v = B(a, $t), y = B(a, Pt);
  Y(v, e.domain, a), Y(y, i, o), Y(y, e.domain, a);
  const k = He(Hn);
  Y(y, e.tld, k), Y(y, e.utld, k), Y(k, e.domain, a), Y(k, i, o), B(k, Pt, y), B(k, $t, v), B(k, gn, u);
  const b = B(k, vn), x = He(Hn);
  Y(b, e.numeric, x);
  const w = He(Hn), S = He();
  Y(w, t, w), Y(w, r, S), Y(S, t, w), Y(S, r, S), B(k, Ft, w), B(x, Ft, w);
  const T = B(l, vn), M = B(c, vn), L = B(M, Ft), z = B(L, Ft);
  Y(l, e.domain, a), B(l, Pt, y), B(l, $t, v), Y(c, e.domain, a), B(c, Pt, y), B(c, $t, v), Y(T, e.domain, w), B(T, Ft, w), Y(z, e.domain, w), Y(z, t, w), B(z, Ft, w);
  const G = B(w, Or), q = B(w, wi), A = B(w, ki), H = B(w, Ei);
  B(S, Or, G), B(S, wi, q), B(S, ki, A), B(S, Ei, H), B(G, zn, w), B(q, Lr, w), B(A, Rr, w), B(H, Vn, w), B(G, zn, w);
  const C = He(Hn), E = He(Hn), _ = He(Hn), D = He(Hn);
  Y(G, t, C), Y(q, t, E), Y(A, t, _), Y(H, t, D);
  const P = He(), W = He(), ee = He(), he = He();
  return Y(G, r), Y(q, r), Y(A, r), Y(H, r), Y(C, t, C), Y(E, t, E), Y(_, t, _), Y(D, t, D), Y(C, r, C), Y(E, r, E), Y(_, r, _), Y(D, r, D), Y(P, t, P), Y(W, t, E), Y(ee, t, _), Y(he, t, D), Y(P, r, P), Y(W, r, W), Y(ee, r, ee), Y(he, r, he), B(E, Lr, w), B(_, Rr, w), B(D, Vn, w), B(C, zn, w), B(W, Lr, w), B(ee, Rr, w), B(he, Vn, w), B(P, Vn, w), B(s, Hi, k), B(s, Lc, t_), {
    start: s,
    tokens: rm
  };
}
function r_(n, e, t) {
  let r = t.length, i = 0, s = [], o = [];
  for (; i < r; ) {
    let a = n, l = null, c = null, u = 0, d = null, f = -1;
    for (; i < r && !(l = a.go(t[i].t)); )
      o.push(t[i++]);
    for (; i < r && (c = l || a.go(t[i].t)); )
      l = null, a = c, a.accepts() ? (f = 0, d = a) : f >= 0 && f++, i++, u++;
    if (f < 0)
      i -= u, i < r && (o.push(t[i]), i++);
    else {
      o.length > 0 && (s.push(Ha(kf, e, o)), o = []), i -= f, u -= f;
      const p = d.t, h = t.slice(i - u, i);
      s.push(Ha(p, e, h));
    }
  }
  return o.length > 0 && s.push(Ha(kf, e, o)), s;
}
function Ha(n, e, t) {
  const r = t[0].s, i = t[t.length - 1].e, s = e.slice(r, i);
  return new n(s, t);
}
const i_ = typeof console < "u" && console && console.warn || (() => {
}), s_ = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.", Te = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: !1
};
function o_() {
  lt.groups = {}, Te.scanner = null, Te.parser = null, Te.tokenQueue = [], Te.pluginQueue = [], Te.customSchemes = [], Te.initialized = !1;
}
function Ef(n, e) {
  if (e === void 0 && (e = !1), Te.initialized && i_(`linkifyjs: already initialized - will not register custom scheme "${n}" ${s_}`), !/^[0-9a-z]+(-[0-9a-z]+)*$/.test(n))
    throw new Error(`linkifyjs: incorrect scheme format.
1. Must only contain digits, lowercase ASCII letters or "-"
2. Cannot start or end with "-"
3. "-" cannot repeat`);
  Te.customSchemes.push([n, e]);
}
function a_() {
  Te.scanner = XS(Te.customSchemes);
  for (let n = 0; n < Te.tokenQueue.length; n++)
    Te.tokenQueue[n][1]({
      scanner: Te.scanner
    });
  Te.parser = n_(Te.scanner.tokens);
  for (let n = 0; n < Te.pluginQueue.length; n++)
    Te.pluginQueue[n][1]({
      scanner: Te.scanner,
      parser: Te.parser
    });
  Te.initialized = !0;
}
function l_(n) {
  return Te.initialized || a_(), r_(Te.parser.start, n, QS(Te.scanner.start, n));
}
function Pc(n, e, t) {
  if (e === void 0 && (e = null), t === void 0 && (t = null), e && typeof e == "object") {
    if (t)
      throw Error(`linkifyjs: Invalid link type ${e}; must be a string`);
    t = e, e = null;
  }
  const r = new Hc(t), i = l_(n), s = [];
  for (let o = 0; o < i.length; o++) {
    const a = i[o];
    a.isLink && (!e || a.t === e) && r.check(a) && s.push(a.toFormattedObject(r));
  }
  return s;
}
function c_(n) {
  return new Se({
    key: new Me("autolink"),
    appendTransaction: (e, t, r) => {
      const i = e.some((c) => c.docChanged) && !t.doc.eq(r.doc), s = e.some((c) => c.getMeta("preventAutolink"));
      if (!i || s)
        return;
      const { tr: o } = r, a = Tv(t.doc, [...e]);
      if (Bv(a).forEach(({ newRange: c }) => {
        const u = Ov(r.doc, c, (p) => p.isTextblock);
        let d, f;
        if (u.length > 1 ? (d = u[0], f = r.doc.textBetween(d.pos, d.pos + d.node.nodeSize, void 0, " ")) : u.length && r.doc.textBetween(c.from, c.to, " ", " ").endsWith(" ") && (d = u[0], f = r.doc.textBetween(d.pos, c.to, void 0, " ")), d && f) {
          const p = f.split(" ").filter((m) => m !== "");
          if (p.length <= 0)
            return !1;
          const h = p[p.length - 1], g = d.pos + f.lastIndexOf(h);
          if (!h)
            return !1;
          Pc(h).filter((m) => m.isLink).map((m) => ({
            ...m,
            from: g + m.start + 1,
            to: g + m.end + 1
          })).filter((m) => r.schema.marks.code ? !r.doc.rangeHasMark(m.from, m.to, r.schema.marks.code) : !0).filter((m) => n.validate ? n.validate(m.value) : !0).forEach((m) => {
            gc(m.from, m.to, r.doc).some((v) => v.mark.type === n.type) || o.addMark(m.from, m.to, n.type.create({
              href: m.href
            }));
          });
        }
      }), !!o.steps.length)
        return o;
    }
  });
}
function u_(n) {
  return new Se({
    key: new Me("handleClickLink"),
    props: {
      handleClick: (e, t, r) => {
        var i, s;
        if (r.button !== 0 || r.target.nodeName !== "A")
          return !1;
        const a = lg(e.state, n.type.name), l = r.target, c = (i = l == null ? void 0 : l.href) !== null && i !== void 0 ? i : a.href, u = (s = l == null ? void 0 : l.target) !== null && s !== void 0 ? s : a.target;
        return l && c ? (e.editable && window.open(c, u), !0) : !1;
      }
    }
  });
}
function d_(n) {
  return new Se({
    key: new Me("handlePasteLink"),
    props: {
      handlePaste: (e, t, r) => {
        var i;
        const { state: s } = e, { selection: o } = s, { empty: a } = o;
        if (a)
          return !1;
        let l = "";
        r.content.forEach((h) => {
          l += h.textContent;
        });
        const c = Pc(l).find((h) => h.isLink && h.value === l);
        if (!l || !c)
          return !1;
        const u = (i = t.clipboardData) === null || i === void 0 ? void 0 : i.getData("text/html"), d = /href="([^"]*)"/, f = u == null ? void 0 : u.match(d), p = f ? f[1] : c.href;
        return n.editor.commands.setMark(n.type, {
          href: p
        }), !0;
      }
    }
  });
}
const f_ = Re.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: !1,
  onCreate() {
    this.options.protocols.forEach((n) => {
      if (typeof n == "string") {
        Ef(n);
        return;
      }
      Ef(n.scheme, n.optionalSlashes);
    });
  },
  onDestroy() {
    o_();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: !0,
      linkOnPaste: !0,
      autolink: !0,
      protocols: [],
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      validate: void 0
    };
  },
  addAttributes() {
    return {
      href: {
        default: null
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      rel: {
        default: this.options.HTMLAttributes.rel
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [{ tag: 'a[href]:not([href *= "javascript:" i])' }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["a", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setLink: (n) => ({ chain: e }) => e().setMark(this.name, n).setMeta("preventAutolink", !0).run(),
      toggleLink: (n) => ({ chain: e }) => e().toggleMark(this.name, n, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run(),
      unsetLink: () => ({ chain: n }) => n().unsetMark(this.name, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run()
    };
  },
  addPasteRules() {
    return [
      Ln({
        find: (n) => Pc(n).filter((e) => this.options.validate ? this.options.validate(e.value) : !0).filter((e) => e.isLink).map((e) => ({
          text: e.value,
          index: e.start,
          data: e
        })),
        type: this.type,
        getAttributes: (n, e) => {
          var t, r;
          const i = (t = e == null ? void 0 : e.clipboardData) === null || t === void 0 ? void 0 : t.getData("text/html"), s = /href="([^"]*)"/, o = i == null ? void 0 : i.match(s);
          return o ? {
            href: o[1]
          } : {
            href: (r = n.data) === null || r === void 0 ? void 0 : r.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const n = [];
    return this.options.autolink && n.push(c_({
      type: this.type,
      validate: this.options.validate
    })), this.options.openOnClick && n.push(u_({
      type: this.type
    })), this.options.linkOnPaste && n.push(d_({
      editor: this.editor,
      type: this.type
    })), n;
  }
}), p_ = Re.create({
  name: "superscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sup"
      },
      {
        style: "vertical-align",
        getAttrs(n) {
          return n !== "super" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["sup", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setSuperscript: () => ({ commands: n }) => n.setMark(this.name),
      toggleSuperscript: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetSuperscript: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-.": () => this.editor.commands.toggleSuperscript()
    };
  }
}), h_ = Re.create({
  name: "subscript",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "sub"
      },
      {
        style: "vertical-align",
        getAttrs(n) {
          return n !== "sub" ? !1 : null;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["sub", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setSubscript: () => ({ commands: n }) => n.setMark(this.name),
      toggleSubscript: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetSubscript: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-,": () => this.editor.commands.toggleSubscript()
    };
  }
}), g_ = le.create({
  name: "taskList",
  addOptions() {
    return {
      itemTypeName: "taskItem",
      HTMLAttributes: {}
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      {
        tag: `ul[data-type="${this.name}"]`,
        priority: 51
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["ul", pe(this.options.HTMLAttributes, n, { "data-type": this.name }), 0];
  },
  addCommands() {
    return {
      toggleTaskList: () => ({ commands: n }) => n.toggleList(this.name, this.options.itemTypeName)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-9": () => this.editor.commands.toggleTaskList()
    };
  }
}), m_ = /^\s*(\[([( |x])?\])\s$/, b_ = le.create({
  name: "taskItem",
  addOptions() {
    return {
      nested: !1,
      HTMLAttributes: {},
      taskListTypeName: "taskList"
    };
  },
  content() {
    return this.options.nested ? "paragraph block*" : "paragraph+";
  },
  defining: !0,
  addAttributes() {
    return {
      checked: {
        default: !1,
        keepOnSplit: !1,
        parseHTML: (n) => n.getAttribute("data-checked") === "true",
        renderHTML: (n) => ({
          "data-checked": n.checked
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: `li[data-type="${this.name}"]`,
        priority: 51
      }
    ];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [
      "li",
      pe(this.options.HTMLAttributes, e, {
        "data-type": this.name
      }),
      [
        "label",
        [
          "input",
          {
            type: "checkbox",
            checked: n.attrs.checked ? "checked" : null
          }
        ],
        ["span"]
      ],
      ["div", 0]
    ];
  },
  addKeyboardShortcuts() {
    const n = {
      Enter: () => this.editor.commands.splitListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
    return this.options.nested ? {
      ...n,
      Tab: () => this.editor.commands.sinkListItem(this.name)
    } : n;
  },
  addNodeView() {
    return ({ node: n, HTMLAttributes: e, getPos: t, editor: r }) => {
      const i = document.createElement("li"), s = document.createElement("label"), o = document.createElement("span"), a = document.createElement("input"), l = document.createElement("div");
      return s.contentEditable = "false", a.type = "checkbox", a.addEventListener("change", (c) => {
        if (!r.isEditable && !this.options.onReadOnlyChecked) {
          a.checked = !a.checked;
          return;
        }
        const { checked: u } = c.target;
        r.isEditable && typeof t == "function" && r.chain().focus(void 0, { scrollIntoView: !1 }).command(({ tr: d }) => {
          const f = t(), p = d.doc.nodeAt(f);
          return d.setNodeMarkup(f, void 0, {
            ...p == null ? void 0 : p.attrs,
            checked: u
          }), !0;
        }).run(), !r.isEditable && this.options.onReadOnlyChecked && (this.options.onReadOnlyChecked(n, u) || (a.checked = !a.checked));
      }), Object.entries(this.options.HTMLAttributes).forEach(([c, u]) => {
        i.setAttribute(c, u);
      }), i.dataset.checked = n.attrs.checked, n.attrs.checked && a.setAttribute("checked", "checked"), s.append(a, o), i.append(s, l), Object.entries(e).forEach(([c, u]) => {
        i.setAttribute(c, u);
      }), {
        dom: i,
        contentDOM: l,
        update: (c) => c.type !== this.type ? !1 : (i.dataset.checked = c.attrs.checked, c.attrs.checked ? a.setAttribute("checked", "checked") : a.removeAttribute("checked"), !0)
      };
    };
  },
  addInputRules() {
    return [
      or({
        find: m_,
        type: this.type,
        getAttributes: (n) => ({
          checked: n[n.length - 1] === "x"
        })
      })
    ];
  }
});
var $c = { exports: {} };
function Fc(n) {
  return n instanceof Map ? n.clear = n.delete = n.set = function() {
    throw new Error("map is read-only");
  } : n instanceof Set && (n.add = n.clear = n.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(n), Object.getOwnPropertyNames(n).forEach(function(e) {
    var t = n[e];
    typeof t == "object" && !Object.isFrozen(t) && Fc(t);
  }), n;
}
$c.exports = Fc;
$c.exports.default = Fc;
let xf = class {
  /**
   * @param {CompiledMode} mode
   */
  constructor(e) {
    e.data === void 0 && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1;
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
};
function sm(n) {
  return n.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function Cn(n, ...e) {
  const t = /* @__PURE__ */ Object.create(null);
  for (const r in n)
    t[r] = n[r];
  return e.forEach(function(r) {
    for (const i in r)
      t[i] = r[i];
  }), /** @type {T} */
  t;
}
const y_ = "</span>", Cf = (n) => !!n.scope || n.sublanguage && n.language, v_ = (n, { prefix: e }) => {
  if (n.includes(".")) {
    const t = n.split(".");
    return [
      `${e}${t.shift()}`,
      ...t.map((r, i) => `${r}${"_".repeat(i + 1)}`)
    ].join(" ");
  }
  return `${e}${n}`;
};
let w_ = class {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(e, t) {
    this.buffer = "", this.classPrefix = t.classPrefix, e.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(e) {
    this.buffer += sm(e);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(e) {
    if (!Cf(e))
      return;
    let t = "";
    e.sublanguage ? t = `language-${e.language}` : t = v_(e.scope, { prefix: this.classPrefix }), this.span(t);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(e) {
    Cf(e) && (this.buffer += y_);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(e) {
    this.buffer += `<span class="${e}">`;
  }
};
const Sf = (n = {}) => {
  const e = { children: [] };
  return Object.assign(e, n), e;
};
let k_ = class om {
  constructor() {
    this.rootNode = Sf(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(e) {
    this.top.children.push(e);
  }
  /** @param {string} scope */
  openNode(e) {
    const t = Sf({ scope: e });
    this.add(t), this.stack.push(t);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); )
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(e) {
    return this.constructor._walk(e, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(e, t) {
    return typeof t == "string" ? e.addText(t) : t.children && (e.openNode(t), t.children.forEach((r) => this._walk(e, r)), e.closeNode(t)), e;
  }
  /**
   * @param {Node} node
   */
  static _collapse(e) {
    typeof e != "string" && e.children && (e.children.every((t) => typeof t == "string") ? e.children = [e.children.join("")] : e.children.forEach((t) => {
      om._collapse(t);
    }));
  }
}, E_ = class extends k_ {
  /**
   * @param {*} options
   */
  constructor(e) {
    super(), this.options = e;
  }
  /**
   * @param {string} text
   * @param {string} scope
   */
  addKeyword(e, t) {
    e !== "" && (this.openNode(t), this.addText(e), this.closeNode());
  }
  /**
   * @param {string} text
   */
  addText(e) {
    e !== "" && this.add(e);
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  addSublanguage(e, t) {
    const r = e.root;
    r.sublanguage = !0, r.language = t, this.add(r);
  }
  toHTML() {
    return new w_(this, this.options).value();
  }
  finalize() {
    return !0;
  }
};
function $i(n) {
  return n ? typeof n == "string" ? n : n.source : null;
}
function am(n) {
  return ur("(?=", n, ")");
}
function x_(n) {
  return ur("(?:", n, ")*");
}
function C_(n) {
  return ur("(?:", n, ")?");
}
function ur(...n) {
  return n.map((t) => $i(t)).join("");
}
function S_(n) {
  const e = n[n.length - 1];
  return typeof e == "object" && e.constructor === Object ? (n.splice(n.length - 1, 1), e) : {};
}
function zc(...n) {
  return "(" + (S_(n).capture ? "" : "?:") + n.map((r) => $i(r)).join("|") + ")";
}
function lm(n) {
  return new RegExp(n.toString() + "|").exec("").length - 1;
}
function __(n, e) {
  const t = n && n.exec(e);
  return t && t.index === 0;
}
const M_ = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function Vc(n, { joinWith: e }) {
  let t = 0;
  return n.map((r) => {
    t += 1;
    const i = t;
    let s = $i(r), o = "";
    for (; s.length > 0; ) {
      const a = M_.exec(s);
      if (!a) {
        o += s;
        break;
      }
      o += s.substring(0, a.index), s = s.substring(a.index + a[0].length), a[0][0] === "\\" && a[1] ? o += "\\" + String(Number(a[1]) + i) : (o += a[0], a[0] === "(" && t++);
    }
    return o;
  }).map((r) => `(${r})`).join(e);
}
const A_ = /\b\B/, cm = "[a-zA-Z]\\w*", qc = "[a-zA-Z_]\\w*", um = "\\b\\d+(\\.\\d+)?", dm = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", fm = "\\b(0b[01]+)", T_ = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", N_ = (n = {}) => {
  const e = /^#![ ]*\//;
  return n.binary && (n.begin = ur(
    e,
    /.*\b/,
    n.binary,
    /\b.*/
  )), Cn({
    scope: "meta",
    begin: e,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (t, r) => {
      t.index !== 0 && r.ignoreMatch();
    }
  }, n);
}, Fi = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
}, O_ = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [Fi]
}, L_ = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [Fi]
}, R_ = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
}, Vo = function(n, e, t = {}) {
  const r = Cn(
    {
      scope: "comment",
      begin: n,
      end: e,
      contains: []
    },
    t
  );
  r.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: !0,
    relevance: 0
  });
  const i = zc(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return r.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: ur(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        i,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), r;
}, D_ = Vo("//", "$"), I_ = Vo("/\\*", "\\*/"), B_ = Vo("#", "$"), H_ = {
  scope: "number",
  begin: um,
  relevance: 0
}, P_ = {
  scope: "number",
  begin: dm,
  relevance: 0
}, $_ = {
  scope: "number",
  begin: fm,
  relevance: 0
}, F_ = {
  // this outer rule makes sure we actually have a WHOLE regex and not simply
  // an expression such as:
  //
  //     3 / something
  //
  // (which will then blow up when regex's `illegal` sees the newline)
  begin: /(?=\/[^/\n]*\/)/,
  contains: [{
    scope: "regexp",
    begin: /\//,
    end: /\/[gimuy]*/,
    illegal: /\n/,
    contains: [
      Fi,
      {
        begin: /\[/,
        end: /\]/,
        relevance: 0,
        contains: [Fi]
      }
    ]
  }]
}, z_ = {
  scope: "title",
  begin: cm,
  relevance: 0
}, V_ = {
  scope: "title",
  begin: qc,
  relevance: 0
}, q_ = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + qc,
  relevance: 0
}, U_ = function(n) {
  return Object.assign(
    n,
    {
      /** @type {ModeCallback} */
      "on:begin": (e, t) => {
        t.data._beginMatch = e[1];
      },
      /** @type {ModeCallback} */
      "on:end": (e, t) => {
        t.data._beginMatch !== e[1] && t.ignoreMatch();
      }
    }
  );
};
var ms = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  MATCH_NOTHING_RE: A_,
  IDENT_RE: cm,
  UNDERSCORE_IDENT_RE: qc,
  NUMBER_RE: um,
  C_NUMBER_RE: dm,
  BINARY_NUMBER_RE: fm,
  RE_STARTERS_RE: T_,
  SHEBANG: N_,
  BACKSLASH_ESCAPE: Fi,
  APOS_STRING_MODE: O_,
  QUOTE_STRING_MODE: L_,
  PHRASAL_WORDS_MODE: R_,
  COMMENT: Vo,
  C_LINE_COMMENT_MODE: D_,
  C_BLOCK_COMMENT_MODE: I_,
  HASH_COMMENT_MODE: B_,
  NUMBER_MODE: H_,
  C_NUMBER_MODE: P_,
  BINARY_NUMBER_MODE: $_,
  REGEXP_MODE: F_,
  TITLE_MODE: z_,
  UNDERSCORE_TITLE_MODE: V_,
  METHOD_GUARD: q_,
  END_SAME_AS_BEGIN: U_
});
function K_(n, e) {
  n.input[n.index - 1] === "." && e.ignoreMatch();
}
function W_(n, e) {
  n.className !== void 0 && (n.scope = n.className, delete n.className);
}
function G_(n, e) {
  e && n.beginKeywords && (n.begin = "\\b(" + n.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", n.__beforeBegin = K_, n.keywords = n.keywords || n.beginKeywords, delete n.beginKeywords, n.relevance === void 0 && (n.relevance = 0));
}
function Z_(n, e) {
  Array.isArray(n.illegal) && (n.illegal = zc(...n.illegal));
}
function j_(n, e) {
  if (n.match) {
    if (n.begin || n.end)
      throw new Error("begin & end are not supported with match");
    n.begin = n.match, delete n.match;
  }
}
function J_(n, e) {
  n.relevance === void 0 && (n.relevance = 1);
}
const Y_ = (n, e) => {
  if (!n.beforeMatch)
    return;
  if (n.starts)
    throw new Error("beforeMatch cannot be used with starts");
  const t = Object.assign({}, n);
  Object.keys(n).forEach((r) => {
    delete n[r];
  }), n.keywords = t.keywords, n.begin = ur(t.beforeMatch, am(t.begin)), n.starts = {
    relevance: 0,
    contains: [
      Object.assign(t, { endsParent: !0 })
    ]
  }, n.relevance = 0, delete t.beforeMatch;
}, X_ = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
], Q_ = "keyword";
function pm(n, e, t = Q_) {
  const r = /* @__PURE__ */ Object.create(null);
  return typeof n == "string" ? i(t, n.split(" ")) : Array.isArray(n) ? i(t, n) : Object.keys(n).forEach(function(s) {
    Object.assign(
      r,
      pm(n[s], e, s)
    );
  }), r;
  function i(s, o) {
    e && (o = o.map((a) => a.toLowerCase())), o.forEach(function(a) {
      const l = a.split("|");
      r[l[0]] = [s, e2(l[0], l[1])];
    });
  }
}
function e2(n, e) {
  return e ? Number(e) : t2(n) ? 0 : 1;
}
function t2(n) {
  return X_.includes(n.toLowerCase());
}
const _f = {}, Qn = (n) => {
  console.error(n);
}, Mf = (n, ...e) => {
  console.log(`WARN: ${n}`, ...e);
}, wr = (n, e) => {
  _f[`${n}/${e}`] || (console.log(`Deprecated as of ${n}. ${e}`), _f[`${n}/${e}`] = !0);
}, bo = new Error();
function hm(n, e, { key: t }) {
  let r = 0;
  const i = n[t], s = {}, o = {};
  for (let a = 1; a <= e.length; a++)
    o[a + r] = i[a], s[a + r] = !0, r += lm(e[a - 1]);
  n[t] = o, n[t]._emit = s, n[t]._multi = !0;
}
function n2(n) {
  if (Array.isArray(n.begin)) {
    if (n.skip || n.excludeBegin || n.returnBegin)
      throw Qn("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), bo;
    if (typeof n.beginScope != "object" || n.beginScope === null)
      throw Qn("beginScope must be object"), bo;
    hm(n, n.begin, { key: "beginScope" }), n.begin = Vc(n.begin, { joinWith: "" });
  }
}
function r2(n) {
  if (Array.isArray(n.end)) {
    if (n.skip || n.excludeEnd || n.returnEnd)
      throw Qn("skip, excludeEnd, returnEnd not compatible with endScope: {}"), bo;
    if (typeof n.endScope != "object" || n.endScope === null)
      throw Qn("endScope must be object"), bo;
    hm(n, n.end, { key: "endScope" }), n.end = Vc(n.end, { joinWith: "" });
  }
}
function i2(n) {
  n.scope && typeof n.scope == "object" && n.scope !== null && (n.beginScope = n.scope, delete n.scope);
}
function s2(n) {
  i2(n), typeof n.beginScope == "string" && (n.beginScope = { _wrap: n.beginScope }), typeof n.endScope == "string" && (n.endScope = { _wrap: n.endScope }), n2(n), r2(n);
}
function o2(n) {
  function e(o, a) {
    return new RegExp(
      $i(o),
      "m" + (n.case_insensitive ? "i" : "") + (n.unicodeRegex ? "u" : "") + (a ? "g" : "")
    );
  }
  class t {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      l.position = this.position++, this.matchIndexes[this.matchAt] = l, this.regexes.push([l, a]), this.matchAt += lm(a) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const a = this.regexes.map((l) => l[1]);
      this.matcherRe = e(Vc(a, { joinWith: "|" }), !0), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(a) {
      this.matcherRe.lastIndex = this.lastIndex;
      const l = this.matcherRe.exec(a);
      if (!l)
        return null;
      const c = l.findIndex((d, f) => f > 0 && d !== void 0), u = this.matchIndexes[c];
      return l.splice(0, c), Object.assign(l, u);
    }
  }
  class r {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(a) {
      if (this.multiRegexes[a])
        return this.multiRegexes[a];
      const l = new t();
      return this.rules.slice(a).forEach(([c, u]) => l.addRule(c, u)), l.compile(), this.multiRegexes[a] = l, l;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      this.rules.push([a, l]), l.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(a) {
      const l = this.getMatcher(this.regexIndex);
      l.lastIndex = this.lastIndex;
      let c = l.exec(a);
      if (this.resumingScanAtSamePosition() && !(c && c.index === this.lastIndex)) {
        const u = this.getMatcher(0);
        u.lastIndex = this.lastIndex + 1, c = u.exec(a);
      }
      return c && (this.regexIndex += c.position + 1, this.regexIndex === this.count && this.considerAll()), c;
    }
  }
  function i(o) {
    const a = new r();
    return o.contains.forEach((l) => a.addRule(l.begin, { rule: l, type: "begin" })), o.terminatorEnd && a.addRule(o.terminatorEnd, { type: "end" }), o.illegal && a.addRule(o.illegal, { type: "illegal" }), a;
  }
  function s(o, a) {
    const l = (
      /** @type CompiledMode */
      o
    );
    if (o.isCompiled)
      return l;
    [
      W_,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      j_,
      s2,
      Y_
    ].forEach((u) => u(o, a)), n.compilerExtensions.forEach((u) => u(o, a)), o.__beforeBegin = null, [
      G_,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      Z_,
      // default to 1 relevance if not specified
      J_
    ].forEach((u) => u(o, a)), o.isCompiled = !0;
    let c = null;
    return typeof o.keywords == "object" && o.keywords.$pattern && (o.keywords = Object.assign({}, o.keywords), c = o.keywords.$pattern, delete o.keywords.$pattern), c = c || /\w+/, o.keywords && (o.keywords = pm(o.keywords, n.case_insensitive)), l.keywordPatternRe = e(c, !0), a && (o.begin || (o.begin = /\B|\b/), l.beginRe = e(l.begin), !o.end && !o.endsWithParent && (o.end = /\B|\b/), o.end && (l.endRe = e(l.end)), l.terminatorEnd = $i(l.end) || "", o.endsWithParent && a.terminatorEnd && (l.terminatorEnd += (o.end ? "|" : "") + a.terminatorEnd)), o.illegal && (l.illegalRe = e(
      /** @type {RegExp | string} */
      o.illegal
    )), o.contains || (o.contains = []), o.contains = [].concat(...o.contains.map(function(u) {
      return a2(u === "self" ? o : u);
    })), o.contains.forEach(function(u) {
      s(
        /** @type Mode */
        u,
        l
      );
    }), o.starts && s(o.starts, a), l.matcher = i(l), l;
  }
  if (n.compilerExtensions || (n.compilerExtensions = []), n.contains && n.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return n.classNameAliases = Cn(n.classNameAliases || {}), s(
    /** @type Mode */
    n
  );
}
function gm(n) {
  return n ? n.endsWithParent || gm(n.starts) : !1;
}
function a2(n) {
  return n.variants && !n.cachedVariants && (n.cachedVariants = n.variants.map(function(e) {
    return Cn(n, { variants: null }, e);
  })), n.cachedVariants ? n.cachedVariants : gm(n) ? Cn(n, { starts: n.starts ? Cn(n.starts) : null }) : Object.isFrozen(n) ? Cn(n) : n;
}
var l2 = "11.6.0";
let c2 = class extends Error {
  constructor(e, t) {
    super(e), this.name = "HTMLInjectionError", this.html = t;
  }
};
const Pa = sm, Af = Cn, Tf = Symbol("nomatch"), u2 = 7, d2 = function(n) {
  const e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null), r = [];
  let i = !0;
  const s = "Could not find the language '{}', did you forget to load/include a language module?", o = { disableAutodetect: !0, name: "Plain text", contains: [] };
  let a = {
    ignoreUnescapedHTML: !1,
    throwUnescapedHTML: !1,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: E_
  };
  function l(C) {
    return a.noHighlightRe.test(C);
  }
  function c(C) {
    let E = C.className + " ";
    E += C.parentNode ? C.parentNode.className : "";
    const _ = a.languageDetectRe.exec(E);
    if (_) {
      const D = M(_[1]);
      return D || (Mf(s.replace("{}", _[1])), Mf("Falling back to no-highlight mode for this block.", C)), D ? _[1] : "no-highlight";
    }
    return E.split(/\s+/).find((D) => l(D) || M(D));
  }
  function u(C, E, _) {
    let D = "", P = "";
    typeof E == "object" ? (D = C, _ = E.ignoreIllegals, P = E.language) : (wr("10.7.0", "highlight(lang, code, ...args) has been deprecated."), wr("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), P = C, D = E), _ === void 0 && (_ = !0);
    const W = {
      code: D,
      language: P
    };
    A("before:highlight", W);
    const ee = W.result ? W.result : d(W.language, W.code, _);
    return ee.code = W.code, A("after:highlight", ee), ee;
  }
  function d(C, E, _, D) {
    const P = /* @__PURE__ */ Object.create(null);
    function W($, U) {
      return $.keywords[U];
    }
    function ee() {
      if (!te.keywords) {
        V.addText(ce);
        return;
      }
      let $ = 0;
      te.keywordPatternRe.lastIndex = 0;
      let U = te.keywordPatternRe.exec(ce), O = "";
      for (; U; ) {
        O += ce.substring($, U.index);
        const I = Ae.case_insensitive ? U[0].toLowerCase() : U[0], J = W(te, I);
        if (J) {
          const [se, De] = J;
          if (V.addText(O), O = "", P[I] = (P[I] || 0) + 1, P[I] <= u2 && (be += De), se.startsWith("_"))
            O += U[0];
          else {
            const ht = Ae.classNameAliases[se] || se;
            V.addKeyword(U[0], ht);
          }
        } else
          O += U[0];
        $ = te.keywordPatternRe.lastIndex, U = te.keywordPatternRe.exec(ce);
      }
      O += ce.substring($), V.addText(O);
    }
    function he() {
      if (ce === "")
        return;
      let $ = null;
      if (typeof te.subLanguage == "string") {
        if (!e[te.subLanguage]) {
          V.addText(ce);
          return;
        }
        $ = d(te.subLanguage, ce, !0, Nt[te.subLanguage]), Nt[te.subLanguage] = /** @type {CompiledMode} */
        $._top;
      } else
        $ = p(ce, te.subLanguage.length ? te.subLanguage : null);
      te.relevance > 0 && (be += $.relevance), V.addSublanguage($._emitter, $.language);
    }
    function we() {
      te.subLanguage != null ? he() : ee(), ce = "";
    }
    function ue($, U) {
      let O = 1;
      const I = U.length - 1;
      for (; O <= I; ) {
        if (!$._emit[O]) {
          O++;
          continue;
        }
        const J = Ae.classNameAliases[$[O]] || $[O], se = U[O];
        J ? V.addKeyword(se, J) : (ce = se, ee(), ce = ""), O++;
      }
    }
    function _e($, U) {
      return $.scope && typeof $.scope == "string" && V.openNode(Ae.classNameAliases[$.scope] || $.scope), $.beginScope && ($.beginScope._wrap ? (V.addKeyword(ce, Ae.classNameAliases[$.beginScope._wrap] || $.beginScope._wrap), ce = "") : $.beginScope._multi && (ue($.beginScope, U), ce = "")), te = Object.create($, { parent: { value: te } }), te;
    }
    function st($, U, O) {
      let I = __($.endRe, O);
      if (I) {
        if ($["on:end"]) {
          const J = new xf($);
          $["on:end"](U, J), J.isMatchIgnored && (I = !1);
        }
        if (I) {
          for (; $.endsParent && $.parent; )
            $ = $.parent;
          return $;
        }
      }
      if ($.endsWithParent)
        return st($.parent, U, O);
    }
    function ze($) {
      return te.matcher.regexIndex === 0 ? (ce += $[0], 1) : (Ve = !0, 0);
    }
    function ft($) {
      const U = $[0], O = $.rule, I = new xf(O), J = [O.__beforeBegin, O["on:begin"]];
      for (const se of J)
        if (se && (se($, I), I.isMatchIgnored))
          return ze(U);
      return O.skip ? ce += U : (O.excludeBegin && (ce += U), we(), !O.returnBegin && !O.excludeBegin && (ce = U)), _e(O, $), O.returnBegin ? 0 : U.length;
    }
    function ot($) {
      const U = $[0], O = E.substring($.index), I = st(te, $, O);
      if (!I)
        return Tf;
      const J = te;
      te.endScope && te.endScope._wrap ? (we(), V.addKeyword(U, te.endScope._wrap)) : te.endScope && te.endScope._multi ? (we(), ue(te.endScope, $)) : J.skip ? ce += U : (J.returnEnd || J.excludeEnd || (ce += U), we(), J.excludeEnd && (ce = U));
      do
        te.scope && V.closeNode(), !te.skip && !te.subLanguage && (be += te.relevance), te = te.parent;
      while (te !== I.parent);
      return I.starts && _e(I.starts, $), J.returnEnd ? 0 : U.length;
    }
    function vt() {
      const $ = [];
      for (let U = te; U !== Ae; U = U.parent)
        U.scope && $.unshift(U.scope);
      $.forEach((U) => V.openNode(U));
    }
    let pt = {};
    function de($, U) {
      const O = U && U[0];
      if (ce += $, O == null)
        return we(), 0;
      if (pt.type === "begin" && U.type === "end" && pt.index === U.index && O === "") {
        if (ce += E.slice(U.index, U.index + 1), !i) {
          const I = new Error(`0 width match regex (${C})`);
          throw I.languageName = C, I.badRule = pt.rule, I;
        }
        return 1;
      }
      if (pt = U, U.type === "begin")
        return ft(U);
      if (U.type === "illegal" && !_) {
        const I = new Error('Illegal lexeme "' + O + '" for mode "' + (te.scope || "<unnamed>") + '"');
        throw I.mode = te, I;
      } else if (U.type === "end") {
        const I = ot(U);
        if (I !== Tf)
          return I;
      }
      if (U.type === "illegal" && O === "")
        return 1;
      if (Ge > 1e5 && Ge > U.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return ce += O, O.length;
    }
    const Ae = M(C);
    if (!Ae)
      throw Qn(s.replace("{}", C)), new Error('Unknown language: "' + C + '"');
    const Qe = o2(Ae);
    let Oe = "", te = D || Qe;
    const Nt = {}, V = new a.__emitter(a);
    vt();
    let ce = "", be = 0, oe = 0, Ge = 0, Ve = !1;
    try {
      for (te.matcher.considerAll(); ; ) {
        Ge++, Ve ? Ve = !1 : te.matcher.considerAll(), te.matcher.lastIndex = oe;
        const $ = te.matcher.exec(E);
        if (!$)
          break;
        const U = E.substring(oe, $.index), O = de(U, $);
        oe = $.index + O;
      }
      return de(E.substring(oe)), V.closeAllNodes(), V.finalize(), Oe = V.toHTML(), {
        language: C,
        value: Oe,
        relevance: be,
        illegal: !1,
        _emitter: V,
        _top: te
      };
    } catch ($) {
      if ($.message && $.message.includes("Illegal"))
        return {
          language: C,
          value: Pa(E),
          illegal: !0,
          relevance: 0,
          _illegalBy: {
            message: $.message,
            index: oe,
            context: E.slice(oe - 100, oe + 100),
            mode: $.mode,
            resultSoFar: Oe
          },
          _emitter: V
        };
      if (i)
        return {
          language: C,
          value: Pa(E),
          illegal: !1,
          relevance: 0,
          errorRaised: $,
          _emitter: V,
          _top: te
        };
      throw $;
    }
  }
  function f(C) {
    const E = {
      value: Pa(C),
      illegal: !1,
      relevance: 0,
      _top: o,
      _emitter: new a.__emitter(a)
    };
    return E._emitter.addText(C), E;
  }
  function p(C, E) {
    E = E || a.languages || Object.keys(e);
    const _ = f(C), D = E.filter(M).filter(z).map(
      (we) => d(we, C, !1)
    );
    D.unshift(_);
    const P = D.sort((we, ue) => {
      if (we.relevance !== ue.relevance)
        return ue.relevance - we.relevance;
      if (we.language && ue.language) {
        if (M(we.language).supersetOf === ue.language)
          return 1;
        if (M(ue.language).supersetOf === we.language)
          return -1;
      }
      return 0;
    }), [W, ee] = P, he = W;
    return he.secondBest = ee, he;
  }
  function h(C, E, _) {
    const D = E && t[E] || _;
    C.classList.add("hljs"), C.classList.add(`language-${D}`);
  }
  function g(C) {
    let E = null;
    const _ = c(C);
    if (l(_))
      return;
    if (A(
      "before:highlightElement",
      { el: C, language: _ }
    ), C.children.length > 0 && (a.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(C)), a.throwUnescapedHTML))
      throw new c2(
        "One of your code blocks includes unescaped HTML.",
        C.innerHTML
      );
    E = C;
    const D = E.textContent, P = _ ? u(D, { language: _, ignoreIllegals: !0 }) : p(D);
    C.innerHTML = P.value, h(C, _, P.language), C.result = {
      language: P.language,
      // TODO: remove with version 11.0
      re: P.relevance,
      relevance: P.relevance
    }, P.secondBest && (C.secondBest = {
      language: P.secondBest.language,
      relevance: P.secondBest.relevance
    }), A("after:highlightElement", { el: C, result: P, text: D });
  }
  function m(C) {
    a = Af(a, C);
  }
  const v = () => {
    b(), wr("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function y() {
    b(), wr("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let k = !1;
  function b() {
    if (document.readyState === "loading") {
      k = !0;
      return;
    }
    document.querySelectorAll(a.cssSelector).forEach(g);
  }
  function x() {
    k && b();
  }
  typeof window < "u" && window.addEventListener && window.addEventListener("DOMContentLoaded", x, !1);
  function w(C, E) {
    let _ = null;
    try {
      _ = E(n);
    } catch (D) {
      if (Qn("Language definition for '{}' could not be registered.".replace("{}", C)), i)
        Qn(D);
      else
        throw D;
      _ = o;
    }
    _.name || (_.name = C), e[C] = _, _.rawDefinition = E.bind(null, n), _.aliases && L(_.aliases, { languageName: C });
  }
  function S(C) {
    delete e[C];
    for (const E of Object.keys(t))
      t[E] === C && delete t[E];
  }
  function T() {
    return Object.keys(e);
  }
  function M(C) {
    return C = (C || "").toLowerCase(), e[C] || e[t[C]];
  }
  function L(C, { languageName: E }) {
    typeof C == "string" && (C = [C]), C.forEach((_) => {
      t[_.toLowerCase()] = E;
    });
  }
  function z(C) {
    const E = M(C);
    return E && !E.disableAutodetect;
  }
  function G(C) {
    C["before:highlightBlock"] && !C["before:highlightElement"] && (C["before:highlightElement"] = (E) => {
      C["before:highlightBlock"](
        Object.assign({ block: E.el }, E)
      );
    }), C["after:highlightBlock"] && !C["after:highlightElement"] && (C["after:highlightElement"] = (E) => {
      C["after:highlightBlock"](
        Object.assign({ block: E.el }, E)
      );
    });
  }
  function q(C) {
    G(C), r.push(C);
  }
  function A(C, E) {
    const _ = C;
    r.forEach(function(D) {
      D[_] && D[_](E);
    });
  }
  function H(C) {
    return wr("10.7.0", "highlightBlock will be removed entirely in v12.0"), wr("10.7.0", "Please use highlightElement now."), g(C);
  }
  Object.assign(n, {
    highlight: u,
    highlightAuto: p,
    highlightAll: b,
    highlightElement: g,
    // TODO: Remove with v12 API
    highlightBlock: H,
    configure: m,
    initHighlighting: v,
    initHighlightingOnLoad: y,
    registerLanguage: w,
    unregisterLanguage: S,
    listLanguages: T,
    getLanguage: M,
    registerAliases: L,
    autoDetection: z,
    inherit: Af,
    addPlugin: q
  }), n.debugMode = function() {
    i = !1;
  }, n.safeMode = function() {
    i = !0;
  }, n.versionString = l2, n.regex = {
    concat: ur,
    lookahead: am,
    either: zc,
    optional: C_,
    anyNumberOfTimes: x_
  };
  for (const C in ms)
    typeof ms[C] == "object" && $c.exports(ms[C]);
  return Object.assign(n, ms), n;
};
var zi = d2({}), f2 = zi;
zi.HighlightJS = zi;
zi.default = zi;
var p2 = f2;
function mm(n, e = []) {
  return n.map((t) => {
    const r = [...e, ...t.properties ? t.properties.className : []];
    return t.children ? mm(t.children, r) : {
      text: t.value,
      classes: r
    };
  }).flat();
}
function Nf(n) {
  return n.value || n.children || [];
}
function h2(n) {
  return !!p2.getLanguage(n);
}
function Of({ doc: n, name: e, lowlight: t, defaultLanguage: r }) {
  const i = [];
  return xl(n, (s) => s.type.name === e).forEach((s) => {
    let o = s.pos + 1;
    const a = s.node.attrs.language || r, l = t.listLanguages(), c = a && (l.includes(a) || h2(a)) ? Nf(t.highlight(a, s.node.textContent)) : Nf(t.highlightAuto(s.node.textContent));
    mm(c).forEach((u) => {
      const d = o + u.text.length;
      if (u.classes.length) {
        const f = Be.inline(o, d, {
          class: u.classes.join(" ")
        });
        i.push(f);
      }
      o = d;
    });
  }), ke.create(n, i);
}
function g2(n) {
  return typeof n == "function";
}
function m2({ name: n, lowlight: e, defaultLanguage: t }) {
  if (!["highlight", "highlightAuto", "listLanguages"].every((i) => g2(e[i])))
    throw Error("You should provide an instance of lowlight to use the code-block-lowlight extension");
  const r = new Se({
    key: new Me("lowlight"),
    state: {
      init: (i, { doc: s }) => Of({
        doc: s,
        name: n,
        lowlight: e,
        defaultLanguage: t
      }),
      apply: (i, s, o, a) => {
        const l = o.selection.$head.parent.type.name, c = a.selection.$head.parent.type.name, u = xl(o.doc, (f) => f.type.name === n), d = xl(a.doc, (f) => f.type.name === n);
        return i.docChanged && ([l, c].includes(n) || d.length !== u.length || i.steps.some((f) => (
          // @ts-ignore
          f.from !== void 0 && f.to !== void 0 && u.some((p) => (
            // @ts-ignore
            p.pos >= f.from && p.pos + p.node.nodeSize <= f.to
          ))
        ))) ? Of({
          doc: i.doc,
          name: n,
          lowlight: e,
          defaultLanguage: t
        }) : s.map(i.mapping, i.doc);
      }
    },
    props: {
      decorations(i) {
        return r.getState(i);
      }
    }
  });
  return r;
}
const b2 = Pg.extend({
  addOptions() {
    var n;
    return {
      ...(n = this.parent) === null || n === void 0 ? void 0 : n.call(this),
      lowlight: {},
      defaultLanguage: null
    };
  },
  addProseMirrorPlugins() {
    var n;
    return [
      ...((n = this.parent) === null || n === void 0 ? void 0 : n.call(this)) || [],
      m2({
        name: this.name,
        lowlight: this.options.lowlight,
        defaultLanguage: this.options.defaultLanguage
      })
    ];
  }
});
function Lf(n, e, t = {}) {
  const { empty: r, ranges: i, from: s, to: o } = n.selection, a = e ? un(e, n.schema) : null;
  if (r)
    return !!(n.storedMarks || n.selection.$from.marks()).filter((g) => a ? a.name === g.type.name : !0).find(
      (g) => qr(g.attrs, t, { strict: !1 })
    );
  let l = s, c = o;
  const u = [];
  i.forEach(({ $from: g, $to: m }) => {
    const v = g.pos, y = m.pos;
    l = Math.min(l, v), c = Math.max(l, y), n.doc.nodesBetween(v, y, (k, b) => {
      if (!k.isText && !k.marks.length)
        return;
      const x = Math.max(v, b), w = Math.min(y, b + k.nodeSize);
      u.push(
        ...k.marks.map((S) => ({
          mark: S,
          from: x,
          to: w
        }))
      );
    });
  });
  const d = c - l;
  if (d === 0)
    return !1;
  const f = u.filter((g) => a ? a.name === g.mark.type.name : !0).filter(
    (g) => qr(g.mark.attrs, t, { strict: !1 })
  ).reduce((g, m) => g + m.to - m.from, 0), p = u.filter((g) => a ? g.mark.type !== a && g.mark.type.excludes(a) : !0).reduce((g, m) => g + m.to - m.from, 0);
  return (f > 0 ? f + p : f) >= d;
}
function Rf(n) {
  var e;
  return !!((e = n.spec.group) != null && e.split(" ").includes("list"));
}
function Df(n, e, t = {}) {
  if (!e)
    return ir(n, null, t) || Lf(n, null, t);
  const r = n.schema.nodes[e];
  if (r) {
    if (Rf(r)) {
      const s = Io((o) => Rf(o.type))(
        n.selection
      );
      return !!(s && s.node.type.name === e);
    }
    return ir(n, e, t);
  }
  return n.schema.marks[e] ? Lf(n, e, t) : !1;
}
function If(n) {
  return new Gi({
    find: n.find,
    handler: ({ state: e, range: t, match: r, commands: i }) => {
      const s = e.doc.resolve(t.from), o = ie(n.getAttributes, void 0, r) || {};
      if (!s.node(-1).canReplaceWith(s.index(-1), s.indexAfter(-1), n.type))
        return null;
      e.tr.delete(t.from, t.to).setBlockType(t.from, t.from, n.type, o), setTimeout(() => i.focus(!0), 0);
    }
  });
}
const bm = [
  { name: "Auto", value: "auto" },
  { name: "Plain Text", value: "plaintext", alias: ["text", "txt"] },
  { name: "Bash", value: "bash", alias: ["sh"] },
  { name: "BASIC", value: "basic", alias: [] },
  { name: "C", value: "c", alias: ["h"] },
  { name: "Clojure", value: "clojure", alias: ["clj", "edn"] },
  { name: "CMake", value: "cmake", alias: ["cmake.in"] },
  {
    name: "CoffeeScript",
    value: "coffeescript",
    alias: ["coffee", "cson", "iced"]
  },
  {
    name: "C++",
    value: "cpp",
    alias: ["cc", "c++", "h++", "hpp", "hh", "hxx", "cxx"]
  },
  { name: "C#", value: "csharp", alias: ["cs", "c#"] },
  { name: "CSS", value: "css", alias: [] },
  { name: "Dart", value: "dart", alias: [] },
  { name: "Delphi", value: "delphi", alias: ["dpr", "dfm", "pas", "pascal"] },
  { name: "Dockerfile", value: "dockerfile", alias: ["docker"] },
  { name: "Erlang", value: "erlang", alias: ["erl"] },
  { name: "Go", value: "go", alias: ["golang"] },
  { name: "GraphQL", value: "graphql", alias: ["gql"] },
  { name: "Groovy", value: "groovy", alias: [] },
  { name: "Java", value: "java", alias: ["jsp"] },
  {
    name: "JavaScript",
    value: "javascript",
    alias: ["js", "jsx", "mjs", "cjs"]
  },
  { name: "JSON", value: "json", alias: [] },
  { name: "Kotlin", value: "kotlin", alias: ["kt", "kts"] },
  { name: "Lua", value: "lua", alias: [] },
  { name: "Makefile", value: "makefile", alias: ["mk", "mak", "make"] },
  { name: "Markdown", value: "markdown", alias: ["md", "mkdown", "mkd"] },
  { name: "Matlab", value: "matlab", alias: [] },
  {
    name: "Objective-C",
    value: "objectivec",
    alias: ["mm", "objc", "obj-c", "obj-c++", "objective-c++"]
  },
  { name: "PHP", value: "php", alias: [] },
  { name: "Properties", value: "properties", alias: [] },
  { name: "Python", value: "python", alias: ["py", "gyp", "ipython"] },
  {
    name: "Ruby",
    value: "ruby",
    alias: ["rb", "gemspec", "podspec", "thor", "irb"]
  },
  { name: "Rust", value: "rust", alias: ["rs"] },
  { name: "Scala", value: "scala", alias: [] },
  { name: "SCSS", value: "scss", alias: [] },
  { name: "Shell", value: "shell", alias: ["console", "shellsession"] },
  { name: "SQL", value: "sql", alias: [] },
  { name: "Swift", value: "swift", alias: [] },
  { name: "TypeScript", value: "typescript", alias: ["ts", "tsx"] },
  { name: "WebAssembly", value: "wasm", alias: [] },
  {
    name: "HTML, XML",
    value: "xml",
    alias: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ]
  },
  { name: "YAML", value: "yaml", alias: ["yml"] }
], Bf = (n) => {
  if (!n)
    return null;
  const e = n.toLocaleLowerCase();
  return bm.find(
    (r) => r.value === e || r.alias && r.alias.includes(e)
  );
};
function y2(n, e) {
  const { $from: t, from: r, to: i } = n, a = (e.textContent || "").split(`
`).reduce((p, h, g) => (p[g] = (p[g - 1] || 0) + h.length + (g === 0 ? 0 : 1), p), {}), l = t.parentOffset, c = t.parentOffset + i - r, u = Object.keys(a), d = u.find(
    (p) => a[p] >= l
  ), f = u.find(
    (p) => a[p] >= c
  );
  return {
    start: d,
    end: f
  };
}
const v2 = /^[`·]{3}([a-z]+)?[\s\n]$/, w2 = /^[~～]{3}([a-z]+)?[\s\n]$/, k2 = b2.extend({
  addOptions() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      lowlight: {},
      defaultLanguage: null,
      languages: bm
    };
  },
  addCommands() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      toggleCodeBlock: (e) => ({ commands: t, editor: r, chain: i }) => {
        const { state: s } = r, { from: o, to: a } = s.selection;
        if (!Df(s, this.name) && !s.selection.empty) {
          let l = !0;
          const c = [];
          if (s.doc.nodesBetween(o, a, (u, d) => {
            if (u.isInline)
              return !1;
            if (u.type.name !== "paragraph")
              return d + 1 <= o && d + u.nodeSize - 1 >= a ? void 0 : (l = !1, !1);
            {
              const f = (u.textContent || "").slice(
                d + 1 > o ? 0 : o - d - 1,
                d + u.nodeSize - 1 < a ? u.nodeSize - 1 : a - d - 1
              );
              c.push(f || "");
            }
          }), l && c.length > 1)
            return i().command(({ state: u, tr: d }) => (d.replaceRangeWith(
              o,
              a,
              this.type.create(
                e,
                u.schema.text(c.join(`
`))
              )
            ), !0)).setTextSelection({
              from: o + 2,
              to: o + 2
            }).run();
        }
        return t.toggleNode(this.name, "paragraph", e);
      }
    };
  },
  addKeyboardShortcuts() {
    var n;
    return {
      ...(n = this.parent) == null ? void 0 : n.call(this),
      Tab: ({ editor: e }) => {
        const { state: t, view: r } = e;
        if (!Df(t, this.name))
          return !1;
        const { selection: i, tr: s } = t, o = "  ";
        if (i.empty)
          r.dispatch(s.insertText(o));
        else {
          const { $from: a, from: l, to: c } = i, u = a.node();
          if (u.type !== this.type)
            return !1;
          const { start: d, end: f } = y2(i, u);
          if (d === void 0 || f === void 0)
            return r.dispatch(s.replaceSelectionWith(t.schema.text(o))), !0;
          const g = (u.textContent || "").split(`
`).map((y, k) => k >= d && k <= f && y ? o + y : y), m = a.node(1), v = a.start(1);
          s.replaceWith(
            v,
            v + m.nodeSize - 2,
            t.schema.text(g.join(`
`))
          ), s.setSelection(
            X.between(
              s.doc.resolve(l + o.length),
              s.doc.resolve(
                c + (f - d + 1) * o.length
              )
            )
          ), r.dispatch(s);
        }
        return !0;
      }
    };
  },
  addInputRules() {
    return [
      If({
        find: v2,
        type: this.type,
        getAttributes: (n) => {
          var e;
          return {
            language: ((e = Bf(n[1])) == null ? void 0 : e.value) || this.options.defaultLanguage
          };
        }
      }),
      If({
        find: w2,
        type: this.type,
        getAttributes: (n) => {
          var e;
          return {
            language: ((e = Bf(n[1])) == null ? void 0 : e.value) || this.options.defaultLanguage
          };
        }
      })
    ];
  },
  addNodeView() {
    return (n) => {
      const e = document.createElement("div");
      e.classList.add("aie-codeblock-wrapper");
      const { language: t } = n.node.attrs;
      e.innerHTML = `
                <div class="aie-codeblock-tools" contenteditable="false">
                    <div class="aie-codeblock-tools-lang" contenteditable="false"><span>${t || this.options.defaultLanguage}</span><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 16L6 10H18L12 16Z"></path></svg></div>
                </div>
                <pre class="hljs"><code></code></pre>
                `;
      const r = () => {
        const s = document.createElement("div");
        return s.classList.add("aie-codeblock-langs"), s.innerHTML = `
                ${this.options.languages.map((o) => `<div class="aie-codeblock-langs-item" data-item="${o.value}">${o.name}</div>`).join("")}`, s.addEventListener("click", (o) => {
          const a = o.target.closest(".aie-codeblock-langs-item");
          if (a) {
            const l = a.getAttribute("data-item");
            n.editor.chain().setCodeBlock({ language: l }).run();
          }
        }), s;
      }, i = Je(e.querySelector(".aie-codeblock-tools-lang"), {
        content: r(),
        appendTo: n.editor.view.dom.closest(".aie-container"),
        placement: "bottom-end",
        trigger: "click",
        interactive: !0,
        arrow: !1,
        aria: {
          content: null,
          expanded: !1
        }
      });
      return {
        dom: e,
        contentDOM: e.querySelector("code"),
        destroy: () => {
          i.destroy();
        }
      };
    };
  }
});
function E2(n) {
  const e = n.regex, t = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", s = "<[^<>]+>", o = "(?!struct)(" + r + "|" + e.optional(i) + "[a-zA-Z_]\\w*" + e.optional(s) + ")", a = {
    className: "type",
    begin: "\\b[a-z\\d_]*_t\\b"
  }, l = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)", c = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + l + "|.)",
        end: "'",
        illegal: "."
      },
      n.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, u = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, d = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      n.inherit(c, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      t,
      n.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(i) + n.IDENT_RE,
    relevance: 0
  }, p = e.optional(i) + n.IDENT_RE + "\\s*\\(", h = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "co_await",
    "co_return",
    "co_yield",
    "compl",
    "concept",
    "const_cast|10",
    "consteval",
    "constexpr",
    "constinit",
    "continue",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast|10",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "final",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "override",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast|10",
    "requires",
    "return",
    "sizeof",
    "static_assert",
    "static_cast|10",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "transaction_safe",
    "transaction_safe_dynamic",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq"
  ], g = [
    "bool",
    "char",
    "char16_t",
    "char32_t",
    "char8_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "void",
    "wchar_t",
    "unsigned",
    "signed",
    "const",
    "static"
  ], m = [
    "any",
    "auto_ptr",
    "barrier",
    "binary_semaphore",
    "bitset",
    "complex",
    "condition_variable",
    "condition_variable_any",
    "counting_semaphore",
    "deque",
    "false_type",
    "future",
    "imaginary",
    "initializer_list",
    "istringstream",
    "jthread",
    "latch",
    "lock_guard",
    "multimap",
    "multiset",
    "mutex",
    "optional",
    "ostringstream",
    "packaged_task",
    "pair",
    "promise",
    "priority_queue",
    "queue",
    "recursive_mutex",
    "recursive_timed_mutex",
    "scoped_lock",
    "set",
    "shared_future",
    "shared_lock",
    "shared_mutex",
    "shared_timed_mutex",
    "shared_ptr",
    "stack",
    "string_view",
    "stringstream",
    "timed_mutex",
    "thread",
    "true_type",
    "tuple",
    "unique_lock",
    "unique_ptr",
    "unordered_map",
    "unordered_multimap",
    "unordered_multiset",
    "unordered_set",
    "variant",
    "vector",
    "weak_ptr",
    "wstring",
    "wstring_view"
  ], v = [
    "abort",
    "abs",
    "acos",
    "apply",
    "as_const",
    "asin",
    "atan",
    "atan2",
    "calloc",
    "ceil",
    "cerr",
    "cin",
    "clog",
    "cos",
    "cosh",
    "cout",
    "declval",
    "endl",
    "exchange",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "forward",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "fscanf",
    "future",
    "invoke",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "labs",
    "launder",
    "ldexp",
    "log",
    "log10",
    "make_pair",
    "make_shared",
    "make_shared_for_overwrite",
    "make_tuple",
    "make_unique",
    "malloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "move",
    "pow",
    "printf",
    "putchar",
    "puts",
    "realloc",
    "scanf",
    "sin",
    "sinh",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "std",
    "stderr",
    "stdin",
    "stdout",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "swap",
    "tan",
    "tanh",
    "terminate",
    "to_underlying",
    "tolower",
    "toupper",
    "vfprintf",
    "visit",
    "vprintf",
    "vsprintf"
  ], b = {
    type: g,
    keyword: h,
    literal: [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ],
    built_in: ["_Pragma"],
    _type_hints: m
  }, x = {
    className: "function.dispatch",
    relevance: 0,
    keywords: {
      // Only for relevance, not highlighting.
      _hint: v
    },
    begin: e.concat(
      /\b/,
      /(?!decltype)/,
      /(?!if)/,
      /(?!for)/,
      /(?!switch)/,
      /(?!while)/,
      n.IDENT_RE,
      e.lookahead(/(<[^<>]+>|)\s*\(/)
    )
  }, w = [
    x,
    d,
    a,
    t,
    n.C_BLOCK_COMMENT_MODE,
    u,
    c
  ], S = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: b,
    contains: w.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: b,
        contains: w.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, T = {
    className: "function",
    begin: "(" + o + "[\\*&\\s]+)+" + p,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: b,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: r,
        keywords: b,
        relevance: 0
      },
      {
        begin: p,
        returnBegin: !0,
        contains: [f],
        relevance: 0
      },
      // needed because we do not have look-behind on the below rule
      // to prevent it from grabbing the final : in a :: pair
      {
        begin: /::/,
        relevance: 0
      },
      // initializers
      {
        begin: /:/,
        endsWithParent: !0,
        contains: [
          c,
          u
        ]
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: b,
        relevance: 0,
        contains: [
          t,
          n.C_BLOCK_COMMENT_MODE,
          c,
          u,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: b,
            relevance: 0,
            contains: [
              "self",
              t,
              n.C_BLOCK_COMMENT_MODE,
              c,
              u,
              a
            ]
          }
        ]
      },
      a,
      t,
      n.C_BLOCK_COMMENT_MODE,
      d
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: b,
    illegal: "</",
    classNameAliases: { "function.dispatch": "built_in" },
    contains: [].concat(
      S,
      T,
      x,
      w,
      [
        d,
        {
          // containers: ie, `vector <int> rooms (9);`
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
          end: ">",
          keywords: b,
          contains: [
            "self",
            a
          ]
        },
        {
          begin: n.IDENT_RE + "::",
          keywords: b
        },
        {
          match: [
            // extra complexity to deal with `enum class` and `enum struct`
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    )
  };
}
function x2(n) {
  const e = {
    type: [
      "boolean",
      "byte",
      "word",
      "String"
    ],
    built_in: [
      "KeyboardController",
      "MouseController",
      "SoftwareSerial",
      "EthernetServer",
      "EthernetClient",
      "LiquidCrystal",
      "RobotControl",
      "GSMVoiceCall",
      "EthernetUDP",
      "EsploraTFT",
      "HttpClient",
      "RobotMotor",
      "WiFiClient",
      "GSMScanner",
      "FileSystem",
      "Scheduler",
      "GSMServer",
      "YunClient",
      "YunServer",
      "IPAddress",
      "GSMClient",
      "GSMModem",
      "Keyboard",
      "Ethernet",
      "Console",
      "GSMBand",
      "Esplora",
      "Stepper",
      "Process",
      "WiFiUDP",
      "GSM_SMS",
      "Mailbox",
      "USBHost",
      "Firmata",
      "PImage",
      "Client",
      "Server",
      "GSMPIN",
      "FileIO",
      "Bridge",
      "Serial",
      "EEPROM",
      "Stream",
      "Mouse",
      "Audio",
      "Servo",
      "File",
      "Task",
      "GPRS",
      "WiFi",
      "Wire",
      "TFT",
      "GSM",
      "SPI",
      "SD"
    ],
    _hints: [
      "setup",
      "loop",
      "runShellCommandAsynchronously",
      "analogWriteResolution",
      "retrieveCallingNumber",
      "printFirmwareVersion",
      "analogReadResolution",
      "sendDigitalPortPair",
      "noListenOnLocalhost",
      "readJoystickButton",
      "setFirmwareVersion",
      "readJoystickSwitch",
      "scrollDisplayRight",
      "getVoiceCallStatus",
      "scrollDisplayLeft",
      "writeMicroseconds",
      "delayMicroseconds",
      "beginTransmission",
      "getSignalStrength",
      "runAsynchronously",
      "getAsynchronously",
      "listenOnLocalhost",
      "getCurrentCarrier",
      "readAccelerometer",
      "messageAvailable",
      "sendDigitalPorts",
      "lineFollowConfig",
      "countryNameWrite",
      "runShellCommand",
      "readStringUntil",
      "rewindDirectory",
      "readTemperature",
      "setClockDivider",
      "readLightSensor",
      "endTransmission",
      "analogReference",
      "detachInterrupt",
      "countryNameRead",
      "attachInterrupt",
      "encryptionType",
      "readBytesUntil",
      "robotNameWrite",
      "readMicrophone",
      "robotNameRead",
      "cityNameWrite",
      "userNameWrite",
      "readJoystickY",
      "readJoystickX",
      "mouseReleased",
      "openNextFile",
      "scanNetworks",
      "noInterrupts",
      "digitalWrite",
      "beginSpeaker",
      "mousePressed",
      "isActionDone",
      "mouseDragged",
      "displayLogos",
      "noAutoscroll",
      "addParameter",
      "remoteNumber",
      "getModifiers",
      "keyboardRead",
      "userNameRead",
      "waitContinue",
      "processInput",
      "parseCommand",
      "printVersion",
      "readNetworks",
      "writeMessage",
      "blinkVersion",
      "cityNameRead",
      "readMessage",
      "setDataMode",
      "parsePacket",
      "isListening",
      "setBitOrder",
      "beginPacket",
      "isDirectory",
      "motorsWrite",
      "drawCompass",
      "digitalRead",
      "clearScreen",
      "serialEvent",
      "rightToLeft",
      "setTextSize",
      "leftToRight",
      "requestFrom",
      "keyReleased",
      "compassRead",
      "analogWrite",
      "interrupts",
      "WiFiServer",
      "disconnect",
      "playMelody",
      "parseFloat",
      "autoscroll",
      "getPINUsed",
      "setPINUsed",
      "setTimeout",
      "sendAnalog",
      "readSlider",
      "analogRead",
      "beginWrite",
      "createChar",
      "motorsStop",
      "keyPressed",
      "tempoWrite",
      "readButton",
      "subnetMask",
      "debugPrint",
      "macAddress",
      "writeGreen",
      "randomSeed",
      "attachGPRS",
      "readString",
      "sendString",
      "remotePort",
      "releaseAll",
      "mouseMoved",
      "background",
      "getXChange",
      "getYChange",
      "answerCall",
      "getResult",
      "voiceCall",
      "endPacket",
      "constrain",
      "getSocket",
      "writeJSON",
      "getButton",
      "available",
      "connected",
      "findUntil",
      "readBytes",
      "exitValue",
      "readGreen",
      "writeBlue",
      "startLoop",
      "IPAddress",
      "isPressed",
      "sendSysex",
      "pauseMode",
      "gatewayIP",
      "setCursor",
      "getOemKey",
      "tuneWrite",
      "noDisplay",
      "loadImage",
      "switchPIN",
      "onRequest",
      "onReceive",
      "changePIN",
      "playFile",
      "noBuffer",
      "parseInt",
      "overflow",
      "checkPIN",
      "knobRead",
      "beginTFT",
      "bitClear",
      "updateIR",
      "bitWrite",
      "position",
      "writeRGB",
      "highByte",
      "writeRed",
      "setSpeed",
      "readBlue",
      "noStroke",
      "remoteIP",
      "transfer",
      "shutdown",
      "hangCall",
      "beginSMS",
      "endWrite",
      "attached",
      "maintain",
      "noCursor",
      "checkReg",
      "checkPUK",
      "shiftOut",
      "isValid",
      "shiftIn",
      "pulseIn",
      "connect",
      "println",
      "localIP",
      "pinMode",
      "getIMEI",
      "display",
      "noBlink",
      "process",
      "getBand",
      "running",
      "beginSD",
      "drawBMP",
      "lowByte",
      "setBand",
      "release",
      "bitRead",
      "prepare",
      "pointTo",
      "readRed",
      "setMode",
      "noFill",
      "remove",
      "listen",
      "stroke",
      "detach",
      "attach",
      "noTone",
      "exists",
      "buffer",
      "height",
      "bitSet",
      "circle",
      "config",
      "cursor",
      "random",
      "IRread",
      "setDNS",
      "endSMS",
      "getKey",
      "micros",
      "millis",
      "begin",
      "print",
      "write",
      "ready",
      "flush",
      "width",
      "isPIN",
      "blink",
      "clear",
      "press",
      "mkdir",
      "rmdir",
      "close",
      "point",
      "yield",
      "image",
      "BSSID",
      "click",
      "delay",
      "read",
      "text",
      "move",
      "peek",
      "beep",
      "rect",
      "line",
      "open",
      "seek",
      "fill",
      "size",
      "turn",
      "stop",
      "home",
      "find",
      "step",
      "tone",
      "sqrt",
      "RSSI",
      "SSID",
      "end",
      "bit",
      "tan",
      "cos",
      "sin",
      "pow",
      "map",
      "abs",
      "max",
      "min",
      "get",
      "run",
      "put"
    ],
    literal: [
      "DIGITAL_MESSAGE",
      "FIRMATA_STRING",
      "ANALOG_MESSAGE",
      "REPORT_DIGITAL",
      "REPORT_ANALOG",
      "INPUT_PULLUP",
      "SET_PIN_MODE",
      "INTERNAL2V56",
      "SYSTEM_RESET",
      "LED_BUILTIN",
      "INTERNAL1V1",
      "SYSEX_START",
      "INTERNAL",
      "EXTERNAL",
      "DEFAULT",
      "OUTPUT",
      "INPUT",
      "HIGH",
      "LOW"
    ]
  }, t = E2(n), r = (
    /** @type {Record<string,any>} */
    t.keywords
  );
  return r.type = [
    ...r.type,
    ...e.type
  ], r.literal = [
    ...r.literal,
    ...e.literal
  ], r.built_in = [
    ...r.built_in,
    ...e.built_in
  ], r._hints = e._hints, t.name = "Arduino", t.aliases = ["ino"], t.supersetOf = "cpp", t;
}
function C2(n) {
  const e = n.regex, t = {}, r = {
    begin: /\$\{/,
    end: /\}/,
    contains: [
      "self",
      {
        begin: /:-/,
        contains: [t]
      }
      // default values
    ]
  };
  Object.assign(t, {
    className: "variable",
    variants: [
      { begin: e.concat(
        /\$[\w\d#@][\w\d_]*/,
        // negative look-ahead tries to avoid matching patterns that are not
        // Perl at all like $ident$, @ident@, etc.
        "(?![\\w\\d])(?![$])"
      ) },
      r
    ]
  });
  const i = {
    className: "subst",
    begin: /\$\(/,
    end: /\)/,
    contains: [n.BACKSLASH_ESCAPE]
  }, s = {
    begin: /<<-?\s*(?=\w+)/,
    starts: { contains: [
      n.END_SAME_AS_BEGIN({
        begin: /(\w+)/,
        end: /(\w+)/,
        className: "string"
      })
    ] }
  }, o = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      n.BACKSLASH_ESCAPE,
      t,
      i
    ]
  };
  i.contains.push(o);
  const a = {
    match: /\\"/
  }, l = {
    className: "string",
    begin: /'/,
    end: /'/
  }, c = {
    match: /\\'/
  }, u = {
    begin: /\$?\(\(/,
    end: /\)\)/,
    contains: [
      {
        begin: /\d+#[0-9a-f]+/,
        className: "number"
      },
      n.NUMBER_MODE,
      t
    ]
  }, d = [
    "fish",
    "bash",
    "zsh",
    "sh",
    "csh",
    "ksh",
    "tcsh",
    "dash",
    "scsh"
  ], f = n.SHEBANG({
    binary: `(${d.join("|")})`,
    relevance: 10
  }), p = {
    className: "function",
    begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
    returnBegin: !0,
    contains: [n.inherit(n.TITLE_MODE, { begin: /\w[\w\d_]*/ })],
    relevance: 0
  }, h = [
    "if",
    "then",
    "else",
    "elif",
    "fi",
    "for",
    "while",
    "until",
    "in",
    "do",
    "done",
    "case",
    "esac",
    "function",
    "select"
  ], g = [
    "true",
    "false"
  ], m = { match: /(\/[a-z._-]+)+/ }, v = [
    "break",
    "cd",
    "continue",
    "eval",
    "exec",
    "exit",
    "export",
    "getopts",
    "hash",
    "pwd",
    "readonly",
    "return",
    "shift",
    "test",
    "times",
    "trap",
    "umask",
    "unset"
  ], y = [
    "alias",
    "bind",
    "builtin",
    "caller",
    "command",
    "declare",
    "echo",
    "enable",
    "help",
    "let",
    "local",
    "logout",
    "mapfile",
    "printf",
    "read",
    "readarray",
    "source",
    "type",
    "typeset",
    "ulimit",
    "unalias"
  ], k = [
    "autoload",
    "bg",
    "bindkey",
    "bye",
    "cap",
    "chdir",
    "clone",
    "comparguments",
    "compcall",
    "compctl",
    "compdescribe",
    "compfiles",
    "compgroups",
    "compquote",
    "comptags",
    "comptry",
    "compvalues",
    "dirs",
    "disable",
    "disown",
    "echotc",
    "echoti",
    "emulate",
    "fc",
    "fg",
    "float",
    "functions",
    "getcap",
    "getln",
    "history",
    "integer",
    "jobs",
    "kill",
    "limit",
    "log",
    "noglob",
    "popd",
    "print",
    "pushd",
    "pushln",
    "rehash",
    "sched",
    "setcap",
    "setopt",
    "stat",
    "suspend",
    "ttyctl",
    "unfunction",
    "unhash",
    "unlimit",
    "unsetopt",
    "vared",
    "wait",
    "whence",
    "where",
    "which",
    "zcompile",
    "zformat",
    "zftp",
    "zle",
    "zmodload",
    "zparseopts",
    "zprof",
    "zpty",
    "zregexparse",
    "zsocket",
    "zstyle",
    "ztcp"
  ], b = [
    "chcon",
    "chgrp",
    "chown",
    "chmod",
    "cp",
    "dd",
    "df",
    "dir",
    "dircolors",
    "ln",
    "ls",
    "mkdir",
    "mkfifo",
    "mknod",
    "mktemp",
    "mv",
    "realpath",
    "rm",
    "rmdir",
    "shred",
    "sync",
    "touch",
    "truncate",
    "vdir",
    "b2sum",
    "base32",
    "base64",
    "cat",
    "cksum",
    "comm",
    "csplit",
    "cut",
    "expand",
    "fmt",
    "fold",
    "head",
    "join",
    "md5sum",
    "nl",
    "numfmt",
    "od",
    "paste",
    "ptx",
    "pr",
    "sha1sum",
    "sha224sum",
    "sha256sum",
    "sha384sum",
    "sha512sum",
    "shuf",
    "sort",
    "split",
    "sum",
    "tac",
    "tail",
    "tr",
    "tsort",
    "unexpand",
    "uniq",
    "wc",
    "arch",
    "basename",
    "chroot",
    "date",
    "dirname",
    "du",
    "echo",
    "env",
    "expr",
    "factor",
    // "false", // keyword literal already
    "groups",
    "hostid",
    "id",
    "link",
    "logname",
    "nice",
    "nohup",
    "nproc",
    "pathchk",
    "pinky",
    "printenv",
    "printf",
    "pwd",
    "readlink",
    "runcon",
    "seq",
    "sleep",
    "stat",
    "stdbuf",
    "stty",
    "tee",
    "test",
    "timeout",
    // "true", // keyword literal already
    "tty",
    "uname",
    "unlink",
    "uptime",
    "users",
    "who",
    "whoami",
    "yes"
  ];
  return {
    name: "Bash",
    aliases: ["sh"],
    keywords: {
      $pattern: /\b[a-z][a-z0-9._-]+\b/,
      keyword: h,
      literal: g,
      built_in: [
        ...v,
        ...y,
        // Shell modifiers
        "set",
        "shopt",
        ...k,
        ...b
      ]
    },
    contains: [
      f,
      // to catch known shells and boost relevancy
      n.SHEBANG(),
      // to catch unknown shells but still highlight the shebang
      p,
      u,
      n.HASH_COMMENT_MODE,
      s,
      m,
      o,
      a,
      l,
      c,
      t
    ]
  };
}
function S2(n) {
  const e = n.regex, t = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", s = "<[^<>]+>", o = "(" + r + "|" + e.optional(i) + "[a-zA-Z_]\\w*" + e.optional(s) + ")", a = {
    className: "type",
    variants: [
      { begin: "\\b[a-z\\d_]*_t\\b" },
      { match: /\batomic_[a-z]{3,6}\b/ }
    ]
  }, l = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)", c = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + l + "|.)",
        end: "'",
        illegal: "."
      },
      n.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, u = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, d = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      n.inherit(c, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      t,
      n.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(i) + n.IDENT_RE,
    relevance: 0
  }, p = e.optional(i) + n.IDENT_RE + "\\s*\\(", m = {
    keyword: [
      "asm",
      "auto",
      "break",
      "case",
      "continue",
      "default",
      "do",
      "else",
      "enum",
      "extern",
      "for",
      "fortran",
      "goto",
      "if",
      "inline",
      "register",
      "restrict",
      "return",
      "sizeof",
      "struct",
      "switch",
      "typedef",
      "union",
      "volatile",
      "while",
      "_Alignas",
      "_Alignof",
      "_Atomic",
      "_Generic",
      "_Noreturn",
      "_Static_assert",
      "_Thread_local",
      // aliases
      "alignas",
      "alignof",
      "noreturn",
      "static_assert",
      "thread_local",
      // not a C keyword but is, for all intents and purposes, treated exactly like one.
      "_Pragma"
    ],
    type: [
      "float",
      "double",
      "signed",
      "unsigned",
      "int",
      "short",
      "long",
      "char",
      "void",
      "_Bool",
      "_Complex",
      "_Imaginary",
      "_Decimal32",
      "_Decimal64",
      "_Decimal128",
      // modifiers
      "const",
      "static",
      // aliases
      "complex",
      "bool",
      "imaginary"
    ],
    literal: "true false NULL",
    // TODO: apply hinting work similar to what was done in cpp.js
    built_in: "std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan vfprintf vprintf vsprintf endl initializer_list unique_ptr"
  }, v = [
    d,
    a,
    t,
    n.C_BLOCK_COMMENT_MODE,
    u,
    c
  ], y = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: m,
    contains: v.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: m,
        contains: v.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, k = {
    begin: "(" + o + "[\\*&\\s]+)+" + p,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: m,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: r,
        keywords: m,
        relevance: 0
      },
      {
        begin: p,
        returnBegin: !0,
        contains: [n.inherit(f, { className: "title.function" })],
        relevance: 0
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: m,
        relevance: 0,
        contains: [
          t,
          n.C_BLOCK_COMMENT_MODE,
          c,
          u,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: m,
            relevance: 0,
            contains: [
              "self",
              t,
              n.C_BLOCK_COMMENT_MODE,
              c,
              u,
              a
            ]
          }
        ]
      },
      a,
      t,
      n.C_BLOCK_COMMENT_MODE,
      d
    ]
  };
  return {
    name: "C",
    aliases: ["h"],
    keywords: m,
    // Until differentiations are added between `c` and `cpp`, `c` will
    // not be auto-detected to avoid auto-detect conflicts between C and C++
    disableAutodetect: !0,
    illegal: "</",
    contains: [].concat(
      y,
      k,
      v,
      [
        d,
        {
          begin: n.IDENT_RE + "::",
          keywords: m
        },
        {
          className: "class",
          beginKeywords: "enum class struct union",
          end: /[{;:<>=]/,
          contains: [
            { beginKeywords: "final class struct" },
            n.TITLE_MODE
          ]
        }
      ]
    ),
    exports: {
      preprocessor: d,
      strings: c,
      keywords: m
    }
  };
}
function _2(n) {
  const e = n.regex, t = n.COMMENT("//", "$", { contains: [{ begin: /\\\n/ }] }), r = "decltype\\(auto\\)", i = "[a-zA-Z_]\\w*::", s = "<[^<>]+>", o = "(?!struct)(" + r + "|" + e.optional(i) + "[a-zA-Z_]\\w*" + e.optional(s) + ")", a = {
    className: "type",
    begin: "\\b[a-z\\d_]*_t\\b"
  }, l = "\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)", c = {
    className: "string",
    variants: [
      {
        begin: '(u8?|U|L)?"',
        end: '"',
        illegal: "\\n",
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: "(u8?|U|L)?'(" + l + "|.)",
        end: "'",
        illegal: "."
      },
      n.END_SAME_AS_BEGIN({
        begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
        end: /\)([^()\\ ]{0,16})"/
      })
    ]
  }, u = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, d = {
    className: "meta",
    begin: /#\s*[a-z]+\b/,
    end: /$/,
    keywords: { keyword: "if else elif endif define undef warning error line pragma _Pragma ifdef ifndef include" },
    contains: [
      {
        begin: /\\\n/,
        relevance: 0
      },
      n.inherit(c, { className: "string" }),
      {
        className: "string",
        begin: /<.*?>/
      },
      t,
      n.C_BLOCK_COMMENT_MODE
    ]
  }, f = {
    className: "title",
    begin: e.optional(i) + n.IDENT_RE,
    relevance: 0
  }, p = e.optional(i) + n.IDENT_RE + "\\s*\\(", h = [
    "alignas",
    "alignof",
    "and",
    "and_eq",
    "asm",
    "atomic_cancel",
    "atomic_commit",
    "atomic_noexcept",
    "auto",
    "bitand",
    "bitor",
    "break",
    "case",
    "catch",
    "class",
    "co_await",
    "co_return",
    "co_yield",
    "compl",
    "concept",
    "const_cast|10",
    "consteval",
    "constexpr",
    "constinit",
    "continue",
    "decltype",
    "default",
    "delete",
    "do",
    "dynamic_cast|10",
    "else",
    "enum",
    "explicit",
    "export",
    "extern",
    "false",
    "final",
    "for",
    "friend",
    "goto",
    "if",
    "import",
    "inline",
    "module",
    "mutable",
    "namespace",
    "new",
    "noexcept",
    "not",
    "not_eq",
    "nullptr",
    "operator",
    "or",
    "or_eq",
    "override",
    "private",
    "protected",
    "public",
    "reflexpr",
    "register",
    "reinterpret_cast|10",
    "requires",
    "return",
    "sizeof",
    "static_assert",
    "static_cast|10",
    "struct",
    "switch",
    "synchronized",
    "template",
    "this",
    "thread_local",
    "throw",
    "transaction_safe",
    "transaction_safe_dynamic",
    "true",
    "try",
    "typedef",
    "typeid",
    "typename",
    "union",
    "using",
    "virtual",
    "volatile",
    "while",
    "xor",
    "xor_eq"
  ], g = [
    "bool",
    "char",
    "char16_t",
    "char32_t",
    "char8_t",
    "double",
    "float",
    "int",
    "long",
    "short",
    "void",
    "wchar_t",
    "unsigned",
    "signed",
    "const",
    "static"
  ], m = [
    "any",
    "auto_ptr",
    "barrier",
    "binary_semaphore",
    "bitset",
    "complex",
    "condition_variable",
    "condition_variable_any",
    "counting_semaphore",
    "deque",
    "false_type",
    "future",
    "imaginary",
    "initializer_list",
    "istringstream",
    "jthread",
    "latch",
    "lock_guard",
    "multimap",
    "multiset",
    "mutex",
    "optional",
    "ostringstream",
    "packaged_task",
    "pair",
    "promise",
    "priority_queue",
    "queue",
    "recursive_mutex",
    "recursive_timed_mutex",
    "scoped_lock",
    "set",
    "shared_future",
    "shared_lock",
    "shared_mutex",
    "shared_timed_mutex",
    "shared_ptr",
    "stack",
    "string_view",
    "stringstream",
    "timed_mutex",
    "thread",
    "true_type",
    "tuple",
    "unique_lock",
    "unique_ptr",
    "unordered_map",
    "unordered_multimap",
    "unordered_multiset",
    "unordered_set",
    "variant",
    "vector",
    "weak_ptr",
    "wstring",
    "wstring_view"
  ], v = [
    "abort",
    "abs",
    "acos",
    "apply",
    "as_const",
    "asin",
    "atan",
    "atan2",
    "calloc",
    "ceil",
    "cerr",
    "cin",
    "clog",
    "cos",
    "cosh",
    "cout",
    "declval",
    "endl",
    "exchange",
    "exit",
    "exp",
    "fabs",
    "floor",
    "fmod",
    "forward",
    "fprintf",
    "fputs",
    "free",
    "frexp",
    "fscanf",
    "future",
    "invoke",
    "isalnum",
    "isalpha",
    "iscntrl",
    "isdigit",
    "isgraph",
    "islower",
    "isprint",
    "ispunct",
    "isspace",
    "isupper",
    "isxdigit",
    "labs",
    "launder",
    "ldexp",
    "log",
    "log10",
    "make_pair",
    "make_shared",
    "make_shared_for_overwrite",
    "make_tuple",
    "make_unique",
    "malloc",
    "memchr",
    "memcmp",
    "memcpy",
    "memset",
    "modf",
    "move",
    "pow",
    "printf",
    "putchar",
    "puts",
    "realloc",
    "scanf",
    "sin",
    "sinh",
    "snprintf",
    "sprintf",
    "sqrt",
    "sscanf",
    "std",
    "stderr",
    "stdin",
    "stdout",
    "strcat",
    "strchr",
    "strcmp",
    "strcpy",
    "strcspn",
    "strlen",
    "strncat",
    "strncmp",
    "strncpy",
    "strpbrk",
    "strrchr",
    "strspn",
    "strstr",
    "swap",
    "tan",
    "tanh",
    "terminate",
    "to_underlying",
    "tolower",
    "toupper",
    "vfprintf",
    "visit",
    "vprintf",
    "vsprintf"
  ], b = {
    type: g,
    keyword: h,
    literal: [
      "NULL",
      "false",
      "nullopt",
      "nullptr",
      "true"
    ],
    built_in: ["_Pragma"],
    _type_hints: m
  }, x = {
    className: "function.dispatch",
    relevance: 0,
    keywords: {
      // Only for relevance, not highlighting.
      _hint: v
    },
    begin: e.concat(
      /\b/,
      /(?!decltype)/,
      /(?!if)/,
      /(?!for)/,
      /(?!switch)/,
      /(?!while)/,
      n.IDENT_RE,
      e.lookahead(/(<[^<>]+>|)\s*\(/)
    )
  }, w = [
    x,
    d,
    a,
    t,
    n.C_BLOCK_COMMENT_MODE,
    u,
    c
  ], S = {
    // This mode covers expression context where we can't expect a function
    // definition and shouldn't highlight anything that looks like one:
    // `return some()`, `else if()`, `(x*sum(1, 2))`
    variants: [
      {
        begin: /=/,
        end: /;/
      },
      {
        begin: /\(/,
        end: /\)/
      },
      {
        beginKeywords: "new throw return else",
        end: /;/
      }
    ],
    keywords: b,
    contains: w.concat([
      {
        begin: /\(/,
        end: /\)/,
        keywords: b,
        contains: w.concat(["self"]),
        relevance: 0
      }
    ]),
    relevance: 0
  }, T = {
    className: "function",
    begin: "(" + o + "[\\*&\\s]+)+" + p,
    returnBegin: !0,
    end: /[{;=]/,
    excludeEnd: !0,
    keywords: b,
    illegal: /[^\w\s\*&:<>.]/,
    contains: [
      {
        // to prevent it from being confused as the function title
        begin: r,
        keywords: b,
        relevance: 0
      },
      {
        begin: p,
        returnBegin: !0,
        contains: [f],
        relevance: 0
      },
      // needed because we do not have look-behind on the below rule
      // to prevent it from grabbing the final : in a :: pair
      {
        begin: /::/,
        relevance: 0
      },
      // initializers
      {
        begin: /:/,
        endsWithParent: !0,
        contains: [
          c,
          u
        ]
      },
      // allow for multiple declarations, e.g.:
      // extern void f(int), g(char);
      {
        relevance: 0,
        match: /,/
      },
      {
        className: "params",
        begin: /\(/,
        end: /\)/,
        keywords: b,
        relevance: 0,
        contains: [
          t,
          n.C_BLOCK_COMMENT_MODE,
          c,
          u,
          a,
          // Count matching parentheses.
          {
            begin: /\(/,
            end: /\)/,
            keywords: b,
            relevance: 0,
            contains: [
              "self",
              t,
              n.C_BLOCK_COMMENT_MODE,
              c,
              u,
              a
            ]
          }
        ]
      },
      a,
      t,
      n.C_BLOCK_COMMENT_MODE,
      d
    ]
  };
  return {
    name: "C++",
    aliases: [
      "cc",
      "c++",
      "h++",
      "hpp",
      "hh",
      "hxx",
      "cxx"
    ],
    keywords: b,
    illegal: "</",
    classNameAliases: { "function.dispatch": "built_in" },
    contains: [].concat(
      S,
      T,
      x,
      w,
      [
        d,
        {
          // containers: ie, `vector <int> rooms (9);`
          begin: "\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)",
          end: ">",
          keywords: b,
          contains: [
            "self",
            a
          ]
        },
        {
          begin: n.IDENT_RE + "::",
          keywords: b
        },
        {
          match: [
            // extra complexity to deal with `enum class` and `enum struct`
            /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
            /\s+/,
            /\w+/
          ],
          className: {
            1: "keyword",
            3: "title.class"
          }
        }
      ]
    )
  };
}
function M2(n) {
  const e = [
    "bool",
    "byte",
    "char",
    "decimal",
    "delegate",
    "double",
    "dynamic",
    "enum",
    "float",
    "int",
    "long",
    "nint",
    "nuint",
    "object",
    "sbyte",
    "short",
    "string",
    "ulong",
    "uint",
    "ushort"
  ], t = [
    "public",
    "private",
    "protected",
    "static",
    "internal",
    "protected",
    "abstract",
    "async",
    "extern",
    "override",
    "unsafe",
    "virtual",
    "new",
    "sealed",
    "partial"
  ], r = [
    "default",
    "false",
    "null",
    "true"
  ], i = [
    "abstract",
    "as",
    "base",
    "break",
    "case",
    "catch",
    "class",
    "const",
    "continue",
    "do",
    "else",
    "event",
    "explicit",
    "extern",
    "finally",
    "fixed",
    "for",
    "foreach",
    "goto",
    "if",
    "implicit",
    "in",
    "interface",
    "internal",
    "is",
    "lock",
    "namespace",
    "new",
    "operator",
    "out",
    "override",
    "params",
    "private",
    "protected",
    "public",
    "readonly",
    "record",
    "ref",
    "return",
    "scoped",
    "sealed",
    "sizeof",
    "stackalloc",
    "static",
    "struct",
    "switch",
    "this",
    "throw",
    "try",
    "typeof",
    "unchecked",
    "unsafe",
    "using",
    "virtual",
    "void",
    "volatile",
    "while"
  ], s = [
    "add",
    "alias",
    "and",
    "ascending",
    "async",
    "await",
    "by",
    "descending",
    "equals",
    "from",
    "get",
    "global",
    "group",
    "init",
    "into",
    "join",
    "let",
    "nameof",
    "not",
    "notnull",
    "on",
    "or",
    "orderby",
    "partial",
    "remove",
    "select",
    "set",
    "unmanaged",
    "value|0",
    "var",
    "when",
    "where",
    "with",
    "yield"
  ], o = {
    keyword: i.concat(s),
    built_in: e,
    literal: r
  }, a = n.inherit(n.TITLE_MODE, { begin: "[a-zA-Z](\\.?\\w)*" }), l = {
    className: "number",
    variants: [
      { begin: "\\b(0b[01']+)" },
      { begin: "(-?)\\b([\\d']+(\\.[\\d']*)?|\\.[\\d']+)(u|U|l|L|ul|UL|f|F|b|B)" },
      { begin: "(-?)(\\b0[xX][a-fA-F0-9']+|(\\b[\\d']+(\\.[\\d']*)?|\\.[\\d']+)([eE][-+]?[\\d']+)?)" }
    ],
    relevance: 0
  }, c = {
    className: "string",
    begin: '@"',
    end: '"',
    contains: [{ begin: '""' }]
  }, u = n.inherit(c, { illegal: /\n/ }), d = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: o
  }, f = n.inherit(d, { illegal: /\n/ }), p = {
    className: "string",
    begin: /\$"/,
    end: '"',
    illegal: /\n/,
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      n.BACKSLASH_ESCAPE,
      f
    ]
  }, h = {
    className: "string",
    begin: /\$@"/,
    end: '"',
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      { begin: '""' },
      d
    ]
  }, g = n.inherit(h, {
    illegal: /\n/,
    contains: [
      { begin: /\{\{/ },
      { begin: /\}\}/ },
      { begin: '""' },
      f
    ]
  });
  d.contains = [
    h,
    p,
    c,
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    l,
    n.C_BLOCK_COMMENT_MODE
  ], f.contains = [
    g,
    p,
    u,
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    l,
    n.inherit(n.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
  ];
  const m = { variants: [
    h,
    p,
    c,
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE
  ] }, v = {
    begin: "<",
    end: ">",
    contains: [
      { beginKeywords: "in out" },
      a
    ]
  }, y = n.IDENT_RE + "(<" + n.IDENT_RE + "(\\s*,\\s*" + n.IDENT_RE + ")*>)?(\\[\\])?", k = {
    // prevents expressions like `@class` from incorrect flagging
    // `class` as a keyword
    begin: "@" + n.IDENT_RE,
    relevance: 0
  };
  return {
    name: "C#",
    aliases: [
      "cs",
      "c#"
    ],
    keywords: o,
    illegal: /::/,
    contains: [
      n.COMMENT(
        "///",
        "$",
        {
          returnBegin: !0,
          contains: [
            {
              className: "doctag",
              variants: [
                {
                  begin: "///",
                  relevance: 0
                },
                { begin: "<!--|-->" },
                {
                  begin: "</?",
                  end: ">"
                }
              ]
            }
          ]
        }
      ),
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      {
        className: "meta",
        begin: "#",
        end: "$",
        keywords: { keyword: "if else elif endif define undef warning error line region endregion pragma checksum" }
      },
      m,
      l,
      {
        beginKeywords: "class interface",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:,]/,
        contains: [
          { beginKeywords: "where class" },
          a,
          v,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          a,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        beginKeywords: "record",
        relevance: 0,
        end: /[{;=]/,
        illegal: /[^\s:]/,
        contains: [
          a,
          v,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // [Attributes("")]
        className: "meta",
        begin: "^\\s*\\[(?=[\\w])",
        excludeBegin: !0,
        end: "\\]",
        excludeEnd: !0,
        contains: [
          {
            className: "string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new return throw await else",
        relevance: 0
      },
      {
        className: "function",
        begin: "(" + y + "\\s+)+" + n.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
        returnBegin: !0,
        end: /\s*[{;=]/,
        excludeEnd: !0,
        keywords: o,
        contains: [
          // prevents these from being highlighted `title`
          {
            beginKeywords: t.join(" "),
            relevance: 0
          },
          {
            begin: n.IDENT_RE + "\\s*(<[^=]+>\\s*)?\\(",
            returnBegin: !0,
            contains: [
              n.TITLE_MODE,
              v
            ],
            relevance: 0
          },
          { match: /\(\)/ },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: o,
            relevance: 0,
            contains: [
              m,
              l,
              n.C_BLOCK_COMMENT_MODE
            ]
          },
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      k
    ]
  };
}
const A2 = (n) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: n.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: n.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), T2 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], N2 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
], O2 = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
], L2 = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
], R2 = [
  "align-content",
  "align-items",
  "align-self",
  "all",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "gap",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inline-size",
  "isolation",
  "justify-content",
  "left",
  "letter-spacing",
  "line-break",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "row-gap",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "z-index"
  // reverse makes sure longer attributes `font-weight` are matched fully
  // instead of getting false positives on say `font`
].reverse();
function D2(n) {
  const e = n.regex, t = A2(n), r = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ }, i = "and or not only", s = /@-?\w[\w]*(-\w+)*/, o = "[a-zA-Z-][a-zA-Z0-9_-]*", a = [
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE
  ];
  return {
    name: "CSS",
    case_insensitive: !0,
    illegal: /[=|'\$]/,
    keywords: { keyframePosition: "from to" },
    classNameAliases: {
      // for visual continuity with `tag {}` and because we
      // don't have a great class for this?
      keyframePosition: "selector-tag"
    },
    contains: [
      t.BLOCK_COMMENT,
      r,
      // to recognize keyframe 40% etc which are outside the scope of our
      // attribute value mode
      t.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: /#[A-Za-z0-9_-]+/,
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\." + o,
        relevance: 0
      },
      t.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        variants: [
          { begin: ":(" + O2.join("|") + ")" },
          { begin: ":(:)?(" + L2.join("|") + ")" }
        ]
      },
      // we may actually need this (12/2020)
      // { // pseudo-selector params
      //   begin: /\(/,
      //   end: /\)/,
      //   contains: [ hljs.CSS_NUMBER_MODE ]
      // },
      t.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + R2.join("|") + ")\\b"
      },
      // attribute values
      {
        begin: /:/,
        end: /[;}{]/,
        contains: [
          t.BLOCK_COMMENT,
          t.HEXCOLOR,
          t.IMPORTANT,
          t.CSS_NUMBER_MODE,
          ...a,
          // needed to highlight these as strings and to avoid issues with
          // illegal characters that might be inside urls that would tigger the
          // languages illegal stack
          {
            begin: /(url|data-uri)\(/,
            end: /\)/,
            relevance: 0,
            // from keywords
            keywords: { built_in: "url data-uri" },
            contains: [
              ...a,
              {
                className: "string",
                // any character other than `)` as in `url()` will be the start
                // of a string, which ends with `)` (from the parent mode)
                begin: /[^)]/,
                endsWithParent: !0,
                excludeEnd: !0
              }
            ]
          },
          t.FUNCTION_DISPATCH
        ]
      },
      {
        begin: e.lookahead(/@/),
        end: "[{;]",
        relevance: 0,
        illegal: /:/,
        // break on Less variables @var: ...
        contains: [
          {
            className: "keyword",
            begin: s
          },
          {
            begin: /\s/,
            endsWithParent: !0,
            excludeEnd: !0,
            relevance: 0,
            keywords: {
              $pattern: /[a-z-]+/,
              keyword: i,
              attribute: N2.join(" ")
            },
            contains: [
              {
                begin: /[a-z-]+(?=:)/,
                className: "attribute"
              },
              ...a,
              t.CSS_NUMBER_MODE
            ]
          }
        ]
      },
      {
        className: "selector-tag",
        begin: "\\b(" + T2.join("|") + ")\\b"
      }
    ]
  };
}
function I2(n) {
  const e = n.regex;
  return {
    name: "Diff",
    aliases: ["patch"],
    contains: [
      {
        className: "meta",
        relevance: 10,
        match: e.either(
          /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
          /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
          /^--- +\d+,\d+ +----$/
        )
      },
      {
        className: "comment",
        variants: [
          {
            begin: e.either(
              /Index: /,
              /^index/,
              /={3,}/,
              /^-{3}/,
              /^\*{3} /,
              /^\+{3}/,
              /^diff --git/
            ),
            end: /$/
          },
          { match: /^\*{15}$/ }
        ]
      },
      {
        className: "addition",
        begin: /^\+/,
        end: /$/
      },
      {
        className: "deletion",
        begin: /^-/,
        end: /$/
      },
      {
        className: "addition",
        begin: /^!/,
        end: /$/
      }
    ]
  };
}
function B2(n) {
  const s = {
    keyword: [
      "break",
      "case",
      "chan",
      "const",
      "continue",
      "default",
      "defer",
      "else",
      "fallthrough",
      "for",
      "func",
      "go",
      "goto",
      "if",
      "import",
      "interface",
      "map",
      "package",
      "range",
      "return",
      "select",
      "struct",
      "switch",
      "type",
      "var"
    ],
    type: [
      "bool",
      "byte",
      "complex64",
      "complex128",
      "error",
      "float32",
      "float64",
      "int8",
      "int16",
      "int32",
      "int64",
      "string",
      "uint8",
      "uint16",
      "uint32",
      "uint64",
      "int",
      "uint",
      "uintptr",
      "rune"
    ],
    literal: [
      "true",
      "false",
      "iota",
      "nil"
    ],
    built_in: [
      "append",
      "cap",
      "close",
      "complex",
      "copy",
      "imag",
      "len",
      "make",
      "new",
      "panic",
      "print",
      "println",
      "real",
      "recover",
      "delete"
    ]
  };
  return {
    name: "Go",
    aliases: ["golang"],
    keywords: s,
    illegal: "</",
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      {
        className: "string",
        variants: [
          n.QUOTE_STRING_MODE,
          n.APOS_STRING_MODE,
          {
            begin: "`",
            end: "`"
          }
        ]
      },
      {
        className: "number",
        variants: [
          {
            begin: n.C_NUMBER_RE + "[i]",
            relevance: 1
          },
          n.C_NUMBER_MODE
        ]
      },
      {
        begin: /:=/
        // relevance booster
      },
      {
        className: "function",
        beginKeywords: "func",
        end: "\\s*(\\{|$)",
        excludeEnd: !0,
        contains: [
          n.TITLE_MODE,
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: s,
            illegal: /["']/
          }
        ]
      }
    ]
  };
}
function H2(n) {
  const e = n.regex, t = /[_A-Za-z][_0-9A-Za-z]*/;
  return {
    name: "GraphQL",
    aliases: ["gql"],
    case_insensitive: !0,
    disableAutodetect: !1,
    keywords: {
      keyword: [
        "query",
        "mutation",
        "subscription",
        "type",
        "input",
        "schema",
        "directive",
        "interface",
        "union",
        "scalar",
        "fragment",
        "enum",
        "on"
      ],
      literal: [
        "true",
        "false",
        "null"
      ]
    },
    contains: [
      n.HASH_COMMENT_MODE,
      n.QUOTE_STRING_MODE,
      n.NUMBER_MODE,
      {
        scope: "punctuation",
        match: /[.]{3}/,
        relevance: 0
      },
      {
        scope: "punctuation",
        begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
        relevance: 0
      },
      {
        scope: "variable",
        begin: /\$/,
        end: /\W/,
        excludeEnd: !0,
        relevance: 0
      },
      {
        scope: "meta",
        match: /@\w+/,
        excludeEnd: !0
      },
      {
        scope: "symbol",
        begin: e.concat(t, e.lookahead(/\s*:/)),
        relevance: 0
      }
    ],
    illegal: [
      /[;<']/,
      /BEGIN/
    ]
  };
}
function P2(n) {
  const e = n.regex, t = {
    className: "number",
    relevance: 0,
    variants: [
      { begin: /([+-]+)?[\d]+_[\d_]+/ },
      { begin: n.NUMBER_RE }
    ]
  }, r = n.COMMENT();
  r.variants = [
    {
      begin: /;/,
      end: /$/
    },
    {
      begin: /#/,
      end: /$/
    }
  ];
  const i = {
    className: "variable",
    variants: [
      { begin: /\$[\w\d"][\w\d_]*/ },
      { begin: /\$\{(.*?)\}/ }
    ]
  }, s = {
    className: "literal",
    begin: /\bon|off|true|false|yes|no\b/
  }, o = {
    className: "string",
    contains: [n.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: "'''",
        end: "'''",
        relevance: 10
      },
      {
        begin: '"""',
        end: '"""',
        relevance: 10
      },
      {
        begin: '"',
        end: '"'
      },
      {
        begin: "'",
        end: "'"
      }
    ]
  }, a = {
    begin: /\[/,
    end: /\]/,
    contains: [
      r,
      s,
      i,
      o,
      t,
      "self"
    ],
    relevance: 0
  }, l = /[A-Za-z0-9_-]+/, c = /"(\\"|[^"])*"/, u = /'[^']*'/, d = e.either(
    l,
    c,
    u
  ), f = e.concat(
    d,
    "(\\s*\\.\\s*",
    d,
    ")*",
    e.lookahead(/\s*=\s*[^#\s]/)
  );
  return {
    name: "TOML, also INI",
    aliases: ["toml"],
    case_insensitive: !0,
    illegal: /\S/,
    contains: [
      r,
      {
        className: "section",
        begin: /\[+/,
        end: /\]+/
      },
      {
        begin: f,
        className: "attr",
        starts: {
          end: /$/,
          contains: [
            r,
            a,
            s,
            i,
            o,
            t
          ]
        }
      }
    ]
  };
}
var Mr = "[0-9](_*[0-9])*", bs = `\\.(${Mr})`, ys = "[0-9a-fA-F](_*[0-9a-fA-F])*", Hf = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${Mr})((${bs})|\\.)?|(${bs}))[eE][+-]?(${Mr})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${Mr})((${bs})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${bs})[fFdD]?\\b` },
    { begin: `\\b(${Mr})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${ys})\\.?|(${ys})?\\.(${ys}))[pP][+-]?(${Mr})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${ys})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function ym(n, e, t) {
  return t === -1 ? "" : n.replace(e, (r) => ym(n, e, t - 1));
}
function $2(n) {
  const e = n.regex, t = "[À-ʸa-zA-Z_$][À-ʸa-zA-Z_$0-9]*", r = t + ym("(?:<" + t + "~~~(?:\\s*,\\s*" + t + "~~~)*>)?", /~~~/g, 2), l = {
    keyword: [
      "synchronized",
      "abstract",
      "private",
      "var",
      "static",
      "if",
      "const ",
      "for",
      "while",
      "strictfp",
      "finally",
      "protected",
      "import",
      "native",
      "final",
      "void",
      "enum",
      "else",
      "break",
      "transient",
      "catch",
      "instanceof",
      "volatile",
      "case",
      "assert",
      "package",
      "default",
      "public",
      "try",
      "switch",
      "continue",
      "throws",
      "protected",
      "public",
      "private",
      "module",
      "requires",
      "exports",
      "do",
      "sealed",
      "yield",
      "permits"
    ],
    literal: [
      "false",
      "true",
      "null"
    ],
    type: [
      "char",
      "boolean",
      "long",
      "float",
      "int",
      "byte",
      "short",
      "double"
    ],
    built_in: [
      "super",
      "this"
    ]
  }, c = {
    className: "meta",
    begin: "@" + t,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: ["self"]
        // allow nested () inside our annotation
      }
    ]
  }, u = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    keywords: l,
    relevance: 0,
    contains: [n.C_BLOCK_COMMENT_MODE],
    endsParent: !0
  };
  return {
    name: "Java",
    aliases: ["jsp"],
    keywords: l,
    illegal: /<\/|#/,
    contains: [
      n.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              // eat up @'s in emails to prevent them to be recognized as doctags
              begin: /\w+@/,
              relevance: 0
            },
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      // relevance boost
      {
        begin: /import java\.[a-z]+\./,
        keywords: "import",
        relevance: 2
      },
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      {
        begin: /"""/,
        end: /"""/,
        className: "string",
        contains: [n.BACKSLASH_ESCAPE]
      },
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      {
        match: [
          /\b(?:class|interface|enum|extends|implements|new)/,
          /\s+/,
          t
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        // Exceptions for hyphenated keywords
        match: /non-sealed/,
        scope: "keyword"
      },
      {
        begin: [
          e.concat(/(?!else)/, t),
          /\s+/,
          t,
          /\s+/,
          /=(?!=)/
        ],
        className: {
          1: "type",
          3: "variable",
          5: "operator"
        }
      },
      {
        begin: [
          /record/,
          /\s+/,
          t
        ],
        className: {
          1: "keyword",
          3: "title.class"
        },
        contains: [
          u,
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        // Expression keywords prevent 'keyword Name(...)' from being
        // recognized as a function definition
        beginKeywords: "new throw return else",
        relevance: 0
      },
      {
        begin: [
          "(?:" + r + "\\s+)",
          n.UNDERSCORE_IDENT_RE,
          /\s*(?=\()/
        ],
        className: { 2: "title.function" },
        keywords: l,
        contains: [
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            keywords: l,
            relevance: 0,
            contains: [
              c,
              n.APOS_STRING_MODE,
              n.QUOTE_STRING_MODE,
              Hf,
              n.C_BLOCK_COMMENT_MODE
            ]
          },
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      Hf,
      c
    ]
  };
}
const Pf = "[A-Za-z$_][0-9A-Za-z$_]*", F2 = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
], z2 = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
], vm = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
], wm = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
], km = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
], V2 = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "sessionStorage",
  "module",
  "global"
  // Node.js
], q2 = [].concat(
  km,
  vm,
  wm
);
function U2(n) {
  const e = n.regex, t = (_, { after: D }) => {
    const P = "</" + _[0].slice(1);
    return _.input.indexOf(P, D) !== -1;
  }, r = Pf, i = {
    begin: "<>",
    end: "</>"
  }, s = /<[A-Za-z0-9\\._:-]+\s*\/>/, o = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (_, D) => {
      const P = _[0].length + _.index, W = _.input[P];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        W === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        W === ","
      ) {
        D.ignoreMatch();
        return;
      }
      W === ">" && (t(_, { after: P }) || D.ignoreMatch());
      let ee;
      const he = _.input.substring(P);
      if (ee = he.match(/^\s*=/)) {
        D.ignoreMatch();
        return;
      }
      if ((ee = he.match(/^\s+extends\s+/)) && ee.index === 0) {
        D.ignoreMatch();
        return;
      }
    }
  }, a = {
    $pattern: Pf,
    keyword: F2,
    literal: z2,
    built_in: q2,
    "variable.language": V2
  }, l = "[0-9](_?[0-9])*", c = `\\.(${l})`, u = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", d = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${u})((${c})|\\.)?|(${c}))[eE][+-]?(${l})\\b` },
      { begin: `\\b(${u})\\b((${c})\\b|\\.)?|(${c})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: a,
    contains: []
    // defined later
  }, p = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, h = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, g = {
    begin: "gql`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "graphql"
    }
  }, m = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      n.BACKSLASH_ESCAPE,
      f
    ]
  }, y = {
    className: "comment",
    variants: [
      n.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: r + "(?=\\s*(-)|$)",
                  endsParent: !0,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      n.C_BLOCK_COMMENT_MODE,
      n.C_LINE_COMMENT_MODE
    ]
  }, k = [
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    p,
    h,
    g,
    m,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    d
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = k.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: a,
    contains: [
      "self"
    ].concat(k)
  });
  const b = [].concat(y, f.contains), x = b.concat([
    // eat recursive parens in sub expressions
    {
      begin: /\(/,
      end: /\)/,
      keywords: a,
      contains: ["self"].concat(b)
    }
  ]), w = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: !0,
    excludeEnd: !0,
    keywords: a,
    contains: x
  }, S = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          r,
          /\s+/,
          /extends/,
          /\s+/,
          e.concat(r, "(", e.concat(/\./, r), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          r
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, T = {
    relevance: 0,
    match: e.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...vm,
        ...wm
      ]
    }
  }, M = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, L = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          r,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [w],
    illegal: /%/
  }, z = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function G(_) {
    return e.concat("(?!", _.join("|"), ")");
  }
  const q = {
    match: e.concat(
      /\b/,
      G([
        ...km,
        "super",
        "import"
      ]),
      r,
      e.lookahead(/\(/)
    ),
    className: "title.function",
    relevance: 0
  }, A = {
    begin: e.concat(/\./, e.lookahead(
      e.concat(r, /(?![0-9A-Za-z$_(])/)
    )),
    end: r,
    excludeBegin: !0,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, H = {
    match: [
      /get|set/,
      /\s+/,
      r,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      w
    ]
  }, C = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + n.UNDERSCORE_IDENT_RE + ")\\s*=>", E = {
    match: [
      /const|var|let/,
      /\s+/,
      r,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      e.lookahead(C)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      w
    ]
  };
  return {
    name: "JavaScript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: a,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: x, CLASS_REFERENCE: T },
    illegal: /#(?![$_A-z])/,
    contains: [
      n.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      M,
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      p,
      h,
      g,
      m,
      y,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      d,
      T,
      {
        className: "attr",
        begin: r + e.lookahead(":"),
        relevance: 0
      },
      E,
      {
        // "value" container
        begin: "(" + n.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          y,
          n.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: C,
            returnBegin: !0,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: n.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: !0
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: a,
                    contains: x
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: i.begin, end: i.end },
              { match: s },
              {
                begin: o.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": o.isTrulyOpeningTag,
                end: o.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: o.begin,
                end: o.end,
                skip: !0,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      L,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + n.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: !0,
        label: "func.def",
        contains: [
          w,
          n.inherit(n.TITLE_MODE, { begin: r, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      A,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + r,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [w]
      },
      q,
      z,
      S,
      H,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function K2(n) {
  const e = {
    className: "attr",
    begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
    relevance: 1.01
  }, t = {
    match: /[{}[\],:]/,
    className: "punctuation",
    relevance: 0
  }, r = [
    "true",
    "false",
    "null"
  ], i = {
    scope: "literal",
    beginKeywords: r.join(" ")
  };
  return {
    name: "JSON",
    keywords: {
      literal: r
    },
    contains: [
      e,
      t,
      n.QUOTE_STRING_MODE,
      i,
      n.C_NUMBER_MODE,
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE
    ],
    illegal: "\\S"
  };
}
var Ar = "[0-9](_*[0-9])*", vs = `\\.(${Ar})`, ws = "[0-9a-fA-F](_*[0-9a-fA-F])*", W2 = {
  className: "number",
  variants: [
    // DecimalFloatingPointLiteral
    // including ExponentPart
    { begin: `(\\b(${Ar})((${vs})|\\.)?|(${vs}))[eE][+-]?(${Ar})[fFdD]?\\b` },
    // excluding ExponentPart
    { begin: `\\b(${Ar})((${vs})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
    { begin: `(${vs})[fFdD]?\\b` },
    { begin: `\\b(${Ar})[fFdD]\\b` },
    // HexadecimalFloatingPointLiteral
    { begin: `\\b0[xX]((${ws})\\.?|(${ws})?\\.(${ws}))[pP][+-]?(${Ar})[fFdD]?\\b` },
    // DecimalIntegerLiteral
    { begin: "\\b(0|[1-9](_*[0-9])*)[lL]?\\b" },
    // HexIntegerLiteral
    { begin: `\\b0[xX](${ws})[lL]?\\b` },
    // OctalIntegerLiteral
    { begin: "\\b0(_*[0-7])*[lL]?\\b" },
    // BinaryIntegerLiteral
    { begin: "\\b0[bB][01](_*[01])*[lL]?\\b" }
  ],
  relevance: 0
};
function G2(n) {
  const e = {
    keyword: "abstract as val var vararg get set class object open private protected public noinline crossinline dynamic final enum if else do while for when throw try catch finally import package is in fun override companion reified inline lateinit init interface annotation data sealed internal infix operator out by constructor super tailrec where const inner suspend typealias external expect actual",
    built_in: "Byte Short Char Int Long Boolean Float Double Void Unit Nothing",
    literal: "true false null"
  }, t = {
    className: "keyword",
    begin: /\b(break|continue|return|this)\b/,
    starts: { contains: [
      {
        className: "symbol",
        begin: /@\w+/
      }
    ] }
  }, r = {
    className: "symbol",
    begin: n.UNDERSCORE_IDENT_RE + "@"
  }, i = {
    className: "subst",
    begin: /\$\{/,
    end: /\}/,
    contains: [n.C_NUMBER_MODE]
  }, s = {
    className: "variable",
    begin: "\\$" + n.UNDERSCORE_IDENT_RE
  }, o = {
    className: "string",
    variants: [
      {
        begin: '"""',
        end: '"""(?=[^"])',
        contains: [
          s,
          i
        ]
      },
      // Can't use built-in modes easily, as we want to use STRING in the meta
      // context as 'meta-string' and there's no syntax to remove explicitly set
      // classNames in built-in modes.
      {
        begin: "'",
        end: "'",
        illegal: /\n/,
        contains: [n.BACKSLASH_ESCAPE]
      },
      {
        begin: '"',
        end: '"',
        illegal: /\n/,
        contains: [
          n.BACKSLASH_ESCAPE,
          s,
          i
        ]
      }
    ]
  };
  i.contains.push(o);
  const a = {
    className: "meta",
    begin: "@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*" + n.UNDERSCORE_IDENT_RE + ")?"
  }, l = {
    className: "meta",
    begin: "@" + n.UNDERSCORE_IDENT_RE,
    contains: [
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          n.inherit(o, { className: "string" }),
          "self"
        ]
      }
    ]
  }, c = W2, u = n.COMMENT(
    "/\\*",
    "\\*/",
    { contains: [n.C_BLOCK_COMMENT_MODE] }
  ), d = { variants: [
    {
      className: "type",
      begin: n.UNDERSCORE_IDENT_RE
    },
    {
      begin: /\(/,
      end: /\)/,
      contains: []
      // defined later
    }
  ] }, f = d;
  return f.variants[1].contains = [d], d.variants[1].contains = [f], {
    name: "Kotlin",
    aliases: [
      "kt",
      "kts"
    ],
    keywords: e,
    contains: [
      n.COMMENT(
        "/\\*\\*",
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              className: "doctag",
              begin: "@[A-Za-z]+"
            }
          ]
        }
      ),
      n.C_LINE_COMMENT_MODE,
      u,
      t,
      r,
      a,
      l,
      {
        className: "function",
        beginKeywords: "fun",
        end: "[(]|$",
        returnBegin: !0,
        excludeEnd: !0,
        keywords: e,
        relevance: 5,
        contains: [
          {
            begin: n.UNDERSCORE_IDENT_RE + "\\s*\\(",
            returnBegin: !0,
            relevance: 0,
            contains: [n.UNDERSCORE_TITLE_MODE]
          },
          {
            className: "type",
            begin: /</,
            end: />/,
            keywords: "reified",
            relevance: 0
          },
          {
            className: "params",
            begin: /\(/,
            end: /\)/,
            endsParent: !0,
            keywords: e,
            relevance: 0,
            contains: [
              {
                begin: /:/,
                end: /[=,\/]/,
                endsWithParent: !0,
                contains: [
                  d,
                  n.C_LINE_COMMENT_MODE,
                  u
                ],
                relevance: 0
              },
              n.C_LINE_COMMENT_MODE,
              u,
              a,
              l,
              o,
              n.C_NUMBER_MODE
            ]
          },
          u
        ]
      },
      {
        begin: [
          /class|interface|trait/,
          /\s+/,
          n.UNDERSCORE_IDENT_RE
        ],
        beginScope: {
          3: "title.class"
        },
        keywords: "class interface trait",
        end: /[:\{(]|$/,
        excludeEnd: !0,
        illegal: "extends implements",
        contains: [
          { beginKeywords: "public protected internal private constructor" },
          n.UNDERSCORE_TITLE_MODE,
          {
            className: "type",
            begin: /</,
            end: />/,
            excludeBegin: !0,
            excludeEnd: !0,
            relevance: 0
          },
          {
            className: "type",
            begin: /[,:]\s*/,
            end: /[<\(,){\s]|$/,
            excludeBegin: !0,
            returnEnd: !0
          },
          a,
          l
        ]
      },
      o,
      {
        className: "meta",
        begin: "^#!/usr/bin/env",
        end: "$",
        illegal: `
`
      },
      c
    ]
  };
}
const Z2 = (n) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: n.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: n.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), j2 = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], J2 = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
], Em = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
], xm = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
], Y2 = [
  "align-content",
  "align-items",
  "align-self",
  "all",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "gap",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inline-size",
  "isolation",
  "justify-content",
  "left",
  "letter-spacing",
  "line-break",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "row-gap",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "z-index"
  // reverse makes sure longer attributes `font-weight` are matched fully
  // instead of getting false positives on say `font`
].reverse(), X2 = Em.concat(xm);
function Q2(n) {
  const e = Z2(n), t = X2, r = "and or not only", i = "[\\w-]+", s = "(" + i + "|@\\{" + i + "\\})", o = [], a = [], l = function(k) {
    return {
      // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
      className: "string",
      begin: "~?" + k + ".*?" + k
    };
  }, c = function(k, b, x) {
    return {
      className: k,
      begin: b,
      relevance: x
    };
  }, u = {
    $pattern: /[a-z-]+/,
    keyword: r,
    attribute: J2.join(" ")
  }, d = {
    // used only to properly balance nested parens inside mixin call, def. arg list
    begin: "\\(",
    end: "\\)",
    contains: a,
    keywords: u,
    relevance: 0
  };
  a.push(
    n.C_LINE_COMMENT_MODE,
    n.C_BLOCK_COMMENT_MODE,
    l("'"),
    l('"'),
    e.CSS_NUMBER_MODE,
    // fixme: it does not include dot for numbers like .5em :(
    {
      begin: "(url|data-uri)\\(",
      starts: {
        className: "string",
        end: "[\\)\\n]",
        excludeEnd: !0
      }
    },
    e.HEXCOLOR,
    d,
    c("variable", "@@?" + i, 10),
    c("variable", "@\\{" + i + "\\}"),
    c("built_in", "~?`[^`]*?`"),
    // inline javascript (or whatever host language) *multiline* string
    {
      // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
      className: "attribute",
      begin: i + "\\s*:",
      end: ":",
      returnBegin: !0,
      excludeEnd: !0
    },
    e.IMPORTANT,
    { beginKeywords: "and not" },
    e.FUNCTION_DISPATCH
  );
  const f = a.concat({
    begin: /\{/,
    end: /\}/,
    contains: o
  }), p = {
    beginKeywords: "when",
    endsWithParent: !0,
    contains: [{ beginKeywords: "and not" }].concat(a)
    // using this form to override VALUE’s 'function' match
  }, h = {
    begin: s + "\\s*:",
    returnBegin: !0,
    end: /[;}]/,
    relevance: 0,
    contains: [
      { begin: /-(webkit|moz|ms|o)-/ },
      e.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + Y2.join("|") + ")\\b",
        end: /(?=:)/,
        starts: {
          endsWithParent: !0,
          illegal: "[<=$]",
          relevance: 0,
          contains: a
        }
      }
    ]
  }, g = {
    className: "keyword",
    begin: "@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b",
    starts: {
      end: "[;{}]",
      keywords: u,
      returnEnd: !0,
      contains: a,
      relevance: 0
    }
  }, m = {
    className: "variable",
    variants: [
      // using more strict pattern for higher relevance to increase chances of Less detection.
      // this is *the only* Less specific statement used in most of the sources, so...
      // (we’ll still often loose to the css-parser unless there's '//' comment,
      // simply because 1 variable just can't beat 99 properties :)
      {
        begin: "@" + i + "\\s*:",
        relevance: 15
      },
      { begin: "@" + i }
    ],
    starts: {
      end: "[;}]",
      returnEnd: !0,
      contains: f
    }
  }, v = {
    // first parse unambiguous selectors (i.e. those not starting with tag)
    // then fall into the scary lookahead-discriminator variant.
    // this mode also handles mixin definitions and calls
    variants: [
      {
        begin: "[\\.#:&\\[>]",
        end: "[;{}]"
        // mixin calls end with ';'
      },
      {
        begin: s,
        end: /\{/
      }
    ],
    returnBegin: !0,
    returnEnd: !0,
    illegal: `[<='$"]`,
    relevance: 0,
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      p,
      c("keyword", "all\\b"),
      c("variable", "@\\{" + i + "\\}"),
      // otherwise it’s identified as tag
      {
        begin: "\\b(" + j2.join("|") + ")\\b",
        className: "selector-tag"
      },
      e.CSS_NUMBER_MODE,
      c("selector-tag", s, 0),
      c("selector-id", "#" + s),
      c("selector-class", "\\." + s, 0),
      c("selector-tag", "&", 0),
      e.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-pseudo",
        begin: ":(" + Em.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: ":(:)?(" + xm.join("|") + ")"
      },
      {
        begin: /\(/,
        end: /\)/,
        relevance: 0,
        contains: f
      },
      // argument list of parametric mixins
      { begin: "!important" },
      // eat !important after mixin call or it will be colored as tag
      e.FUNCTION_DISPATCH
    ]
  }, y = {
    begin: i + `:(:)?(${t.join("|")})`,
    returnBegin: !0,
    contains: [v]
  };
  return o.push(
    n.C_LINE_COMMENT_MODE,
    n.C_BLOCK_COMMENT_MODE,
    g,
    m,
    y,
    h,
    v,
    p,
    e.FUNCTION_DISPATCH
  ), {
    name: "Less",
    case_insensitive: !0,
    illegal: `[=>'/<($"]`,
    contains: o
  };
}
function eM(n) {
  const e = "\\[=*\\[", t = "\\]=*\\]", r = {
    begin: e,
    end: t,
    contains: ["self"]
  }, i = [
    n.COMMENT("--(?!" + e + ")", "$"),
    n.COMMENT(
      "--" + e,
      t,
      {
        contains: [r],
        relevance: 10
      }
    )
  ];
  return {
    name: "Lua",
    keywords: {
      $pattern: n.UNDERSCORE_IDENT_RE,
      literal: "true false nil",
      keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
      built_in: (
        // Metatags and globals:
        "_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len __gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring module next pairs pcall print rawequal rawget rawset require select setfenv setmetatable tonumber tostring type unpack xpcall arg self coroutine resume yield status wrap create running debug getupvalue debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv io lines write close flush open output type read stderr stdin input stdout popen tmpfile math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower table setn insert getn foreachi maxn foreach concat sort remove"
      )
    },
    contains: i.concat([
      {
        className: "function",
        beginKeywords: "function",
        end: "\\)",
        contains: [
          n.inherit(n.TITLE_MODE, { begin: "([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*" }),
          {
            className: "params",
            begin: "\\(",
            endsWithParent: !0,
            contains: i
          }
        ].concat(i)
      },
      n.C_NUMBER_MODE,
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      {
        className: "string",
        begin: e,
        end: t,
        contains: [r],
        relevance: 5
      }
    ])
  };
}
function tM(n) {
  const e = {
    className: "variable",
    variants: [
      {
        begin: "\\$\\(" + n.UNDERSCORE_IDENT_RE + "\\)",
        contains: [n.BACKSLASH_ESCAPE]
      },
      { begin: /\$[@%<?\^\+\*]/ }
    ]
  }, t = {
    className: "string",
    begin: /"/,
    end: /"/,
    contains: [
      n.BACKSLASH_ESCAPE,
      e
    ]
  }, r = {
    className: "variable",
    begin: /\$\([\w-]+\s/,
    end: /\)/,
    keywords: { built_in: "subst patsubst strip findstring filter filter-out sort word wordlist firstword lastword dir notdir suffix basename addsuffix addprefix join wildcard realpath abspath error warning shell origin flavor foreach if or and call eval file value" },
    contains: [e]
  }, i = { begin: "^" + n.UNDERSCORE_IDENT_RE + "\\s*(?=[:+?]?=)" }, s = {
    className: "meta",
    begin: /^\.PHONY:/,
    end: /$/,
    keywords: {
      $pattern: /[\.\w]+/,
      keyword: ".PHONY"
    }
  }, o = {
    className: "section",
    begin: /^[^\s]+:/,
    end: /$/,
    contains: [e]
  };
  return {
    name: "Makefile",
    aliases: [
      "mk",
      "mak",
      "make"
    ],
    keywords: {
      $pattern: /[\w-]+/,
      keyword: "define endef undefine ifdef ifndef ifeq ifneq else endif include -include sinclude override export unexport private vpath"
    },
    contains: [
      n.HASH_COMMENT_MODE,
      e,
      t,
      r,
      i,
      s,
      o
    ]
  };
}
function nM(n) {
  const e = n.regex, t = {
    begin: /<\/?[A-Za-z_]/,
    end: ">",
    subLanguage: "xml",
    relevance: 0
  }, r = {
    begin: "^[-\\*]{3,}",
    end: "$"
  }, i = {
    className: "code",
    variants: [
      // TODO: fix to allow these to work with sublanguage also
      { begin: "(`{3,})[^`](.|\\n)*?\\1`*[ ]*" },
      { begin: "(~{3,})[^~](.|\\n)*?\\1~*[ ]*" },
      // needed to allow markdown as a sublanguage to work
      {
        begin: "```",
        end: "```+[ ]*$"
      },
      {
        begin: "~~~",
        end: "~~~+[ ]*$"
      },
      { begin: "`.+?`" },
      {
        begin: "(?=^( {4}|\\t))",
        // use contains to gobble up multiple lines to allow the block to be whatever size
        // but only have a single open/close tag vs one per line
        contains: [
          {
            begin: "^( {4}|\\t)",
            end: "(\\n)$"
          }
        ],
        relevance: 0
      }
    ]
  }, s = {
    className: "bullet",
    begin: "^[ 	]*([*+-]|(\\d+\\.))(?=\\s+)",
    end: "\\s+",
    excludeEnd: !0
  }, o = {
    begin: /^\[[^\n]+\]:/,
    returnBegin: !0,
    contains: [
      {
        className: "symbol",
        begin: /\[/,
        end: /\]/,
        excludeBegin: !0,
        excludeEnd: !0
      },
      {
        className: "link",
        begin: /:\s*/,
        end: /$/,
        excludeBegin: !0
      }
    ]
  }, a = /[A-Za-z][A-Za-z0-9+.-]*/, l = {
    variants: [
      // too much like nested array access in so many languages
      // to have any real relevance
      {
        begin: /\[.+?\]\[.*?\]/,
        relevance: 0
      },
      // popular internet URLs
      {
        begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
        relevance: 2
      },
      {
        begin: e.concat(/\[.+?\]\(/, a, /:\/\/.*?\)/),
        relevance: 2
      },
      // relative urls
      {
        begin: /\[.+?\]\([./?&#].*?\)/,
        relevance: 1
      },
      // whatever else, lower relevance (might not be a link at all)
      {
        begin: /\[.*?\]\(.*?\)/,
        relevance: 0
      }
    ],
    returnBegin: !0,
    contains: [
      {
        // empty strings for alt or link text
        match: /\[(?=\])/
      },
      {
        className: "string",
        relevance: 0,
        begin: "\\[",
        end: "\\]",
        excludeBegin: !0,
        returnEnd: !0
      },
      {
        className: "link",
        relevance: 0,
        begin: "\\]\\(",
        end: "\\)",
        excludeBegin: !0,
        excludeEnd: !0
      },
      {
        className: "symbol",
        relevance: 0,
        begin: "\\]\\[",
        end: "\\]",
        excludeBegin: !0,
        excludeEnd: !0
      }
    ]
  }, c = {
    className: "strong",
    contains: [],
    // defined later
    variants: [
      {
        begin: /_{2}(?!\s)/,
        end: /_{2}/
      },
      {
        begin: /\*{2}(?!\s)/,
        end: /\*{2}/
      }
    ]
  }, u = {
    className: "emphasis",
    contains: [],
    // defined later
    variants: [
      {
        begin: /\*(?![*\s])/,
        end: /\*/
      },
      {
        begin: /_(?![_\s])/,
        end: /_/,
        relevance: 0
      }
    ]
  }, d = n.inherit(c, { contains: [] }), f = n.inherit(u, { contains: [] });
  c.contains.push(f), u.contains.push(d);
  let p = [
    t,
    l
  ];
  return [
    c,
    u,
    d,
    f
  ].forEach((m) => {
    m.contains = m.contains.concat(p);
  }), p = p.concat(c, u), {
    name: "Markdown",
    aliases: [
      "md",
      "mkdown",
      "mkd"
    ],
    contains: [
      {
        className: "section",
        variants: [
          {
            begin: "^#{1,6}",
            end: "$",
            contains: p
          },
          {
            begin: "(?=^.+?\\n[=-]{2,}$)",
            contains: [
              { begin: "^[=-]*$" },
              {
                begin: "^",
                end: "\\n",
                contains: p
              }
            ]
          }
        ]
      },
      t,
      s,
      c,
      u,
      {
        className: "quote",
        begin: "^>\\s+",
        contains: p,
        end: "$"
      },
      i,
      r,
      l,
      o
    ]
  };
}
function rM(n) {
  const e = {
    className: "built_in",
    begin: "\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+"
  }, t = /[a-zA-Z@][a-zA-Z0-9_]*/, a = {
    "variable.language": [
      "this",
      "super"
    ],
    $pattern: t,
    keyword: [
      "while",
      "export",
      "sizeof",
      "typedef",
      "const",
      "struct",
      "for",
      "union",
      "volatile",
      "static",
      "mutable",
      "if",
      "do",
      "return",
      "goto",
      "enum",
      "else",
      "break",
      "extern",
      "asm",
      "case",
      "default",
      "register",
      "explicit",
      "typename",
      "switch",
      "continue",
      "inline",
      "readonly",
      "assign",
      "readwrite",
      "self",
      "@synchronized",
      "id",
      "typeof",
      "nonatomic",
      "IBOutlet",
      "IBAction",
      "strong",
      "weak",
      "copy",
      "in",
      "out",
      "inout",
      "bycopy",
      "byref",
      "oneway",
      "__strong",
      "__weak",
      "__block",
      "__autoreleasing",
      "@private",
      "@protected",
      "@public",
      "@try",
      "@property",
      "@end",
      "@throw",
      "@catch",
      "@finally",
      "@autoreleasepool",
      "@synthesize",
      "@dynamic",
      "@selector",
      "@optional",
      "@required",
      "@encode",
      "@package",
      "@import",
      "@defs",
      "@compatibility_alias",
      "__bridge",
      "__bridge_transfer",
      "__bridge_retained",
      "__bridge_retain",
      "__covariant",
      "__contravariant",
      "__kindof",
      "_Nonnull",
      "_Nullable",
      "_Null_unspecified",
      "__FUNCTION__",
      "__PRETTY_FUNCTION__",
      "__attribute__",
      "getter",
      "setter",
      "retain",
      "unsafe_unretained",
      "nonnull",
      "nullable",
      "null_unspecified",
      "null_resettable",
      "class",
      "instancetype",
      "NS_DESIGNATED_INITIALIZER",
      "NS_UNAVAILABLE",
      "NS_REQUIRES_SUPER",
      "NS_RETURNS_INNER_POINTER",
      "NS_INLINE",
      "NS_AVAILABLE",
      "NS_DEPRECATED",
      "NS_ENUM",
      "NS_OPTIONS",
      "NS_SWIFT_UNAVAILABLE",
      "NS_ASSUME_NONNULL_BEGIN",
      "NS_ASSUME_NONNULL_END",
      "NS_REFINED_FOR_SWIFT",
      "NS_SWIFT_NAME",
      "NS_SWIFT_NOTHROW",
      "NS_DURING",
      "NS_HANDLER",
      "NS_ENDHANDLER",
      "NS_VALUERETURN",
      "NS_VOIDRETURN"
    ],
    literal: [
      "false",
      "true",
      "FALSE",
      "TRUE",
      "nil",
      "YES",
      "NO",
      "NULL"
    ],
    built_in: [
      "dispatch_once_t",
      "dispatch_queue_t",
      "dispatch_sync",
      "dispatch_async",
      "dispatch_once"
    ],
    type: [
      "int",
      "float",
      "char",
      "unsigned",
      "signed",
      "short",
      "long",
      "double",
      "wchar_t",
      "unichar",
      "void",
      "bool",
      "BOOL",
      "id|0",
      "_Bool"
    ]
  }, l = {
    $pattern: t,
    keyword: [
      "@interface",
      "@class",
      "@protocol",
      "@implementation"
    ]
  };
  return {
    name: "Objective-C",
    aliases: [
      "mm",
      "objc",
      "obj-c",
      "obj-c++",
      "objective-c++"
    ],
    keywords: a,
    illegal: "</",
    contains: [
      e,
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      n.C_NUMBER_MODE,
      n.QUOTE_STRING_MODE,
      n.APOS_STRING_MODE,
      {
        className: "string",
        variants: [
          {
            begin: '@"',
            end: '"',
            illegal: "\\n",
            contains: [n.BACKSLASH_ESCAPE]
          }
        ]
      },
      {
        className: "meta",
        begin: /#\s*[a-z]+\b/,
        end: /$/,
        keywords: { keyword: "if else elif endif define undef warning error line pragma ifdef ifndef include" },
        contains: [
          {
            begin: /\\\n/,
            relevance: 0
          },
          n.inherit(n.QUOTE_STRING_MODE, { className: "string" }),
          {
            className: "string",
            begin: /<.*?>/,
            end: /$/,
            illegal: "\\n"
          },
          n.C_LINE_COMMENT_MODE,
          n.C_BLOCK_COMMENT_MODE
        ]
      },
      {
        className: "class",
        begin: "(" + l.keyword.join("|") + ")\\b",
        end: /(\{|$)/,
        excludeEnd: !0,
        keywords: l,
        contains: [n.UNDERSCORE_TITLE_MODE]
      },
      {
        begin: "\\." + n.UNDERSCORE_IDENT_RE,
        relevance: 0
      }
    ]
  };
}
function iM(n) {
  const e = n.regex, t = [
    "abs",
    "accept",
    "alarm",
    "and",
    "atan2",
    "bind",
    "binmode",
    "bless",
    "break",
    "caller",
    "chdir",
    "chmod",
    "chomp",
    "chop",
    "chown",
    "chr",
    "chroot",
    "close",
    "closedir",
    "connect",
    "continue",
    "cos",
    "crypt",
    "dbmclose",
    "dbmopen",
    "defined",
    "delete",
    "die",
    "do",
    "dump",
    "each",
    "else",
    "elsif",
    "endgrent",
    "endhostent",
    "endnetent",
    "endprotoent",
    "endpwent",
    "endservent",
    "eof",
    "eval",
    "exec",
    "exists",
    "exit",
    "exp",
    "fcntl",
    "fileno",
    "flock",
    "for",
    "foreach",
    "fork",
    "format",
    "formline",
    "getc",
    "getgrent",
    "getgrgid",
    "getgrnam",
    "gethostbyaddr",
    "gethostbyname",
    "gethostent",
    "getlogin",
    "getnetbyaddr",
    "getnetbyname",
    "getnetent",
    "getpeername",
    "getpgrp",
    "getpriority",
    "getprotobyname",
    "getprotobynumber",
    "getprotoent",
    "getpwent",
    "getpwnam",
    "getpwuid",
    "getservbyname",
    "getservbyport",
    "getservent",
    "getsockname",
    "getsockopt",
    "given",
    "glob",
    "gmtime",
    "goto",
    "grep",
    "gt",
    "hex",
    "if",
    "index",
    "int",
    "ioctl",
    "join",
    "keys",
    "kill",
    "last",
    "lc",
    "lcfirst",
    "length",
    "link",
    "listen",
    "local",
    "localtime",
    "log",
    "lstat",
    "lt",
    "ma",
    "map",
    "mkdir",
    "msgctl",
    "msgget",
    "msgrcv",
    "msgsnd",
    "my",
    "ne",
    "next",
    "no",
    "not",
    "oct",
    "open",
    "opendir",
    "or",
    "ord",
    "our",
    "pack",
    "package",
    "pipe",
    "pop",
    "pos",
    "print",
    "printf",
    "prototype",
    "push",
    "q|0",
    "qq",
    "quotemeta",
    "qw",
    "qx",
    "rand",
    "read",
    "readdir",
    "readline",
    "readlink",
    "readpipe",
    "recv",
    "redo",
    "ref",
    "rename",
    "require",
    "reset",
    "return",
    "reverse",
    "rewinddir",
    "rindex",
    "rmdir",
    "say",
    "scalar",
    "seek",
    "seekdir",
    "select",
    "semctl",
    "semget",
    "semop",
    "send",
    "setgrent",
    "sethostent",
    "setnetent",
    "setpgrp",
    "setpriority",
    "setprotoent",
    "setpwent",
    "setservent",
    "setsockopt",
    "shift",
    "shmctl",
    "shmget",
    "shmread",
    "shmwrite",
    "shutdown",
    "sin",
    "sleep",
    "socket",
    "socketpair",
    "sort",
    "splice",
    "split",
    "sprintf",
    "sqrt",
    "srand",
    "stat",
    "state",
    "study",
    "sub",
    "substr",
    "symlink",
    "syscall",
    "sysopen",
    "sysread",
    "sysseek",
    "system",
    "syswrite",
    "tell",
    "telldir",
    "tie",
    "tied",
    "time",
    "times",
    "tr",
    "truncate",
    "uc",
    "ucfirst",
    "umask",
    "undef",
    "unless",
    "unlink",
    "unpack",
    "unshift",
    "untie",
    "until",
    "use",
    "utime",
    "values",
    "vec",
    "wait",
    "waitpid",
    "wantarray",
    "warn",
    "when",
    "while",
    "write",
    "x|0",
    "xor",
    "y|0"
  ], r = /[dualxmsipngr]{0,12}/, i = {
    $pattern: /[\w.]+/,
    keyword: t.join(" ")
  }, s = {
    className: "subst",
    begin: "[$@]\\{",
    end: "\\}",
    keywords: i
  }, o = {
    begin: /->\{/,
    end: /\}/
    // contains defined later
  }, a = { variants: [
    { begin: /\$\d/ },
    { begin: e.concat(
      /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
      // negative look-ahead tries to avoid matching patterns that are not
      // Perl at all like $ident$, @ident@, etc.
      "(?![A-Za-z])(?![@$%])"
    ) },
    {
      begin: /[$%@][^\s\w{]/,
      relevance: 0
    }
  ] }, l = [
    n.BACKSLASH_ESCAPE,
    s,
    a
  ], c = [
    /!/,
    /\//,
    /\|/,
    /\?/,
    /'/,
    /"/,
    // valid but infrequent and weird
    /#/
    // valid but infrequent and weird
  ], u = (p, h, g = "\\1") => {
    const m = g === "\\1" ? g : e.concat(g, h);
    return e.concat(
      e.concat("(?:", p, ")"),
      h,
      /(?:\\.|[^\\\/])*?/,
      m,
      /(?:\\.|[^\\\/])*?/,
      g,
      r
    );
  }, d = (p, h, g) => e.concat(
    e.concat("(?:", p, ")"),
    h,
    /(?:\\.|[^\\\/])*?/,
    g,
    r
  ), f = [
    a,
    n.HASH_COMMENT_MODE,
    n.COMMENT(
      /^=\w/,
      /=cut/,
      { endsWithParent: !0 }
    ),
    o,
    {
      className: "string",
      contains: l,
      variants: [
        {
          begin: "q[qwxr]?\\s*\\(",
          end: "\\)",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\[",
          end: "\\]",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\{",
          end: "\\}",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*\\|",
          end: "\\|",
          relevance: 5
        },
        {
          begin: "q[qwxr]?\\s*<",
          end: ">",
          relevance: 5
        },
        {
          begin: "qw\\s+q",
          end: "q",
          relevance: 5
        },
        {
          begin: "'",
          end: "'",
          contains: [n.BACKSLASH_ESCAPE]
        },
        {
          begin: '"',
          end: '"'
        },
        {
          begin: "`",
          end: "`",
          contains: [n.BACKSLASH_ESCAPE]
        },
        {
          begin: /\{\w+\}/,
          relevance: 0
        },
        {
          begin: "-?\\w+\\s*=>",
          relevance: 0
        }
      ]
    },
    {
      className: "number",
      begin: "(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",
      relevance: 0
    },
    {
      // regexp container
      begin: "(\\/\\/|" + n.RE_STARTERS_RE + "|\\b(split|return|print|reverse|grep)\\b)\\s*",
      keywords: "split return print reverse grep",
      relevance: 0,
      contains: [
        n.HASH_COMMENT_MODE,
        {
          className: "regexp",
          variants: [
            // allow matching common delimiters
            { begin: u("s|tr|y", e.either(...c, { capture: !0 })) },
            // and then paired delmis
            { begin: u("s|tr|y", "\\(", "\\)") },
            { begin: u("s|tr|y", "\\[", "\\]") },
            { begin: u("s|tr|y", "\\{", "\\}") }
          ],
          relevance: 2
        },
        {
          className: "regexp",
          variants: [
            {
              // could be a comment in many languages so do not count
              // as relevant
              begin: /(m|qr)\/\//,
              relevance: 0
            },
            // prefix is optional with /regex/
            { begin: d("(?:m|qr)?", /\//, /\//) },
            // allow matching common delimiters
            { begin: d("m|qr", e.either(...c, { capture: !0 }), /\1/) },
            // allow common paired delmins
            { begin: d("m|qr", /\(/, /\)/) },
            { begin: d("m|qr", /\[/, /\]/) },
            { begin: d("m|qr", /\{/, /\}/) }
          ]
        }
      ]
    },
    {
      className: "function",
      beginKeywords: "sub",
      end: "(\\s*\\(.*?\\))?[;{]",
      excludeEnd: !0,
      relevance: 5,
      contains: [n.TITLE_MODE]
    },
    {
      begin: "-\\w\\b",
      relevance: 0
    },
    {
      begin: "^__DATA__$",
      end: "^__END__$",
      subLanguage: "mojolicious",
      contains: [
        {
          begin: "^@@.*",
          end: "$",
          className: "comment"
        }
      ]
    }
  ];
  return s.contains = f, o.contains = f, {
    name: "Perl",
    aliases: [
      "pl",
      "pm"
    ],
    keywords: i,
    contains: f
  };
}
function sM(n) {
  const e = n.regex, t = /(?![A-Za-z0-9])(?![$])/, r = e.concat(
    /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
    t
  ), i = e.concat(
    /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
    t
  ), s = {
    scope: "variable",
    match: "\\$+" + r
  }, o = {
    scope: "meta",
    variants: [
      { begin: /<\?php/, relevance: 10 },
      // boost for obvious PHP
      { begin: /<\?=/ },
      // less relevant per PSR-1 which says not to use short-tags
      { begin: /<\?/, relevance: 0.1 },
      { begin: /\?>/ }
      // end php tag
    ]
  }, a = {
    scope: "subst",
    variants: [
      { begin: /\$\w+/ },
      {
        begin: /\{\$/,
        end: /\}/
      }
    ]
  }, l = n.inherit(n.APOS_STRING_MODE, { illegal: null }), c = n.inherit(n.QUOTE_STRING_MODE, {
    illegal: null,
    contains: n.QUOTE_STRING_MODE.contains.concat(a)
  }), u = {
    begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
    end: /[ \t]*(\w+)\b/,
    contains: n.QUOTE_STRING_MODE.contains.concat(a),
    "on:begin": (q, A) => {
      A.data._beginMatch = q[1] || q[2];
    },
    "on:end": (q, A) => {
      A.data._beginMatch !== q[1] && A.ignoreMatch();
    }
  }, d = n.END_SAME_AS_BEGIN({
    begin: /<<<[ \t]*'(\w+)'\n/,
    end: /[ \t]*(\w+)\b/
  }), f = `[ 	
]`, p = {
    scope: "string",
    variants: [
      c,
      l,
      u,
      d
    ]
  }, h = {
    scope: "number",
    variants: [
      { begin: "\\b0[bB][01]+(?:_[01]+)*\\b" },
      // Binary w/ underscore support
      { begin: "\\b0[oO][0-7]+(?:_[0-7]+)*\\b" },
      // Octals w/ underscore support
      { begin: "\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b" },
      // Hex w/ underscore support
      // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
      { begin: "(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?" }
    ],
    relevance: 0
  }, g = [
    "false",
    "null",
    "true"
  ], m = [
    // Magic constants:
    // <https://www.php.net/manual/en/language.constants.predefined.php>
    "__CLASS__",
    "__DIR__",
    "__FILE__",
    "__FUNCTION__",
    "__COMPILER_HALT_OFFSET__",
    "__LINE__",
    "__METHOD__",
    "__NAMESPACE__",
    "__TRAIT__",
    // Function that look like language construct or language construct that look like function:
    // List of keywords that may not require parenthesis
    "die",
    "echo",
    "exit",
    "include",
    "include_once",
    "print",
    "require",
    "require_once",
    // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
    // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
    // Other keywords:
    // <https://www.php.net/manual/en/reserved.php>
    // <https://www.php.net/manual/en/language.types.type-juggling.php>
    "array",
    "abstract",
    "and",
    "as",
    "binary",
    "bool",
    "boolean",
    "break",
    "callable",
    "case",
    "catch",
    "class",
    "clone",
    "const",
    "continue",
    "declare",
    "default",
    "do",
    "double",
    "else",
    "elseif",
    "empty",
    "enddeclare",
    "endfor",
    "endforeach",
    "endif",
    "endswitch",
    "endwhile",
    "enum",
    "eval",
    "extends",
    "final",
    "finally",
    "float",
    "for",
    "foreach",
    "from",
    "global",
    "goto",
    "if",
    "implements",
    "instanceof",
    "insteadof",
    "int",
    "integer",
    "interface",
    "isset",
    "iterable",
    "list",
    "match|0",
    "mixed",
    "new",
    "never",
    "object",
    "or",
    "private",
    "protected",
    "public",
    "readonly",
    "real",
    "return",
    "string",
    "switch",
    "throw",
    "trait",
    "try",
    "unset",
    "use",
    "var",
    "void",
    "while",
    "xor",
    "yield"
  ], v = [
    // Standard PHP library:
    // <https://www.php.net/manual/en/book.spl.php>
    "Error|0",
    "AppendIterator",
    "ArgumentCountError",
    "ArithmeticError",
    "ArrayIterator",
    "ArrayObject",
    "AssertionError",
    "BadFunctionCallException",
    "BadMethodCallException",
    "CachingIterator",
    "CallbackFilterIterator",
    "CompileError",
    "Countable",
    "DirectoryIterator",
    "DivisionByZeroError",
    "DomainException",
    "EmptyIterator",
    "ErrorException",
    "Exception",
    "FilesystemIterator",
    "FilterIterator",
    "GlobIterator",
    "InfiniteIterator",
    "InvalidArgumentException",
    "IteratorIterator",
    "LengthException",
    "LimitIterator",
    "LogicException",
    "MultipleIterator",
    "NoRewindIterator",
    "OutOfBoundsException",
    "OutOfRangeException",
    "OuterIterator",
    "OverflowException",
    "ParentIterator",
    "ParseError",
    "RangeException",
    "RecursiveArrayIterator",
    "RecursiveCachingIterator",
    "RecursiveCallbackFilterIterator",
    "RecursiveDirectoryIterator",
    "RecursiveFilterIterator",
    "RecursiveIterator",
    "RecursiveIteratorIterator",
    "RecursiveRegexIterator",
    "RecursiveTreeIterator",
    "RegexIterator",
    "RuntimeException",
    "SeekableIterator",
    "SplDoublyLinkedList",
    "SplFileInfo",
    "SplFileObject",
    "SplFixedArray",
    "SplHeap",
    "SplMaxHeap",
    "SplMinHeap",
    "SplObjectStorage",
    "SplObserver",
    "SplPriorityQueue",
    "SplQueue",
    "SplStack",
    "SplSubject",
    "SplTempFileObject",
    "TypeError",
    "UnderflowException",
    "UnexpectedValueException",
    "UnhandledMatchError",
    // Reserved interfaces:
    // <https://www.php.net/manual/en/reserved.interfaces.php>
    "ArrayAccess",
    "BackedEnum",
    "Closure",
    "Fiber",
    "Generator",
    "Iterator",
    "IteratorAggregate",
    "Serializable",
    "Stringable",
    "Throwable",
    "Traversable",
    "UnitEnum",
    "WeakReference",
    "WeakMap",
    // Reserved classes:
    // <https://www.php.net/manual/en/reserved.classes.php>
    "Directory",
    "__PHP_Incomplete_Class",
    "parent",
    "php_user_filter",
    "self",
    "static",
    "stdClass"
  ], k = {
    keyword: m,
    literal: ((q) => {
      const A = [];
      return q.forEach((H) => {
        A.push(H), H.toLowerCase() === H ? A.push(H.toUpperCase()) : A.push(H.toLowerCase());
      }), A;
    })(g),
    built_in: v
  }, b = (q) => q.map((A) => A.replace(/\|\d+$/, "")), x = { variants: [
    {
      match: [
        /new/,
        e.concat(f, "+"),
        // to prevent built ins from being confused as the class constructor call
        e.concat("(?!", b(v).join("\\b|"), "\\b)"),
        i
      ],
      scope: {
        1: "keyword",
        4: "title.class"
      }
    }
  ] }, w = e.concat(r, "\\b(?!\\()"), S = { variants: [
    {
      match: [
        e.concat(
          /::/,
          e.lookahead(/(?!class\b)/)
        ),
        w
      ],
      scope: { 2: "variable.constant" }
    },
    {
      match: [
        /::/,
        /class/
      ],
      scope: { 2: "variable.language" }
    },
    {
      match: [
        i,
        e.concat(
          /::/,
          e.lookahead(/(?!class\b)/)
        ),
        w
      ],
      scope: {
        1: "title.class",
        3: "variable.constant"
      }
    },
    {
      match: [
        i,
        e.concat(
          "::",
          e.lookahead(/(?!class\b)/)
        )
      ],
      scope: { 1: "title.class" }
    },
    {
      match: [
        i,
        /::/,
        /class/
      ],
      scope: {
        1: "title.class",
        3: "variable.language"
      }
    }
  ] }, T = {
    scope: "attr",
    match: e.concat(r, e.lookahead(":"), e.lookahead(/(?!::)/))
  }, M = {
    relevance: 0,
    begin: /\(/,
    end: /\)/,
    keywords: k,
    contains: [
      T,
      s,
      S,
      n.C_BLOCK_COMMENT_MODE,
      p,
      h,
      x
    ]
  }, L = {
    relevance: 0,
    match: [
      /\b/,
      // to prevent keywords from being confused as the function title
      e.concat("(?!fn\\b|function\\b|", b(m).join("\\b|"), "|", b(v).join("\\b|"), "\\b)"),
      r,
      e.concat(f, "*"),
      e.lookahead(/(?=\()/)
    ],
    scope: { 3: "title.function.invoke" },
    contains: [M]
  };
  M.contains.push(L);
  const z = [
    T,
    S,
    n.C_BLOCK_COMMENT_MODE,
    p,
    h,
    x
  ], G = {
    begin: e.concat(/#\[\s*/, i),
    beginScope: "meta",
    end: /]/,
    endScope: "meta",
    keywords: {
      literal: g,
      keyword: [
        "new",
        "array"
      ]
    },
    contains: [
      {
        begin: /\[/,
        end: /]/,
        keywords: {
          literal: g,
          keyword: [
            "new",
            "array"
          ]
        },
        contains: [
          "self",
          ...z
        ]
      },
      ...z,
      {
        scope: "meta",
        match: i
      }
    ]
  };
  return {
    case_insensitive: !1,
    keywords: k,
    contains: [
      G,
      n.HASH_COMMENT_MODE,
      n.COMMENT("//", "$"),
      n.COMMENT(
        "/\\*",
        "\\*/",
        { contains: [
          {
            scope: "doctag",
            match: "@[A-Za-z]+"
          }
        ] }
      ),
      {
        match: /__halt_compiler\(\);/,
        keywords: "__halt_compiler",
        starts: {
          scope: "comment",
          end: n.MATCH_NOTHING_RE,
          contains: [
            {
              match: /\?>/,
              scope: "meta",
              endsParent: !0
            }
          ]
        }
      },
      o,
      {
        scope: "variable.language",
        match: /\$this\b/
      },
      s,
      L,
      S,
      {
        match: [
          /const/,
          /\s/,
          r
        ],
        scope: {
          1: "keyword",
          3: "variable.constant"
        }
      },
      x,
      {
        scope: "function",
        relevance: 0,
        beginKeywords: "fn function",
        end: /[;{]/,
        excludeEnd: !0,
        illegal: "[$%\\[]",
        contains: [
          { beginKeywords: "use" },
          n.UNDERSCORE_TITLE_MODE,
          {
            begin: "=>",
            // No markup, just a relevance booster
            endsParent: !0
          },
          {
            scope: "params",
            begin: "\\(",
            end: "\\)",
            excludeBegin: !0,
            excludeEnd: !0,
            keywords: k,
            contains: [
              "self",
              s,
              S,
              n.C_BLOCK_COMMENT_MODE,
              p,
              h
            ]
          }
        ]
      },
      {
        scope: "class",
        variants: [
          {
            beginKeywords: "enum",
            illegal: /[($"]/
          },
          {
            beginKeywords: "class interface trait",
            illegal: /[:($"]/
          }
        ],
        relevance: 0,
        end: /\{/,
        excludeEnd: !0,
        contains: [
          { beginKeywords: "extends implements" },
          n.UNDERSCORE_TITLE_MODE
        ]
      },
      // both use and namespace still use "old style" rules (vs multi-match)
      // because the namespace name can include `\` and we still want each
      // element to be treated as its own *individual* title
      {
        beginKeywords: "namespace",
        relevance: 0,
        end: ";",
        illegal: /[.']/,
        contains: [n.inherit(n.UNDERSCORE_TITLE_MODE, { scope: "title.class" })]
      },
      {
        beginKeywords: "use",
        relevance: 0,
        end: ";",
        contains: [
          // TODO: title.function vs title.class
          {
            match: /\b(as|const|function)\b/,
            scope: "keyword"
          },
          // TODO: could be title.class or title.function
          n.UNDERSCORE_TITLE_MODE
        ]
      },
      p,
      h
    ]
  };
}
function oM(n) {
  return {
    name: "PHP template",
    subLanguage: "xml",
    contains: [
      {
        begin: /<\?(php|=)?/,
        end: /\?>/,
        subLanguage: "php",
        contains: [
          // We don't want the php closing tag ?> to close the PHP block when
          // inside any of the following blocks:
          {
            begin: "/\\*",
            end: "\\*/",
            skip: !0
          },
          {
            begin: 'b"',
            end: '"',
            skip: !0
          },
          {
            begin: "b'",
            end: "'",
            skip: !0
          },
          n.inherit(n.APOS_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0
          }),
          n.inherit(n.QUOTE_STRING_MODE, {
            illegal: null,
            className: null,
            contains: null,
            skip: !0
          })
        ]
      }
    ]
  };
}
function aM(n) {
  return {
    name: "Plain text",
    aliases: [
      "text",
      "txt"
    ],
    disableAutodetect: !0
  };
}
function lM(n) {
  const e = n.regex, t = /[\p{XID_Start}_]\p{XID_Continue}*/u, r = [
    "and",
    "as",
    "assert",
    "async",
    "await",
    "break",
    "case",
    "class",
    "continue",
    "def",
    "del",
    "elif",
    "else",
    "except",
    "finally",
    "for",
    "from",
    "global",
    "if",
    "import",
    "in",
    "is",
    "lambda",
    "match",
    "nonlocal|10",
    "not",
    "or",
    "pass",
    "raise",
    "return",
    "try",
    "while",
    "with",
    "yield"
  ], a = {
    $pattern: /[A-Za-z]\w+|__\w+__/,
    keyword: r,
    built_in: [
      "__import__",
      "abs",
      "all",
      "any",
      "ascii",
      "bin",
      "bool",
      "breakpoint",
      "bytearray",
      "bytes",
      "callable",
      "chr",
      "classmethod",
      "compile",
      "complex",
      "delattr",
      "dict",
      "dir",
      "divmod",
      "enumerate",
      "eval",
      "exec",
      "filter",
      "float",
      "format",
      "frozenset",
      "getattr",
      "globals",
      "hasattr",
      "hash",
      "help",
      "hex",
      "id",
      "input",
      "int",
      "isinstance",
      "issubclass",
      "iter",
      "len",
      "list",
      "locals",
      "map",
      "max",
      "memoryview",
      "min",
      "next",
      "object",
      "oct",
      "open",
      "ord",
      "pow",
      "print",
      "property",
      "range",
      "repr",
      "reversed",
      "round",
      "set",
      "setattr",
      "slice",
      "sorted",
      "staticmethod",
      "str",
      "sum",
      "super",
      "tuple",
      "type",
      "vars",
      "zip"
    ],
    literal: [
      "__debug__",
      "Ellipsis",
      "False",
      "None",
      "NotImplemented",
      "True"
    ],
    type: [
      "Any",
      "Callable",
      "Coroutine",
      "Dict",
      "List",
      "Literal",
      "Generic",
      "Optional",
      "Sequence",
      "Set",
      "Tuple",
      "Type",
      "Union"
    ]
  }, l = {
    className: "meta",
    begin: /^(>>>|\.\.\.) /
  }, c = {
    className: "subst",
    begin: /\{/,
    end: /\}/,
    keywords: a,
    illegal: /#/
  }, u = {
    begin: /\{\{/,
    relevance: 0
  }, d = {
    className: "string",
    contains: [n.BACKSLASH_ESCAPE],
    variants: [
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
        end: /'''/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l
        ],
        relevance: 10
      },
      {
        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
        end: /"""/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l
        ],
        relevance: 10
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'''/,
        end: /'''/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l,
          u,
          c
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"""/,
        end: /"""/,
        contains: [
          n.BACKSLASH_ESCAPE,
          l,
          u,
          c
        ]
      },
      {
        begin: /([uU]|[rR])'/,
        end: /'/,
        relevance: 10
      },
      {
        begin: /([uU]|[rR])"/,
        end: /"/,
        relevance: 10
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])'/,
        end: /'/
      },
      {
        begin: /([bB]|[bB][rR]|[rR][bB])"/,
        end: /"/
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])'/,
        end: /'/,
        contains: [
          n.BACKSLASH_ESCAPE,
          u,
          c
        ]
      },
      {
        begin: /([fF][rR]|[rR][fF]|[fF])"/,
        end: /"/,
        contains: [
          n.BACKSLASH_ESCAPE,
          u,
          c
        ]
      },
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  }, f = "[0-9](_?[0-9])*", p = `(\\b(${f}))?\\.(${f})|\\b(${f})\\.`, h = `\\b|${r.join("|")}`, g = {
    className: "number",
    relevance: 0,
    variants: [
      // exponentfloat, pointfloat
      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
      // optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      // Note: no leading \b because floats can start with a decimal point
      // and we don't want to mishandle e.g. `fn(.5)`,
      // no trailing \b for pointfloat because it can end with a decimal point
      // and we don't want to mishandle e.g. `0..hex()`; this should be safe
      // because both MUST contain a decimal point and so cannot be confused with
      // the interior part of an identifier
      {
        begin: `(\\b(${f})|(${p}))[eE][+-]?(${f})[jJ]?(?=${h})`
      },
      {
        begin: `(${p})[jJ]?`
      },
      // decinteger, bininteger, octinteger, hexinteger
      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
      // optionally "long" in Python 2
      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
      // decinteger is optionally imaginary
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${h})`
      },
      {
        begin: `\\b0[bB](_?[01])+[lL]?(?=${h})`
      },
      {
        begin: `\\b0[oO](_?[0-7])+[lL]?(?=${h})`
      },
      {
        begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${h})`
      },
      // imagnumber (digitpart-based)
      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
      {
        begin: `\\b(${f})[jJ](?=${h})`
      }
    ]
  }, m = {
    className: "comment",
    begin: e.lookahead(/# type:/),
    end: /$/,
    keywords: a,
    contains: [
      {
        // prevent keywords from coloring `type`
        begin: /# type:/
      },
      // comment within a datatype comment includes no keywords
      {
        begin: /#/,
        end: /\b\B/,
        endsWithParent: !0
      }
    ]
  }, v = {
    className: "params",
    variants: [
      // Exclude params in functions without params
      {
        className: "",
        begin: /\(\s*\)/,
        skip: !0
      },
      {
        begin: /\(/,
        end: /\)/,
        excludeBegin: !0,
        excludeEnd: !0,
        keywords: a,
        contains: [
          "self",
          l,
          g,
          d,
          n.HASH_COMMENT_MODE
        ]
      }
    ]
  };
  return c.contains = [
    d,
    g,
    l
  ], {
    name: "Python",
    aliases: [
      "py",
      "gyp",
      "ipython"
    ],
    unicodeRegex: !0,
    keywords: a,
    illegal: /(<\/|\?)|=>/,
    contains: [
      l,
      g,
      {
        // very common convention
        begin: /\bself\b/
      },
      {
        // eat "if" prior to string so that it won't accidentally be
        // labeled as an f-string
        beginKeywords: "if",
        relevance: 0
      },
      d,
      m,
      n.HASH_COMMENT_MODE,
      {
        match: [
          /\bdef/,
          /\s+/,
          t
        ],
        scope: {
          1: "keyword",
          3: "title.function"
        },
        contains: [v]
      },
      {
        variants: [
          {
            match: [
              /\bclass/,
              /\s+/,
              t,
              /\s*/,
              /\(\s*/,
              t,
              /\s*\)/
            ]
          },
          {
            match: [
              /\bclass/,
              /\s+/,
              t
            ]
          }
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          6: "title.class.inherited"
        }
      },
      {
        className: "meta",
        begin: /^[\t ]*@/,
        end: /(?=#)|$/,
        contains: [
          g,
          v,
          d
        ]
      }
    ]
  };
}
function cM(n) {
  return {
    aliases: ["pycon"],
    contains: [
      {
        className: "meta.prompt",
        starts: {
          // a space separates the REPL prefix from the actual code
          // this is purely for cleaner HTML output
          end: / |$/,
          starts: {
            end: "$",
            subLanguage: "python"
          }
        },
        variants: [
          { begin: /^>>>(?=[ ]|$)/ },
          { begin: /^\.\.\.(?=[ ]|$)/ }
        ]
      }
    ]
  };
}
function uM(n) {
  const e = n.regex, t = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/, r = e.either(
    // Special case: only hexadecimal binary powers can contain fractions
    /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
    // Hexadecimal numbers without fraction and optional binary power
    /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
    // Decimal numbers
    /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
  ), i = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/, s = e.either(
    /[()]/,
    /[{}]/,
    /\[\[/,
    /[[\]]/,
    /\\/,
    /,/
  );
  return {
    name: "R",
    keywords: {
      $pattern: t,
      keyword: "function if in break next repeat else for while",
      literal: "NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 NA_character_|10 NA_complex_|10",
      built_in: (
        // Builtin constants
        "LETTERS letters month.abb month.name pi T F abs acos acosh all any anyNA Arg as.call as.character as.complex as.double as.environment as.integer as.logical as.null.default as.numeric as.raw asin asinh atan atanh attr attributes baseenv browser c call ceiling class Conj cos cosh cospi cummax cummin cumprod cumsum digamma dim dimnames emptyenv exp expression floor forceAndCall gamma gc.time globalenv Im interactive invisible is.array is.atomic is.call is.character is.complex is.double is.environment is.expression is.finite is.function is.infinite is.integer is.language is.list is.logical is.matrix is.na is.name is.nan is.null is.numeric is.object is.pairlist is.raw is.recursive is.single is.symbol lazyLoadDBfetch length lgamma list log max min missing Mod names nargs nzchar oldClass on.exit pos.to.env proc.time prod quote range Re rep retracemem return round seq_along seq_len seq.int sign signif sin sinh sinpi sqrt standardGeneric substitute sum switch tan tanh tanpi tracemem trigamma trunc unclass untracemem UseMethod xtfrm"
      )
    },
    contains: [
      // Roxygen comments
      n.COMMENT(
        /#'/,
        /$/,
        { contains: [
          {
            // Handle `@examples` separately to cause all subsequent code
            // until the next `@`-tag on its own line to be kept as-is,
            // preventing highlighting. This code is example R code, so nested
            // doctags shouldn’t be treated as such. See
            // `test/markup/r/roxygen.txt` for an example.
            scope: "doctag",
            match: /@examples/,
            starts: {
              end: e.lookahead(e.either(
                // end if another doc comment
                /\n^#'\s*(?=@[a-zA-Z]+)/,
                // or a line with no comment
                /\n^(?!#')/
              )),
              endsParent: !0
            }
          },
          {
            // Handle `@param` to highlight the parameter name following
            // after.
            scope: "doctag",
            begin: "@param",
            end: /$/,
            contains: [
              {
                scope: "variable",
                variants: [
                  { match: t },
                  { match: /`(?:\\.|[^`\\])+`/ }
                ],
                endsParent: !0
              }
            ]
          },
          {
            scope: "doctag",
            match: /@[a-zA-Z]+/
          },
          {
            scope: "keyword",
            match: /\\[a-zA-Z]+/
          }
        ] }
      ),
      n.HASH_COMMENT_MODE,
      {
        scope: "string",
        contains: [n.BACKSLASH_ESCAPE],
        variants: [
          n.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\(/,
            end: /\)(-*)"/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\{/,
            end: /\}(-*)"/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]"(-*)\[/,
            end: /\](-*)"/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\(/,
            end: /\)(-*)'/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\{/,
            end: /\}(-*)'/
          }),
          n.END_SAME_AS_BEGIN({
            begin: /[rR]'(-*)\[/,
            end: /\](-*)'/
          }),
          {
            begin: '"',
            end: '"',
            relevance: 0
          },
          {
            begin: "'",
            end: "'",
            relevance: 0
          }
        ]
      },
      // Matching numbers immediately following punctuation and operators is
      // tricky since we need to look at the character ahead of a number to
      // ensure the number is not part of an identifier, and we cannot use
      // negative look-behind assertions. So instead we explicitly handle all
      // possible combinations of (operator|punctuation), number.
      // TODO: replace with negative look-behind when available
      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
      // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
      // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
      {
        relevance: 0,
        variants: [
          {
            scope: {
              1: "operator",
              2: "number"
            },
            match: [
              i,
              r
            ]
          },
          {
            scope: {
              1: "operator",
              2: "number"
            },
            match: [
              /%[^%]*%/,
              r
            ]
          },
          {
            scope: {
              1: "punctuation",
              2: "number"
            },
            match: [
              s,
              r
            ]
          },
          {
            scope: { 2: "number" },
            match: [
              /[^a-zA-Z0-9._]|^/,
              // not part of an identifier, or start of document
              r
            ]
          }
        ]
      },
      // Operators/punctuation when they're not directly followed by numbers
      {
        // Relevance boost for the most common assignment form.
        scope: { 3: "operator" },
        match: [
          t,
          /\s+/,
          /<-/,
          /\s+/
        ]
      },
      {
        scope: "operator",
        relevance: 0,
        variants: [
          { match: i },
          { match: /%[^%]*%/ }
        ]
      },
      {
        scope: "punctuation",
        relevance: 0,
        match: s
      },
      {
        // Escaped identifier
        begin: "`",
        end: "`",
        contains: [{ begin: /\\./ }]
      }
    ]
  };
}
function dM(n) {
  const e = n.regex, t = "([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)", r = e.either(
    /\b([A-Z]+[a-z0-9]+)+/,
    // ends in caps
    /\b([A-Z]+[a-z0-9]+)+[A-Z]+/
  ), i = e.concat(r, /(::\w+)*/), o = {
    "variable.constant": [
      "__FILE__",
      "__LINE__",
      "__ENCODING__"
    ],
    "variable.language": [
      "self",
      "super"
    ],
    keyword: [
      "alias",
      "and",
      "begin",
      "BEGIN",
      "break",
      "case",
      "class",
      "defined",
      "do",
      "else",
      "elsif",
      "end",
      "END",
      "ensure",
      "for",
      "if",
      "in",
      "module",
      "next",
      "not",
      "or",
      "redo",
      "require",
      "rescue",
      "retry",
      "return",
      "then",
      "undef",
      "unless",
      "until",
      "when",
      "while",
      "yield",
      ...[
        "include",
        "extend",
        "prepend",
        "public",
        "private",
        "protected",
        "raise",
        "throw"
      ]
    ],
    built_in: [
      "proc",
      "lambda",
      "attr_accessor",
      "attr_reader",
      "attr_writer",
      "define_method",
      "private_constant",
      "module_function"
    ],
    literal: [
      "true",
      "false",
      "nil"
    ]
  }, a = {
    className: "doctag",
    begin: "@[A-Za-z]+"
  }, l = {
    begin: "#<",
    end: ">"
  }, c = [
    n.COMMENT(
      "#",
      "$",
      { contains: [a] }
    ),
    n.COMMENT(
      "^=begin",
      "^=end",
      {
        contains: [a],
        relevance: 10
      }
    ),
    n.COMMENT("^__END__", n.MATCH_NOTHING_RE)
  ], u = {
    className: "subst",
    begin: /#\{/,
    end: /\}/,
    keywords: o
  }, d = {
    className: "string",
    contains: [
      n.BACKSLASH_ESCAPE,
      u
    ],
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      {
        begin: /`/,
        end: /`/
      },
      {
        begin: /%[qQwWx]?\(/,
        end: /\)/
      },
      {
        begin: /%[qQwWx]?\[/,
        end: /\]/
      },
      {
        begin: /%[qQwWx]?\{/,
        end: /\}/
      },
      {
        begin: /%[qQwWx]?</,
        end: />/
      },
      {
        begin: /%[qQwWx]?\//,
        end: /\//
      },
      {
        begin: /%[qQwWx]?%/,
        end: /%/
      },
      {
        begin: /%[qQwWx]?-/,
        end: /-/
      },
      {
        begin: /%[qQwWx]?\|/,
        end: /\|/
      },
      // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
      // where ? is the last character of a preceding identifier, as in: `func?4`
      { begin: /\B\?(\\\d{1,3})/ },
      { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
      { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
      { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
      { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
      { begin: /\B\?\\?\S/ },
      // heredocs
      {
        // this guard makes sure that we have an entire heredoc and not a false
        // positive (auto-detect, etc.)
        begin: e.concat(
          /<<[-~]?'?/,
          e.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
        ),
        contains: [
          n.END_SAME_AS_BEGIN({
            begin: /(\w+)/,
            end: /(\w+)/,
            contains: [
              n.BACKSLASH_ESCAPE,
              u
            ]
          })
        ]
      }
    ]
  }, f = "[1-9](_?[0-9])*|0", p = "[0-9](_?[0-9])*", h = {
    className: "number",
    relevance: 0,
    variants: [
      // decimal integer/float, optionally exponential or rational, optionally imaginary
      { begin: `\\b(${f})(\\.(${p}))?([eE][+-]?(${p})|r)?i?\\b` },
      // explicit decimal/binary/octal/hexadecimal integer,
      // optionally rational and/or imaginary
      { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
      // 0-prefixed implicit octal integer, optionally rational and/or imaginary
      { begin: "\\b0(_?[0-7])+r?i?\\b" }
    ]
  }, g = {
    variants: [
      {
        match: /\(\)/
      },
      {
        className: "params",
        begin: /\(/,
        end: /(?=\))/,
        excludeBegin: !0,
        endsParent: !0,
        keywords: o
      }
    ]
  }, w = [
    d,
    {
      variants: [
        {
          match: [
            /class\s+/,
            i,
            /\s+<\s+/,
            i
          ]
        },
        {
          match: [
            /\b(class|module)\s+/,
            i
          ]
        }
      ],
      scope: {
        2: "title.class",
        4: "title.class.inherited"
      },
      keywords: o
    },
    {
      match: [
        /(include|extend)\s+/,
        i
      ],
      scope: {
        2: "title.class"
      },
      keywords: o
    },
    {
      relevance: 0,
      match: [
        i,
        /\.new[. (]/
      ],
      scope: {
        1: "title.class"
      }
    },
    {
      relevance: 0,
      match: /\b[A-Z][A-Z_0-9]+\b/,
      className: "variable.constant"
    },
    {
      relevance: 0,
      match: r,
      scope: "title.class"
    },
    {
      match: [
        /def/,
        /\s+/,
        t
      ],
      scope: {
        1: "keyword",
        3: "title.function"
      },
      contains: [
        g
      ]
    },
    {
      // swallow namespace qualifiers before symbols
      begin: n.IDENT_RE + "::"
    },
    {
      className: "symbol",
      begin: n.UNDERSCORE_IDENT_RE + "(!|\\?)?:",
      relevance: 0
    },
    {
      className: "symbol",
      begin: ":(?!\\s)",
      contains: [
        d,
        { begin: t }
      ],
      relevance: 0
    },
    h,
    {
      // negative-look forward attempts to prevent false matches like:
      // @ident@ or $ident$ that might indicate this is not ruby at all
      className: "variable",
      begin: "(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])(?![A-Za-z])(?![@$?'])"
    },
    {
      className: "params",
      begin: /\|/,
      end: /\|/,
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0,
      // this could be a lot of things (in other languages) other than params
      keywords: o
    },
    {
      // regexp container
      begin: "(" + n.RE_STARTERS_RE + "|unless)\\s*",
      keywords: "unless",
      contains: [
        {
          className: "regexp",
          contains: [
            n.BACKSLASH_ESCAPE,
            u
          ],
          illegal: /\n/,
          variants: [
            {
              begin: "/",
              end: "/[a-z]*"
            },
            {
              begin: /%r\{/,
              end: /\}[a-z]*/
            },
            {
              begin: "%r\\(",
              end: "\\)[a-z]*"
            },
            {
              begin: "%r!",
              end: "![a-z]*"
            },
            {
              begin: "%r\\[",
              end: "\\][a-z]*"
            }
          ]
        }
      ].concat(l, c),
      relevance: 0
    }
  ].concat(l, c);
  u.contains = w, g.contains = w;
  const S = "[>?]>", T = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]", M = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>", L = [
    {
      begin: /^\s*=>/,
      starts: {
        end: "$",
        contains: w
      }
    },
    {
      className: "meta.prompt",
      begin: "^(" + S + "|" + T + "|" + M + ")(?=[ ])",
      starts: {
        end: "$",
        keywords: o,
        contains: w
      }
    }
  ];
  return c.unshift(l), {
    name: "Ruby",
    aliases: [
      "rb",
      "gemspec",
      "podspec",
      "thor",
      "irb"
    ],
    keywords: o,
    illegal: /\/\*/,
    contains: [n.SHEBANG({ binary: "ruby" })].concat(L).concat(c).concat(w)
  };
}
function fM(n) {
  const e = n.regex, t = {
    className: "title.function.invoke",
    relevance: 0,
    begin: e.concat(
      /\b/,
      /(?!let|for|while|if|else|match\b)/,
      n.IDENT_RE,
      e.lookahead(/\s*\(/)
    )
  }, r = "([ui](8|16|32|64|128|size)|f(32|64))?", i = [
    "abstract",
    "as",
    "async",
    "await",
    "become",
    "box",
    "break",
    "const",
    "continue",
    "crate",
    "do",
    "dyn",
    "else",
    "enum",
    "extern",
    "false",
    "final",
    "fn",
    "for",
    "if",
    "impl",
    "in",
    "let",
    "loop",
    "macro",
    "match",
    "mod",
    "move",
    "mut",
    "override",
    "priv",
    "pub",
    "ref",
    "return",
    "self",
    "Self",
    "static",
    "struct",
    "super",
    "trait",
    "true",
    "try",
    "type",
    "typeof",
    "unsafe",
    "unsized",
    "use",
    "virtual",
    "where",
    "while",
    "yield"
  ], s = [
    "true",
    "false",
    "Some",
    "None",
    "Ok",
    "Err"
  ], o = [
    // functions
    "drop ",
    // traits
    "Copy",
    "Send",
    "Sized",
    "Sync",
    "Drop",
    "Fn",
    "FnMut",
    "FnOnce",
    "ToOwned",
    "Clone",
    "Debug",
    "PartialEq",
    "PartialOrd",
    "Eq",
    "Ord",
    "AsRef",
    "AsMut",
    "Into",
    "From",
    "Default",
    "Iterator",
    "Extend",
    "IntoIterator",
    "DoubleEndedIterator",
    "ExactSizeIterator",
    "SliceConcatExt",
    "ToString",
    // macros
    "assert!",
    "assert_eq!",
    "bitflags!",
    "bytes!",
    "cfg!",
    "col!",
    "concat!",
    "concat_idents!",
    "debug_assert!",
    "debug_assert_eq!",
    "env!",
    "eprintln!",
    "panic!",
    "file!",
    "format!",
    "format_args!",
    "include_bytes!",
    "include_str!",
    "line!",
    "local_data_key!",
    "module_path!",
    "option_env!",
    "print!",
    "println!",
    "select!",
    "stringify!",
    "try!",
    "unimplemented!",
    "unreachable!",
    "vec!",
    "write!",
    "writeln!",
    "macro_rules!",
    "assert_ne!",
    "debug_assert_ne!"
  ], a = [
    "i8",
    "i16",
    "i32",
    "i64",
    "i128",
    "isize",
    "u8",
    "u16",
    "u32",
    "u64",
    "u128",
    "usize",
    "f32",
    "f64",
    "str",
    "char",
    "bool",
    "Box",
    "Option",
    "Result",
    "String",
    "Vec"
  ];
  return {
    name: "Rust",
    aliases: ["rs"],
    keywords: {
      $pattern: n.IDENT_RE + "!?",
      type: a,
      keyword: i,
      literal: s,
      built_in: o
    },
    illegal: "</",
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.COMMENT("/\\*", "\\*/", { contains: ["self"] }),
      n.inherit(n.QUOTE_STRING_MODE, {
        begin: /b?"/,
        illegal: null
      }),
      {
        className: "string",
        variants: [
          { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
          { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
        ]
      },
      {
        className: "symbol",
        begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
      },
      {
        className: "number",
        variants: [
          { begin: "\\b0b([01_]+)" + r },
          { begin: "\\b0o([0-7_]+)" + r },
          { begin: "\\b0x([A-Fa-f0-9_]+)" + r },
          { begin: "\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)" + r }
        ],
        relevance: 0
      },
      {
        begin: [
          /fn/,
          /\s+/,
          n.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "title.function"
        }
      },
      {
        className: "meta",
        begin: "#!?\\[",
        end: "\\]",
        contains: [
          {
            className: "string",
            begin: /"/,
            end: /"/
          }
        ]
      },
      {
        begin: [
          /let/,
          /\s+/,
          /(?:mut\s+)?/,
          n.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "keyword",
          4: "variable"
        }
      },
      // must come before impl/for rule later
      {
        begin: [
          /for/,
          /\s+/,
          n.UNDERSCORE_IDENT_RE,
          /\s+/,
          /in/
        ],
        className: {
          1: "keyword",
          3: "variable",
          5: "keyword"
        }
      },
      {
        begin: [
          /type/,
          /\s+/,
          n.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        begin: [
          /(?:trait|enum|struct|union|impl|for)/,
          /\s+/,
          n.UNDERSCORE_IDENT_RE
        ],
        className: {
          1: "keyword",
          3: "title.class"
        }
      },
      {
        begin: n.IDENT_RE + "::",
        keywords: {
          keyword: "Self",
          built_in: o,
          type: a
        }
      },
      {
        className: "punctuation",
        begin: "->"
      },
      t
    ]
  };
}
const pM = (n) => ({
  IMPORTANT: {
    scope: "meta",
    begin: "!important"
  },
  BLOCK_COMMENT: n.C_BLOCK_COMMENT_MODE,
  HEXCOLOR: {
    scope: "number",
    begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
  },
  FUNCTION_DISPATCH: {
    className: "built_in",
    begin: /[\w-]+(?=\()/
  },
  ATTRIBUTE_SELECTOR_MODE: {
    scope: "selector-attr",
    begin: /\[/,
    end: /\]/,
    illegal: "$",
    contains: [
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE
    ]
  },
  CSS_NUMBER_MODE: {
    scope: "number",
    begin: n.NUMBER_RE + "(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",
    relevance: 0
  },
  CSS_VARIABLE: {
    className: "attr",
    begin: /--[A-Za-z_][A-Za-z0-9_-]*/
  }
}), hM = [
  "a",
  "abbr",
  "address",
  "article",
  "aside",
  "audio",
  "b",
  "blockquote",
  "body",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "dd",
  "del",
  "details",
  "dfn",
  "div",
  "dl",
  "dt",
  "em",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "header",
  "hgroup",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "label",
  "legend",
  "li",
  "main",
  "mark",
  "menu",
  "nav",
  "object",
  "ol",
  "p",
  "q",
  "quote",
  "samp",
  "section",
  "span",
  "strong",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "tr",
  "ul",
  "var",
  "video"
], gM = [
  "any-hover",
  "any-pointer",
  "aspect-ratio",
  "color",
  "color-gamut",
  "color-index",
  "device-aspect-ratio",
  "device-height",
  "device-width",
  "display-mode",
  "forced-colors",
  "grid",
  "height",
  "hover",
  "inverted-colors",
  "monochrome",
  "orientation",
  "overflow-block",
  "overflow-inline",
  "pointer",
  "prefers-color-scheme",
  "prefers-contrast",
  "prefers-reduced-motion",
  "prefers-reduced-transparency",
  "resolution",
  "scan",
  "scripting",
  "update",
  "width",
  // TODO: find a better solution?
  "min-width",
  "max-width",
  "min-height",
  "max-height"
], mM = [
  "active",
  "any-link",
  "blank",
  "checked",
  "current",
  "default",
  "defined",
  "dir",
  // dir()
  "disabled",
  "drop",
  "empty",
  "enabled",
  "first",
  "first-child",
  "first-of-type",
  "fullscreen",
  "future",
  "focus",
  "focus-visible",
  "focus-within",
  "has",
  // has()
  "host",
  // host or host()
  "host-context",
  // host-context()
  "hover",
  "indeterminate",
  "in-range",
  "invalid",
  "is",
  // is()
  "lang",
  // lang()
  "last-child",
  "last-of-type",
  "left",
  "link",
  "local-link",
  "not",
  // not()
  "nth-child",
  // nth-child()
  "nth-col",
  // nth-col()
  "nth-last-child",
  // nth-last-child()
  "nth-last-col",
  // nth-last-col()
  "nth-last-of-type",
  //nth-last-of-type()
  "nth-of-type",
  //nth-of-type()
  "only-child",
  "only-of-type",
  "optional",
  "out-of-range",
  "past",
  "placeholder-shown",
  "read-only",
  "read-write",
  "required",
  "right",
  "root",
  "scope",
  "target",
  "target-within",
  "user-invalid",
  "valid",
  "visited",
  "where"
  // where()
], bM = [
  "after",
  "backdrop",
  "before",
  "cue",
  "cue-region",
  "first-letter",
  "first-line",
  "grammar-error",
  "marker",
  "part",
  "placeholder",
  "selection",
  "slotted",
  "spelling-error"
], yM = [
  "align-content",
  "align-items",
  "align-self",
  "all",
  "animation",
  "animation-delay",
  "animation-direction",
  "animation-duration",
  "animation-fill-mode",
  "animation-iteration-count",
  "animation-name",
  "animation-play-state",
  "animation-timing-function",
  "backface-visibility",
  "background",
  "background-attachment",
  "background-blend-mode",
  "background-clip",
  "background-color",
  "background-image",
  "background-origin",
  "background-position",
  "background-repeat",
  "background-size",
  "block-size",
  "border",
  "border-block",
  "border-block-color",
  "border-block-end",
  "border-block-end-color",
  "border-block-end-style",
  "border-block-end-width",
  "border-block-start",
  "border-block-start-color",
  "border-block-start-style",
  "border-block-start-width",
  "border-block-style",
  "border-block-width",
  "border-bottom",
  "border-bottom-color",
  "border-bottom-left-radius",
  "border-bottom-right-radius",
  "border-bottom-style",
  "border-bottom-width",
  "border-collapse",
  "border-color",
  "border-image",
  "border-image-outset",
  "border-image-repeat",
  "border-image-slice",
  "border-image-source",
  "border-image-width",
  "border-inline",
  "border-inline-color",
  "border-inline-end",
  "border-inline-end-color",
  "border-inline-end-style",
  "border-inline-end-width",
  "border-inline-start",
  "border-inline-start-color",
  "border-inline-start-style",
  "border-inline-start-width",
  "border-inline-style",
  "border-inline-width",
  "border-left",
  "border-left-color",
  "border-left-style",
  "border-left-width",
  "border-radius",
  "border-right",
  "border-right-color",
  "border-right-style",
  "border-right-width",
  "border-spacing",
  "border-style",
  "border-top",
  "border-top-color",
  "border-top-left-radius",
  "border-top-right-radius",
  "border-top-style",
  "border-top-width",
  "border-width",
  "bottom",
  "box-decoration-break",
  "box-shadow",
  "box-sizing",
  "break-after",
  "break-before",
  "break-inside",
  "caption-side",
  "caret-color",
  "clear",
  "clip",
  "clip-path",
  "clip-rule",
  "color",
  "column-count",
  "column-fill",
  "column-gap",
  "column-rule",
  "column-rule-color",
  "column-rule-style",
  "column-rule-width",
  "column-span",
  "column-width",
  "columns",
  "contain",
  "content",
  "content-visibility",
  "counter-increment",
  "counter-reset",
  "cue",
  "cue-after",
  "cue-before",
  "cursor",
  "direction",
  "display",
  "empty-cells",
  "filter",
  "flex",
  "flex-basis",
  "flex-direction",
  "flex-flow",
  "flex-grow",
  "flex-shrink",
  "flex-wrap",
  "float",
  "flow",
  "font",
  "font-display",
  "font-family",
  "font-feature-settings",
  "font-kerning",
  "font-language-override",
  "font-size",
  "font-size-adjust",
  "font-smoothing",
  "font-stretch",
  "font-style",
  "font-synthesis",
  "font-variant",
  "font-variant-caps",
  "font-variant-east-asian",
  "font-variant-ligatures",
  "font-variant-numeric",
  "font-variant-position",
  "font-variation-settings",
  "font-weight",
  "gap",
  "glyph-orientation-vertical",
  "grid",
  "grid-area",
  "grid-auto-columns",
  "grid-auto-flow",
  "grid-auto-rows",
  "grid-column",
  "grid-column-end",
  "grid-column-start",
  "grid-gap",
  "grid-row",
  "grid-row-end",
  "grid-row-start",
  "grid-template",
  "grid-template-areas",
  "grid-template-columns",
  "grid-template-rows",
  "hanging-punctuation",
  "height",
  "hyphens",
  "icon",
  "image-orientation",
  "image-rendering",
  "image-resolution",
  "ime-mode",
  "inline-size",
  "isolation",
  "justify-content",
  "left",
  "letter-spacing",
  "line-break",
  "line-height",
  "list-style",
  "list-style-image",
  "list-style-position",
  "list-style-type",
  "margin",
  "margin-block",
  "margin-block-end",
  "margin-block-start",
  "margin-bottom",
  "margin-inline",
  "margin-inline-end",
  "margin-inline-start",
  "margin-left",
  "margin-right",
  "margin-top",
  "marks",
  "mask",
  "mask-border",
  "mask-border-mode",
  "mask-border-outset",
  "mask-border-repeat",
  "mask-border-slice",
  "mask-border-source",
  "mask-border-width",
  "mask-clip",
  "mask-composite",
  "mask-image",
  "mask-mode",
  "mask-origin",
  "mask-position",
  "mask-repeat",
  "mask-size",
  "mask-type",
  "max-block-size",
  "max-height",
  "max-inline-size",
  "max-width",
  "min-block-size",
  "min-height",
  "min-inline-size",
  "min-width",
  "mix-blend-mode",
  "nav-down",
  "nav-index",
  "nav-left",
  "nav-right",
  "nav-up",
  "none",
  "normal",
  "object-fit",
  "object-position",
  "opacity",
  "order",
  "orphans",
  "outline",
  "outline-color",
  "outline-offset",
  "outline-style",
  "outline-width",
  "overflow",
  "overflow-wrap",
  "overflow-x",
  "overflow-y",
  "padding",
  "padding-block",
  "padding-block-end",
  "padding-block-start",
  "padding-bottom",
  "padding-inline",
  "padding-inline-end",
  "padding-inline-start",
  "padding-left",
  "padding-right",
  "padding-top",
  "page-break-after",
  "page-break-before",
  "page-break-inside",
  "pause",
  "pause-after",
  "pause-before",
  "perspective",
  "perspective-origin",
  "pointer-events",
  "position",
  "quotes",
  "resize",
  "rest",
  "rest-after",
  "rest-before",
  "right",
  "row-gap",
  "scroll-margin",
  "scroll-margin-block",
  "scroll-margin-block-end",
  "scroll-margin-block-start",
  "scroll-margin-bottom",
  "scroll-margin-inline",
  "scroll-margin-inline-end",
  "scroll-margin-inline-start",
  "scroll-margin-left",
  "scroll-margin-right",
  "scroll-margin-top",
  "scroll-padding",
  "scroll-padding-block",
  "scroll-padding-block-end",
  "scroll-padding-block-start",
  "scroll-padding-bottom",
  "scroll-padding-inline",
  "scroll-padding-inline-end",
  "scroll-padding-inline-start",
  "scroll-padding-left",
  "scroll-padding-right",
  "scroll-padding-top",
  "scroll-snap-align",
  "scroll-snap-stop",
  "scroll-snap-type",
  "scrollbar-color",
  "scrollbar-gutter",
  "scrollbar-width",
  "shape-image-threshold",
  "shape-margin",
  "shape-outside",
  "speak",
  "speak-as",
  "src",
  // @font-face
  "tab-size",
  "table-layout",
  "text-align",
  "text-align-all",
  "text-align-last",
  "text-combine-upright",
  "text-decoration",
  "text-decoration-color",
  "text-decoration-line",
  "text-decoration-style",
  "text-emphasis",
  "text-emphasis-color",
  "text-emphasis-position",
  "text-emphasis-style",
  "text-indent",
  "text-justify",
  "text-orientation",
  "text-overflow",
  "text-rendering",
  "text-shadow",
  "text-transform",
  "text-underline-position",
  "top",
  "transform",
  "transform-box",
  "transform-origin",
  "transform-style",
  "transition",
  "transition-delay",
  "transition-duration",
  "transition-property",
  "transition-timing-function",
  "unicode-bidi",
  "vertical-align",
  "visibility",
  "voice-balance",
  "voice-duration",
  "voice-family",
  "voice-pitch",
  "voice-range",
  "voice-rate",
  "voice-stress",
  "voice-volume",
  "white-space",
  "widows",
  "width",
  "will-change",
  "word-break",
  "word-spacing",
  "word-wrap",
  "writing-mode",
  "z-index"
  // reverse makes sure longer attributes `font-weight` are matched fully
  // instead of getting false positives on say `font`
].reverse();
function vM(n) {
  const e = pM(n), t = bM, r = mM, i = "@[a-z-]+", s = "and or not only", a = {
    className: "variable",
    begin: "(\\$" + "[a-zA-Z-][a-zA-Z0-9_-]*" + ")\\b",
    relevance: 0
  };
  return {
    name: "SCSS",
    case_insensitive: !0,
    illegal: "[=/|']",
    contains: [
      n.C_LINE_COMMENT_MODE,
      n.C_BLOCK_COMMENT_MODE,
      // to recognize keyframe 40% etc which are outside the scope of our
      // attribute value mode
      e.CSS_NUMBER_MODE,
      {
        className: "selector-id",
        begin: "#[A-Za-z0-9_-]+",
        relevance: 0
      },
      {
        className: "selector-class",
        begin: "\\.[A-Za-z0-9_-]+",
        relevance: 0
      },
      e.ATTRIBUTE_SELECTOR_MODE,
      {
        className: "selector-tag",
        begin: "\\b(" + hM.join("|") + ")\\b",
        // was there, before, but why?
        relevance: 0
      },
      {
        className: "selector-pseudo",
        begin: ":(" + r.join("|") + ")"
      },
      {
        className: "selector-pseudo",
        begin: ":(:)?(" + t.join("|") + ")"
      },
      a,
      {
        // pseudo-selector params
        begin: /\(/,
        end: /\)/,
        contains: [e.CSS_NUMBER_MODE]
      },
      e.CSS_VARIABLE,
      {
        className: "attribute",
        begin: "\\b(" + yM.join("|") + ")\\b"
      },
      { begin: "\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b" },
      {
        begin: /:/,
        end: /[;}{]/,
        relevance: 0,
        contains: [
          e.BLOCK_COMMENT,
          a,
          e.HEXCOLOR,
          e.CSS_NUMBER_MODE,
          n.QUOTE_STRING_MODE,
          n.APOS_STRING_MODE,
          e.IMPORTANT,
          e.FUNCTION_DISPATCH
        ]
      },
      // matching these here allows us to treat them more like regular CSS
      // rules so everything between the {} gets regular rule highlighting,
      // which is what we want for page and font-face
      {
        begin: "@(page|font-face)",
        keywords: {
          $pattern: i,
          keyword: "@page @font-face"
        }
      },
      {
        begin: "@",
        end: "[{;]",
        returnBegin: !0,
        keywords: {
          $pattern: /[a-z-]+/,
          keyword: s,
          attribute: gM.join(" ")
        },
        contains: [
          {
            begin: i,
            className: "keyword"
          },
          {
            begin: /[a-z-]+(?=:)/,
            className: "attribute"
          },
          a,
          n.QUOTE_STRING_MODE,
          n.APOS_STRING_MODE,
          e.HEXCOLOR,
          e.CSS_NUMBER_MODE
        ]
      },
      e.FUNCTION_DISPATCH
    ]
  };
}
function wM(n) {
  return {
    name: "Shell Session",
    aliases: [
      "console",
      "shellsession"
    ],
    contains: [
      {
        className: "meta.prompt",
        // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
        // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
        // echo /path/to/home > t.exe
        begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
        starts: {
          end: /[^\\](?=\s*$)/,
          subLanguage: "bash"
        }
      }
    ]
  };
}
function kM(n) {
  const e = n.regex, t = n.COMMENT("--", "$"), r = {
    className: "string",
    variants: [
      {
        begin: /'/,
        end: /'/,
        contains: [{ begin: /''/ }]
      }
    ]
  }, i = {
    begin: /"/,
    end: /"/,
    contains: [{ begin: /""/ }]
  }, s = [
    "true",
    "false",
    // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
    // "null",
    "unknown"
  ], o = [
    "double precision",
    "large object",
    "with timezone",
    "without timezone"
  ], a = [
    "bigint",
    "binary",
    "blob",
    "boolean",
    "char",
    "character",
    "clob",
    "date",
    "dec",
    "decfloat",
    "decimal",
    "float",
    "int",
    "integer",
    "interval",
    "nchar",
    "nclob",
    "national",
    "numeric",
    "real",
    "row",
    "smallint",
    "time",
    "timestamp",
    "varchar",
    "varying",
    // modifier (character varying)
    "varbinary"
  ], l = [
    "add",
    "asc",
    "collation",
    "desc",
    "final",
    "first",
    "last",
    "view"
  ], c = [
    "abs",
    "acos",
    "all",
    "allocate",
    "alter",
    "and",
    "any",
    "are",
    "array",
    "array_agg",
    "array_max_cardinality",
    "as",
    "asensitive",
    "asin",
    "asymmetric",
    "at",
    "atan",
    "atomic",
    "authorization",
    "avg",
    "begin",
    "begin_frame",
    "begin_partition",
    "between",
    "bigint",
    "binary",
    "blob",
    "boolean",
    "both",
    "by",
    "call",
    "called",
    "cardinality",
    "cascaded",
    "case",
    "cast",
    "ceil",
    "ceiling",
    "char",
    "char_length",
    "character",
    "character_length",
    "check",
    "classifier",
    "clob",
    "close",
    "coalesce",
    "collate",
    "collect",
    "column",
    "commit",
    "condition",
    "connect",
    "constraint",
    "contains",
    "convert",
    "copy",
    "corr",
    "corresponding",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "create",
    "cross",
    "cube",
    "cume_dist",
    "current",
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_row",
    "current_schema",
    "current_time",
    "current_timestamp",
    "current_path",
    "current_role",
    "current_transform_group_for_type",
    "current_user",
    "cursor",
    "cycle",
    "date",
    "day",
    "deallocate",
    "dec",
    "decimal",
    "decfloat",
    "declare",
    "default",
    "define",
    "delete",
    "dense_rank",
    "deref",
    "describe",
    "deterministic",
    "disconnect",
    "distinct",
    "double",
    "drop",
    "dynamic",
    "each",
    "element",
    "else",
    "empty",
    "end",
    "end_frame",
    "end_partition",
    "end-exec",
    "equals",
    "escape",
    "every",
    "except",
    "exec",
    "execute",
    "exists",
    "exp",
    "external",
    "extract",
    "false",
    "fetch",
    "filter",
    "first_value",
    "float",
    "floor",
    "for",
    "foreign",
    "frame_row",
    "free",
    "from",
    "full",
    "function",
    "fusion",
    "get",
    "global",
    "grant",
    "group",
    "grouping",
    "groups",
    "having",
    "hold",
    "hour",
    "identity",
    "in",
    "indicator",
    "initial",
    "inner",
    "inout",
    "insensitive",
    "insert",
    "int",
    "integer",
    "intersect",
    "intersection",
    "interval",
    "into",
    "is",
    "join",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "language",
    "large",
    "last_value",
    "lateral",
    "lead",
    "leading",
    "left",
    "like",
    "like_regex",
    "listagg",
    "ln",
    "local",
    "localtime",
    "localtimestamp",
    "log",
    "log10",
    "lower",
    "match",
    "match_number",
    "match_recognize",
    "matches",
    "max",
    "member",
    "merge",
    "method",
    "min",
    "minute",
    "mod",
    "modifies",
    "module",
    "month",
    "multiset",
    "national",
    "natural",
    "nchar",
    "nclob",
    "new",
    "no",
    "none",
    "normalize",
    "not",
    "nth_value",
    "ntile",
    "null",
    "nullif",
    "numeric",
    "octet_length",
    "occurrences_regex",
    "of",
    "offset",
    "old",
    "omit",
    "on",
    "one",
    "only",
    "open",
    "or",
    "order",
    "out",
    "outer",
    "over",
    "overlaps",
    "overlay",
    "parameter",
    "partition",
    "pattern",
    "per",
    "percent",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "period",
    "portion",
    "position",
    "position_regex",
    "power",
    "precedes",
    "precision",
    "prepare",
    "primary",
    "procedure",
    "ptf",
    "range",
    "rank",
    "reads",
    "real",
    "recursive",
    "ref",
    "references",
    "referencing",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "release",
    "result",
    "return",
    "returns",
    "revoke",
    "right",
    "rollback",
    "rollup",
    "row",
    "row_number",
    "rows",
    "running",
    "savepoint",
    "scope",
    "scroll",
    "search",
    "second",
    "seek",
    "select",
    "sensitive",
    "session_user",
    "set",
    "show",
    "similar",
    "sin",
    "sinh",
    "skip",
    "smallint",
    "some",
    "specific",
    "specifictype",
    "sql",
    "sqlexception",
    "sqlstate",
    "sqlwarning",
    "sqrt",
    "start",
    "static",
    "stddev_pop",
    "stddev_samp",
    "submultiset",
    "subset",
    "substring",
    "substring_regex",
    "succeeds",
    "sum",
    "symmetric",
    "system",
    "system_time",
    "system_user",
    "table",
    "tablesample",
    "tan",
    "tanh",
    "then",
    "time",
    "timestamp",
    "timezone_hour",
    "timezone_minute",
    "to",
    "trailing",
    "translate",
    "translate_regex",
    "translation",
    "treat",
    "trigger",
    "trim",
    "trim_array",
    "true",
    "truncate",
    "uescape",
    "union",
    "unique",
    "unknown",
    "unnest",
    "update",
    "upper",
    "user",
    "using",
    "value",
    "values",
    "value_of",
    "var_pop",
    "var_samp",
    "varbinary",
    "varchar",
    "varying",
    "versioning",
    "when",
    "whenever",
    "where",
    "width_bucket",
    "window",
    "with",
    "within",
    "without",
    "year"
  ], u = [
    "abs",
    "acos",
    "array_agg",
    "asin",
    "atan",
    "avg",
    "cast",
    "ceil",
    "ceiling",
    "coalesce",
    "corr",
    "cos",
    "cosh",
    "count",
    "covar_pop",
    "covar_samp",
    "cume_dist",
    "dense_rank",
    "deref",
    "element",
    "exp",
    "extract",
    "first_value",
    "floor",
    "json_array",
    "json_arrayagg",
    "json_exists",
    "json_object",
    "json_objectagg",
    "json_query",
    "json_table",
    "json_table_primitive",
    "json_value",
    "lag",
    "last_value",
    "lead",
    "listagg",
    "ln",
    "log",
    "log10",
    "lower",
    "max",
    "min",
    "mod",
    "nth_value",
    "ntile",
    "nullif",
    "percent_rank",
    "percentile_cont",
    "percentile_disc",
    "position",
    "position_regex",
    "power",
    "rank",
    "regr_avgx",
    "regr_avgy",
    "regr_count",
    "regr_intercept",
    "regr_r2",
    "regr_slope",
    "regr_sxx",
    "regr_sxy",
    "regr_syy",
    "row_number",
    "sin",
    "sinh",
    "sqrt",
    "stddev_pop",
    "stddev_samp",
    "substring",
    "substring_regex",
    "sum",
    "tan",
    "tanh",
    "translate",
    "translate_regex",
    "treat",
    "trim",
    "trim_array",
    "unnest",
    "upper",
    "value_of",
    "var_pop",
    "var_samp",
    "width_bucket"
  ], d = [
    "current_catalog",
    "current_date",
    "current_default_transform_group",
    "current_path",
    "current_role",
    "current_schema",
    "current_transform_group_for_type",
    "current_user",
    "session_user",
    "system_time",
    "system_user",
    "current_time",
    "localtime",
    "current_timestamp",
    "localtimestamp"
  ], f = [
    "create table",
    "insert into",
    "primary key",
    "foreign key",
    "not null",
    "alter table",
    "add constraint",
    "grouping sets",
    "on overflow",
    "character set",
    "respect nulls",
    "ignore nulls",
    "nulls first",
    "nulls last",
    "depth first",
    "breadth first"
  ], p = u, h = [
    ...c,
    ...l
  ].filter((k) => !u.includes(k)), g = {
    className: "variable",
    begin: /@[a-z0-9][a-z0-9_]*/
  }, m = {
    className: "operator",
    begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
    relevance: 0
  }, v = {
    begin: e.concat(/\b/, e.either(...p), /\s*\(/),
    relevance: 0,
    keywords: { built_in: p }
  };
  function y(k, {
    exceptions: b,
    when: x
  } = {}) {
    const w = x;
    return b = b || [], k.map((S) => S.match(/\|\d+$/) || b.includes(S) ? S : w(S) ? `${S}|0` : S);
  }
  return {
    name: "SQL",
    case_insensitive: !0,
    // does not include {} or HTML tags `</`
    illegal: /[{}]|<\//,
    keywords: {
      $pattern: /\b[\w\.]+/,
      keyword: y(h, { when: (k) => k.length < 3 }),
      literal: s,
      type: a,
      built_in: d
    },
    contains: [
      {
        begin: e.either(...f),
        relevance: 0,
        keywords: {
          $pattern: /[\w\.]+/,
          keyword: h.concat(f),
          literal: s,
          type: a
        }
      },
      {
        className: "type",
        begin: e.either(...o)
      },
      v,
      g,
      r,
      i,
      n.C_NUMBER_MODE,
      n.C_BLOCK_COMMENT_MODE,
      t,
      m
    ]
  };
}
function Cm(n) {
  return n ? typeof n == "string" ? n : n.source : null;
}
function ks(n) {
  return Ce("(?=", n, ")");
}
function Ce(...n) {
  return n.map((t) => Cm(t)).join("");
}
function EM(n) {
  const e = n[n.length - 1];
  return typeof e == "object" && e.constructor === Object ? (n.splice(n.length - 1, 1), e) : {};
}
function at(...n) {
  return "(" + (EM(n).capture ? "" : "?:") + n.map((r) => Cm(r)).join("|") + ")";
}
const Uc = (n) => Ce(
  /\b/,
  n,
  /\w$/.test(n) ? /\b/ : /\B/
), xM = [
  "Protocol",
  // contextual
  "Type"
  // contextual
].map(Uc), $f = [
  "init",
  "self"
].map(Uc), CM = [
  "Any",
  "Self"
], $a = [
  // strings below will be fed into the regular `keywords` engine while regex
  // will result in additional modes being created to scan for those keywords to
  // avoid conflicts with other rules
  "actor",
  "any",
  // contextual
  "associatedtype",
  "async",
  "await",
  /as\?/,
  // operator
  /as!/,
  // operator
  "as",
  // operator
  "borrowing",
  // contextual
  "break",
  "case",
  "catch",
  "class",
  "consume",
  // contextual
  "consuming",
  // contextual
  "continue",
  "convenience",
  // contextual
  "copy",
  // contextual
  "default",
  "defer",
  "deinit",
  "didSet",
  // contextual
  "distributed",
  "do",
  "dynamic",
  // contextual
  "each",
  "else",
  "enum",
  "extension",
  "fallthrough",
  /fileprivate\(set\)/,
  "fileprivate",
  "final",
  // contextual
  "for",
  "func",
  "get",
  // contextual
  "guard",
  "if",
  "import",
  "indirect",
  // contextual
  "infix",
  // contextual
  /init\?/,
  /init!/,
  "inout",
  /internal\(set\)/,
  "internal",
  "in",
  "is",
  // operator
  "isolated",
  // contextual
  "nonisolated",
  // contextual
  "lazy",
  // contextual
  "let",
  "macro",
  "mutating",
  // contextual
  "nonmutating",
  // contextual
  /open\(set\)/,
  // contextual
  "open",
  // contextual
  "operator",
  "optional",
  // contextual
  "override",
  // contextual
  "postfix",
  // contextual
  "precedencegroup",
  "prefix",
  // contextual
  /private\(set\)/,
  "private",
  "protocol",
  /public\(set\)/,
  "public",
  "repeat",
  "required",
  // contextual
  "rethrows",
  "return",
  "set",
  // contextual
  "some",
  // contextual
  "static",
  "struct",
  "subscript",
  "super",
  "switch",
  "throws",
  "throw",
  /try\?/,
  // operator
  /try!/,
  // operator
  "try",
  // operator
  "typealias",
  /unowned\(safe\)/,
  // contextual
  /unowned\(unsafe\)/,
  // contextual
  "unowned",
  // contextual
  "var",
  "weak",
  // contextual
  "where",
  "while",
  "willSet"
  // contextual
], Ff = [
  "false",
  "nil",
  "true"
], SM = [
  "assignment",
  "associativity",
  "higherThan",
  "left",
  "lowerThan",
  "none",
  "right"
], _M = [
  "#colorLiteral",
  "#column",
  "#dsohandle",
  "#else",
  "#elseif",
  "#endif",
  "#error",
  "#file",
  "#fileID",
  "#fileLiteral",
  "#filePath",
  "#function",
  "#if",
  "#imageLiteral",
  "#keyPath",
  "#line",
  "#selector",
  "#sourceLocation",
  "#warning"
], zf = [
  "abs",
  "all",
  "any",
  "assert",
  "assertionFailure",
  "debugPrint",
  "dump",
  "fatalError",
  "getVaList",
  "isKnownUniquelyReferenced",
  "max",
  "min",
  "numericCast",
  "pointwiseMax",
  "pointwiseMin",
  "precondition",
  "preconditionFailure",
  "print",
  "readLine",
  "repeatElement",
  "sequence",
  "stride",
  "swap",
  "swift_unboxFromSwiftValueWithType",
  "transcode",
  "type",
  "unsafeBitCast",
  "unsafeDowncast",
  "withExtendedLifetime",
  "withUnsafeMutablePointer",
  "withUnsafePointer",
  "withVaList",
  "withoutActuallyEscaping",
  "zip"
], Sm = at(
  /[/=\-+!*%<>&|^~?]/,
  /[\u00A1-\u00A7]/,
  /[\u00A9\u00AB]/,
  /[\u00AC\u00AE]/,
  /[\u00B0\u00B1]/,
  /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
  /[\u2016-\u2017]/,
  /[\u2020-\u2027]/,
  /[\u2030-\u203E]/,
  /[\u2041-\u2053]/,
  /[\u2055-\u205E]/,
  /[\u2190-\u23FF]/,
  /[\u2500-\u2775]/,
  /[\u2794-\u2BFF]/,
  /[\u2E00-\u2E7F]/,
  /[\u3001-\u3003]/,
  /[\u3008-\u3020]/,
  /[\u3030]/
), _m = at(
  Sm,
  /[\u0300-\u036F]/,
  /[\u1DC0-\u1DFF]/,
  /[\u20D0-\u20FF]/,
  /[\uFE00-\uFE0F]/,
  /[\uFE20-\uFE2F]/
  // TODO: The following characters are also allowed, but the regex isn't supported yet.
  // /[\u{E0100}-\u{E01EF}]/u
), Fa = Ce(Sm, _m, "*"), Mm = at(
  /[a-zA-Z_]/,
  /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
  /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
  /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
  /[\u1E00-\u1FFF]/,
  /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
  /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
  /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
  /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
  /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
  /[\uFE47-\uFEFE\uFF00-\uFFFD]/
  // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
  // The following characters are also allowed, but the regexes aren't supported yet.
  // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
  // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
  // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
  // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
), yo = at(
  Mm,
  /\d/,
  /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
), rn = Ce(Mm, yo, "*"), za = Ce(/[A-Z]/, yo, "*"), MM = [
  "attached",
  "autoclosure",
  Ce(/convention\(/, at("swift", "block", "c"), /\)/),
  "discardableResult",
  "dynamicCallable",
  "dynamicMemberLookup",
  "escaping",
  "freestanding",
  "frozen",
  "GKInspectable",
  "IBAction",
  "IBDesignable",
  "IBInspectable",
  "IBOutlet",
  "IBSegueAction",
  "inlinable",
  "main",
  "nonobjc",
  "NSApplicationMain",
  "NSCopying",
  "NSManaged",
  Ce(/objc\(/, rn, /\)/),
  "objc",
  "objcMembers",
  "propertyWrapper",
  "requires_stored_property_inits",
  "resultBuilder",
  "Sendable",
  "testable",
  "UIApplicationMain",
  "unchecked",
  "unknown",
  "usableFromInline",
  "warn_unqualified_access"
], AM = [
  "iOS",
  "iOSApplicationExtension",
  "macOS",
  "macOSApplicationExtension",
  "macCatalyst",
  "macCatalystApplicationExtension",
  "watchOS",
  "watchOSApplicationExtension",
  "tvOS",
  "tvOSApplicationExtension",
  "swift"
];
function TM(n) {
  const e = {
    match: /\s+/,
    relevance: 0
  }, t = n.COMMENT(
    "/\\*",
    "\\*/",
    { contains: ["self"] }
  ), r = [
    n.C_LINE_COMMENT_MODE,
    t
  ], i = {
    match: [
      /\./,
      at(...xM, ...$f)
    ],
    className: { 2: "keyword" }
  }, s = {
    // Consume .keyword to prevent highlighting properties and methods as keywords.
    match: Ce(/\./, at(...$a)),
    relevance: 0
  }, o = $a.filter((de) => typeof de == "string").concat(["_|0"]), a = $a.filter((de) => typeof de != "string").concat(CM).map(Uc), l = { variants: [
    {
      className: "keyword",
      match: at(...a, ...$f)
    }
  ] }, c = {
    $pattern: at(
      /\b\w+/,
      // regular keywords
      /#\w+/
      // number keywords
    ),
    keyword: o.concat(_M),
    literal: Ff
  }, u = [
    i,
    s,
    l
  ], d = {
    // Consume .built_in to prevent highlighting properties and methods.
    match: Ce(/\./, at(...zf)),
    relevance: 0
  }, f = {
    className: "built_in",
    match: Ce(/\b/, at(...zf), /(?=\()/)
  }, p = [
    d,
    f
  ], h = {
    // Prevent -> from being highlighting as an operator.
    match: /->/,
    relevance: 0
  }, g = {
    className: "operator",
    relevance: 0,
    variants: [
      { match: Fa },
      {
        // dot-operator: only operators that start with a dot are allowed to use dots as
        // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
        // characters that may also include dots.
        match: `\\.(\\.|${_m})+`
      }
    ]
  }, m = [
    h,
    g
  ], v = "([0-9]_*)+", y = "([0-9a-fA-F]_*)+", k = {
    className: "number",
    relevance: 0,
    variants: [
      // decimal floating-point-literal (subsumes decimal-literal)
      { match: `\\b(${v})(\\.(${v}))?([eE][+-]?(${v}))?\\b` },
      // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
      { match: `\\b0x(${y})(\\.(${y}))?([pP][+-]?(${v}))?\\b` },
      // octal-literal
      { match: /\b0o([0-7]_*)+\b/ },
      // binary-literal
      { match: /\b0b([01]_*)+\b/ }
    ]
  }, b = (de = "") => ({
    className: "subst",
    variants: [
      { match: Ce(/\\/, de, /[0\\tnr"']/) },
      { match: Ce(/\\/, de, /u\{[0-9a-fA-F]{1,8}\}/) }
    ]
  }), x = (de = "") => ({
    className: "subst",
    match: Ce(/\\/, de, /[\t ]*(?:[\r\n]|\r\n)/)
  }), w = (de = "") => ({
    className: "subst",
    label: "interpol",
    begin: Ce(/\\/, de, /\(/),
    end: /\)/
  }), S = (de = "") => ({
    begin: Ce(de, /"""/),
    end: Ce(/"""/, de),
    contains: [
      b(de),
      x(de),
      w(de)
    ]
  }), T = (de = "") => ({
    begin: Ce(de, /"/),
    end: Ce(/"/, de),
    contains: [
      b(de),
      w(de)
    ]
  }), M = {
    className: "string",
    variants: [
      S(),
      S("#"),
      S("##"),
      S("###"),
      T(),
      T("#"),
      T("##"),
      T("###")
    ]
  }, L = [
    n.BACKSLASH_ESCAPE,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [n.BACKSLASH_ESCAPE]
    }
  ], z = {
    begin: /\/[^\s](?=[^/\n]*\/)/,
    end: /\//,
    contains: L
  }, G = (de) => {
    const Ae = Ce(de, /\//), Qe = Ce(/\//, de);
    return {
      begin: Ae,
      end: Qe,
      contains: [
        ...L,
        {
          scope: "comment",
          begin: `#(?!.*${Qe})`,
          end: /$/
        }
      ]
    };
  }, q = {
    scope: "regexp",
    variants: [
      G("###"),
      G("##"),
      G("#"),
      z
    ]
  }, A = { match: Ce(/`/, rn, /`/) }, H = {
    className: "variable",
    match: /\$\d+/
  }, C = {
    className: "variable",
    match: `\\$${yo}+`
  }, E = [
    A,
    H,
    C
  ], _ = {
    match: /(@|#(un)?)available/,
    scope: "keyword",
    starts: { contains: [
      {
        begin: /\(/,
        end: /\)/,
        keywords: AM,
        contains: [
          ...m,
          k,
          M
        ]
      }
    ] }
  }, D = {
    scope: "keyword",
    match: Ce(/@/, at(...MM))
  }, P = {
    scope: "meta",
    match: Ce(/@/, rn)
  }, W = [
    _,
    D,
    P
  ], ee = {
    match: ks(/\b[A-Z]/),
    relevance: 0,
    contains: [
      {
        // Common Apple frameworks, for relevance boost
        className: "type",
        match: Ce(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, yo, "+")
      },
      {
        // Type identifier
        className: "type",
        match: za,
        relevance: 0
      },
      {
        // Optional type
        match: /[?!]+/,
        relevance: 0
      },
      {
        // Variadic parameter
        match: /\.\.\./,
        relevance: 0
      },
      {
        // Protocol composition
        match: Ce(/\s+&\s+/, ks(za)),
        relevance: 0
      }
    ]
  }, he = {
    begin: /</,
    end: />/,
    keywords: c,
    contains: [
      ...r,
      ...u,
      ...W,
      h,
      ee
    ]
  };
  ee.contains.push(he);
  const we = {
    match: Ce(rn, /\s*:/),
    keywords: "_|0",
    relevance: 0
  }, ue = {
    begin: /\(/,
    end: /\)/,
    relevance: 0,
    keywords: c,
    contains: [
      "self",
      we,
      ...r,
      q,
      ...u,
      ...p,
      ...m,
      k,
      M,
      ...E,
      ...W,
      ee
    ]
  }, _e = {
    begin: /</,
    end: />/,
    keywords: "repeat each",
    contains: [
      ...r,
      ee
    ]
  }, st = {
    begin: at(
      ks(Ce(rn, /\s*:/)),
      ks(Ce(rn, /\s+/, rn, /\s*:/))
    ),
    end: /:/,
    relevance: 0,
    contains: [
      {
        className: "keyword",
        match: /\b_\b/
      },
      {
        className: "params",
        match: rn
      }
    ]
  }, ze = {
    begin: /\(/,
    end: /\)/,
    keywords: c,
    contains: [
      st,
      ...r,
      ...u,
      ...m,
      k,
      M,
      ...W,
      ee,
      ue
    ],
    endsParent: !0,
    illegal: /["']/
  }, ft = {
    match: [
      /(func|macro)/,
      /\s+/,
      at(A.match, rn, Fa)
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      _e,
      ze,
      e
    ],
    illegal: [
      /\[/,
      /%/
    ]
  }, ot = {
    match: [
      /\b(?:subscript|init[?!]?)/,
      /\s*(?=[<(])/
    ],
    className: { 1: "keyword" },
    contains: [
      _e,
      ze,
      e
    ],
    illegal: /\[|%/
  }, vt = {
    match: [
      /operator/,
      /\s+/,
      Fa
    ],
    className: {
      1: "keyword",
      3: "title"
    }
  }, pt = {
    begin: [
      /precedencegroup/,
      /\s+/,
      za
    ],
    className: {
      1: "keyword",
      3: "title"
    },
    contains: [ee],
    keywords: [
      ...SM,
      ...Ff
    ],
    end: /}/
  };
  for (const de of M.variants) {
    const Ae = de.contains.find((Oe) => Oe.label === "interpol");
    Ae.keywords = c;
    const Qe = [
      ...u,
      ...p,
      ...m,
      k,
      M,
      ...E
    ];
    Ae.contains = [
      ...Qe,
      {
        begin: /\(/,
        end: /\)/,
        contains: [
          "self",
          ...Qe
        ]
      }
    ];
  }
  return {
    name: "Swift",
    keywords: c,
    contains: [
      ...r,
      ft,
      ot,
      {
        beginKeywords: "struct protocol class extension enum actor",
        end: "\\{",
        excludeEnd: !0,
        keywords: c,
        contains: [
          n.inherit(n.TITLE_MODE, {
            className: "title.class",
            begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
          }),
          ...u
        ]
      },
      vt,
      pt,
      {
        beginKeywords: "import",
        end: /$/,
        contains: [...r],
        relevance: 0
      },
      q,
      ...u,
      ...p,
      ...m,
      k,
      M,
      ...E,
      ...W,
      ee,
      ue
    ]
  };
}
const vo = "[A-Za-z$_][0-9A-Za-z$_]*", Am = [
  "as",
  // for exports
  "in",
  "of",
  "if",
  "for",
  "while",
  "finally",
  "var",
  "new",
  "function",
  "do",
  "return",
  "void",
  "else",
  "break",
  "catch",
  "instanceof",
  "with",
  "throw",
  "case",
  "default",
  "try",
  "switch",
  "continue",
  "typeof",
  "delete",
  "let",
  "yield",
  "const",
  "class",
  // JS handles these with a special rule
  // "get",
  // "set",
  "debugger",
  "async",
  "await",
  "static",
  "import",
  "from",
  "export",
  "extends"
], Tm = [
  "true",
  "false",
  "null",
  "undefined",
  "NaN",
  "Infinity"
], Nm = [
  // Fundamental objects
  "Object",
  "Function",
  "Boolean",
  "Symbol",
  // numbers and dates
  "Math",
  "Date",
  "Number",
  "BigInt",
  // text
  "String",
  "RegExp",
  // Indexed collections
  "Array",
  "Float32Array",
  "Float64Array",
  "Int8Array",
  "Uint8Array",
  "Uint8ClampedArray",
  "Int16Array",
  "Int32Array",
  "Uint16Array",
  "Uint32Array",
  "BigInt64Array",
  "BigUint64Array",
  // Keyed collections
  "Set",
  "Map",
  "WeakSet",
  "WeakMap",
  // Structured data
  "ArrayBuffer",
  "SharedArrayBuffer",
  "Atomics",
  "DataView",
  "JSON",
  // Control abstraction objects
  "Promise",
  "Generator",
  "GeneratorFunction",
  "AsyncFunction",
  // Reflection
  "Reflect",
  "Proxy",
  // Internationalization
  "Intl",
  // WebAssembly
  "WebAssembly"
], Om = [
  "Error",
  "EvalError",
  "InternalError",
  "RangeError",
  "ReferenceError",
  "SyntaxError",
  "TypeError",
  "URIError"
], Lm = [
  "setInterval",
  "setTimeout",
  "clearInterval",
  "clearTimeout",
  "require",
  "exports",
  "eval",
  "isFinite",
  "isNaN",
  "parseFloat",
  "parseInt",
  "decodeURI",
  "decodeURIComponent",
  "encodeURI",
  "encodeURIComponent",
  "escape",
  "unescape"
], Rm = [
  "arguments",
  "this",
  "super",
  "console",
  "window",
  "document",
  "localStorage",
  "sessionStorage",
  "module",
  "global"
  // Node.js
], Dm = [].concat(
  Lm,
  Nm,
  Om
);
function NM(n) {
  const e = n.regex, t = (_, { after: D }) => {
    const P = "</" + _[0].slice(1);
    return _.input.indexOf(P, D) !== -1;
  }, r = vo, i = {
    begin: "<>",
    end: "</>"
  }, s = /<[A-Za-z0-9\\._:-]+\s*\/>/, o = {
    begin: /<[A-Za-z0-9\\._:-]+/,
    end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
    /**
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    isTrulyOpeningTag: (_, D) => {
      const P = _[0].length + _.index, W = _.input[P];
      if (
        // HTML should not include another raw `<` inside a tag
        // nested type?
        // `<Array<Array<number>>`, etc.
        W === "<" || // the , gives away that this is not HTML
        // `<T, A extends keyof T, V>`
        W === ","
      ) {
        D.ignoreMatch();
        return;
      }
      W === ">" && (t(_, { after: P }) || D.ignoreMatch());
      let ee;
      const he = _.input.substring(P);
      if (ee = he.match(/^\s*=/)) {
        D.ignoreMatch();
        return;
      }
      if ((ee = he.match(/^\s+extends\s+/)) && ee.index === 0) {
        D.ignoreMatch();
        return;
      }
    }
  }, a = {
    $pattern: vo,
    keyword: Am,
    literal: Tm,
    built_in: Dm,
    "variable.language": Rm
  }, l = "[0-9](_?[0-9])*", c = `\\.(${l})`, u = "0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*", d = {
    className: "number",
    variants: [
      // DecimalLiteral
      { begin: `(\\b(${u})((${c})|\\.)?|(${c}))[eE][+-]?(${l})\\b` },
      { begin: `\\b(${u})\\b((${c})\\b|\\.)?|(${c})\\b` },
      // DecimalBigIntegerLiteral
      { begin: "\\b(0|[1-9](_?[0-9])*)n\\b" },
      // NonDecimalIntegerLiteral
      { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
      { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
      { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
      // LegacyOctalIntegerLiteral (does not include underscore separators)
      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
      { begin: "\\b0[0-7]+n?\\b" }
    ],
    relevance: 0
  }, f = {
    className: "subst",
    begin: "\\$\\{",
    end: "\\}",
    keywords: a,
    contains: []
    // defined later
  }, p = {
    begin: "html`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "xml"
    }
  }, h = {
    begin: "css`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "css"
    }
  }, g = {
    begin: "gql`",
    end: "",
    starts: {
      end: "`",
      returnEnd: !1,
      contains: [
        n.BACKSLASH_ESCAPE,
        f
      ],
      subLanguage: "graphql"
    }
  }, m = {
    className: "string",
    begin: "`",
    end: "`",
    contains: [
      n.BACKSLASH_ESCAPE,
      f
    ]
  }, y = {
    className: "comment",
    variants: [
      n.COMMENT(
        /\/\*\*(?!\/)/,
        "\\*/",
        {
          relevance: 0,
          contains: [
            {
              begin: "(?=@[A-Za-z]+)",
              relevance: 0,
              contains: [
                {
                  className: "doctag",
                  begin: "@[A-Za-z]+"
                },
                {
                  className: "type",
                  begin: "\\{",
                  end: "\\}",
                  excludeEnd: !0,
                  excludeBegin: !0,
                  relevance: 0
                },
                {
                  className: "variable",
                  begin: r + "(?=\\s*(-)|$)",
                  endsParent: !0,
                  relevance: 0
                },
                // eat spaces (not newlines) so we can find
                // types or variables
                {
                  begin: /(?=[^\n])\s/,
                  relevance: 0
                }
              ]
            }
          ]
        }
      ),
      n.C_BLOCK_COMMENT_MODE,
      n.C_LINE_COMMENT_MODE
    ]
  }, k = [
    n.APOS_STRING_MODE,
    n.QUOTE_STRING_MODE,
    p,
    h,
    g,
    m,
    // Skip numbers when they are part of a variable name
    { match: /\$\d+/ },
    d
    // This is intentional:
    // See https://github.com/highlightjs/highlight.js/issues/3288
    // hljs.REGEXP_MODE
  ];
  f.contains = k.concat({
    // we need to pair up {} inside our subst to prevent
    // it from ending too early by matching another }
    begin: /\{/,
    end: /\}/,
    keywords: a,
    contains: [
      "self"
    ].concat(k)
  });
  const b = [].concat(y, f.contains), x = b.concat([
    // eat recursive parens in sub expressions
    {
      begin: /\(/,
      end: /\)/,
      keywords: a,
      contains: ["self"].concat(b)
    }
  ]), w = {
    className: "params",
    begin: /\(/,
    end: /\)/,
    excludeBegin: !0,
    excludeEnd: !0,
    keywords: a,
    contains: x
  }, S = {
    variants: [
      // class Car extends vehicle
      {
        match: [
          /class/,
          /\s+/,
          r,
          /\s+/,
          /extends/,
          /\s+/,
          e.concat(r, "(", e.concat(/\./, r), ")*")
        ],
        scope: {
          1: "keyword",
          3: "title.class",
          5: "keyword",
          7: "title.class.inherited"
        }
      },
      // class Car
      {
        match: [
          /class/,
          /\s+/,
          r
        ],
        scope: {
          1: "keyword",
          3: "title.class"
        }
      }
    ]
  }, T = {
    relevance: 0,
    match: e.either(
      // Hard coded exceptions
      /\bJSON/,
      // Float32Array, OutT
      /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
      // CSSFactory, CSSFactoryT
      /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
      // FPs, FPsT
      /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/
      // P
      // single letters are not highlighted
      // BLAH
      // this will be flagged as a UPPER_CASE_CONSTANT instead
    ),
    className: "title.class",
    keywords: {
      _: [
        // se we still get relevance credit for JS library classes
        ...Nm,
        ...Om
      ]
    }
  }, M = {
    label: "use_strict",
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use (strict|asm)['"]/
  }, L = {
    variants: [
      {
        match: [
          /function/,
          /\s+/,
          r,
          /(?=\s*\()/
        ]
      },
      // anonymous function
      {
        match: [
          /function/,
          /\s*(?=\()/
        ]
      }
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    label: "func.def",
    contains: [w],
    illegal: /%/
  }, z = {
    relevance: 0,
    match: /\b[A-Z][A-Z_0-9]+\b/,
    className: "variable.constant"
  };
  function G(_) {
    return e.concat("(?!", _.join("|"), ")");
  }
  const q = {
    match: e.concat(
      /\b/,
      G([
        ...Lm,
        "super",
        "import"
      ]),
      r,
      e.lookahead(/\(/)
    ),
    className: "title.function",
    relevance: 0
  }, A = {
    begin: e.concat(/\./, e.lookahead(
      e.concat(r, /(?![0-9A-Za-z$_(])/)
    )),
    end: r,
    excludeBegin: !0,
    keywords: "prototype",
    className: "property",
    relevance: 0
  }, H = {
    match: [
      /get|set/,
      /\s+/,
      r,
      /(?=\()/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      {
        // eat to avoid empty params
        begin: /\(\)/
      },
      w
    ]
  }, C = "(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|" + n.UNDERSCORE_IDENT_RE + ")\\s*=>", E = {
    match: [
      /const|var|let/,
      /\s+/,
      r,
      /\s*/,
      /=\s*/,
      /(async\s*)?/,
      // async is optional
      e.lookahead(C)
    ],
    keywords: "async",
    className: {
      1: "keyword",
      3: "title.function"
    },
    contains: [
      w
    ]
  };
  return {
    name: "JavaScript",
    aliases: ["js", "jsx", "mjs", "cjs"],
    keywords: a,
    // this will be extended by TypeScript
    exports: { PARAMS_CONTAINS: x, CLASS_REFERENCE: T },
    illegal: /#(?![$_A-z])/,
    contains: [
      n.SHEBANG({
        label: "shebang",
        binary: "node",
        relevance: 5
      }),
      M,
      n.APOS_STRING_MODE,
      n.QUOTE_STRING_MODE,
      p,
      h,
      g,
      m,
      y,
      // Skip numbers when they are part of a variable name
      { match: /\$\d+/ },
      d,
      T,
      {
        className: "attr",
        begin: r + e.lookahead(":"),
        relevance: 0
      },
      E,
      {
        // "value" container
        begin: "(" + n.RE_STARTERS_RE + "|\\b(case|return|throw)\\b)\\s*",
        keywords: "return throw case",
        relevance: 0,
        contains: [
          y,
          n.REGEXP_MODE,
          {
            className: "function",
            // we have to count the parens to make sure we actually have the
            // correct bounding ( ) before the =>.  There could be any number of
            // sub-expressions inside also surrounded by parens.
            begin: C,
            returnBegin: !0,
            end: "\\s*=>",
            contains: [
              {
                className: "params",
                variants: [
                  {
                    begin: n.UNDERSCORE_IDENT_RE,
                    relevance: 0
                  },
                  {
                    className: null,
                    begin: /\(\s*\)/,
                    skip: !0
                  },
                  {
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: !0,
                    excludeEnd: !0,
                    keywords: a,
                    contains: x
                  }
                ]
              }
            ]
          },
          {
            // could be a comma delimited list of params to a function call
            begin: /,/,
            relevance: 0
          },
          {
            match: /\s+/,
            relevance: 0
          },
          {
            // JSX
            variants: [
              { begin: i.begin, end: i.end },
              { match: s },
              {
                begin: o.begin,
                // we carefully check the opening tag to see if it truly
                // is a tag and not a false positive
                "on:begin": o.isTrulyOpeningTag,
                end: o.end
              }
            ],
            subLanguage: "xml",
            contains: [
              {
                begin: o.begin,
                end: o.end,
                skip: !0,
                contains: ["self"]
              }
            ]
          }
        ]
      },
      L,
      {
        // prevent this from getting swallowed up by function
        // since they appear "function like"
        beginKeywords: "while if switch catch for"
      },
      {
        // we have to count the parens to make sure we actually have the correct
        // bounding ( ).  There could be any number of sub-expressions inside
        // also surrounded by parens.
        begin: "\\b(?!function)" + n.UNDERSCORE_IDENT_RE + "\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",
        // end parens
        returnBegin: !0,
        label: "func.def",
        contains: [
          w,
          n.inherit(n.TITLE_MODE, { begin: r, className: "title.function" })
        ]
      },
      // catch ... so it won't trigger the property rule below
      {
        match: /\.\.\./,
        relevance: 0
      },
      A,
      // hack: prevents detection of keywords in some circumstances
      // .keyword()
      // $keyword = x
      {
        match: "\\$" + r,
        relevance: 0
      },
      {
        match: [/\bconstructor(?=\s*\()/],
        className: { 1: "title.function" },
        contains: [w]
      },
      q,
      z,
      S,
      H,
      {
        match: /\$[(.]/
        // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
      }
    ]
  };
}
function OM(n) {
  const e = NM(n), t = vo, r = [
    "any",
    "void",
    "number",
    "boolean",
    "string",
    "object",
    "never",
    "symbol",
    "bigint",
    "unknown"
  ], i = {
    beginKeywords: "namespace",
    end: /\{/,
    excludeEnd: !0,
    contains: [e.exports.CLASS_REFERENCE]
  }, s = {
    beginKeywords: "interface",
    end: /\{/,
    excludeEnd: !0,
    keywords: {
      keyword: "interface extends",
      built_in: r
    },
    contains: [e.exports.CLASS_REFERENCE]
  }, o = {
    className: "meta",
    relevance: 10,
    begin: /^\s*['"]use strict['"]/
  }, a = [
    "type",
    "namespace",
    "interface",
    "public",
    "private",
    "protected",
    "implements",
    "declare",
    "abstract",
    "readonly",
    "enum",
    "override"
  ], l = {
    $pattern: vo,
    keyword: Am.concat(a),
    literal: Tm,
    built_in: Dm.concat(r),
    "variable.language": Rm
  }, c = {
    className: "meta",
    begin: "@" + t
  }, u = (f, p, h) => {
    const g = f.contains.findIndex((m) => m.label === p);
    if (g === -1)
      throw new Error("can not find mode to replace");
    f.contains.splice(g, 1, h);
  };
  Object.assign(e.keywords, l), e.exports.PARAMS_CONTAINS.push(c), e.contains = e.contains.concat([
    c,
    i,
    s
  ]), u(e, "shebang", n.SHEBANG()), u(e, "use_strict", o);
  const d = e.contains.find((f) => f.label === "func.def");
  return d.relevance = 0, Object.assign(e, {
    name: "TypeScript",
    aliases: [
      "ts",
      "tsx",
      "mts",
      "cts"
    ]
  }), e;
}
function LM(n) {
  const e = n.regex, t = {
    className: "string",
    begin: /"(""|[^/n])"C\b/
  }, r = {
    className: "string",
    begin: /"/,
    end: /"/,
    illegal: /\n/,
    contains: [
      {
        // double quote escape
        begin: /""/
      }
    ]
  }, i = /\d{1,2}\/\d{1,2}\/\d{4}/, s = /\d{4}-\d{1,2}-\d{1,2}/, o = /(\d|1[012])(:\d+){0,2} *(AM|PM)/, a = /\d{1,2}(:\d{1,2}){1,2}/, l = {
    className: "literal",
    variants: [
      {
        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
        begin: e.concat(/# */, e.either(s, i), / *#/)
      },
      {
        // #H:mm[:ss]# (24h Time)
        begin: e.concat(/# */, a, / *#/)
      },
      {
        // #h[:mm[:ss]] A# (12h Time)
        begin: e.concat(/# */, o, / *#/)
      },
      {
        // date plus time
        begin: e.concat(
          /# */,
          e.either(s, i),
          / +/,
          e.either(o, a),
          / *#/
        )
      }
    ]
  }, c = {
    className: "number",
    relevance: 0,
    variants: [
      {
        // Float
        begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/
      },
      {
        // Integer (base 10)
        begin: /\b\d[\d_]*((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 16)
        begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 8)
        begin: /&O[0-7_]+((U?[SIL])|[%&])?/
      },
      {
        // Integer (base 2)
        begin: /&B[01_]+((U?[SIL])|[%&])?/
      }
    ]
  }, u = {
    className: "label",
    begin: /^\w+:/
  }, d = n.COMMENT(/'''/, /$/, { contains: [
    {
      className: "doctag",
      begin: /<\/?/,
      end: />/
    }
  ] }), f = n.COMMENT(null, /$/, { variants: [
    { begin: /'/ },
    {
      // TODO: Use multi-class for leading spaces
      begin: /([\t ]|^)REM(?=\s)/
    }
  ] });
  return {
    name: "Visual Basic .NET",
    aliases: ["vb"],
    case_insensitive: !0,
    classNameAliases: { label: "symbol" },
    keywords: {
      keyword: "addhandler alias aggregate ansi as async assembly auto binary by byref byval call case catch class compare const continue custom declare default delegate dim distinct do each equals else elseif end enum erase error event exit explicit finally for friend from function get global goto group handles if implements imports in inherits interface into iterator join key let lib loop me mid module mustinherit mustoverride mybase myclass namespace narrowing new next notinheritable notoverridable of off on operator option optional order overloads overridable overrides paramarray partial preserve private property protected public raiseevent readonly redim removehandler resume return select set shadows shared skip static step stop structure strict sub synclock take text then throw to try unicode until using when where while widening with withevents writeonly yield",
      built_in: (
        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
        "addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort"
      ),
      type: (
        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
        "boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort"
      ),
      literal: "true false nothing"
    },
    illegal: "//|\\{|\\}|endif|gosub|variant|wend|^\\$ ",
    contains: [
      t,
      r,
      l,
      c,
      u,
      d,
      f,
      {
        className: "meta",
        // TODO: Use multi-class for indentation once available
        begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
        end: /$/,
        keywords: { keyword: "const disable else elseif enable end externalsource if region then" },
        contains: [f]
      }
    ]
  };
}
function RM(n) {
  n.regex;
  const e = n.COMMENT(/\(;/, /;\)/);
  e.contains.push("self");
  const t = n.COMMENT(/;;/, /$/), r = [
    "anyfunc",
    "block",
    "br",
    "br_if",
    "br_table",
    "call",
    "call_indirect",
    "data",
    "drop",
    "elem",
    "else",
    "end",
    "export",
    "func",
    "global.get",
    "global.set",
    "local.get",
    "local.set",
    "local.tee",
    "get_global",
    "get_local",
    "global",
    "if",
    "import",
    "local",
    "loop",
    "memory",
    "memory.grow",
    "memory.size",
    "module",
    "mut",
    "nop",
    "offset",
    "param",
    "result",
    "return",
    "select",
    "set_global",
    "set_local",
    "start",
    "table",
    "tee_local",
    "then",
    "type",
    "unreachable"
  ], i = {
    begin: [
      /(?:func|call|call_indirect)/,
      /\s+/,
      /\$[^\s)]+/
    ],
    className: {
      1: "keyword",
      3: "title.function"
    }
  }, s = {
    className: "variable",
    begin: /\$[\w_]+/
  }, o = {
    match: /(\((?!;)|\))+/,
    className: "punctuation",
    relevance: 0
  }, a = {
    className: "number",
    relevance: 0,
    // borrowed from Prism, TODO: split out into variants
    match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
  }, l = {
    // look-ahead prevents us from gobbling up opcodes
    match: /(i32|i64|f32|f64)(?!\.)/,
    className: "type"
  }, c = {
    className: "keyword",
    // borrowed from Prism, TODO: split out into variants
    match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
  };
  return {
    name: "WebAssembly",
    keywords: {
      $pattern: /[\w.]+/,
      keyword: r
    },
    contains: [
      t,
      e,
      {
        match: [
          /(?:offset|align)/,
          /\s*/,
          /=/
        ],
        className: {
          1: "keyword",
          3: "operator"
        }
      },
      s,
      o,
      i,
      n.QUOTE_STRING_MODE,
      l,
      c,
      a
    ]
  };
}
function DM(n) {
  const e = n.regex, t = e.concat(/[\p{L}_]/u, e.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u), r = /[\p{L}0-9._:-]+/u, i = {
    className: "symbol",
    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
  }, s = {
    begin: /\s/,
    contains: [
      {
        className: "keyword",
        begin: /#?[a-z_][a-z1-9_-]+/,
        illegal: /\n/
      }
    ]
  }, o = n.inherit(s, {
    begin: /\(/,
    end: /\)/
  }), a = n.inherit(n.APOS_STRING_MODE, { className: "string" }), l = n.inherit(n.QUOTE_STRING_MODE, { className: "string" }), c = {
    endsWithParent: !0,
    illegal: /</,
    relevance: 0,
    contains: [
      {
        className: "attr",
        begin: r,
        relevance: 0
      },
      {
        begin: /=\s*/,
        relevance: 0,
        contains: [
          {
            className: "string",
            endsParent: !0,
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [i]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [i]
              },
              { begin: /[^\s"'=<>`]+/ }
            ]
          }
        ]
      }
    ]
  };
  return {
    name: "HTML, XML",
    aliases: [
      "html",
      "xhtml",
      "rss",
      "atom",
      "xjb",
      "xsd",
      "xsl",
      "plist",
      "wsf",
      "svg"
    ],
    case_insensitive: !0,
    unicodeRegex: !0,
    contains: [
      {
        className: "meta",
        begin: /<![a-z]/,
        end: />/,
        relevance: 10,
        contains: [
          s,
          l,
          a,
          o,
          {
            begin: /\[/,
            end: /\]/,
            contains: [
              {
                className: "meta",
                begin: /<![a-z]/,
                end: />/,
                contains: [
                  s,
                  o,
                  l,
                  a
                ]
              }
            ]
          }
        ]
      },
      n.COMMENT(
        /<!--/,
        /-->/,
        { relevance: 10 }
      ),
      {
        begin: /<!\[CDATA\[/,
        end: /\]\]>/,
        relevance: 10
      },
      i,
      // xml processing instructions
      {
        className: "meta",
        end: /\?>/,
        variants: [
          {
            begin: /<\?xml/,
            relevance: 10,
            contains: [
              l
            ]
          },
          {
            begin: /<\?[a-z][a-z0-9]+/
          }
        ]
      },
      {
        className: "tag",
        /*
        The lookahead pattern (?=...) ensures that 'begin' only matches
        '<style' as a single word, followed by a whitespace or an
        ending bracket.
        */
        begin: /<style(?=\s|>)/,
        end: />/,
        keywords: { name: "style" },
        contains: [c],
        starts: {
          end: /<\/style>/,
          returnEnd: !0,
          subLanguage: [
            "css",
            "xml"
          ]
        }
      },
      {
        className: "tag",
        // See the comment in the <style tag about the lookahead pattern
        begin: /<script(?=\s|>)/,
        end: />/,
        keywords: { name: "script" },
        contains: [c],
        starts: {
          end: /<\/script>/,
          returnEnd: !0,
          subLanguage: [
            "javascript",
            "handlebars",
            "xml"
          ]
        }
      },
      // we need this for now for jSX
      {
        className: "tag",
        begin: /<>|<\/>/
      },
      // open tag
      {
        className: "tag",
        begin: e.concat(
          /</,
          e.lookahead(e.concat(
            t,
            // <tag/>
            // <tag>
            // <tag ...
            e.either(/\/>/, />/, /\s/)
          ))
        ),
        end: /\/?>/,
        contains: [
          {
            className: "name",
            begin: t,
            relevance: 0,
            starts: c
          }
        ]
      },
      // close tag
      {
        className: "tag",
        begin: e.concat(
          /<\//,
          e.lookahead(e.concat(
            t,
            />/
          ))
        ),
        contains: [
          {
            className: "name",
            begin: t,
            relevance: 0
          },
          {
            begin: />/,
            relevance: 0,
            endsParent: !0
          }
        ]
      }
    ]
  };
}
function IM(n) {
  const e = "true false yes no null", t = "[\\w#;/?:@&=+$,.~*'()[\\]]+", r = {
    className: "attr",
    variants: [
      { begin: "\\w[\\w :\\/.-]*:(?=[ 	]|$)" },
      {
        // double quoted keys
        begin: '"\\w[\\w :\\/.-]*":(?=[ 	]|$)'
      },
      {
        // single quoted keys
        begin: "'\\w[\\w :\\/.-]*':(?=[ 	]|$)"
      }
    ]
  }, i = {
    className: "template-variable",
    variants: [
      {
        // jinja templates Ansible
        begin: /\{\{/,
        end: /\}\}/
      },
      {
        // Ruby i18n
        begin: /%\{/,
        end: /\}/
      }
    ]
  }, s = {
    className: "string",
    relevance: 0,
    variants: [
      {
        begin: /'/,
        end: /'/
      },
      {
        begin: /"/,
        end: /"/
      },
      { begin: /\S+/ }
    ],
    contains: [
      n.BACKSLASH_ESCAPE,
      i
    ]
  }, o = n.inherit(s, { variants: [
    {
      begin: /'/,
      end: /'/
    },
    {
      begin: /"/,
      end: /"/
    },
    { begin: /[^\s,{}[\]]+/ }
  ] }), a = "[0-9]{4}(-[0-9][0-9]){0,2}", l = "([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?", c = "(\\.[0-9]*)?", u = "([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?", d = {
    className: "number",
    begin: "\\b" + a + l + c + u + "\\b"
  }, f = {
    end: ",",
    endsWithParent: !0,
    excludeEnd: !0,
    keywords: e,
    relevance: 0
  }, p = {
    begin: /\{/,
    end: /\}/,
    contains: [f],
    illegal: "\\n",
    relevance: 0
  }, h = {
    begin: "\\[",
    end: "\\]",
    contains: [f],
    illegal: "\\n",
    relevance: 0
  }, g = [
    r,
    {
      className: "meta",
      begin: "^---\\s*$",
      relevance: 10
    },
    {
      // multi line string
      // Blocks start with a | or > followed by a newline
      //
      // Indentation of subsequent lines must be the same to
      // be considered part of the block
      className: "string",
      begin: "[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*"
    },
    {
      // Ruby/Rails erb
      begin: "<%[%=-]?",
      end: "[%-]?%>",
      subLanguage: "ruby",
      excludeBegin: !0,
      excludeEnd: !0,
      relevance: 0
    },
    {
      // named tags
      className: "type",
      begin: "!\\w+!" + t
    },
    // https://yaml.org/spec/1.2/spec.html#id2784064
    {
      // verbatim tags
      className: "type",
      begin: "!<" + t + ">"
    },
    {
      // primary tags
      className: "type",
      begin: "!" + t
    },
    {
      // secondary tags
      className: "type",
      begin: "!!" + t
    },
    {
      // fragment id &ref
      className: "meta",
      begin: "&" + n.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // fragment reference *ref
      className: "meta",
      begin: "\\*" + n.UNDERSCORE_IDENT_RE + "$"
    },
    {
      // array listing
      className: "bullet",
      // TODO: remove |$ hack when we have proper look-ahead support
      begin: "-(?=[ ]|$)",
      relevance: 0
    },
    n.HASH_COMMENT_MODE,
    {
      beginKeywords: e,
      keywords: { literal: e }
    },
    d,
    // numbers are any valid C-style number that
    // sit isolated from other words
    {
      className: "number",
      begin: n.C_NUMBER_RE + "\\b",
      relevance: 0
    },
    p,
    h,
    s
  ], m = [...g];
  return m.pop(), m.push(o), f.contains = m, {
    name: "YAML",
    case_insensitive: !0,
    aliases: ["yml"],
    contains: g
  };
}
const BM = {
  arduino: x2,
  bash: C2,
  c: S2,
  cpp: _2,
  csharp: M2,
  css: D2,
  diff: I2,
  go: B2,
  graphql: H2,
  ini: P2,
  java: $2,
  javascript: U2,
  json: K2,
  kotlin: G2,
  less: Q2,
  lua: eM,
  makefile: tM,
  markdown: nM,
  objectivec: rM,
  perl: iM,
  php: sM,
  "php-template": oM,
  plaintext: aM,
  python: lM,
  "python-repl": cM,
  r: uM,
  ruby: dM,
  rust: fM,
  scss: vM,
  shell: wM,
  sql: kM,
  swift: TM,
  typescript: OM,
  vbnet: LM,
  wasm: RM,
  xml: DM,
  yaml: IM
};
function Im(n) {
  return n instanceof Map ? n.clear = n.delete = n.set = function() {
    throw new Error("map is read-only");
  } : n instanceof Set && (n.add = n.clear = n.delete = function() {
    throw new Error("set is read-only");
  }), Object.freeze(n), Object.getOwnPropertyNames(n).forEach((e) => {
    const t = n[e], r = typeof t;
    (r === "object" || r === "function") && !Object.isFrozen(t) && Im(t);
  }), n;
}
class Vf {
  /**
   * @param {CompiledMode} mode
   */
  constructor(e) {
    e.data === void 0 && (e.data = {}), this.data = e.data, this.isMatchIgnored = !1;
  }
  ignoreMatch() {
    this.isMatchIgnored = !0;
  }
}
function Bm(n) {
  return n.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
}
function Sn(n, ...e) {
  const t = /* @__PURE__ */ Object.create(null);
  for (const r in n)
    t[r] = n[r];
  return e.forEach(function(r) {
    for (const i in r)
      t[i] = r[i];
  }), /** @type {T} */
  t;
}
const HM = "</span>", qf = (n) => !!n.scope, PM = (n, { prefix: e }) => {
  if (n.startsWith("language:"))
    return n.replace("language:", "language-");
  if (n.includes(".")) {
    const t = n.split(".");
    return [
      `${e}${t.shift()}`,
      ...t.map((r, i) => `${r}${"_".repeat(i + 1)}`)
    ].join(" ");
  }
  return `${e}${n}`;
};
class $M {
  /**
   * Creates a new HTMLRenderer
   *
   * @param {Tree} parseTree - the parse tree (must support `walk` API)
   * @param {{classPrefix: string}} options
   */
  constructor(e, t) {
    this.buffer = "", this.classPrefix = t.classPrefix, e.walk(this);
  }
  /**
   * Adds texts to the output stream
   *
   * @param {string} text */
  addText(e) {
    this.buffer += Bm(e);
  }
  /**
   * Adds a node open to the output stream (if needed)
   *
   * @param {Node} node */
  openNode(e) {
    if (!qf(e))
      return;
    const t = PM(
      e.scope,
      { prefix: this.classPrefix }
    );
    this.span(t);
  }
  /**
   * Adds a node close to the output stream (if needed)
   *
   * @param {Node} node */
  closeNode(e) {
    qf(e) && (this.buffer += HM);
  }
  /**
   * returns the accumulated buffer
  */
  value() {
    return this.buffer;
  }
  // helpers
  /**
   * Builds a span element
   *
   * @param {string} className */
  span(e) {
    this.buffer += `<span class="${e}">`;
  }
}
const Uf = (n = {}) => {
  const e = { children: [] };
  return Object.assign(e, n), e;
};
class Kc {
  constructor() {
    this.rootNode = Uf(), this.stack = [this.rootNode];
  }
  get top() {
    return this.stack[this.stack.length - 1];
  }
  get root() {
    return this.rootNode;
  }
  /** @param {Node} node */
  add(e) {
    this.top.children.push(e);
  }
  /** @param {string} scope */
  openNode(e) {
    const t = Uf({ scope: e });
    this.add(t), this.stack.push(t);
  }
  closeNode() {
    if (this.stack.length > 1)
      return this.stack.pop();
  }
  closeAllNodes() {
    for (; this.closeNode(); )
      ;
  }
  toJSON() {
    return JSON.stringify(this.rootNode, null, 4);
  }
  /**
   * @typedef { import("./html_renderer").Renderer } Renderer
   * @param {Renderer} builder
   */
  walk(e) {
    return this.constructor._walk(e, this.rootNode);
  }
  /**
   * @param {Renderer} builder
   * @param {Node} node
   */
  static _walk(e, t) {
    return typeof t == "string" ? e.addText(t) : t.children && (e.openNode(t), t.children.forEach((r) => this._walk(e, r)), e.closeNode(t)), e;
  }
  /**
   * @param {Node} node
   */
  static _collapse(e) {
    typeof e != "string" && e.children && (e.children.every((t) => typeof t == "string") ? e.children = [e.children.join("")] : e.children.forEach((t) => {
      Kc._collapse(t);
    }));
  }
}
class FM extends Kc {
  /**
   * @param {*} options
   */
  constructor(e) {
    super(), this.options = e;
  }
  /**
   * @param {string} text
   */
  addText(e) {
    e !== "" && this.add(e);
  }
  /** @param {string} scope */
  startScope(e) {
    this.openNode(e);
  }
  endScope() {
    this.closeNode();
  }
  /**
   * @param {Emitter & {root: DataNode}} emitter
   * @param {string} name
   */
  __addSublanguage(e, t) {
    const r = e.root;
    t && (r.scope = `language:${t}`), this.add(r);
  }
  toHTML() {
    return new $M(this, this.options).value();
  }
  finalize() {
    return this.closeAllNodes(), !0;
  }
}
function Vi(n) {
  return n ? typeof n == "string" ? n : n.source : null;
}
function Hm(n) {
  return dr("(?=", n, ")");
}
function zM(n) {
  return dr("(?:", n, ")*");
}
function VM(n) {
  return dr("(?:", n, ")?");
}
function dr(...n) {
  return n.map((t) => Vi(t)).join("");
}
function qM(n) {
  const e = n[n.length - 1];
  return typeof e == "object" && e.constructor === Object ? (n.splice(n.length - 1, 1), e) : {};
}
function Wc(...n) {
  return "(" + (qM(n).capture ? "" : "?:") + n.map((r) => Vi(r)).join("|") + ")";
}
function Pm(n) {
  return new RegExp(n.toString() + "|").exec("").length - 1;
}
function UM(n, e) {
  const t = n && n.exec(e);
  return t && t.index === 0;
}
const KM = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
function Gc(n, { joinWith: e }) {
  let t = 0;
  return n.map((r) => {
    t += 1;
    const i = t;
    let s = Vi(r), o = "";
    for (; s.length > 0; ) {
      const a = KM.exec(s);
      if (!a) {
        o += s;
        break;
      }
      o += s.substring(0, a.index), s = s.substring(a.index + a[0].length), a[0][0] === "\\" && a[1] ? o += "\\" + String(Number(a[1]) + i) : (o += a[0], a[0] === "(" && t++);
    }
    return o;
  }).map((r) => `(${r})`).join(e);
}
const WM = /\b\B/, $m = "[a-zA-Z]\\w*", Zc = "[a-zA-Z_]\\w*", Fm = "\\b\\d+(\\.\\d+)?", zm = "(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)", Vm = "\\b(0b[01]+)", GM = "!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~", ZM = (n = {}) => {
  const e = /^#![ ]*\//;
  return n.binary && (n.begin = dr(
    e,
    /.*\b/,
    n.binary,
    /\b.*/
  )), Sn({
    scope: "meta",
    begin: e,
    end: /$/,
    relevance: 0,
    /** @type {ModeCallback} */
    "on:begin": (t, r) => {
      t.index !== 0 && r.ignoreMatch();
    }
  }, n);
}, qi = {
  begin: "\\\\[\\s\\S]",
  relevance: 0
}, jM = {
  scope: "string",
  begin: "'",
  end: "'",
  illegal: "\\n",
  contains: [qi]
}, JM = {
  scope: "string",
  begin: '"',
  end: '"',
  illegal: "\\n",
  contains: [qi]
}, YM = {
  begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
}, qo = function(n, e, t = {}) {
  const r = Sn(
    {
      scope: "comment",
      begin: n,
      end: e,
      contains: []
    },
    t
  );
  r.contains.push({
    scope: "doctag",
    // hack to avoid the space from being included. the space is necessary to
    // match here to prevent the plain text rule below from gobbling up doctags
    begin: "[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",
    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
    excludeBegin: !0,
    relevance: 0
  });
  const i = Wc(
    // list of common 1 and 2 letter words in English
    "I",
    "a",
    "is",
    "so",
    "us",
    "to",
    "at",
    "if",
    "in",
    "it",
    "on",
    // note: this is not an exhaustive list of contractions, just popular ones
    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/,
    // contractions - can't we'd they're let's, etc
    /[A-Za-z]+[-][a-z]+/,
    // `no-way`, etc.
    /[A-Za-z][a-z]{2,}/
    // allow capitalized words at beginning of sentences
  );
  return r.contains.push(
    {
      // TODO: how to include ", (, ) without breaking grammars that use these for
      // comment delimiters?
      // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
      // ---
      // this tries to find sequences of 3 english words in a row (without any
      // "programming" type syntax) this gives us a strong signal that we've
      // TRULY found a comment - vs perhaps scanning with the wrong language.
      // It's possible to find something that LOOKS like the start of the
      // comment - but then if there is no readable text - good chance it is a
      // false match and not a comment.
      //
      // for a visual example please see:
      // https://github.com/highlightjs/highlight.js/issues/2827
      begin: dr(
        /[ ]+/,
        // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
        "(",
        i,
        /[.]?[:]?([.][ ]|[ ])/,
        "){3}"
      )
      // look for 3 words in a row
    }
  ), r;
}, XM = qo("//", "$"), QM = qo("/\\*", "\\*/"), eA = qo("#", "$"), tA = {
  scope: "number",
  begin: Fm,
  relevance: 0
}, nA = {
  scope: "number",
  begin: zm,
  relevance: 0
}, rA = {
  scope: "number",
  begin: Vm,
  relevance: 0
}, iA = {
  scope: "regexp",
  begin: /\/(?=[^/\n]*\/)/,
  end: /\/[gimuy]*/,
  contains: [
    qi,
    {
      begin: /\[/,
      end: /\]/,
      relevance: 0,
      contains: [qi]
    }
  ]
}, sA = {
  scope: "title",
  begin: $m,
  relevance: 0
}, oA = {
  scope: "title",
  begin: Zc,
  relevance: 0
}, aA = {
  // excludes method names from keyword processing
  begin: "\\.\\s*" + Zc,
  relevance: 0
}, lA = function(n) {
  return Object.assign(
    n,
    {
      /** @type {ModeCallback} */
      "on:begin": (e, t) => {
        t.data._beginMatch = e[1];
      },
      /** @type {ModeCallback} */
      "on:end": (e, t) => {
        t.data._beginMatch !== e[1] && t.ignoreMatch();
      }
    }
  );
};
var Es = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  APOS_STRING_MODE: jM,
  BACKSLASH_ESCAPE: qi,
  BINARY_NUMBER_MODE: rA,
  BINARY_NUMBER_RE: Vm,
  COMMENT: qo,
  C_BLOCK_COMMENT_MODE: QM,
  C_LINE_COMMENT_MODE: XM,
  C_NUMBER_MODE: nA,
  C_NUMBER_RE: zm,
  END_SAME_AS_BEGIN: lA,
  HASH_COMMENT_MODE: eA,
  IDENT_RE: $m,
  MATCH_NOTHING_RE: WM,
  METHOD_GUARD: aA,
  NUMBER_MODE: tA,
  NUMBER_RE: Fm,
  PHRASAL_WORDS_MODE: YM,
  QUOTE_STRING_MODE: JM,
  REGEXP_MODE: iA,
  RE_STARTERS_RE: GM,
  SHEBANG: ZM,
  TITLE_MODE: sA,
  UNDERSCORE_IDENT_RE: Zc,
  UNDERSCORE_TITLE_MODE: oA
});
function cA(n, e) {
  n.input[n.index - 1] === "." && e.ignoreMatch();
}
function uA(n, e) {
  n.className !== void 0 && (n.scope = n.className, delete n.className);
}
function dA(n, e) {
  e && n.beginKeywords && (n.begin = "\\b(" + n.beginKeywords.split(" ").join("|") + ")(?!\\.)(?=\\b|\\s)", n.__beforeBegin = cA, n.keywords = n.keywords || n.beginKeywords, delete n.beginKeywords, n.relevance === void 0 && (n.relevance = 0));
}
function fA(n, e) {
  Array.isArray(n.illegal) && (n.illegal = Wc(...n.illegal));
}
function pA(n, e) {
  if (n.match) {
    if (n.begin || n.end)
      throw new Error("begin & end are not supported with match");
    n.begin = n.match, delete n.match;
  }
}
function hA(n, e) {
  n.relevance === void 0 && (n.relevance = 1);
}
const gA = (n, e) => {
  if (!n.beforeMatch)
    return;
  if (n.starts)
    throw new Error("beforeMatch cannot be used with starts");
  const t = Object.assign({}, n);
  Object.keys(n).forEach((r) => {
    delete n[r];
  }), n.keywords = t.keywords, n.begin = dr(t.beforeMatch, Hm(t.begin)), n.starts = {
    relevance: 0,
    contains: [
      Object.assign(t, { endsParent: !0 })
    ]
  }, n.relevance = 0, delete t.beforeMatch;
}, mA = [
  "of",
  "and",
  "for",
  "in",
  "not",
  "or",
  "if",
  "then",
  "parent",
  // common variable name
  "list",
  // common variable name
  "value"
  // common variable name
], bA = "keyword";
function qm(n, e, t = bA) {
  const r = /* @__PURE__ */ Object.create(null);
  return typeof n == "string" ? i(t, n.split(" ")) : Array.isArray(n) ? i(t, n) : Object.keys(n).forEach(function(s) {
    Object.assign(
      r,
      qm(n[s], e, s)
    );
  }), r;
  function i(s, o) {
    e && (o = o.map((a) => a.toLowerCase())), o.forEach(function(a) {
      const l = a.split("|");
      r[l[0]] = [s, yA(l[0], l[1])];
    });
  }
}
function yA(n, e) {
  return e ? Number(e) : vA(n) ? 0 : 1;
}
function vA(n) {
  return mA.includes(n.toLowerCase());
}
const Kf = {}, er = (n) => {
  console.error(n);
}, Wf = (n, ...e) => {
  console.log(`WARN: ${n}`, ...e);
}, kr = (n, e) => {
  Kf[`${n}/${e}`] || (console.log(`Deprecated as of ${n}. ${e}`), Kf[`${n}/${e}`] = !0);
}, wo = new Error();
function Um(n, e, { key: t }) {
  let r = 0;
  const i = n[t], s = {}, o = {};
  for (let a = 1; a <= e.length; a++)
    o[a + r] = i[a], s[a + r] = !0, r += Pm(e[a - 1]);
  n[t] = o, n[t]._emit = s, n[t]._multi = !0;
}
function wA(n) {
  if (Array.isArray(n.begin)) {
    if (n.skip || n.excludeBegin || n.returnBegin)
      throw er("skip, excludeBegin, returnBegin not compatible with beginScope: {}"), wo;
    if (typeof n.beginScope != "object" || n.beginScope === null)
      throw er("beginScope must be object"), wo;
    Um(n, n.begin, { key: "beginScope" }), n.begin = Gc(n.begin, { joinWith: "" });
  }
}
function kA(n) {
  if (Array.isArray(n.end)) {
    if (n.skip || n.excludeEnd || n.returnEnd)
      throw er("skip, excludeEnd, returnEnd not compatible with endScope: {}"), wo;
    if (typeof n.endScope != "object" || n.endScope === null)
      throw er("endScope must be object"), wo;
    Um(n, n.end, { key: "endScope" }), n.end = Gc(n.end, { joinWith: "" });
  }
}
function EA(n) {
  n.scope && typeof n.scope == "object" && n.scope !== null && (n.beginScope = n.scope, delete n.scope);
}
function xA(n) {
  EA(n), typeof n.beginScope == "string" && (n.beginScope = { _wrap: n.beginScope }), typeof n.endScope == "string" && (n.endScope = { _wrap: n.endScope }), wA(n), kA(n);
}
function CA(n) {
  function e(o, a) {
    return new RegExp(
      Vi(o),
      "m" + (n.case_insensitive ? "i" : "") + (n.unicodeRegex ? "u" : "") + (a ? "g" : "")
    );
  }
  class t {
    constructor() {
      this.matchIndexes = {}, this.regexes = [], this.matchAt = 1, this.position = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      l.position = this.position++, this.matchIndexes[this.matchAt] = l, this.regexes.push([l, a]), this.matchAt += Pm(a) + 1;
    }
    compile() {
      this.regexes.length === 0 && (this.exec = () => null);
      const a = this.regexes.map((l) => l[1]);
      this.matcherRe = e(Gc(a, { joinWith: "|" }), !0), this.lastIndex = 0;
    }
    /** @param {string} s */
    exec(a) {
      this.matcherRe.lastIndex = this.lastIndex;
      const l = this.matcherRe.exec(a);
      if (!l)
        return null;
      const c = l.findIndex((d, f) => f > 0 && d !== void 0), u = this.matchIndexes[c];
      return l.splice(0, c), Object.assign(l, u);
    }
  }
  class r {
    constructor() {
      this.rules = [], this.multiRegexes = [], this.count = 0, this.lastIndex = 0, this.regexIndex = 0;
    }
    // @ts-ignore
    getMatcher(a) {
      if (this.multiRegexes[a])
        return this.multiRegexes[a];
      const l = new t();
      return this.rules.slice(a).forEach(([c, u]) => l.addRule(c, u)), l.compile(), this.multiRegexes[a] = l, l;
    }
    resumingScanAtSamePosition() {
      return this.regexIndex !== 0;
    }
    considerAll() {
      this.regexIndex = 0;
    }
    // @ts-ignore
    addRule(a, l) {
      this.rules.push([a, l]), l.type === "begin" && this.count++;
    }
    /** @param {string} s */
    exec(a) {
      const l = this.getMatcher(this.regexIndex);
      l.lastIndex = this.lastIndex;
      let c = l.exec(a);
      if (this.resumingScanAtSamePosition() && !(c && c.index === this.lastIndex)) {
        const u = this.getMatcher(0);
        u.lastIndex = this.lastIndex + 1, c = u.exec(a);
      }
      return c && (this.regexIndex += c.position + 1, this.regexIndex === this.count && this.considerAll()), c;
    }
  }
  function i(o) {
    const a = new r();
    return o.contains.forEach((l) => a.addRule(l.begin, { rule: l, type: "begin" })), o.terminatorEnd && a.addRule(o.terminatorEnd, { type: "end" }), o.illegal && a.addRule(o.illegal, { type: "illegal" }), a;
  }
  function s(o, a) {
    const l = (
      /** @type CompiledMode */
      o
    );
    if (o.isCompiled)
      return l;
    [
      uA,
      // do this early so compiler extensions generally don't have to worry about
      // the distinction between match/begin
      pA,
      xA,
      gA
    ].forEach((u) => u(o, a)), n.compilerExtensions.forEach((u) => u(o, a)), o.__beforeBegin = null, [
      dA,
      // do this later so compiler extensions that come earlier have access to the
      // raw array if they wanted to perhaps manipulate it, etc.
      fA,
      // default to 1 relevance if not specified
      hA
    ].forEach((u) => u(o, a)), o.isCompiled = !0;
    let c = null;
    return typeof o.keywords == "object" && o.keywords.$pattern && (o.keywords = Object.assign({}, o.keywords), c = o.keywords.$pattern, delete o.keywords.$pattern), c = c || /\w+/, o.keywords && (o.keywords = qm(o.keywords, n.case_insensitive)), l.keywordPatternRe = e(c, !0), a && (o.begin || (o.begin = /\B|\b/), l.beginRe = e(l.begin), !o.end && !o.endsWithParent && (o.end = /\B|\b/), o.end && (l.endRe = e(l.end)), l.terminatorEnd = Vi(l.end) || "", o.endsWithParent && a.terminatorEnd && (l.terminatorEnd += (o.end ? "|" : "") + a.terminatorEnd)), o.illegal && (l.illegalRe = e(
      /** @type {RegExp | string} */
      o.illegal
    )), o.contains || (o.contains = []), o.contains = [].concat(...o.contains.map(function(u) {
      return SA(u === "self" ? o : u);
    })), o.contains.forEach(function(u) {
      s(
        /** @type Mode */
        u,
        l
      );
    }), o.starts && s(o.starts, a), l.matcher = i(l), l;
  }
  if (n.compilerExtensions || (n.compilerExtensions = []), n.contains && n.contains.includes("self"))
    throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
  return n.classNameAliases = Sn(n.classNameAliases || {}), s(
    /** @type Mode */
    n
  );
}
function Km(n) {
  return n ? n.endsWithParent || Km(n.starts) : !1;
}
function SA(n) {
  return n.variants && !n.cachedVariants && (n.cachedVariants = n.variants.map(function(e) {
    return Sn(n, { variants: null }, e);
  })), n.cachedVariants ? n.cachedVariants : Km(n) ? Sn(n, { starts: n.starts ? Sn(n.starts) : null }) : Object.isFrozen(n) ? Sn(n) : n;
}
var _A = "11.9.0";
class MA extends Error {
  constructor(e, t) {
    super(e), this.name = "HTMLInjectionError", this.html = t;
  }
}
const Va = Bm, Gf = Sn, Zf = Symbol("nomatch"), AA = 7, Wm = function(n) {
  const e = /* @__PURE__ */ Object.create(null), t = /* @__PURE__ */ Object.create(null), r = [];
  let i = !0;
  const s = "Could not find the language '{}', did you forget to load/include a language module?", o = { disableAutodetect: !0, name: "Plain text", contains: [] };
  let a = {
    ignoreUnescapedHTML: !1,
    throwUnescapedHTML: !1,
    noHighlightRe: /^(no-?highlight)$/i,
    languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
    classPrefix: "hljs-",
    cssSelector: "pre code",
    languages: null,
    // beta configuration options, subject to change, welcome to discuss
    // https://github.com/highlightjs/highlight.js/issues/1086
    __emitter: FM
  };
  function l(E) {
    return a.noHighlightRe.test(E);
  }
  function c(E) {
    let _ = E.className + " ";
    _ += E.parentNode ? E.parentNode.className : "";
    const D = a.languageDetectRe.exec(_);
    if (D) {
      const P = M(D[1]);
      return P || (Wf(s.replace("{}", D[1])), Wf("Falling back to no-highlight mode for this block.", E)), P ? D[1] : "no-highlight";
    }
    return _.split(/\s+/).find((P) => l(P) || M(P));
  }
  function u(E, _, D) {
    let P = "", W = "";
    typeof _ == "object" ? (P = E, D = _.ignoreIllegals, W = _.language) : (kr("10.7.0", "highlight(lang, code, ...args) has been deprecated."), kr("10.7.0", `Please use highlight(code, options) instead.
https://github.com/highlightjs/highlight.js/issues/2277`), W = E, P = _), D === void 0 && (D = !0);
    const ee = {
      code: P,
      language: W
    };
    H("before:highlight", ee);
    const he = ee.result ? ee.result : d(ee.language, ee.code, D);
    return he.code = ee.code, H("after:highlight", he), he;
  }
  function d(E, _, D, P) {
    const W = /* @__PURE__ */ Object.create(null);
    function ee(O, I) {
      return O.keywords[I];
    }
    function he() {
      if (!V.keywords) {
        be.addText(oe);
        return;
      }
      let O = 0;
      V.keywordPatternRe.lastIndex = 0;
      let I = V.keywordPatternRe.exec(oe), J = "";
      for (; I; ) {
        J += oe.substring(O, I.index);
        const se = Oe.case_insensitive ? I[0].toLowerCase() : I[0], De = ee(V, se);
        if (De) {
          const [ht, Qo] = De;
          if (be.addText(J), J = "", W[se] = (W[se] || 0) + 1, W[se] <= AA && (Ge += Qo), ht.startsWith("_"))
            J += I[0];
          else {
            const N = Oe.classNameAliases[ht] || ht;
            _e(I[0], N);
          }
        } else
          J += I[0];
        O = V.keywordPatternRe.lastIndex, I = V.keywordPatternRe.exec(oe);
      }
      J += oe.substring(O), be.addText(J);
    }
    function we() {
      if (oe === "")
        return;
      let O = null;
      if (typeof V.subLanguage == "string") {
        if (!e[V.subLanguage]) {
          be.addText(oe);
          return;
        }
        O = d(V.subLanguage, oe, !0, ce[V.subLanguage]), ce[V.subLanguage] = /** @type {CompiledMode} */
        O._top;
      } else
        O = p(oe, V.subLanguage.length ? V.subLanguage : null);
      V.relevance > 0 && (Ge += O.relevance), be.__addSublanguage(O._emitter, O.language);
    }
    function ue() {
      V.subLanguage != null ? we() : he(), oe = "";
    }
    function _e(O, I) {
      O !== "" && (be.startScope(I), be.addText(O), be.endScope());
    }
    function st(O, I) {
      let J = 1;
      const se = I.length - 1;
      for (; J <= se; ) {
        if (!O._emit[J]) {
          J++;
          continue;
        }
        const De = Oe.classNameAliases[O[J]] || O[J], ht = I[J];
        De ? _e(ht, De) : (oe = ht, he(), oe = ""), J++;
      }
    }
    function ze(O, I) {
      return O.scope && typeof O.scope == "string" && be.openNode(Oe.classNameAliases[O.scope] || O.scope), O.beginScope && (O.beginScope._wrap ? (_e(oe, Oe.classNameAliases[O.beginScope._wrap] || O.beginScope._wrap), oe = "") : O.beginScope._multi && (st(O.beginScope, I), oe = "")), V = Object.create(O, { parent: { value: V } }), V;
    }
    function ft(O, I, J) {
      let se = UM(O.endRe, J);
      if (se) {
        if (O["on:end"]) {
          const De = new Vf(O);
          O["on:end"](I, De), De.isMatchIgnored && (se = !1);
        }
        if (se) {
          for (; O.endsParent && O.parent; )
            O = O.parent;
          return O;
        }
      }
      if (O.endsWithParent)
        return ft(O.parent, I, J);
    }
    function ot(O) {
      return V.matcher.regexIndex === 0 ? (oe += O[0], 1) : (U = !0, 0);
    }
    function vt(O) {
      const I = O[0], J = O.rule, se = new Vf(J), De = [J.__beforeBegin, J["on:begin"]];
      for (const ht of De)
        if (ht && (ht(O, se), se.isMatchIgnored))
          return ot(I);
      return J.skip ? oe += I : (J.excludeBegin && (oe += I), ue(), !J.returnBegin && !J.excludeBegin && (oe = I)), ze(J, O), J.returnBegin ? 0 : I.length;
    }
    function pt(O) {
      const I = O[0], J = _.substring(O.index), se = ft(V, O, J);
      if (!se)
        return Zf;
      const De = V;
      V.endScope && V.endScope._wrap ? (ue(), _e(I, V.endScope._wrap)) : V.endScope && V.endScope._multi ? (ue(), st(V.endScope, O)) : De.skip ? oe += I : (De.returnEnd || De.excludeEnd || (oe += I), ue(), De.excludeEnd && (oe = I));
      do
        V.scope && be.closeNode(), !V.skip && !V.subLanguage && (Ge += V.relevance), V = V.parent;
      while (V !== se.parent);
      return se.starts && ze(se.starts, O), De.returnEnd ? 0 : I.length;
    }
    function de() {
      const O = [];
      for (let I = V; I !== Oe; I = I.parent)
        I.scope && O.unshift(I.scope);
      O.forEach((I) => be.openNode(I));
    }
    let Ae = {};
    function Qe(O, I) {
      const J = I && I[0];
      if (oe += O, J == null)
        return ue(), 0;
      if (Ae.type === "begin" && I.type === "end" && Ae.index === I.index && J === "") {
        if (oe += _.slice(I.index, I.index + 1), !i) {
          const se = new Error(`0 width match regex (${E})`);
          throw se.languageName = E, se.badRule = Ae.rule, se;
        }
        return 1;
      }
      if (Ae = I, I.type === "begin")
        return vt(I);
      if (I.type === "illegal" && !D) {
        const se = new Error('Illegal lexeme "' + J + '" for mode "' + (V.scope || "<unnamed>") + '"');
        throw se.mode = V, se;
      } else if (I.type === "end") {
        const se = pt(I);
        if (se !== Zf)
          return se;
      }
      if (I.type === "illegal" && J === "")
        return 1;
      if ($ > 1e5 && $ > I.index * 3)
        throw new Error("potential infinite loop, way more iterations than matches");
      return oe += J, J.length;
    }
    const Oe = M(E);
    if (!Oe)
      throw er(s.replace("{}", E)), new Error('Unknown language: "' + E + '"');
    const te = CA(Oe);
    let Nt = "", V = P || te;
    const ce = {}, be = new a.__emitter(a);
    de();
    let oe = "", Ge = 0, Ve = 0, $ = 0, U = !1;
    try {
      if (Oe.__emitTokens)
        Oe.__emitTokens(_, be);
      else {
        for (V.matcher.considerAll(); ; ) {
          $++, U ? U = !1 : V.matcher.considerAll(), V.matcher.lastIndex = Ve;
          const O = V.matcher.exec(_);
          if (!O)
            break;
          const I = _.substring(Ve, O.index), J = Qe(I, O);
          Ve = O.index + J;
        }
        Qe(_.substring(Ve));
      }
      return be.finalize(), Nt = be.toHTML(), {
        language: E,
        value: Nt,
        relevance: Ge,
        illegal: !1,
        _emitter: be,
        _top: V
      };
    } catch (O) {
      if (O.message && O.message.includes("Illegal"))
        return {
          language: E,
          value: Va(_),
          illegal: !0,
          relevance: 0,
          _illegalBy: {
            message: O.message,
            index: Ve,
            context: _.slice(Ve - 100, Ve + 100),
            mode: O.mode,
            resultSoFar: Nt
          },
          _emitter: be
        };
      if (i)
        return {
          language: E,
          value: Va(_),
          illegal: !1,
          relevance: 0,
          errorRaised: O,
          _emitter: be,
          _top: V
        };
      throw O;
    }
  }
  function f(E) {
    const _ = {
      value: Va(E),
      illegal: !1,
      relevance: 0,
      _top: o,
      _emitter: new a.__emitter(a)
    };
    return _._emitter.addText(E), _;
  }
  function p(E, _) {
    _ = _ || a.languages || Object.keys(e);
    const D = f(E), P = _.filter(M).filter(z).map(
      (ue) => d(ue, E, !1)
    );
    P.unshift(D);
    const W = P.sort((ue, _e) => {
      if (ue.relevance !== _e.relevance)
        return _e.relevance - ue.relevance;
      if (ue.language && _e.language) {
        if (M(ue.language).supersetOf === _e.language)
          return 1;
        if (M(_e.language).supersetOf === ue.language)
          return -1;
      }
      return 0;
    }), [ee, he] = W, we = ee;
    return we.secondBest = he, we;
  }
  function h(E, _, D) {
    const P = _ && t[_] || D;
    E.classList.add("hljs"), E.classList.add(`language-${P}`);
  }
  function g(E) {
    let _ = null;
    const D = c(E);
    if (l(D))
      return;
    if (H(
      "before:highlightElement",
      { el: E, language: D }
    ), E.dataset.highlighted) {
      console.log("Element previously highlighted. To highlight again, first unset `dataset.highlighted`.", E);
      return;
    }
    if (E.children.length > 0 && (a.ignoreUnescapedHTML || (console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."), console.warn("https://github.com/highlightjs/highlight.js/wiki/security"), console.warn("The element with unescaped HTML:"), console.warn(E)), a.throwUnescapedHTML))
      throw new MA(
        "One of your code blocks includes unescaped HTML.",
        E.innerHTML
      );
    _ = E;
    const P = _.textContent, W = D ? u(P, { language: D, ignoreIllegals: !0 }) : p(P);
    E.innerHTML = W.value, E.dataset.highlighted = "yes", h(E, D, W.language), E.result = {
      language: W.language,
      // TODO: remove with version 11.0
      re: W.relevance,
      relevance: W.relevance
    }, W.secondBest && (E.secondBest = {
      language: W.secondBest.language,
      relevance: W.secondBest.relevance
    }), H("after:highlightElement", { el: E, result: W, text: P });
  }
  function m(E) {
    a = Gf(a, E);
  }
  const v = () => {
    b(), kr("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
  };
  function y() {
    b(), kr("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
  }
  let k = !1;
  function b() {
    if (document.readyState === "loading") {
      k = !0;
      return;
    }
    document.querySelectorAll(a.cssSelector).forEach(g);
  }
  function x() {
    k && b();
  }
  typeof window < "u" && window.addEventListener && window.addEventListener("DOMContentLoaded", x, !1);
  function w(E, _) {
    let D = null;
    try {
      D = _(n);
    } catch (P) {
      if (er("Language definition for '{}' could not be registered.".replace("{}", E)), i)
        er(P);
      else
        throw P;
      D = o;
    }
    D.name || (D.name = E), e[E] = D, D.rawDefinition = _.bind(null, n), D.aliases && L(D.aliases, { languageName: E });
  }
  function S(E) {
    delete e[E];
    for (const _ of Object.keys(t))
      t[_] === E && delete t[_];
  }
  function T() {
    return Object.keys(e);
  }
  function M(E) {
    return E = (E || "").toLowerCase(), e[E] || e[t[E]];
  }
  function L(E, { languageName: _ }) {
    typeof E == "string" && (E = [E]), E.forEach((D) => {
      t[D.toLowerCase()] = _;
    });
  }
  function z(E) {
    const _ = M(E);
    return _ && !_.disableAutodetect;
  }
  function G(E) {
    E["before:highlightBlock"] && !E["before:highlightElement"] && (E["before:highlightElement"] = (_) => {
      E["before:highlightBlock"](
        Object.assign({ block: _.el }, _)
      );
    }), E["after:highlightBlock"] && !E["after:highlightElement"] && (E["after:highlightElement"] = (_) => {
      E["after:highlightBlock"](
        Object.assign({ block: _.el }, _)
      );
    });
  }
  function q(E) {
    G(E), r.push(E);
  }
  function A(E) {
    const _ = r.indexOf(E);
    _ !== -1 && r.splice(_, 1);
  }
  function H(E, _) {
    const D = E;
    r.forEach(function(P) {
      P[D] && P[D](_);
    });
  }
  function C(E) {
    return kr("10.7.0", "highlightBlock will be removed entirely in v12.0"), kr("10.7.0", "Please use highlightElement now."), g(E);
  }
  Object.assign(n, {
    highlight: u,
    highlightAuto: p,
    highlightAll: b,
    highlightElement: g,
    // TODO: Remove with v12 API
    highlightBlock: C,
    configure: m,
    initHighlighting: v,
    initHighlightingOnLoad: y,
    registerLanguage: w,
    unregisterLanguage: S,
    listLanguages: T,
    getLanguage: M,
    registerAliases: L,
    autoDetection: z,
    inherit: Gf,
    addPlugin: q,
    removePlugin: A
  }), n.debugMode = function() {
    i = !1;
  }, n.safeMode = function() {
    i = !0;
  }, n.versionString = _A, n.regex = {
    concat: dr,
    lookahead: Hm,
    either: Wc,
    optional: VM,
    anyNumberOfTimes: zM
  };
  for (const E in Es)
    typeof Es[E] == "object" && Im(Es[E]);
  return Object.assign(n, Es), n;
}, jr = Wm({});
jr.newInstance = () => Wm({});
var TA = jr;
jr.HighlightJS = jr;
jr.default = jr;
const NA = /* @__PURE__ */ Xr(TA), jf = {}, OA = "hljs-";
function LA(n) {
  const e = NA.newInstance();
  return n && s(n), {
    highlight: t,
    highlightAuto: r,
    listLanguages: i,
    register: s,
    registerAlias: o,
    registered: a
  };
  function t(l, c, u) {
    const d = u || jf, f = typeof d.prefix == "string" ? d.prefix : OA;
    if (!e.getLanguage(l))
      throw new Error("Unknown language: `" + l + "` is not registered");
    e.configure({ __emitter: RA, classPrefix: f });
    const p = (
      /** @type {HighlightResult & {_emitter: HastEmitter}} */
      e.highlight(c, { ignoreIllegals: !0, language: l })
    );
    if (p.errorRaised)
      throw new Error("Could not highlight with `Highlight.js`", {
        cause: p.errorRaised
      });
    const h = p._emitter.root, g = (
      /** @type {RootData} */
      h.data
    );
    return g.language = p.language, g.relevance = p.relevance, h;
  }
  function r(l, c) {
    const d = (c || jf).subset || i();
    let f = -1, p = 0, h;
    for (; ++f < d.length; ) {
      const g = d[f];
      if (!e.getLanguage(g))
        continue;
      const m = t(g, l, c);
      m.data && m.data.relevance !== void 0 && m.data.relevance > p && (p = m.data.relevance, h = m);
    }
    return h || {
      type: "root",
      children: [],
      data: { language: void 0, relevance: p }
    };
  }
  function i() {
    return e.listLanguages();
  }
  function s(l, c) {
    if (typeof l == "string")
      e.registerLanguage(l, c);
    else {
      let u;
      for (u in l)
        Object.hasOwn(l, u) && e.registerLanguage(u, l[u]);
    }
  }
  function o(l, c) {
    if (typeof l == "string")
      e.registerAliases(
        // Note: copy needed because hljs doesn’t accept readonly arrays yet.
        typeof c == "string" ? c : [...c],
        { languageName: l }
      );
    else {
      let u;
      for (u in l)
        if (Object.hasOwn(l, u)) {
          const d = l[u];
          e.registerAliases(
            // Note: copy needed because hljs doesn’t accept readonly arrays yet.
            typeof d == "string" ? d : [...d],
            { languageName: u }
          );
        }
    }
  }
  function a(l) {
    return !!e.getLanguage(l);
  }
}
class RA {
  /**
   * @param {Readonly<HljsOptions>} options
   *   Configuration.
   * @returns
   *   Instance.
   */
  constructor(e) {
    this.options = e, this.root = {
      type: "root",
      children: [],
      data: { language: void 0, relevance: 0 }
    }, this.stack = [this.root];
  }
  /**
   * @param {string} value
   *   Text to add.
   * @returns {undefined}
   *   Nothing.
   *
   */
  addText(e) {
    if (e === "")
      return;
    const t = this.stack[this.stack.length - 1], r = t.children[t.children.length - 1];
    r && r.type === "text" ? r.value += e : t.children.push({ type: "text", value: e });
  }
  /**
   *
   * @param {unknown} rawName
   *   Name to add.
   * @returns {undefined}
   *   Nothing.
   */
  startScope(e) {
    this.openNode(String(e));
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  endScope() {
    this.closeNode();
  }
  /**
   * @param {HastEmitter} other
   *   Other emitter.
   * @param {string} name
   *   Name of the sublanguage.
   * @returns {undefined}
   *   Nothing.
   */
  __addSublanguage(e, t) {
    const r = this.stack[this.stack.length - 1], i = (
      /** @type {Array<ElementContent>} */
      e.root.children
    );
    t ? r.children.push({
      type: "element",
      tagName: "span",
      properties: { className: [t] },
      children: i
    }) : r.children.push(...i);
  }
  /**
   * @param {string} name
   *   Name to add.
   * @returns {undefined}
   *   Nothing.
   */
  openNode(e) {
    const t = this, r = e.split(".").map(function(o, a) {
      return a ? o + "_".repeat(a) : t.options.classPrefix + o;
    }), i = this.stack[this.stack.length - 1], s = {
      type: "element",
      tagName: "span",
      properties: { className: r },
      children: []
    };
    i.children.push(s), this.stack.push(s);
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  closeNode() {
    this.stack.pop();
  }
  /**
   * @returns {undefined}
   *   Nothing.
   */
  finalize() {
  }
  /**
   * @returns {string}
   *   Nothing.
   */
  toHTML() {
    return "";
  }
}
const DA = /!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\)/, Jf = new Me("aie-video-plugin"), li = "video_action", IA = le.create({
  name: "video",
  group: "block",
  addAttributes() {
    return {
      src: {
        default: null,
        parseHTML: (n) => n.getAttribute("src"),
        renderHTML: (n) => ({ src: n.src })
      },
      poster: {
        default: null,
        parseHTML: (n) => n.getAttribute("poster"),
        renderHTML: (n) => ({ poster: n.poster })
      },
      width: {
        default: 350
      },
      controls: {
        default: !0
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "video",
        getAttrs: (n) => ({
          src: n.getAttribute("src"),
          poster: n.getAttribute("poster")
        })
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return [
      "video",
      { controls: "true", ...n, src: null },
      ["source", { src: n.src }]
    ];
  },
  addCommands() {
    return {
      setVideo: (n) => ({ commands: e }) => e.insertContent(`<video controls="true" style="width: 100%" src="${n}" />`),
      toggleVideo: () => ({ commands: n }) => n.toggleNode(this.name, "paragraph"),
      uploadVideo: (n) => () => {
        const e = Po(), { state: { tr: t }, view: r, schema: i } = this.editor;
        return t.selection.empty || t.deleteSelection(), r.dispatch(t.setMeta(li, {
          type: "add",
          id: e,
          pos: t.selection.from
        })), (this.options.uploader || Tc(this.options.uploadUrl))(n, this.options.uploadUrl, this.options.uploadHeaders, "video").then((o) => {
          if (o.errorCode === 0 && o.data && o.data.src) {
            let l = Jf.getState(this.editor.state).find(void 0, void 0, (c) => c.id == e);
            r.dispatch(r.state.tr.insert(l[0].from, i.nodes.video.create({
              src: o.data.src,
              poster: o.data.poster
            })).setMeta(li, { type: "remove", id: e }));
          } else
            r.dispatch(t.setMeta(li, { type: "remove", id: e }));
        }).catch(() => {
          r.dispatch(t.setMeta(li, { type: "remove", id: e }));
        }), !0;
      }
    };
  },
  addNodeView() {
    return (n) => {
      const e = document.createElement("div"), { src: t, width: r, align: i } = n.node.attrs;
      return e.classList.add(`align-${i}`), e.innerHTML = `
                  <div class="aie-resize-wrapper">
                      <div class="aie-resize">
                          <div class="aie-resize-btn-top-left" data-position="left" draggable="true"></div>
                          <div class="aie-resize-btn-top-right" data-position="right" draggable="true"></div>
                          <div class="aie-resize-btn-bottom-left" data-position="left" draggable="true"></div>
                          <div class="aie-resize-btn-bottom-right" data-position="right" draggable="true"></div>
                      </div>
                      <video controls="true" width="${r}" class="resize-obj">
                          <source src="${t}">
                      </video>
                  </div>
                `, Ug(e, n.editor.view.dom, (s) => n.editor.commands.updateAttributes("video", s)), {
        dom: e
        // contentDOM: container.firstChild,
      };
    };
  },
  addInputRules() {
    return [
      bc({
        find: DA,
        type: this.type,
        getAttributes: (n) => {
          const [, , e] = n;
          return { src: e };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const n = this.editor;
    return [
      new Se({
        key: Jf,
        state: {
          init: () => ke.empty,
          apply: (e, t) => {
            const r = e.getMeta(li);
            return t = t.map(e.mapping, e.doc), r && r.type === "add" ? t = t.add(e.doc, [qg(r)]) : r && r.type === "remove" && (t = t.remove(t.find(
              void 0,
              void 0,
              (i) => i.id == r.id
            ))), t;
          }
        },
        props: {
          decorations(e) {
            return this.getState(e);
          },
          handleDOMEvents: {
            drop(e, t) {
              if (!(t.dataTransfer && t.dataTransfer.files && t.dataTransfer.files.length))
                return !1;
              const i = Array.from(t.dataTransfer.files).filter((c) => /video/i.test(c.type));
              if (i.length === 0)
                return !1;
              t.preventDefault();
              const { state: { tr: s, doc: o }, dispatch: a } = e, l = e.posAtCoords({ left: t.clientX, top: t.clientY });
              return a(s.setSelection(X.create(o, l.pos)).scrollIntoView()), i.forEach((c) => {
                n.commands.uploadVideo(c);
              }), !0;
            }
          }
        }
      })
    ];
  }
}), BA = le.create({
  name: "iframe",
  group: "block",
  atom: !0,
  addOptions() {
    return {
      allowFullscreen: !0,
      HTMLAttributes: {
        class: "iframe-wrapper"
      }
    };
  },
  addAttributes() {
    return {
      src: {
        default: null
      },
      width: {
        default: "100%"
      },
      frameborder: {
        default: 0
      },
      allowfullscreen: {
        default: this.options.allowFullscreen,
        parseHTML: () => this.options.allowFullscreen
      }
    };
  },
  parseHTML() {
    return [{
      tag: "iframe"
    }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["div", this.options.HTMLAttributes, ["iframe", n]];
  },
  addCommands() {
    return {
      setIframe: (n) => ({ tr: e, dispatch: t }) => {
        const { selection: r } = e, i = this.type.create(n);
        return t && e.replaceRangeWith(r.from, r.to, i), !0;
      }
    };
  }
});
class HA {
  constructor({ editor: e, element: t, view: r, tippyOptions: i = {}, updateDelay: s = 250, shouldShow: o }) {
    this.preventHide = !1, this.shouldShow = ({ view: a, state: l, from: c, to: u }) => {
      const { doc: d, selection: f } = l, { empty: p } = f, h = !d.textBetween(c, u).length && dc(l.selection), g = this.element.contains(document.activeElement);
      return !(!(a.hasFocus() || g) || p || h || !this.editor.isEditable);
    }, this.mousedownHandler = () => {
      this.preventHide = !0;
    }, this.dragstartHandler = () => {
      this.hide();
    }, this.focusHandler = () => {
      setTimeout(() => this.update(this.editor.view));
    }, this.blurHandler = ({ event: a }) => {
      var l;
      if (this.preventHide) {
        this.preventHide = !1;
        return;
      }
      a != null && a.relatedTarget && (!((l = this.element.parentNode) === null || l === void 0) && l.contains(a.relatedTarget)) || this.hide();
    }, this.tippyBlurHandler = (a) => {
      this.blurHandler({ event: a });
    }, this.handleDebouncedUpdate = (a, l) => {
      const c = !(l != null && l.selection.eq(a.state.selection)), u = !(l != null && l.doc.eq(a.state.doc));
      !c && !u || (this.updateDebounceTimer && clearTimeout(this.updateDebounceTimer), this.updateDebounceTimer = window.setTimeout(() => {
        this.updateHandler(a, c, u, l);
      }, this.updateDelay));
    }, this.updateHandler = (a, l, c, u) => {
      var d, f, p;
      const { state: h, composing: g } = a, { selection: m } = h;
      if (g || !l && !c)
        return;
      this.createTooltip();
      const { ranges: y } = m, k = Math.min(...y.map((w) => w.$from.pos)), b = Math.max(...y.map((w) => w.$to.pos));
      if (!((d = this.shouldShow) === null || d === void 0 ? void 0 : d.call(this, {
        editor: this.editor,
        view: a,
        state: h,
        oldState: u,
        from: k,
        to: b
      }))) {
        this.hide();
        return;
      }
      (f = this.tippy) === null || f === void 0 || f.setProps({
        getReferenceClientRect: ((p = this.tippyOptions) === null || p === void 0 ? void 0 : p.getReferenceClientRect) || (() => {
          if ($v(h.selection)) {
            let w = a.nodeDOM(k);
            const S = w.dataset.nodeViewWrapper ? w : w.querySelector("[data-node-view-wrapper]");
            if (S && (w = S.firstChild), w)
              return w.getBoundingClientRect();
          }
          return mc(a, k, b);
        })
      }), this.show();
    }, this.editor = e, this.element = t, this.view = r, this.updateDelay = s, o && (this.shouldShow = o), this.element.addEventListener("mousedown", this.mousedownHandler, { capture: !0 }), this.view.dom.addEventListener("dragstart", this.dragstartHandler), this.editor.on("focus", this.focusHandler), this.editor.on("blur", this.blurHandler), this.tippyOptions = i, this.element.remove(), this.element.style.visibility = "visible";
  }
  createTooltip() {
    const { element: e } = this.editor.options, t = !!e.parentElement;
    this.tippy || !t || (this.tippy = Je(e, {
      duration: 0,
      getReferenceClientRect: null,
      content: this.element,
      interactive: !0,
      trigger: "manual",
      placement: "top",
      hideOnClick: "toggle",
      ...this.tippyOptions
    }), this.tippy.popper.firstChild && this.tippy.popper.firstChild.addEventListener("blur", this.tippyBlurHandler));
  }
  update(e, t) {
    const { state: r } = e, i = r.selection.$from.pos !== r.selection.$to.pos;
    if (this.updateDelay > 0 && i) {
      this.handleDebouncedUpdate(e, t);
      return;
    }
    const s = !(t != null && t.selection.eq(e.state.selection)), o = !(t != null && t.doc.eq(e.state.doc));
    this.updateHandler(e, s, o, t);
  }
  show() {
    var e;
    (e = this.tippy) === null || e === void 0 || e.show();
  }
  hide() {
    var e;
    (e = this.tippy) === null || e === void 0 || e.hide();
  }
  destroy() {
    var e, t;
    !((e = this.tippy) === null || e === void 0) && e.popper.firstChild && this.tippy.popper.firstChild.removeEventListener("blur", this.tippyBlurHandler), (t = this.tippy) === null || t === void 0 || t.destroy(), this.element.removeEventListener("mousedown", this.mousedownHandler, { capture: !0 }), this.view.dom.removeEventListener("dragstart", this.dragstartHandler), this.editor.off("focus", this.focusHandler), this.editor.off("blur", this.blurHandler);
  }
}
const Gm = (n) => new Se({
  key: typeof n.pluginKey == "string" ? new Me(n.pluginKey) : n.pluginKey,
  view: (e) => new HA({ view: e, ...n })
});
Ee.create({
  name: "bubbleMenu",
  addOptions() {
    return {
      element: null,
      tippyOptions: {},
      pluginKey: "bubbleMenu",
      updateDelay: void 0,
      shouldShow: null
    };
  },
  addProseMirrorPlugins() {
    return this.options.element ? [
      Gm({
        pluginKey: this.options.pluginKey,
        editor: this.editor,
        element: this.options.element,
        tippyOptions: this.options.tippyOptions,
        updateDelay: this.options.updateDelay,
        shouldShow: this.options.shouldShow
      })
    ] : [];
  }
});
class jc extends HTMLElement {
  constructor() {
    super();
    j(this, "editor");
    j(this, "items", []);
  }
  connectedCallback() {
    this.innerHTML = `
            <div class="aie-bubble-menu">
               ${this.items.map((t) => `<div class="aie-bubble-menu-item" id="${t.id}">${t.svg}</div>`).join("")}
            </div>
        `, this.querySelector("div").addEventListener("click", (t) => {
      this.items.forEach((r) => {
        t.target.closest(`#${r.id}`) && this.onItemClick(r.id);
      });
    }), this.querySelectorAll(".aie-bubble-menu-item").forEach((t, r) => {
      const i = this.items[r].title;
      i && Je(t, {
        appendTo: this.closest(".aie-container"),
        content: i,
        theme: "aietip",
        arrow: !0
        // trigger:"click",
        // interactive:true,
      });
    });
  }
  onCreate(t, r) {
    this.editor = t.editor;
  }
}
class PA extends jc {
  constructor() {
    super(), this.items = [
      {
        id: "edit",
        title: ae("edit-link"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.41421 15.89L16.5563 5.74786L15.1421 4.33365L5 14.4758V15.89H6.41421ZM7.24264 17.89H3V13.6474L14.435 2.21233C14.8256 1.8218 15.4587 1.8218 15.8492 2.21233L18.6777 5.04075C19.0682 5.43128 19.0682 6.06444 18.6777 6.45497L7.24264 17.89ZM3 19.89H21V21.89H3V19.89Z"></path></svg>'
      },
      {
        id: "unlink",
        title: ae("unlink"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17 17H22V19H19V22H17V17ZM7 7H2V5H5V2H7V7ZM18.364 15.5355L16.9497 14.1213L18.364 12.7071C20.3166 10.7545 20.3166 7.58866 18.364 5.63604C16.4113 3.68342 13.2455 3.68342 11.2929 5.63604L9.87868 7.05025L8.46447 5.63604L9.87868 4.22183C12.6123 1.48816 17.0445 1.48816 19.7782 4.22183C22.5118 6.9555 22.5118 11.3877 19.7782 14.1213L18.364 15.5355ZM15.5355 18.364L14.1213 19.7782C11.3877 22.5118 6.9555 22.5118 4.22183 19.7782C1.48816 17.0445 1.48816 12.6123 4.22183 9.87868L5.63604 8.46447L7.05025 9.87868L5.63604 11.2929C3.68342 13.2455 3.68342 16.4113 5.63604 18.364C7.58866 20.3166 10.7545 20.3166 12.7071 18.364L14.1213 16.9497L15.5355 18.364ZM14.8284 7.75736L16.2426 9.17157L9.17157 16.2426L7.75736 14.8284L14.8284 7.75736Z"></path></svg>'
      },
      {
        id: "visit",
        title: ae("visit-link"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M10 6V8H5V19H16V14H18V20C18 20.5523 17.5523 21 17 21H4C3.44772 21 3 20.5523 3 20V7C3 6.44772 3.44772 6 4 6H10ZM21 3V11H19L18.9999 6.413L11.2071 14.2071L9.79289 12.7929L17.5849 5H13V3H21Z"></path></svg>'
      }
    ];
  }
  connectedCallback() {
    super.connectedCallback();
    const e = new Dg();
    e.setContent(`
            <div style="width: 250px">${ae("link-address")} </div>
             <div style="width: 250px">
             <input type="text" id="href" style="width: 250px">
            </div>
            
            <div style="margin-top: 10px">${ae("link-open-type")}</div>
            <div>
            <select id="target" style="width: 250px">
                <option value="">${ae("default")}</option>
                <option value="_blank">${ae("link-open-blank")}</option>
            </select>
            </div>
        `), e.onConfirmClick((t) => {
      var s, o;
      const r = t.popper.querySelector("#href").value;
      if (r.trim() === "") {
        (s = this.editor) == null || s.chain().focus().extendMarkRange("link").unsetLink().run();
        return;
      }
      let i = t.popper.querySelector("#target").value;
      i.trim() === "" && (i = null), (o = this.editor) == null || o.chain().focus().extendMarkRange("link").setLink({
        href: r,
        target: i,
        rel: null
      }).run();
    }), e.onShow((t) => {
      var i;
      const r = (i = this.editor) == null ? void 0 : i.getAttributes("link");
      r && r.href && (t.popper.querySelector("#href").value = r.href), r && r.target && (t.popper.querySelector("#target").value = r.target);
    }), e.setTrigger(this.querySelector("#edit"), "right");
  }
  onItemClick(e) {
    var t, r;
    e === "unlink" ? (t = this.editor) == null || t.chain().focus().unsetLink().run() : e === "visit" && window.open((r = this.editor) == null ? void 0 : r.getAttributes("link").href, "_blank");
  }
  onTransaction(e) {
  }
}
class $A extends jc {
  constructor() {
    super(), this.items = [
      {
        id: "left",
        title: ae("align-left"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM3 19H17V21H3V19ZM3 14H21V16H3V14ZM3 9H17V11H3V9Z"></path></svg>'
      },
      {
        id: "center",
        title: ae("align-center"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM5 19H19V21H5V19ZM3 14H21V16H3V14ZM5 9H19V11H5V9Z"></path></svg>'
      },
      {
        id: "right",
        title: ae("align-right"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 4H21V6H3V4ZM7 19H21V21H7V19ZM3 14H21V16H3V14ZM7 9H21V11H7V9Z"></path></svg>'
      },
      {
        id: "delete",
        title: ae("delete"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 4V2H17V4H22V6H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V6H2V4H7ZM6 6V20H18V6H6ZM9 9H11V17H9V9ZM13 9H15V17H13V9Z"></path></svg>'
      }
    ];
  }
  onItemClick(e) {
    var t, r, i;
    if (e != "delete") {
      const s = (t = this.editor) == null ? void 0 : t.getAttributes("image");
      s.align = e, (r = this.editor) == null || r.chain().setImage(s).run();
    } else
      (i = this.editor) == null || i.commands.deleteSelection();
  }
  onTransaction(e) {
  }
}
class FA extends jc {
  constructor() {
    super(), this.items = [
      {
        id: "insert-column-left",
        title: ae("insert-column-left"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H14C13.4477 21 13 20.5523 13 20V4C13 3.44772 13.4477 3 14 3H20ZM19 5H15V19H19V5ZM6 7C8.76142 7 11 9.23858 11 12C11 14.7614 8.76142 17 6 17C3.23858 17 1 14.7614 1 12C1 9.23858 3.23858 7 6 7ZM7 9H5V10.999L3 11V13L5 12.999V15H7V12.999L9 13V11L7 10.999V9Z"></path></svg>'
      },
      {
        id: "insert-column-right",
        title: ae("insert-column-right"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M10 3C10.5523 3 11 3.44772 11 4V20C11 20.5523 10.5523 21 10 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H10ZM9 5H5V19H9V5ZM18 7C20.7614 7 23 9.23858 23 12C23 14.7614 20.7614 17 18 17C15.2386 17 13 14.7614 13 12C13 9.23858 15.2386 7 18 7ZM19 9H17V10.999L15 11V13L17 12.999V15H19V12.999L21 13V11L19 10.999V9Z"></path></svg>'
      },
      {
        id: "insert-row-top",
        title: ae("insert-row-top"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 13C20.5523 13 21 13.4477 21 14V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V14C3 13.4477 3.44772 13 4 13H20ZM19 15H5V19H19V15ZM12 1C14.7614 1 17 3.23858 17 6C17 8.76142 14.7614 11 12 11C9.23858 11 7 8.76142 7 6C7 3.23858 9.23858 1 12 1ZM13 3H11V4.999L9 5V7L11 6.999V9H13V6.999L15 7V5L13 4.999V3Z"></path></svg>'
      },
      {
        id: "insert-row-bottom",
        title: ae("insert-row-bottom"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 13C14.7614 13 17 15.2386 17 18C17 20.7614 14.7614 23 12 23C9.23858 23 7 20.7614 7 18C7 15.2386 9.23858 13 12 13ZM13 15H11V16.999L9 17V19L11 18.999V21H13V18.999L15 19V17L13 16.999V15ZM20 3C20.5523 3 21 3.44772 21 4V10C21 10.5523 20.5523 11 20 11H4C3.44772 11 3 10.5523 3 10V4C3 3.44772 3.44772 3 4 3H20ZM5 5V9H19V5H5Z"></path></svg>'
      },
      {
        id: "delete-column",
        title: ae("delete-column"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M12 3C12.5523 3 13 3.44772 13 4L12.9998 11.9998C13.8355 11.372 14.8743 11 16 11C18.7614 11 21 13.2386 21 16C21 18.7614 18.7614 21 16 21C14.9681 21 14.0092 20.6874 13.2129 20.1518L13 20C13 20.5523 12.5523 21 12 21H6C5.44772 21 5 20.5523 5 20V4C5 3.44772 5.44772 3 6 3H12ZM11 5H7V19H11V5ZM19 15H13V17H19V15Z"></path></svg>'
      },
      {
        id: "delete-row",
        title: ae("delete-row"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 5C20.5523 5 21 5.44772 21 6V12C21 12.5523 20.5523 13 20 13C20.628 13.8355 21 14.8743 21 16C21 18.7614 18.7614 21 16 21C13.2386 21 11 18.7614 11 16C11 14.8743 11.372 13.8355 11.9998 12.9998L4 13C3.44772 13 3 12.5523 3 12V6C3 5.44772 3.44772 5 4 5H20ZM13 15V17H19V15H13ZM19 7H5V11H19V7Z"></path></svg>'
      },
      {
        id: "merge-cells-horizontal",
        title: ae("merge-cells-horizontal"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM11 5H5V10.999H7V9L10 12L7 15V13H5V19H11V17H13V19H19V13H17V15L14 12L17 9V10.999H19V5H13V7H11V5ZM13 13V15H11V13H13ZM13 9V11H11V9H13Z"></path></svg>'
      },
      {
        id: "merge-cells-vertical",
        title: ae("merge-cells-vertical"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M21 20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20C20.5523 3 21 3.44772 21 4V20ZM19 11V5H13.001V7H15L12 10L9 7H11V5H5V11H7V13H5V19H11V17H9L12 14L15 17H13.001V19H19V13H17V11H19ZM11 13H9V11H11V13ZM15 13H13V11H15V13Z"></path></svg>'
      },
      {
        id: "split-cells-horizontal",
        title: ae("split-cells-horizontal"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM11 5H5V19H11V15H13V19H19V5H13V9H11V5ZM15 9L18 12L15 15V13H9V15L6 12L9 9V11H15V9Z"></path></svg>'
      },
      {
        id: "split-cells-vertical",
        title: ae("split-cells-vertical"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0z"></path><path d="M20 3C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3H20ZM19 5H5V10.999L9 11V13H5V19H19V13H15V11L19 10.999V5ZM12 6L15 9H13V15H15L12 18L9 15H11V9H9L12 6Z"></path></svg>'
      },
      {
        id: "delete",
        title: ae("delete-table"),
        svg: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 4V2H17V4H22V6H20V21C20 21.5523 19.5523 22 19 22H5C4.44772 22 4 21.5523 4 21V6H2V4H7ZM6 6V20H18V6H6ZM9 9H11V17H9V9ZM13 9H15V17H13V9Z"></path></svg>'
      }
      // {
      //     id: "insert-row-bottom",
      //     svg: ""
      // }
    ];
  }
  onItemClick(e) {
    var t, r, i, s, o, a, l, c, u;
    e === "insert-column-left" ? (t = this.editor) == null || t.chain().focus().addColumnBefore().run() : e === "insert-column-right" ? (r = this.editor) == null || r.chain().focus().addColumnAfter().run() : e === "insert-row-top" ? (i = this.editor) == null || i.chain().focus().addRowBefore().run() : e === "insert-row-bottom" ? (s = this.editor) == null || s.chain().focus().addRowAfter().run() : e === "delete-column" ? (o = this.editor) == null || o.chain().focus().deleteColumn().run() : e === "delete-row" ? (a = this.editor) == null || a.chain().focus().deleteRow().run() : e === "merge-cells-horizontal" || e === "merge-cells-vertical" ? (l = this.editor) == null || l.chain().focus().mergeCells().run() : e === "split-cells-horizontal" || e === "split-cells-vertical" ? (c = this.editor) == null || c.chain().focus().splitCell().run() : e === "delete" && ((u = this.editor) == null || u.chain().focus().deleteTable().run());
  }
  show(e) {
    !e || e.length == 0 ? this.style.display = "none" : this.style.display = "", this.querySelectorAll(".aie-bubble-menu-item").forEach((t) => {
      t.style.display = "none";
    }), e.forEach((t) => {
      const r = this.querySelector(`#${t}`);
      r.style.display = "";
    });
  }
  onTransaction(e) {
    if (!e.editor.isActive("table"))
      return;
    const { state: { selection: t }, view: r } = e.editor;
    if (t instanceof fe)
      if (this.isOneCellSelected(t)) {
        const i = ["insert-column-left", "insert-column-right", "delete-column", "insert-row-top", "insert-row-bottom", "delete-row"];
        if (e.editor.can().splitCell()) {
          const s = r.nodeDOM(t.$anchorCell.pos), o = s.getAttribute("colspan"), a = s.getAttribute("rowspan");
          o && Number(o) > 1 ? i.push("split-cells-horizontal") : a && Number(a) > 1 && i.push("split-cells-vertical");
        }
        this.show(i);
      } else
        this.isAllTableSelected(t) ? this.show(["delete"]) : this.isColumnSelected(t, r) ? this.show(["insert-column-left", "insert-column-right", "delete-column", "merge-cells-vertical"]) : this.isRowSelected(t, r) ? this.show(["insert-row-top", "insert-row-bottom", "delete-row", "merge-cells-horizontal"]) : this.show(["merge-cells-horizontal"]);
    else
      this.show(["insert-column-left", "insert-column-right", "delete-column", "insert-row-top", "insert-row-bottom", "delete-row"]);
  }
  isAllTableSelected(e) {
    const t = Ne.get(e.$anchorCell.node(-1)), r = t.cellsInRect({
      top: 0,
      left: 0,
      right: t.width,
      bottom: t.height
    });
    return e.ranges.length == r.length;
  }
  isOneCellSelected(e) {
    return e.ranges.length == 1;
  }
  isColumnSelected(e, t) {
    let r = -1;
    for (let i of e.ranges)
      if (r == -1)
        r = t.coordsAtPos(i.$from.pos).left;
      else if (r != t.coordsAtPos(i.$from.pos).left)
        return !1;
    return !0;
  }
  isRowSelected(e, t) {
    let r = -1;
    for (let i of e.ranges)
      if (r == -1)
        r = t.coordsAtPos(i.$from.pos).bottom;
      else if (r != t.coordsAtPos(i.$from.pos).bottom)
        return !1;
    return !0;
  }
}
window.customElements.define("aie-bubble-link", PA);
window.customElements.define("aie-bubble-image", $A);
window.customElements.define("aie-bubble-table", FA);
function Jc(n, e) {
  return Ee.create({
    name: n,
    addOptions() {
      return {
        ...e
      };
    },
    addProseMirrorPlugins() {
      return this.options.element ? [
        Gm({
          pluginKey: this.options.pluginKey,
          editor: this.editor,
          element: this.options.element,
          tippyOptions: this.options.tippyOptions,
          updateDelay: this.options.updateDelay,
          shouldShow: this.options.shouldShow
        })
      ] : [];
    }
  });
}
const zA = (n) => {
  const e = document.createElement("aie-bubble-link");
  return n.eventComponents.push(e), Jc("linkBubble", {
    pluginKey: "linkBubble",
    element: e,
    tippyOptions: {
      appendTo: n.container,
      placement: "bottom",
      arrow: !1
    },
    shouldShow: ({ editor: t }) => t.isActive("link")
  });
}, VA = (n) => {
  const e = document.createElement("aie-bubble-image");
  return n.eventComponents.push(e), Jc("imageBubble", {
    pluginKey: "imageBubble",
    element: e,
    tippyOptions: {
      appendTo: n.container,
      placement: "top-start",
      arrow: !1,
      getReferenceClientRect: () => {
        const { ranges: t } = n.innerEditor.state.selection, r = Math.min(...t.map((u) => u.$from.pos)), i = Math.max(...t.map((u) => u.$to.pos)), s = n.innerEditor.view, a = s.nodeDOM(r).querySelector("img"), l = mc(s, r, i), c = a.getBoundingClientRect();
        return {
          ...l,
          left: c.left + c.width * 0.25
        };
      }
    },
    shouldShow: ({ editor: t }) => t.isActive("image")
  });
}, qA = (n) => {
  const e = document.createElement("aie-bubble-table");
  return n.eventComponents.push(e), Jc("tableBubble", {
    pluginKey: "tableBubble",
    element: e,
    tippyOptions: {
      placement: "top",
      appendTo: n.container,
      arrow: !1,
      getReferenceClientRect: () => {
        const t = n.innerEditor.state.selection, { ranges: r } = t, i = Math.min(...r.map((u) => u.$from.pos)), s = Math.max(...r.map((u) => u.$to.pos)), o = n.innerEditor.view, a = mc(o, i, s), l = n.innerEditor.state.selection.$from.posAtIndex(0, 1), c = n.innerEditor.view.coordsAtPos(l);
        return {
          ...a,
          top: c.top
        };
      }
    },
    shouldShow: ({ editor: t }) => t.isActive("table")
  });
}, UA = (n) => {
  const e = [];
  return e.push(zA(n)), e.push(VA(n)), e.push(qA(n)), e;
}, KA = Ee.create({
  name: "placeholder",
  addOptions() {
    return {
      emptyEditorClass: "is-editor-empty",
      emptyNodeClass: "is-empty",
      placeholder: "Write something …",
      showOnlyWhenEditable: !0,
      showOnlyCurrent: !0,
      includeChildren: !1
    };
  },
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("placeholder"),
        props: {
          decorations: ({ doc: n, selection: e }) => {
            const t = this.editor.isEditable || !this.options.showOnlyWhenEditable, { anchor: r } = e, i = [];
            if (!t)
              return null;
            const s = n.type.createAndFill(), o = (s == null ? void 0 : s.sameMarkup(n)) && s.content.findDiffStart(n.content) === null;
            return n.descendants((a, l) => {
              const c = r >= l && r <= l + a.nodeSize, u = !a.isLeaf && !a.childCount;
              if ((c || !this.options.showOnlyCurrent) && u) {
                const d = [this.options.emptyNodeClass];
                o && d.push(this.options.emptyEditorClass);
                const f = Be.node(l, l + a.nodeSize, {
                  class: d.join(" "),
                  "data-placeholder": typeof this.options.placeholder == "function" ? this.options.placeholder({
                    editor: this.editor,
                    node: a,
                    pos: l,
                    hasAnchor: c
                  }) : this.options.placeholder
                });
                i.push(f);
              }
              return this.options.includeChildren;
            }), ke.create(n, i);
          }
        }
      })
    ];
  }
});
function WA(n) {
  var e;
  const { char: t, allowSpaces: r, allowedPrefixes: i, startOfLine: s, $position: o } = n, a = hw(t), l = new RegExp(`\\s${a}$`), c = s ? "^" : "", u = r ? new RegExp(`${c}${a}.*?(?=\\s${a}|$)`, "gm") : new RegExp(`${c}(?:^)?${a}[^\\s${a}]*`, "gm"), d = ((e = o.nodeBefore) === null || e === void 0 ? void 0 : e.isText) && o.nodeBefore.text;
  if (!d)
    return null;
  const f = o.pos - d.length, p = Array.from(d.matchAll(u)).pop();
  if (!p || p.input === void 0 || p.index === void 0)
    return null;
  const h = p.input.slice(Math.max(0, p.index - 1), p.index), g = new RegExp(`^[${i == null ? void 0 : i.join("")}\0]?$`).test(h);
  if (i !== null && !g)
    return null;
  const m = f + p.index;
  let v = m + p[0].length;
  return r && l.test(d.slice(v - 1, v + 1)) && (p[0] += " ", v += 1), m < o.pos && v >= o.pos ? {
    range: {
      from: m,
      to: v
    },
    query: p[0].slice(t.length),
    text: p[0]
  } : null;
}
const GA = new Me("suggestion");
function Zm({ pluginKey: n = GA, editor: e, char: t = "@", allowSpaces: r = !1, allowedPrefixes: i = [" "], startOfLine: s = !1, decorationTag: o = "span", decorationClass: a = "suggestion", command: l = () => null, items: c = () => [], render: u = () => ({}), allow: d = () => !0 }) {
  let f;
  const p = u == null ? void 0 : u(), h = new Se({
    key: n,
    view() {
      return {
        update: async (g, m) => {
          var v, y, k, b, x, w, S;
          const T = (v = this.key) === null || v === void 0 ? void 0 : v.getState(m), M = (y = this.key) === null || y === void 0 ? void 0 : y.getState(g.state), L = T.active && M.active && T.range.from !== M.range.from, z = !T.active && M.active, G = T.active && !M.active, q = !z && !G && T.query !== M.query, A = z || L, H = q && !L, C = G || L;
          if (!A && !H && !C)
            return;
          const E = C && !A ? T : M, _ = g.dom.querySelector(`[data-decoration-id="${E.decorationId}"]`);
          f = {
            editor: e,
            range: E.range,
            query: E.query,
            text: E.text,
            items: [],
            command: (D) => {
              l({
                editor: e,
                range: E.range,
                props: D
              });
            },
            decorationNode: _,
            // virtual node for popper.js or tippy.js
            // this can be used for building popups without a DOM node
            clientRect: _ ? () => {
              var D;
              const { decorationId: P } = (D = this.key) === null || D === void 0 ? void 0 : D.getState(e.state), W = g.dom.querySelector(`[data-decoration-id="${P}"]`);
              return (W == null ? void 0 : W.getBoundingClientRect()) || null;
            } : null
          }, A && ((k = p == null ? void 0 : p.onBeforeStart) === null || k === void 0 || k.call(p, f)), H && ((b = p == null ? void 0 : p.onBeforeUpdate) === null || b === void 0 || b.call(p, f)), (H || A) && (f.items = await c({
            editor: e,
            query: E.query
          })), C && ((x = p == null ? void 0 : p.onExit) === null || x === void 0 || x.call(p, f)), H && ((w = p == null ? void 0 : p.onUpdate) === null || w === void 0 || w.call(p, f)), A && ((S = p == null ? void 0 : p.onStart) === null || S === void 0 || S.call(p, f));
        },
        destroy: () => {
          var g;
          f && ((g = p == null ? void 0 : p.onExit) === null || g === void 0 || g.call(p, f));
        }
      };
    },
    state: {
      // Initialize the plugin's internal state.
      init() {
        return {
          active: !1,
          range: {
            from: 0,
            to: 0
          },
          query: null,
          text: null,
          composing: !1
        };
      },
      // Apply changes to the plugin state from a view transaction.
      apply(g, m, v, y) {
        const { isEditable: k } = e, { composing: b } = e.view, { selection: x } = g, { empty: w, from: S } = x, T = { ...m };
        if (T.composing = b, k && (w || e.view.composing)) {
          (S < m.range.from || S > m.range.to) && !b && !m.composing && (T.active = !1);
          const M = WA({
            char: t,
            allowSpaces: r,
            allowedPrefixes: i,
            startOfLine: s,
            $position: x.$from
          }), L = `id_${Math.floor(Math.random() * 4294967295)}`;
          M && d({ editor: e, state: y, range: M.range }) ? (T.active = !0, T.decorationId = m.decorationId ? m.decorationId : L, T.range = M.range, T.query = M.query, T.text = M.text) : T.active = !1;
        } else
          T.active = !1;
        return T.active || (T.decorationId = null, T.range = { from: 0, to: 0 }, T.query = null, T.text = null), T;
      }
    },
    props: {
      // Call the keydown hook if suggestion is active.
      handleKeyDown(g, m) {
        var v;
        const { active: y, range: k } = h.getState(g.state);
        return y && ((v = p == null ? void 0 : p.onKeyDown) === null || v === void 0 ? void 0 : v.call(p, { view: g, event: m, range: k })) || !1;
      },
      // Setup decorator on the currently active suggestion.
      decorations(g) {
        const { active: m, range: v, decorationId: y } = h.getState(g);
        return m ? ke.create(g.doc, [
          Be.inline(v.from, v.to, {
            nodeName: o,
            class: a,
            "data-decoration-id": y
          })
        ]) : null;
      }
    }
  });
  return h;
}
const ZA = new Me("mention"), jA = le.create({
  name: "mention",
  addOptions() {
    return {
      HTMLAttributes: {},
      renderLabel({ options: n, node: e }) {
        var t;
        return `${n.suggestion.char}${(t = e.attrs.label) !== null && t !== void 0 ? t : e.attrs.id}`;
      },
      suggestion: {
        char: "@",
        pluginKey: ZA,
        command: ({ editor: n, range: e, props: t }) => {
          var r, i;
          const s = n.view.state.selection.$to.nodeAfter;
          ((r = s == null ? void 0 : s.text) === null || r === void 0 ? void 0 : r.startsWith(" ")) && (e.to += 1), n.chain().focus().insertContentAt(e, [
            {
              type: this.name,
              attrs: t
            },
            {
              type: "text",
              text: " "
            }
          ]).run(), (i = window.getSelection()) === null || i === void 0 || i.collapseToEnd();
        },
        allow: ({ state: n, range: e }) => {
          const t = n.doc.resolve(e.from), r = n.schema.nodes[this.name];
          return !!t.parent.type.contentMatch.matchType(r);
        }
      }
    };
  },
  group: "inline",
  inline: !0,
  selectable: !1,
  atom: !0,
  addAttributes() {
    return {
      id: {
        default: null,
        parseHTML: (n) => n.getAttribute("data-id"),
        renderHTML: (n) => n.id ? {
          "data-id": n.id
        } : {}
      },
      label: {
        default: null,
        parseHTML: (n) => n.getAttribute("data-label"),
        renderHTML: (n) => n.label ? {
          "data-label": n.label
        } : {}
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: `span[data-type="${this.name}"]`
      }
    ];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [
      "span",
      pe({ "data-type": this.name }, this.options.HTMLAttributes, e),
      this.options.renderLabel({
        options: this.options,
        node: n
      })
    ];
  },
  renderText({ node: n }) {
    return this.options.renderLabel({
      options: this.options,
      node: n
    });
  },
  addKeyboardShortcuts() {
    return {
      Backspace: () => this.editor.commands.command(({ tr: n, state: e }) => {
        let t = !1;
        const { selection: r } = e, { empty: i, anchor: s } = r;
        return i ? (e.doc.nodesBetween(s - 1, s, (o, a) => {
          if (o.type.name === this.name)
            return t = !0, n.insertText(this.options.suggestion.char || "", a, a + o.nodeSize), !1;
        }), t) : !1;
      })
    };
  },
  addProseMirrorPlugins() {
    return [
      Zm({
        editor: this.editor,
        ...this.options.suggestion
      })
    ];
  }
}), JA = (n) => jA.configure({
  HTMLAttributes: {
    class: "mention"
  },
  suggestion: {
    items: ({ query: e }) => n(e),
    render: () => {
      let e, t, r = 0, i;
      const s = () => {
        e.innerHTML = `
                            <div class="items">
                             ${i.items.map((o, a) => `<button class="item ${a === r ? "item-selected" : ""}" data-index="${a}"> @${o.name ? o.name : o}</button>`).join("")}
                            </div>
                            `, e.addEventListener("click", (o) => {
          const a = o.target.closest(".item");
          if (a) {
            const l = Number(a.getAttribute("data-index")), c = i.items[l];
            c && c.id ? i.command(c) : i.command({ id: c });
          }
        });
      };
      return {
        onStart: (o) => {
          e = document.createElement("div"), e.classList.add("suggestion"), i = o, o.clientRect && (s(), t = Je("body", {
            getReferenceClientRect: o.clientRect,
            appendTo: () => o.editor.view.dom.closest(".aie-container"),
            content: e,
            showOnCreate: !0,
            interactive: !0,
            allowHTML: !0,
            trigger: "manual",
            placement: "bottom-start",
            arrow: !1
          }));
        },
        onUpdate(o) {
          i = o, o.clientRect && (s(), t[0].setProps({
            getReferenceClientRect: o.clientRect
          }));
        },
        onKeyDown(o) {
          if (o.event.key === "Escape")
            return t[0].hide(), !0;
          if (o.event.key === "ArrowUp")
            return r = (r + i.items.length - 1) % i.items.length, s(), !0;
          if (o.event.key === "ArrowDown")
            return r = (r + 1) % i.items.length, s(), !0;
          if (o.event.key === "Enter") {
            const a = i.items[r];
            return a && a.id ? i.command(a) : i.command({ id: a }), !0;
          }
          return !1;
        },
        onExit() {
          t[0].destroy(), e.remove();
        }
      };
    }
  }
}), YA = [
  {
    name: "AI 续写",
    prompt: "请帮我继续扩展一些这段话的内容",
    model: "xinghuo"
  },
  {
    name: "AI 提问",
    prompt: "",
    model: "xinghuo"
  },
  {
    name: "AI 翻译",
    prompt: "请帮我把这段内容翻译为英语，直接返回英语结果",
    model: "xinghuo"
  },
  {
    name: "AI 生图",
    prompt: "请根据以上的内容，生成一张图片，并把图片返回给我",
    model: "xinghuo"
  }
], XA = Ee.create({
  name: "aiCommand",
  // @ts-ignore
  addOptions() {
    return {
      suggestion: {
        char: "/",
        command: ({ editor: n, range: e, props: t }) => {
          n.chain().focus().deleteRange(e).run();
          let r = t;
          const i = n.state.selection.$head.parent.textContent, s = n.userOptions, o = Mc.create(r.model, s);
          o ? o == null || o.start(i, r.prompt, n) : console.error("Ai model config error.");
        },
        render: () => {
          let n, e, t = 0, r;
          const i = () => {
            n.innerHTML = `
                            <div class="items">
                             ${r.items.map((s, o) => `<button class="item ${o === t ? "item-selected" : ""}" data-index="${o}">${s.name}</button>`).join("")}
                            </div>
                            `, n.addEventListener("click", (s) => {
              const o = s.target.closest(".item");
              if (o) {
                const a = Number(o.getAttribute("data-index")), l = r.items[a];
                l && r.command(l);
              }
            });
          };
          return {
            onStart: (s) => {
              n = document.createElement("div"), n.classList.add("suggestion"), r = s, s.clientRect && (i(), e = Je("body", {
                getReferenceClientRect: s.clientRect,
                appendTo: () => s.editor.view.dom.closest(".aie-container"),
                content: n,
                showOnCreate: !0,
                interactive: !0,
                allowHTML: !0,
                trigger: "manual",
                placement: "right-start",
                arrow: !1
              }));
            },
            onUpdate(s) {
              r = s, s.clientRect && e[0].setProps({
                getReferenceClientRect: s.clientRect
              });
            },
            onKeyDown(s) {
              if (s.event.key === "Escape")
                return e[0].hide(), !0;
              if (s.event.key === "ArrowUp")
                return t = (t + r.items.length - 1) % r.items.length, i(), !0;
              if (s.event.key === "ArrowDown")
                return t = (t + 1) % r.items.length, i(), !0;
              if (s.event.key === "Enter") {
                const o = r.items[t];
                return o && r.command(o), !0;
              }
              return !1;
            },
            onExit() {
              e[0].destroy(), n.remove();
            }
          };
        }
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      Zm({
        editor: this.editor,
        ...this.options.suggestion
      })
    ];
  }
}), QA = Ee.create({
  addProseMirrorPlugins() {
    return [
      new Se({
        key: new Me("selection-marker"),
        state: {
          init: () => ke.empty,
          apply: (n, e, t) => {
            const { selection: r } = n;
            if (r) {
              const i = [Be.inline(
                r.$from.pos,
                r.$to.pos,
                { class: "selection-marker" },
                { inclusiveLeft: !0, inclusiveRight: !0 }
              )];
              return ke.create(t.doc, i);
            }
            return e;
          }
        },
        props: {
          decorations(n) {
            return this.getState(n);
          }
        }
      })
    ];
  }
});
var ve = {};
const eT = "Á", tT = "á", nT = "Ă", rT = "ă", iT = "∾", sT = "∿", oT = "∾̳", aT = "Â", lT = "â", cT = "´", uT = "А", dT = "а", fT = "Æ", pT = "æ", hT = "⁡", gT = "𝔄", mT = "𝔞", bT = "À", yT = "à", vT = "ℵ", wT = "ℵ", kT = "Α", ET = "α", xT = "Ā", CT = "ā", ST = "⨿", _T = "&", MT = "&", AT = "⩕", TT = "⩓", NT = "∧", OT = "⩜", LT = "⩘", RT = "⩚", DT = "∠", IT = "⦤", BT = "∠", HT = "⦨", PT = "⦩", $T = "⦪", FT = "⦫", zT = "⦬", VT = "⦭", qT = "⦮", UT = "⦯", KT = "∡", WT = "∟", GT = "⊾", ZT = "⦝", jT = "∢", JT = "Å", YT = "⍼", XT = "Ą", QT = "ą", eN = "𝔸", tN = "𝕒", nN = "⩯", rN = "≈", iN = "⩰", sN = "≊", oN = "≋", aN = "'", lN = "⁡", cN = "≈", uN = "≊", dN = "Å", fN = "å", pN = "𝒜", hN = "𝒶", gN = "≔", mN = "*", bN = "≈", yN = "≍", vN = "Ã", wN = "ã", kN = "Ä", EN = "ä", xN = "∳", CN = "⨑", SN = "≌", _N = "϶", MN = "‵", AN = "∽", TN = "⋍", NN = "∖", ON = "⫧", LN = "⊽", RN = "⌅", DN = "⌆", IN = "⌅", BN = "⎵", HN = "⎶", PN = "≌", $N = "Б", FN = "б", zN = "„", VN = "∵", qN = "∵", UN = "∵", KN = "⦰", WN = "϶", GN = "ℬ", ZN = "ℬ", jN = "Β", JN = "β", YN = "ℶ", XN = "≬", QN = "𝔅", eO = "𝔟", tO = "⋂", nO = "◯", rO = "⋃", iO = "⨀", sO = "⨁", oO = "⨂", aO = "⨆", lO = "★", cO = "▽", uO = "△", dO = "⨄", fO = "⋁", pO = "⋀", hO = "⤍", gO = "⧫", mO = "▪", bO = "▴", yO = "▾", vO = "◂", wO = "▸", kO = "␣", EO = "▒", xO = "░", CO = "▓", SO = "█", _O = "=⃥", MO = "≡⃥", AO = "⫭", TO = "⌐", NO = "𝔹", OO = "𝕓", LO = "⊥", RO = "⊥", DO = "⋈", IO = "⧉", BO = "┐", HO = "╕", PO = "╖", $O = "╗", FO = "┌", zO = "╒", VO = "╓", qO = "╔", UO = "─", KO = "═", WO = "┬", GO = "╤", ZO = "╥", jO = "╦", JO = "┴", YO = "╧", XO = "╨", QO = "╩", eL = "⊟", tL = "⊞", nL = "⊠", rL = "┘", iL = "╛", sL = "╜", oL = "╝", aL = "└", lL = "╘", cL = "╙", uL = "╚", dL = "│", fL = "║", pL = "┼", hL = "╪", gL = "╫", mL = "╬", bL = "┤", yL = "╡", vL = "╢", wL = "╣", kL = "├", EL = "╞", xL = "╟", CL = "╠", SL = "‵", _L = "˘", ML = "˘", AL = "¦", TL = "𝒷", NL = "ℬ", OL = "⁏", LL = "∽", RL = "⋍", DL = "⧅", IL = "\\", BL = "⟈", HL = "•", PL = "•", $L = "≎", FL = "⪮", zL = "≏", VL = "≎", qL = "≏", UL = "Ć", KL = "ć", WL = "⩄", GL = "⩉", ZL = "⩋", jL = "∩", JL = "⋒", YL = "⩇", XL = "⩀", QL = "ⅅ", eR = "∩︀", tR = "⁁", nR = "ˇ", rR = "ℭ", iR = "⩍", sR = "Č", oR = "č", aR = "Ç", lR = "ç", cR = "Ĉ", uR = "ĉ", dR = "∰", fR = "⩌", pR = "⩐", hR = "Ċ", gR = "ċ", mR = "¸", bR = "¸", yR = "⦲", vR = "¢", wR = "·", kR = "·", ER = "𝔠", xR = "ℭ", CR = "Ч", SR = "ч", _R = "✓", MR = "✓", AR = "Χ", TR = "χ", NR = "ˆ", OR = "≗", LR = "↺", RR = "↻", DR = "⊛", IR = "⊚", BR = "⊝", HR = "⊙", PR = "®", $R = "Ⓢ", FR = "⊖", zR = "⊕", VR = "⊗", qR = "○", UR = "⧃", KR = "≗", WR = "⨐", GR = "⫯", ZR = "⧂", jR = "∲", JR = "”", YR = "’", XR = "♣", QR = "♣", eD = ":", tD = "∷", nD = "⩴", rD = "≔", iD = "≔", sD = ",", oD = "@", aD = "∁", lD = "∘", cD = "∁", uD = "ℂ", dD = "≅", fD = "⩭", pD = "≡", hD = "∮", gD = "∯", mD = "∮", bD = "𝕔", yD = "ℂ", vD = "∐", wD = "∐", kD = "©", ED = "©", xD = "℗", CD = "∳", SD = "↵", _D = "✗", MD = "⨯", AD = "𝒞", TD = "𝒸", ND = "⫏", OD = "⫑", LD = "⫐", RD = "⫒", DD = "⋯", ID = "⤸", BD = "⤵", HD = "⋞", PD = "⋟", $D = "↶", FD = "⤽", zD = "⩈", VD = "⩆", qD = "≍", UD = "∪", KD = "⋓", WD = "⩊", GD = "⊍", ZD = "⩅", jD = "∪︀", JD = "↷", YD = "⤼", XD = "⋞", QD = "⋟", eI = "⋎", tI = "⋏", nI = "¤", rI = "↶", iI = "↷", sI = "⋎", oI = "⋏", aI = "∲", lI = "∱", cI = "⌭", uI = "†", dI = "‡", fI = "ℸ", pI = "↓", hI = "↡", gI = "⇓", mI = "‐", bI = "⫤", yI = "⊣", vI = "⤏", wI = "˝", kI = "Ď", EI = "ď", xI = "Д", CI = "д", SI = "‡", _I = "⇊", MI = "ⅅ", AI = "ⅆ", TI = "⤑", NI = "⩷", OI = "°", LI = "∇", RI = "Δ", DI = "δ", II = "⦱", BI = "⥿", HI = "𝔇", PI = "𝔡", $I = "⥥", FI = "⇃", zI = "⇂", VI = "´", qI = "˙", UI = "˝", KI = "`", WI = "˜", GI = "⋄", ZI = "⋄", jI = "⋄", JI = "♦", YI = "♦", XI = "¨", QI = "ⅆ", e3 = "ϝ", t3 = "⋲", n3 = "÷", r3 = "÷", i3 = "⋇", s3 = "⋇", o3 = "Ђ", a3 = "ђ", l3 = "⌞", c3 = "⌍", u3 = "$", d3 = "𝔻", f3 = "𝕕", p3 = "¨", h3 = "˙", g3 = "⃜", m3 = "≐", b3 = "≑", y3 = "≐", v3 = "∸", w3 = "∔", k3 = "⊡", E3 = "⌆", x3 = "∯", C3 = "¨", S3 = "⇓", _3 = "⇐", M3 = "⇔", A3 = "⫤", T3 = "⟸", N3 = "⟺", O3 = "⟹", L3 = "⇒", R3 = "⊨", D3 = "⇑", I3 = "⇕", B3 = "∥", H3 = "⤓", P3 = "↓", $3 = "↓", F3 = "⇓", z3 = "⇵", V3 = "̑", q3 = "⇊", U3 = "⇃", K3 = "⇂", W3 = "⥐", G3 = "⥞", Z3 = "⥖", j3 = "↽", J3 = "⥟", Y3 = "⥗", X3 = "⇁", Q3 = "↧", e4 = "⊤", t4 = "⤐", n4 = "⌟", r4 = "⌌", i4 = "𝒟", s4 = "𝒹", o4 = "Ѕ", a4 = "ѕ", l4 = "⧶", c4 = "Đ", u4 = "đ", d4 = "⋱", f4 = "▿", p4 = "▾", h4 = "⇵", g4 = "⥯", m4 = "⦦", b4 = "Џ", y4 = "џ", v4 = "⟿", w4 = "É", k4 = "é", E4 = "⩮", x4 = "Ě", C4 = "ě", S4 = "Ê", _4 = "ê", M4 = "≖", A4 = "≕", T4 = "Э", N4 = "э", O4 = "⩷", L4 = "Ė", R4 = "ė", D4 = "≑", I4 = "ⅇ", B4 = "≒", H4 = "𝔈", P4 = "𝔢", $4 = "⪚", F4 = "È", z4 = "è", V4 = "⪖", q4 = "⪘", U4 = "⪙", K4 = "∈", W4 = "⏧", G4 = "ℓ", Z4 = "⪕", j4 = "⪗", J4 = "Ē", Y4 = "ē", X4 = "∅", Q4 = "∅", e5 = "◻", t5 = "∅", n5 = "▫", r5 = " ", i5 = " ", s5 = " ", o5 = "Ŋ", a5 = "ŋ", l5 = " ", c5 = "Ę", u5 = "ę", d5 = "𝔼", f5 = "𝕖", p5 = "⋕", h5 = "⧣", g5 = "⩱", m5 = "ε", b5 = "Ε", y5 = "ε", v5 = "ϵ", w5 = "≖", k5 = "≕", E5 = "≂", x5 = "⪖", C5 = "⪕", S5 = "⩵", _5 = "=", M5 = "≂", A5 = "≟", T5 = "⇌", N5 = "≡", O5 = "⩸", L5 = "⧥", R5 = "⥱", D5 = "≓", I5 = "ℯ", B5 = "ℰ", H5 = "≐", P5 = "⩳", $5 = "≂", F5 = "Η", z5 = "η", V5 = "Ð", q5 = "ð", U5 = "Ë", K5 = "ë", W5 = "€", G5 = "!", Z5 = "∃", j5 = "∃", J5 = "ℰ", Y5 = "ⅇ", X5 = "ⅇ", Q5 = "≒", eB = "Ф", tB = "ф", nB = "♀", rB = "ﬃ", iB = "ﬀ", sB = "ﬄ", oB = "𝔉", aB = "𝔣", lB = "ﬁ", cB = "◼", uB = "▪", dB = "fj", fB = "♭", pB = "ﬂ", hB = "▱", gB = "ƒ", mB = "𝔽", bB = "𝕗", yB = "∀", vB = "∀", wB = "⋔", kB = "⫙", EB = "ℱ", xB = "⨍", CB = "½", SB = "⅓", _B = "¼", MB = "⅕", AB = "⅙", TB = "⅛", NB = "⅔", OB = "⅖", LB = "¾", RB = "⅗", DB = "⅜", IB = "⅘", BB = "⅚", HB = "⅝", PB = "⅞", $B = "⁄", FB = "⌢", zB = "𝒻", VB = "ℱ", qB = "ǵ", UB = "Γ", KB = "γ", WB = "Ϝ", GB = "ϝ", ZB = "⪆", jB = "Ğ", JB = "ğ", YB = "Ģ", XB = "Ĝ", QB = "ĝ", e9 = "Г", t9 = "г", n9 = "Ġ", r9 = "ġ", i9 = "≥", s9 = "≧", o9 = "⪌", a9 = "⋛", l9 = "≥", c9 = "≧", u9 = "⩾", d9 = "⪩", f9 = "⩾", p9 = "⪀", h9 = "⪂", g9 = "⪄", m9 = "⋛︀", b9 = "⪔", y9 = "𝔊", v9 = "𝔤", w9 = "≫", k9 = "⋙", E9 = "⋙", x9 = "ℷ", C9 = "Ѓ", S9 = "ѓ", _9 = "⪥", M9 = "≷", A9 = "⪒", T9 = "⪤", N9 = "⪊", O9 = "⪊", L9 = "⪈", R9 = "≩", D9 = "⪈", I9 = "≩", B9 = "⋧", H9 = "𝔾", P9 = "𝕘", $9 = "`", F9 = "≥", z9 = "⋛", V9 = "≧", q9 = "⪢", U9 = "≷", K9 = "⩾", W9 = "≳", G9 = "𝒢", Z9 = "ℊ", j9 = "≳", J9 = "⪎", Y9 = "⪐", X9 = "⪧", Q9 = "⩺", eH = ">", tH = ">", nH = "≫", rH = "⋗", iH = "⦕", sH = "⩼", oH = "⪆", aH = "⥸", lH = "⋗", cH = "⋛", uH = "⪌", dH = "≷", fH = "≳", pH = "≩︀", hH = "≩︀", gH = "ˇ", mH = " ", bH = "½", yH = "ℋ", vH = "Ъ", wH = "ъ", kH = "⥈", EH = "↔", xH = "⇔", CH = "↭", SH = "^", _H = "ℏ", MH = "Ĥ", AH = "ĥ", TH = "♥", NH = "♥", OH = "…", LH = "⊹", RH = "𝔥", DH = "ℌ", IH = "ℋ", BH = "⤥", HH = "⤦", PH = "⇿", $H = "∻", FH = "↩", zH = "↪", VH = "𝕙", qH = "ℍ", UH = "―", KH = "─", WH = "𝒽", GH = "ℋ", ZH = "ℏ", jH = "Ħ", JH = "ħ", YH = "≎", XH = "≏", QH = "⁃", eP = "‐", tP = "Í", nP = "í", rP = "⁣", iP = "Î", sP = "î", oP = "И", aP = "и", lP = "İ", cP = "Е", uP = "е", dP = "¡", fP = "⇔", pP = "𝔦", hP = "ℑ", gP = "Ì", mP = "ì", bP = "ⅈ", yP = "⨌", vP = "∭", wP = "⧜", kP = "℩", EP = "Ĳ", xP = "ĳ", CP = "Ī", SP = "ī", _P = "ℑ", MP = "ⅈ", AP = "ℐ", TP = "ℑ", NP = "ı", OP = "ℑ", LP = "⊷", RP = "Ƶ", DP = "⇒", IP = "℅", BP = "∞", HP = "⧝", PP = "ı", $P = "⊺", FP = "∫", zP = "∬", VP = "ℤ", qP = "∫", UP = "⊺", KP = "⋂", WP = "⨗", GP = "⨼", ZP = "⁣", jP = "⁢", JP = "Ё", YP = "ё", XP = "Į", QP = "į", e6 = "𝕀", t6 = "𝕚", n6 = "Ι", r6 = "ι", i6 = "⨼", s6 = "¿", o6 = "𝒾", a6 = "ℐ", l6 = "∈", c6 = "⋵", u6 = "⋹", d6 = "⋴", f6 = "⋳", p6 = "∈", h6 = "⁢", g6 = "Ĩ", m6 = "ĩ", b6 = "І", y6 = "і", v6 = "Ï", w6 = "ï", k6 = "Ĵ", E6 = "ĵ", x6 = "Й", C6 = "й", S6 = "𝔍", _6 = "𝔧", M6 = "ȷ", A6 = "𝕁", T6 = "𝕛", N6 = "𝒥", O6 = "𝒿", L6 = "Ј", R6 = "ј", D6 = "Є", I6 = "є", B6 = "Κ", H6 = "κ", P6 = "ϰ", $6 = "Ķ", F6 = "ķ", z6 = "К", V6 = "к", q6 = "𝔎", U6 = "𝔨", K6 = "ĸ", W6 = "Х", G6 = "х", Z6 = "Ќ", j6 = "ќ", J6 = "𝕂", Y6 = "𝕜", X6 = "𝒦", Q6 = "𝓀", e7 = "⇚", t7 = "Ĺ", n7 = "ĺ", r7 = "⦴", i7 = "ℒ", s7 = "Λ", o7 = "λ", a7 = "⟨", l7 = "⟪", c7 = "⦑", u7 = "⟨", d7 = "⪅", f7 = "ℒ", p7 = "«", h7 = "⇤", g7 = "⤟", m7 = "←", b7 = "↞", y7 = "⇐", v7 = "⤝", w7 = "↩", k7 = "↫", E7 = "⤹", x7 = "⥳", C7 = "↢", S7 = "⤙", _7 = "⤛", M7 = "⪫", A7 = "⪭", T7 = "⪭︀", N7 = "⤌", O7 = "⤎", L7 = "❲", R7 = "{", D7 = "[", I7 = "⦋", B7 = "⦏", H7 = "⦍", P7 = "Ľ", $7 = "ľ", F7 = "Ļ", z7 = "ļ", V7 = "⌈", q7 = "{", U7 = "Л", K7 = "л", W7 = "⤶", G7 = "“", Z7 = "„", j7 = "⥧", J7 = "⥋", Y7 = "↲", X7 = "≤", Q7 = "≦", e$ = "⟨", t$ = "⇤", n$ = "←", r$ = "←", i$ = "⇐", s$ = "⇆", o$ = "↢", a$ = "⌈", l$ = "⟦", c$ = "⥡", u$ = "⥙", d$ = "⇃", f$ = "⌊", p$ = "↽", h$ = "↼", g$ = "⇇", m$ = "↔", b$ = "↔", y$ = "⇔", v$ = "⇆", w$ = "⇋", k$ = "↭", E$ = "⥎", x$ = "↤", C$ = "⊣", S$ = "⥚", _$ = "⋋", M$ = "⧏", A$ = "⊲", T$ = "⊴", N$ = "⥑", O$ = "⥠", L$ = "⥘", R$ = "↿", D$ = "⥒", I$ = "↼", B$ = "⪋", H$ = "⋚", P$ = "≤", $$ = "≦", F$ = "⩽", z$ = "⪨", V$ = "⩽", q$ = "⩿", U$ = "⪁", K$ = "⪃", W$ = "⋚︀", G$ = "⪓", Z$ = "⪅", j$ = "⋖", J$ = "⋚", Y$ = "⪋", X$ = "⋚", Q$ = "≦", e8 = "≶", t8 = "≶", n8 = "⪡", r8 = "≲", i8 = "⩽", s8 = "≲", o8 = "⥼", a8 = "⌊", l8 = "𝔏", c8 = "𝔩", u8 = "≶", d8 = "⪑", f8 = "⥢", p8 = "↽", h8 = "↼", g8 = "⥪", m8 = "▄", b8 = "Љ", y8 = "љ", v8 = "⇇", w8 = "≪", k8 = "⋘", E8 = "⌞", x8 = "⇚", C8 = "⥫", S8 = "◺", _8 = "Ŀ", M8 = "ŀ", A8 = "⎰", T8 = "⎰", N8 = "⪉", O8 = "⪉", L8 = "⪇", R8 = "≨", D8 = "⪇", I8 = "≨", B8 = "⋦", H8 = "⟬", P8 = "⇽", $8 = "⟦", F8 = "⟵", z8 = "⟵", V8 = "⟸", q8 = "⟷", U8 = "⟷", K8 = "⟺", W8 = "⟼", G8 = "⟶", Z8 = "⟶", j8 = "⟹", J8 = "↫", Y8 = "↬", X8 = "⦅", Q8 = "𝕃", eF = "𝕝", tF = "⨭", nF = "⨴", rF = "∗", iF = "_", sF = "↙", oF = "↘", aF = "◊", lF = "◊", cF = "⧫", uF = "(", dF = "⦓", fF = "⇆", pF = "⌟", hF = "⇋", gF = "⥭", mF = "‎", bF = "⊿", yF = "‹", vF = "𝓁", wF = "ℒ", kF = "↰", EF = "↰", xF = "≲", CF = "⪍", SF = "⪏", _F = "[", MF = "‘", AF = "‚", TF = "Ł", NF = "ł", OF = "⪦", LF = "⩹", RF = "<", DF = "<", IF = "≪", BF = "⋖", HF = "⋋", PF = "⋉", $F = "⥶", FF = "⩻", zF = "◃", VF = "⊴", qF = "◂", UF = "⦖", KF = "⥊", WF = "⥦", GF = "≨︀", ZF = "≨︀", jF = "¯", JF = "♂", YF = "✠", XF = "✠", QF = "↦", ez = "↦", tz = "↧", nz = "↤", rz = "↥", iz = "▮", sz = "⨩", oz = "М", az = "м", lz = "—", cz = "∺", uz = "∡", dz = " ", fz = "ℳ", pz = "𝔐", hz = "𝔪", gz = "℧", mz = "µ", bz = "*", yz = "⫰", vz = "∣", wz = "·", kz = "⊟", Ez = "−", xz = "∸", Cz = "⨪", Sz = "∓", _z = "⫛", Mz = "…", Az = "∓", Tz = "⊧", Nz = "𝕄", Oz = "𝕞", Lz = "∓", Rz = "𝓂", Dz = "ℳ", Iz = "∾", Bz = "Μ", Hz = "μ", Pz = "⊸", $z = "⊸", Fz = "∇", zz = "Ń", Vz = "ń", qz = "∠⃒", Uz = "≉", Kz = "⩰̸", Wz = "≋̸", Gz = "ŉ", Zz = "≉", jz = "♮", Jz = "ℕ", Yz = "♮", Xz = " ", Qz = "≎̸", eV = "≏̸", tV = "⩃", nV = "Ň", rV = "ň", iV = "Ņ", sV = "ņ", oV = "≇", aV = "⩭̸", lV = "⩂", cV = "Н", uV = "н", dV = "–", fV = "⤤", pV = "↗", hV = "⇗", gV = "↗", mV = "≠", bV = "≐̸", yV = "​", vV = "​", wV = "​", kV = "​", EV = "≢", xV = "⤨", CV = "≂̸", SV = "≫", _V = "≪", MV = `
`, AV = "∄", TV = "∄", NV = "𝔑", OV = "𝔫", LV = "≧̸", RV = "≱", DV = "≱", IV = "≧̸", BV = "⩾̸", HV = "⩾̸", PV = "⋙̸", $V = "≵", FV = "≫⃒", zV = "≯", VV = "≯", qV = "≫̸", UV = "↮", KV = "⇎", WV = "⫲", GV = "∋", ZV = "⋼", jV = "⋺", JV = "∋", YV = "Њ", XV = "њ", QV = "↚", eq = "⇍", tq = "‥", nq = "≦̸", rq = "≰", iq = "↚", sq = "⇍", oq = "↮", aq = "⇎", lq = "≰", cq = "≦̸", uq = "⩽̸", dq = "⩽̸", fq = "≮", pq = "⋘̸", hq = "≴", gq = "≪⃒", mq = "≮", bq = "⋪", yq = "⋬", vq = "≪̸", wq = "∤", kq = "⁠", Eq = " ", xq = "𝕟", Cq = "ℕ", Sq = "⫬", _q = "¬", Mq = "≢", Aq = "≭", Tq = "∦", Nq = "∉", Oq = "≠", Lq = "≂̸", Rq = "∄", Dq = "≯", Iq = "≱", Bq = "≧̸", Hq = "≫̸", Pq = "≹", $q = "⩾̸", Fq = "≵", zq = "≎̸", Vq = "≏̸", qq = "∉", Uq = "⋵̸", Kq = "⋹̸", Wq = "∉", Gq = "⋷", Zq = "⋶", jq = "⧏̸", Jq = "⋪", Yq = "⋬", Xq = "≮", Qq = "≰", eU = "≸", tU = "≪̸", nU = "⩽̸", rU = "≴", iU = "⪢̸", sU = "⪡̸", oU = "∌", aU = "∌", lU = "⋾", cU = "⋽", uU = "⊀", dU = "⪯̸", fU = "⋠", pU = "∌", hU = "⧐̸", gU = "⋫", mU = "⋭", bU = "⊏̸", yU = "⋢", vU = "⊐̸", wU = "⋣", kU = "⊂⃒", EU = "⊈", xU = "⊁", CU = "⪰̸", SU = "⋡", _U = "≿̸", MU = "⊃⃒", AU = "⊉", TU = "≁", NU = "≄", OU = "≇", LU = "≉", RU = "∤", DU = "∦", IU = "∦", BU = "⫽⃥", HU = "∂̸", PU = "⨔", $U = "⊀", FU = "⋠", zU = "⊀", VU = "⪯̸", qU = "⪯̸", UU = "⤳̸", KU = "↛", WU = "⇏", GU = "↝̸", ZU = "↛", jU = "⇏", JU = "⋫", YU = "⋭", XU = "⊁", QU = "⋡", eK = "⪰̸", tK = "𝒩", nK = "𝓃", rK = "∤", iK = "∦", sK = "≁", oK = "≄", aK = "≄", lK = "∤", cK = "∦", uK = "⋢", dK = "⋣", fK = "⊄", pK = "⫅̸", hK = "⊈", gK = "⊂⃒", mK = "⊈", bK = "⫅̸", yK = "⊁", vK = "⪰̸", wK = "⊅", kK = "⫆̸", EK = "⊉", xK = "⊃⃒", CK = "⊉", SK = "⫆̸", _K = "≹", MK = "Ñ", AK = "ñ", TK = "≸", NK = "⋪", OK = "⋬", LK = "⋫", RK = "⋭", DK = "Ν", IK = "ν", BK = "#", HK = "№", PK = " ", $K = "≍⃒", FK = "⊬", zK = "⊭", VK = "⊮", qK = "⊯", UK = "≥⃒", KK = ">⃒", WK = "⤄", GK = "⧞", ZK = "⤂", jK = "≤⃒", JK = "<⃒", YK = "⊴⃒", XK = "⤃", QK = "⊵⃒", eW = "∼⃒", tW = "⤣", nW = "↖", rW = "⇖", iW = "↖", sW = "⤧", oW = "Ó", aW = "ó", lW = "⊛", cW = "Ô", uW = "ô", dW = "⊚", fW = "О", pW = "о", hW = "⊝", gW = "Ő", mW = "ő", bW = "⨸", yW = "⊙", vW = "⦼", wW = "Œ", kW = "œ", EW = "⦿", xW = "𝔒", CW = "𝔬", SW = "˛", _W = "Ò", MW = "ò", AW = "⧁", TW = "⦵", NW = "Ω", OW = "∮", LW = "↺", RW = "⦾", DW = "⦻", IW = "‾", BW = "⧀", HW = "Ō", PW = "ō", $W = "Ω", FW = "ω", zW = "Ο", VW = "ο", qW = "⦶", UW = "⊖", KW = "𝕆", WW = "𝕠", GW = "⦷", ZW = "“", jW = "‘", JW = "⦹", YW = "⊕", XW = "↻", QW = "⩔", eG = "∨", tG = "⩝", nG = "ℴ", rG = "ℴ", iG = "ª", sG = "º", oG = "⊶", aG = "⩖", lG = "⩗", cG = "⩛", uG = "Ⓢ", dG = "𝒪", fG = "ℴ", pG = "Ø", hG = "ø", gG = "⊘", mG = "Õ", bG = "õ", yG = "⨶", vG = "⨷", wG = "⊗", kG = "Ö", EG = "ö", xG = "⌽", CG = "‾", SG = "⏞", _G = "⎴", MG = "⏜", AG = "¶", TG = "∥", NG = "∥", OG = "⫳", LG = "⫽", RG = "∂", DG = "∂", IG = "П", BG = "п", HG = "%", PG = ".", $G = "‰", FG = "⊥", zG = "‱", VG = "𝔓", qG = "𝔭", UG = "Φ", KG = "φ", WG = "ϕ", GG = "ℳ", ZG = "☎", jG = "Π", JG = "π", YG = "⋔", XG = "ϖ", QG = "ℏ", eZ = "ℎ", tZ = "ℏ", nZ = "⨣", rZ = "⊞", iZ = "⨢", sZ = "+", oZ = "∔", aZ = "⨥", lZ = "⩲", cZ = "±", uZ = "±", dZ = "⨦", fZ = "⨧", pZ = "±", hZ = "ℌ", gZ = "⨕", mZ = "𝕡", bZ = "ℙ", yZ = "£", vZ = "⪷", wZ = "⪻", kZ = "≺", EZ = "≼", xZ = "⪷", CZ = "≺", SZ = "≼", _Z = "≺", MZ = "⪯", AZ = "≼", TZ = "≾", NZ = "⪯", OZ = "⪹", LZ = "⪵", RZ = "⋨", DZ = "⪯", IZ = "⪳", BZ = "≾", HZ = "′", PZ = "″", $Z = "ℙ", FZ = "⪹", zZ = "⪵", VZ = "⋨", qZ = "∏", UZ = "∏", KZ = "⌮", WZ = "⌒", GZ = "⌓", ZZ = "∝", jZ = "∝", JZ = "∷", YZ = "∝", XZ = "≾", QZ = "⊰", ej = "𝒫", tj = "𝓅", nj = "Ψ", rj = "ψ", ij = " ", sj = "𝔔", oj = "𝔮", aj = "⨌", lj = "𝕢", cj = "ℚ", uj = "⁗", dj = "𝒬", fj = "𝓆", pj = "ℍ", hj = "⨖", gj = "?", mj = "≟", bj = '"', yj = '"', vj = "⇛", wj = "∽̱", kj = "Ŕ", Ej = "ŕ", xj = "√", Cj = "⦳", Sj = "⟩", _j = "⟫", Mj = "⦒", Aj = "⦥", Tj = "⟩", Nj = "»", Oj = "⥵", Lj = "⇥", Rj = "⤠", Dj = "⤳", Ij = "→", Bj = "↠", Hj = "⇒", Pj = "⤞", $j = "↪", Fj = "↬", zj = "⥅", Vj = "⥴", qj = "⤖", Uj = "↣", Kj = "↝", Wj = "⤚", Gj = "⤜", Zj = "∶", jj = "ℚ", Jj = "⤍", Yj = "⤏", Xj = "⤐", Qj = "❳", eJ = "}", tJ = "]", nJ = "⦌", rJ = "⦎", iJ = "⦐", sJ = "Ř", oJ = "ř", aJ = "Ŗ", lJ = "ŗ", cJ = "⌉", uJ = "}", dJ = "Р", fJ = "р", pJ = "⤷", hJ = "⥩", gJ = "”", mJ = "”", bJ = "↳", yJ = "ℜ", vJ = "ℛ", wJ = "ℜ", kJ = "ℝ", EJ = "ℜ", xJ = "▭", CJ = "®", SJ = "®", _J = "∋", MJ = "⇋", AJ = "⥯", TJ = "⥽", NJ = "⌋", OJ = "𝔯", LJ = "ℜ", RJ = "⥤", DJ = "⇁", IJ = "⇀", BJ = "⥬", HJ = "Ρ", PJ = "ρ", $J = "ϱ", FJ = "⟩", zJ = "⇥", VJ = "→", qJ = "→", UJ = "⇒", KJ = "⇄", WJ = "↣", GJ = "⌉", ZJ = "⟧", jJ = "⥝", JJ = "⥕", YJ = "⇂", XJ = "⌋", QJ = "⇁", eY = "⇀", tY = "⇄", nY = "⇌", rY = "⇉", iY = "↝", sY = "↦", oY = "⊢", aY = "⥛", lY = "⋌", cY = "⧐", uY = "⊳", dY = "⊵", fY = "⥏", pY = "⥜", hY = "⥔", gY = "↾", mY = "⥓", bY = "⇀", yY = "˚", vY = "≓", wY = "⇄", kY = "⇌", EY = "‏", xY = "⎱", CY = "⎱", SY = "⫮", _Y = "⟭", MY = "⇾", AY = "⟧", TY = "⦆", NY = "𝕣", OY = "ℝ", LY = "⨮", RY = "⨵", DY = "⥰", IY = ")", BY = "⦔", HY = "⨒", PY = "⇉", $Y = "⇛", FY = "›", zY = "𝓇", VY = "ℛ", qY = "↱", UY = "↱", KY = "]", WY = "’", GY = "’", ZY = "⋌", jY = "⋊", JY = "▹", YY = "⊵", XY = "▸", QY = "⧎", eX = "⧴", tX = "⥨", nX = "℞", rX = "Ś", iX = "ś", sX = "‚", oX = "⪸", aX = "Š", lX = "š", cX = "⪼", uX = "≻", dX = "≽", fX = "⪰", pX = "⪴", hX = "Ş", gX = "ş", mX = "Ŝ", bX = "ŝ", yX = "⪺", vX = "⪶", wX = "⋩", kX = "⨓", EX = "≿", xX = "С", CX = "с", SX = "⊡", _X = "⋅", MX = "⩦", AX = "⤥", TX = "↘", NX = "⇘", OX = "↘", LX = "§", RX = ";", DX = "⤩", IX = "∖", BX = "∖", HX = "✶", PX = "𝔖", $X = "𝔰", FX = "⌢", zX = "♯", VX = "Щ", qX = "щ", UX = "Ш", KX = "ш", WX = "↓", GX = "←", ZX = "∣", jX = "∥", JX = "→", YX = "↑", XX = "­", QX = "Σ", eQ = "σ", tQ = "ς", nQ = "ς", rQ = "∼", iQ = "⩪", sQ = "≃", oQ = "≃", aQ = "⪞", lQ = "⪠", cQ = "⪝", uQ = "⪟", dQ = "≆", fQ = "⨤", pQ = "⥲", hQ = "←", gQ = "∘", mQ = "∖", bQ = "⨳", yQ = "⧤", vQ = "∣", wQ = "⌣", kQ = "⪪", EQ = "⪬", xQ = "⪬︀", CQ = "Ь", SQ = "ь", _Q = "⌿", MQ = "⧄", AQ = "/", TQ = "𝕊", NQ = "𝕤", OQ = "♠", LQ = "♠", RQ = "∥", DQ = "⊓", IQ = "⊓︀", BQ = "⊔", HQ = "⊔︀", PQ = "√", $Q = "⊏", FQ = "⊑", zQ = "⊏", VQ = "⊑", qQ = "⊐", UQ = "⊒", KQ = "⊐", WQ = "⊒", GQ = "□", ZQ = "□", jQ = "⊓", JQ = "⊏", YQ = "⊑", XQ = "⊐", QQ = "⊒", eee = "⊔", tee = "▪", nee = "□", ree = "▪", iee = "→", see = "𝒮", oee = "𝓈", aee = "∖", lee = "⌣", cee = "⋆", uee = "⋆", dee = "☆", fee = "★", pee = "ϵ", hee = "ϕ", gee = "¯", mee = "⊂", bee = "⋐", yee = "⪽", vee = "⫅", wee = "⊆", kee = "⫃", Eee = "⫁", xee = "⫋", Cee = "⊊", See = "⪿", _ee = "⥹", Mee = "⊂", Aee = "⋐", Tee = "⊆", Nee = "⫅", Oee = "⊆", Lee = "⊊", Ree = "⫋", Dee = "⫇", Iee = "⫕", Bee = "⫓", Hee = "⪸", Pee = "≻", $ee = "≽", Fee = "≻", zee = "⪰", Vee = "≽", qee = "≿", Uee = "⪰", Kee = "⪺", Wee = "⪶", Gee = "⋩", Zee = "≿", jee = "∋", Jee = "∑", Yee = "∑", Xee = "♪", Qee = "¹", ete = "²", tte = "³", nte = "⊃", rte = "⋑", ite = "⪾", ste = "⫘", ote = "⫆", ate = "⊇", lte = "⫄", cte = "⊃", ute = "⊇", dte = "⟉", fte = "⫗", pte = "⥻", hte = "⫂", gte = "⫌", mte = "⊋", bte = "⫀", yte = "⊃", vte = "⋑", wte = "⊇", kte = "⫆", Ete = "⊋", xte = "⫌", Cte = "⫈", Ste = "⫔", _te = "⫖", Mte = "⤦", Ate = "↙", Tte = "⇙", Nte = "↙", Ote = "⤪", Lte = "ß", Rte = "	", Dte = "⌖", Ite = "Τ", Bte = "τ", Hte = "⎴", Pte = "Ť", $te = "ť", Fte = "Ţ", zte = "ţ", Vte = "Т", qte = "т", Ute = "⃛", Kte = "⌕", Wte = "𝔗", Gte = "𝔱", Zte = "∴", jte = "∴", Jte = "∴", Yte = "Θ", Xte = "θ", Qte = "ϑ", ene = "ϑ", tne = "≈", nne = "∼", rne = "  ", ine = " ", sne = " ", one = "≈", ane = "∼", lne = "Þ", cne = "þ", une = "˜", dne = "∼", fne = "≃", pne = "≅", hne = "≈", gne = "⨱", mne = "⊠", bne = "×", yne = "⨰", vne = "∭", wne = "⤨", kne = "⌶", Ene = "⫱", xne = "⊤", Cne = "𝕋", Sne = "𝕥", _ne = "⫚", Mne = "⤩", Ane = "‴", Tne = "™", Nne = "™", One = "▵", Lne = "▿", Rne = "◃", Dne = "⊴", Ine = "≜", Bne = "▹", Hne = "⊵", Pne = "◬", $ne = "≜", Fne = "⨺", zne = "⃛", Vne = "⨹", qne = "⧍", Une = "⨻", Kne = "⏢", Wne = "𝒯", Gne = "𝓉", Zne = "Ц", jne = "ц", Jne = "Ћ", Yne = "ћ", Xne = "Ŧ", Qne = "ŧ", ere = "≬", tre = "↞", nre = "↠", rre = "Ú", ire = "ú", sre = "↑", ore = "↟", are = "⇑", lre = "⥉", cre = "Ў", ure = "ў", dre = "Ŭ", fre = "ŭ", pre = "Û", hre = "û", gre = "У", mre = "у", bre = "⇅", yre = "Ű", vre = "ű", wre = "⥮", kre = "⥾", Ere = "𝔘", xre = "𝔲", Cre = "Ù", Sre = "ù", _re = "⥣", Mre = "↿", Are = "↾", Tre = "▀", Nre = "⌜", Ore = "⌜", Lre = "⌏", Rre = "◸", Dre = "Ū", Ire = "ū", Bre = "¨", Hre = "_", Pre = "⏟", $re = "⎵", Fre = "⏝", zre = "⋃", Vre = "⊎", qre = "Ų", Ure = "ų", Kre = "𝕌", Wre = "𝕦", Gre = "⤒", Zre = "↑", jre = "↑", Jre = "⇑", Yre = "⇅", Xre = "↕", Qre = "↕", eie = "⇕", tie = "⥮", nie = "↿", rie = "↾", iie = "⊎", sie = "↖", oie = "↗", aie = "υ", lie = "ϒ", cie = "ϒ", uie = "Υ", die = "υ", fie = "↥", pie = "⊥", hie = "⇈", gie = "⌝", mie = "⌝", bie = "⌎", yie = "Ů", vie = "ů", wie = "◹", kie = "𝒰", Eie = "𝓊", xie = "⋰", Cie = "Ũ", Sie = "ũ", _ie = "▵", Mie = "▴", Aie = "⇈", Tie = "Ü", Nie = "ü", Oie = "⦧", Lie = "⦜", Rie = "ϵ", Die = "ϰ", Iie = "∅", Bie = "ϕ", Hie = "ϖ", Pie = "∝", $ie = "↕", Fie = "⇕", zie = "ϱ", Vie = "ς", qie = "⊊︀", Uie = "⫋︀", Kie = "⊋︀", Wie = "⫌︀", Gie = "ϑ", Zie = "⊲", jie = "⊳", Jie = "⫨", Yie = "⫫", Xie = "⫩", Qie = "В", ese = "в", tse = "⊢", nse = "⊨", rse = "⊩", ise = "⊫", sse = "⫦", ose = "⊻", ase = "∨", lse = "⋁", cse = "≚", use = "⋮", dse = "|", fse = "‖", pse = "|", hse = "‖", gse = "∣", mse = "|", bse = "❘", yse = "≀", vse = " ", wse = "𝔙", kse = "𝔳", Ese = "⊲", xse = "⊂⃒", Cse = "⊃⃒", Sse = "𝕍", _se = "𝕧", Mse = "∝", Ase = "⊳", Tse = "𝒱", Nse = "𝓋", Ose = "⫋︀", Lse = "⊊︀", Rse = "⫌︀", Dse = "⊋︀", Ise = "⊪", Bse = "⦚", Hse = "Ŵ", Pse = "ŵ", $se = "⩟", Fse = "∧", zse = "⋀", Vse = "≙", qse = "℘", Use = "𝔚", Kse = "𝔴", Wse = "𝕎", Gse = "𝕨", Zse = "℘", jse = "≀", Jse = "≀", Yse = "𝒲", Xse = "𝓌", Qse = "⋂", eoe = "◯", toe = "⋃", noe = "▽", roe = "𝔛", ioe = "𝔵", soe = "⟷", ooe = "⟺", aoe = "Ξ", loe = "ξ", coe = "⟵", uoe = "⟸", doe = "⟼", foe = "⋻", poe = "⨀", hoe = "𝕏", goe = "𝕩", moe = "⨁", boe = "⨂", yoe = "⟶", voe = "⟹", woe = "𝒳", koe = "𝓍", Eoe = "⨆", xoe = "⨄", Coe = "△", Soe = "⋁", _oe = "⋀", Moe = "Ý", Aoe = "ý", Toe = "Я", Noe = "я", Ooe = "Ŷ", Loe = "ŷ", Roe = "Ы", Doe = "ы", Ioe = "¥", Boe = "𝔜", Hoe = "𝔶", Poe = "Ї", $oe = "ї", Foe = "𝕐", zoe = "𝕪", Voe = "𝒴", qoe = "𝓎", Uoe = "Ю", Koe = "ю", Woe = "ÿ", Goe = "Ÿ", Zoe = "Ź", joe = "ź", Joe = "Ž", Yoe = "ž", Xoe = "З", Qoe = "з", eae = "Ż", tae = "ż", nae = "ℨ", rae = "​", iae = "Ζ", sae = "ζ", oae = "𝔷", aae = "ℨ", lae = "Ж", cae = "ж", uae = "⇝", dae = "𝕫", fae = "ℤ", pae = "𝒵", hae = "𝓏", gae = "‍", mae = "‌", bae = {
  Aacute: eT,
  aacute: tT,
  Abreve: nT,
  abreve: rT,
  ac: iT,
  acd: sT,
  acE: oT,
  Acirc: aT,
  acirc: lT,
  acute: cT,
  Acy: uT,
  acy: dT,
  AElig: fT,
  aelig: pT,
  af: hT,
  Afr: gT,
  afr: mT,
  Agrave: bT,
  agrave: yT,
  alefsym: vT,
  aleph: wT,
  Alpha: kT,
  alpha: ET,
  Amacr: xT,
  amacr: CT,
  amalg: ST,
  amp: _T,
  AMP: MT,
  andand: AT,
  And: TT,
  and: NT,
  andd: OT,
  andslope: LT,
  andv: RT,
  ang: DT,
  ange: IT,
  angle: BT,
  angmsdaa: HT,
  angmsdab: PT,
  angmsdac: $T,
  angmsdad: FT,
  angmsdae: zT,
  angmsdaf: VT,
  angmsdag: qT,
  angmsdah: UT,
  angmsd: KT,
  angrt: WT,
  angrtvb: GT,
  angrtvbd: ZT,
  angsph: jT,
  angst: JT,
  angzarr: YT,
  Aogon: XT,
  aogon: QT,
  Aopf: eN,
  aopf: tN,
  apacir: nN,
  ap: rN,
  apE: iN,
  ape: sN,
  apid: oN,
  apos: aN,
  ApplyFunction: lN,
  approx: cN,
  approxeq: uN,
  Aring: dN,
  aring: fN,
  Ascr: pN,
  ascr: hN,
  Assign: gN,
  ast: mN,
  asymp: bN,
  asympeq: yN,
  Atilde: vN,
  atilde: wN,
  Auml: kN,
  auml: EN,
  awconint: xN,
  awint: CN,
  backcong: SN,
  backepsilon: _N,
  backprime: MN,
  backsim: AN,
  backsimeq: TN,
  Backslash: NN,
  Barv: ON,
  barvee: LN,
  barwed: RN,
  Barwed: DN,
  barwedge: IN,
  bbrk: BN,
  bbrktbrk: HN,
  bcong: PN,
  Bcy: $N,
  bcy: FN,
  bdquo: zN,
  becaus: VN,
  because: qN,
  Because: UN,
  bemptyv: KN,
  bepsi: WN,
  bernou: GN,
  Bernoullis: ZN,
  Beta: jN,
  beta: JN,
  beth: YN,
  between: XN,
  Bfr: QN,
  bfr: eO,
  bigcap: tO,
  bigcirc: nO,
  bigcup: rO,
  bigodot: iO,
  bigoplus: sO,
  bigotimes: oO,
  bigsqcup: aO,
  bigstar: lO,
  bigtriangledown: cO,
  bigtriangleup: uO,
  biguplus: dO,
  bigvee: fO,
  bigwedge: pO,
  bkarow: hO,
  blacklozenge: gO,
  blacksquare: mO,
  blacktriangle: bO,
  blacktriangledown: yO,
  blacktriangleleft: vO,
  blacktriangleright: wO,
  blank: kO,
  blk12: EO,
  blk14: xO,
  blk34: CO,
  block: SO,
  bne: _O,
  bnequiv: MO,
  bNot: AO,
  bnot: TO,
  Bopf: NO,
  bopf: OO,
  bot: LO,
  bottom: RO,
  bowtie: DO,
  boxbox: IO,
  boxdl: BO,
  boxdL: HO,
  boxDl: PO,
  boxDL: $O,
  boxdr: FO,
  boxdR: zO,
  boxDr: VO,
  boxDR: qO,
  boxh: UO,
  boxH: KO,
  boxhd: WO,
  boxHd: GO,
  boxhD: ZO,
  boxHD: jO,
  boxhu: JO,
  boxHu: YO,
  boxhU: XO,
  boxHU: QO,
  boxminus: eL,
  boxplus: tL,
  boxtimes: nL,
  boxul: rL,
  boxuL: iL,
  boxUl: sL,
  boxUL: oL,
  boxur: aL,
  boxuR: lL,
  boxUr: cL,
  boxUR: uL,
  boxv: dL,
  boxV: fL,
  boxvh: pL,
  boxvH: hL,
  boxVh: gL,
  boxVH: mL,
  boxvl: bL,
  boxvL: yL,
  boxVl: vL,
  boxVL: wL,
  boxvr: kL,
  boxvR: EL,
  boxVr: xL,
  boxVR: CL,
  bprime: SL,
  breve: _L,
  Breve: ML,
  brvbar: AL,
  bscr: TL,
  Bscr: NL,
  bsemi: OL,
  bsim: LL,
  bsime: RL,
  bsolb: DL,
  bsol: IL,
  bsolhsub: BL,
  bull: HL,
  bullet: PL,
  bump: $L,
  bumpE: FL,
  bumpe: zL,
  Bumpeq: VL,
  bumpeq: qL,
  Cacute: UL,
  cacute: KL,
  capand: WL,
  capbrcup: GL,
  capcap: ZL,
  cap: jL,
  Cap: JL,
  capcup: YL,
  capdot: XL,
  CapitalDifferentialD: QL,
  caps: eR,
  caret: tR,
  caron: nR,
  Cayleys: rR,
  ccaps: iR,
  Ccaron: sR,
  ccaron: oR,
  Ccedil: aR,
  ccedil: lR,
  Ccirc: cR,
  ccirc: uR,
  Cconint: dR,
  ccups: fR,
  ccupssm: pR,
  Cdot: hR,
  cdot: gR,
  cedil: mR,
  Cedilla: bR,
  cemptyv: yR,
  cent: vR,
  centerdot: wR,
  CenterDot: kR,
  cfr: ER,
  Cfr: xR,
  CHcy: CR,
  chcy: SR,
  check: _R,
  checkmark: MR,
  Chi: AR,
  chi: TR,
  circ: NR,
  circeq: OR,
  circlearrowleft: LR,
  circlearrowright: RR,
  circledast: DR,
  circledcirc: IR,
  circleddash: BR,
  CircleDot: HR,
  circledR: PR,
  circledS: $R,
  CircleMinus: FR,
  CirclePlus: zR,
  CircleTimes: VR,
  cir: qR,
  cirE: UR,
  cire: KR,
  cirfnint: WR,
  cirmid: GR,
  cirscir: ZR,
  ClockwiseContourIntegral: jR,
  CloseCurlyDoubleQuote: JR,
  CloseCurlyQuote: YR,
  clubs: XR,
  clubsuit: QR,
  colon: eD,
  Colon: tD,
  Colone: nD,
  colone: rD,
  coloneq: iD,
  comma: sD,
  commat: oD,
  comp: aD,
  compfn: lD,
  complement: cD,
  complexes: uD,
  cong: dD,
  congdot: fD,
  Congruent: pD,
  conint: hD,
  Conint: gD,
  ContourIntegral: mD,
  copf: bD,
  Copf: yD,
  coprod: vD,
  Coproduct: wD,
  copy: kD,
  COPY: ED,
  copysr: xD,
  CounterClockwiseContourIntegral: CD,
  crarr: SD,
  cross: _D,
  Cross: MD,
  Cscr: AD,
  cscr: TD,
  csub: ND,
  csube: OD,
  csup: LD,
  csupe: RD,
  ctdot: DD,
  cudarrl: ID,
  cudarrr: BD,
  cuepr: HD,
  cuesc: PD,
  cularr: $D,
  cularrp: FD,
  cupbrcap: zD,
  cupcap: VD,
  CupCap: qD,
  cup: UD,
  Cup: KD,
  cupcup: WD,
  cupdot: GD,
  cupor: ZD,
  cups: jD,
  curarr: JD,
  curarrm: YD,
  curlyeqprec: XD,
  curlyeqsucc: QD,
  curlyvee: eI,
  curlywedge: tI,
  curren: nI,
  curvearrowleft: rI,
  curvearrowright: iI,
  cuvee: sI,
  cuwed: oI,
  cwconint: aI,
  cwint: lI,
  cylcty: cI,
  dagger: uI,
  Dagger: dI,
  daleth: fI,
  darr: pI,
  Darr: hI,
  dArr: gI,
  dash: mI,
  Dashv: bI,
  dashv: yI,
  dbkarow: vI,
  dblac: wI,
  Dcaron: kI,
  dcaron: EI,
  Dcy: xI,
  dcy: CI,
  ddagger: SI,
  ddarr: _I,
  DD: MI,
  dd: AI,
  DDotrahd: TI,
  ddotseq: NI,
  deg: OI,
  Del: LI,
  Delta: RI,
  delta: DI,
  demptyv: II,
  dfisht: BI,
  Dfr: HI,
  dfr: PI,
  dHar: $I,
  dharl: FI,
  dharr: zI,
  DiacriticalAcute: VI,
  DiacriticalDot: qI,
  DiacriticalDoubleAcute: UI,
  DiacriticalGrave: KI,
  DiacriticalTilde: WI,
  diam: GI,
  diamond: ZI,
  Diamond: jI,
  diamondsuit: JI,
  diams: YI,
  die: XI,
  DifferentialD: QI,
  digamma: e3,
  disin: t3,
  div: n3,
  divide: r3,
  divideontimes: i3,
  divonx: s3,
  DJcy: o3,
  djcy: a3,
  dlcorn: l3,
  dlcrop: c3,
  dollar: u3,
  Dopf: d3,
  dopf: f3,
  Dot: p3,
  dot: h3,
  DotDot: g3,
  doteq: m3,
  doteqdot: b3,
  DotEqual: y3,
  dotminus: v3,
  dotplus: w3,
  dotsquare: k3,
  doublebarwedge: E3,
  DoubleContourIntegral: x3,
  DoubleDot: C3,
  DoubleDownArrow: S3,
  DoubleLeftArrow: _3,
  DoubleLeftRightArrow: M3,
  DoubleLeftTee: A3,
  DoubleLongLeftArrow: T3,
  DoubleLongLeftRightArrow: N3,
  DoubleLongRightArrow: O3,
  DoubleRightArrow: L3,
  DoubleRightTee: R3,
  DoubleUpArrow: D3,
  DoubleUpDownArrow: I3,
  DoubleVerticalBar: B3,
  DownArrowBar: H3,
  downarrow: P3,
  DownArrow: $3,
  Downarrow: F3,
  DownArrowUpArrow: z3,
  DownBreve: V3,
  downdownarrows: q3,
  downharpoonleft: U3,
  downharpoonright: K3,
  DownLeftRightVector: W3,
  DownLeftTeeVector: G3,
  DownLeftVectorBar: Z3,
  DownLeftVector: j3,
  DownRightTeeVector: J3,
  DownRightVectorBar: Y3,
  DownRightVector: X3,
  DownTeeArrow: Q3,
  DownTee: e4,
  drbkarow: t4,
  drcorn: n4,
  drcrop: r4,
  Dscr: i4,
  dscr: s4,
  DScy: o4,
  dscy: a4,
  dsol: l4,
  Dstrok: c4,
  dstrok: u4,
  dtdot: d4,
  dtri: f4,
  dtrif: p4,
  duarr: h4,
  duhar: g4,
  dwangle: m4,
  DZcy: b4,
  dzcy: y4,
  dzigrarr: v4,
  Eacute: w4,
  eacute: k4,
  easter: E4,
  Ecaron: x4,
  ecaron: C4,
  Ecirc: S4,
  ecirc: _4,
  ecir: M4,
  ecolon: A4,
  Ecy: T4,
  ecy: N4,
  eDDot: O4,
  Edot: L4,
  edot: R4,
  eDot: D4,
  ee: I4,
  efDot: B4,
  Efr: H4,
  efr: P4,
  eg: $4,
  Egrave: F4,
  egrave: z4,
  egs: V4,
  egsdot: q4,
  el: U4,
  Element: K4,
  elinters: W4,
  ell: G4,
  els: Z4,
  elsdot: j4,
  Emacr: J4,
  emacr: Y4,
  empty: X4,
  emptyset: Q4,
  EmptySmallSquare: e5,
  emptyv: t5,
  EmptyVerySmallSquare: n5,
  emsp13: r5,
  emsp14: i5,
  emsp: s5,
  ENG: o5,
  eng: a5,
  ensp: l5,
  Eogon: c5,
  eogon: u5,
  Eopf: d5,
  eopf: f5,
  epar: p5,
  eparsl: h5,
  eplus: g5,
  epsi: m5,
  Epsilon: b5,
  epsilon: y5,
  epsiv: v5,
  eqcirc: w5,
  eqcolon: k5,
  eqsim: E5,
  eqslantgtr: x5,
  eqslantless: C5,
  Equal: S5,
  equals: _5,
  EqualTilde: M5,
  equest: A5,
  Equilibrium: T5,
  equiv: N5,
  equivDD: O5,
  eqvparsl: L5,
  erarr: R5,
  erDot: D5,
  escr: I5,
  Escr: B5,
  esdot: H5,
  Esim: P5,
  esim: $5,
  Eta: F5,
  eta: z5,
  ETH: V5,
  eth: q5,
  Euml: U5,
  euml: K5,
  euro: W5,
  excl: G5,
  exist: Z5,
  Exists: j5,
  expectation: J5,
  exponentiale: Y5,
  ExponentialE: X5,
  fallingdotseq: Q5,
  Fcy: eB,
  fcy: tB,
  female: nB,
  ffilig: rB,
  fflig: iB,
  ffllig: sB,
  Ffr: oB,
  ffr: aB,
  filig: lB,
  FilledSmallSquare: cB,
  FilledVerySmallSquare: uB,
  fjlig: dB,
  flat: fB,
  fllig: pB,
  fltns: hB,
  fnof: gB,
  Fopf: mB,
  fopf: bB,
  forall: yB,
  ForAll: vB,
  fork: wB,
  forkv: kB,
  Fouriertrf: EB,
  fpartint: xB,
  frac12: CB,
  frac13: SB,
  frac14: _B,
  frac15: MB,
  frac16: AB,
  frac18: TB,
  frac23: NB,
  frac25: OB,
  frac34: LB,
  frac35: RB,
  frac38: DB,
  frac45: IB,
  frac56: BB,
  frac58: HB,
  frac78: PB,
  frasl: $B,
  frown: FB,
  fscr: zB,
  Fscr: VB,
  gacute: qB,
  Gamma: UB,
  gamma: KB,
  Gammad: WB,
  gammad: GB,
  gap: ZB,
  Gbreve: jB,
  gbreve: JB,
  Gcedil: YB,
  Gcirc: XB,
  gcirc: QB,
  Gcy: e9,
  gcy: t9,
  Gdot: n9,
  gdot: r9,
  ge: i9,
  gE: s9,
  gEl: o9,
  gel: a9,
  geq: l9,
  geqq: c9,
  geqslant: u9,
  gescc: d9,
  ges: f9,
  gesdot: p9,
  gesdoto: h9,
  gesdotol: g9,
  gesl: m9,
  gesles: b9,
  Gfr: y9,
  gfr: v9,
  gg: w9,
  Gg: k9,
  ggg: E9,
  gimel: x9,
  GJcy: C9,
  gjcy: S9,
  gla: _9,
  gl: M9,
  glE: A9,
  glj: T9,
  gnap: N9,
  gnapprox: O9,
  gne: L9,
  gnE: R9,
  gneq: D9,
  gneqq: I9,
  gnsim: B9,
  Gopf: H9,
  gopf: P9,
  grave: $9,
  GreaterEqual: F9,
  GreaterEqualLess: z9,
  GreaterFullEqual: V9,
  GreaterGreater: q9,
  GreaterLess: U9,
  GreaterSlantEqual: K9,
  GreaterTilde: W9,
  Gscr: G9,
  gscr: Z9,
  gsim: j9,
  gsime: J9,
  gsiml: Y9,
  gtcc: X9,
  gtcir: Q9,
  gt: eH,
  GT: tH,
  Gt: nH,
  gtdot: rH,
  gtlPar: iH,
  gtquest: sH,
  gtrapprox: oH,
  gtrarr: aH,
  gtrdot: lH,
  gtreqless: cH,
  gtreqqless: uH,
  gtrless: dH,
  gtrsim: fH,
  gvertneqq: pH,
  gvnE: hH,
  Hacek: gH,
  hairsp: mH,
  half: bH,
  hamilt: yH,
  HARDcy: vH,
  hardcy: wH,
  harrcir: kH,
  harr: EH,
  hArr: xH,
  harrw: CH,
  Hat: SH,
  hbar: _H,
  Hcirc: MH,
  hcirc: AH,
  hearts: TH,
  heartsuit: NH,
  hellip: OH,
  hercon: LH,
  hfr: RH,
  Hfr: DH,
  HilbertSpace: IH,
  hksearow: BH,
  hkswarow: HH,
  hoarr: PH,
  homtht: $H,
  hookleftarrow: FH,
  hookrightarrow: zH,
  hopf: VH,
  Hopf: qH,
  horbar: UH,
  HorizontalLine: KH,
  hscr: WH,
  Hscr: GH,
  hslash: ZH,
  Hstrok: jH,
  hstrok: JH,
  HumpDownHump: YH,
  HumpEqual: XH,
  hybull: QH,
  hyphen: eP,
  Iacute: tP,
  iacute: nP,
  ic: rP,
  Icirc: iP,
  icirc: sP,
  Icy: oP,
  icy: aP,
  Idot: lP,
  IEcy: cP,
  iecy: uP,
  iexcl: dP,
  iff: fP,
  ifr: pP,
  Ifr: hP,
  Igrave: gP,
  igrave: mP,
  ii: bP,
  iiiint: yP,
  iiint: vP,
  iinfin: wP,
  iiota: kP,
  IJlig: EP,
  ijlig: xP,
  Imacr: CP,
  imacr: SP,
  image: _P,
  ImaginaryI: MP,
  imagline: AP,
  imagpart: TP,
  imath: NP,
  Im: OP,
  imof: LP,
  imped: RP,
  Implies: DP,
  incare: IP,
  in: "∈",
  infin: BP,
  infintie: HP,
  inodot: PP,
  intcal: $P,
  int: FP,
  Int: zP,
  integers: VP,
  Integral: qP,
  intercal: UP,
  Intersection: KP,
  intlarhk: WP,
  intprod: GP,
  InvisibleComma: ZP,
  InvisibleTimes: jP,
  IOcy: JP,
  iocy: YP,
  Iogon: XP,
  iogon: QP,
  Iopf: e6,
  iopf: t6,
  Iota: n6,
  iota: r6,
  iprod: i6,
  iquest: s6,
  iscr: o6,
  Iscr: a6,
  isin: l6,
  isindot: c6,
  isinE: u6,
  isins: d6,
  isinsv: f6,
  isinv: p6,
  it: h6,
  Itilde: g6,
  itilde: m6,
  Iukcy: b6,
  iukcy: y6,
  Iuml: v6,
  iuml: w6,
  Jcirc: k6,
  jcirc: E6,
  Jcy: x6,
  jcy: C6,
  Jfr: S6,
  jfr: _6,
  jmath: M6,
  Jopf: A6,
  jopf: T6,
  Jscr: N6,
  jscr: O6,
  Jsercy: L6,
  jsercy: R6,
  Jukcy: D6,
  jukcy: I6,
  Kappa: B6,
  kappa: H6,
  kappav: P6,
  Kcedil: $6,
  kcedil: F6,
  Kcy: z6,
  kcy: V6,
  Kfr: q6,
  kfr: U6,
  kgreen: K6,
  KHcy: W6,
  khcy: G6,
  KJcy: Z6,
  kjcy: j6,
  Kopf: J6,
  kopf: Y6,
  Kscr: X6,
  kscr: Q6,
  lAarr: e7,
  Lacute: t7,
  lacute: n7,
  laemptyv: r7,
  lagran: i7,
  Lambda: s7,
  lambda: o7,
  lang: a7,
  Lang: l7,
  langd: c7,
  langle: u7,
  lap: d7,
  Laplacetrf: f7,
  laquo: p7,
  larrb: h7,
  larrbfs: g7,
  larr: m7,
  Larr: b7,
  lArr: y7,
  larrfs: v7,
  larrhk: w7,
  larrlp: k7,
  larrpl: E7,
  larrsim: x7,
  larrtl: C7,
  latail: S7,
  lAtail: _7,
  lat: M7,
  late: A7,
  lates: T7,
  lbarr: N7,
  lBarr: O7,
  lbbrk: L7,
  lbrace: R7,
  lbrack: D7,
  lbrke: I7,
  lbrksld: B7,
  lbrkslu: H7,
  Lcaron: P7,
  lcaron: $7,
  Lcedil: F7,
  lcedil: z7,
  lceil: V7,
  lcub: q7,
  Lcy: U7,
  lcy: K7,
  ldca: W7,
  ldquo: G7,
  ldquor: Z7,
  ldrdhar: j7,
  ldrushar: J7,
  ldsh: Y7,
  le: X7,
  lE: Q7,
  LeftAngleBracket: e$,
  LeftArrowBar: t$,
  leftarrow: n$,
  LeftArrow: r$,
  Leftarrow: i$,
  LeftArrowRightArrow: s$,
  leftarrowtail: o$,
  LeftCeiling: a$,
  LeftDoubleBracket: l$,
  LeftDownTeeVector: c$,
  LeftDownVectorBar: u$,
  LeftDownVector: d$,
  LeftFloor: f$,
  leftharpoondown: p$,
  leftharpoonup: h$,
  leftleftarrows: g$,
  leftrightarrow: m$,
  LeftRightArrow: b$,
  Leftrightarrow: y$,
  leftrightarrows: v$,
  leftrightharpoons: w$,
  leftrightsquigarrow: k$,
  LeftRightVector: E$,
  LeftTeeArrow: x$,
  LeftTee: C$,
  LeftTeeVector: S$,
  leftthreetimes: _$,
  LeftTriangleBar: M$,
  LeftTriangle: A$,
  LeftTriangleEqual: T$,
  LeftUpDownVector: N$,
  LeftUpTeeVector: O$,
  LeftUpVectorBar: L$,
  LeftUpVector: R$,
  LeftVectorBar: D$,
  LeftVector: I$,
  lEg: B$,
  leg: H$,
  leq: P$,
  leqq: $$,
  leqslant: F$,
  lescc: z$,
  les: V$,
  lesdot: q$,
  lesdoto: U$,
  lesdotor: K$,
  lesg: W$,
  lesges: G$,
  lessapprox: Z$,
  lessdot: j$,
  lesseqgtr: J$,
  lesseqqgtr: Y$,
  LessEqualGreater: X$,
  LessFullEqual: Q$,
  LessGreater: e8,
  lessgtr: t8,
  LessLess: n8,
  lesssim: r8,
  LessSlantEqual: i8,
  LessTilde: s8,
  lfisht: o8,
  lfloor: a8,
  Lfr: l8,
  lfr: c8,
  lg: u8,
  lgE: d8,
  lHar: f8,
  lhard: p8,
  lharu: h8,
  lharul: g8,
  lhblk: m8,
  LJcy: b8,
  ljcy: y8,
  llarr: v8,
  ll: w8,
  Ll: k8,
  llcorner: E8,
  Lleftarrow: x8,
  llhard: C8,
  lltri: S8,
  Lmidot: _8,
  lmidot: M8,
  lmoustache: A8,
  lmoust: T8,
  lnap: N8,
  lnapprox: O8,
  lne: L8,
  lnE: R8,
  lneq: D8,
  lneqq: I8,
  lnsim: B8,
  loang: H8,
  loarr: P8,
  lobrk: $8,
  longleftarrow: F8,
  LongLeftArrow: z8,
  Longleftarrow: V8,
  longleftrightarrow: q8,
  LongLeftRightArrow: U8,
  Longleftrightarrow: K8,
  longmapsto: W8,
  longrightarrow: G8,
  LongRightArrow: Z8,
  Longrightarrow: j8,
  looparrowleft: J8,
  looparrowright: Y8,
  lopar: X8,
  Lopf: Q8,
  lopf: eF,
  loplus: tF,
  lotimes: nF,
  lowast: rF,
  lowbar: iF,
  LowerLeftArrow: sF,
  LowerRightArrow: oF,
  loz: aF,
  lozenge: lF,
  lozf: cF,
  lpar: uF,
  lparlt: dF,
  lrarr: fF,
  lrcorner: pF,
  lrhar: hF,
  lrhard: gF,
  lrm: mF,
  lrtri: bF,
  lsaquo: yF,
  lscr: vF,
  Lscr: wF,
  lsh: kF,
  Lsh: EF,
  lsim: xF,
  lsime: CF,
  lsimg: SF,
  lsqb: _F,
  lsquo: MF,
  lsquor: AF,
  Lstrok: TF,
  lstrok: NF,
  ltcc: OF,
  ltcir: LF,
  lt: RF,
  LT: DF,
  Lt: IF,
  ltdot: BF,
  lthree: HF,
  ltimes: PF,
  ltlarr: $F,
  ltquest: FF,
  ltri: zF,
  ltrie: VF,
  ltrif: qF,
  ltrPar: UF,
  lurdshar: KF,
  luruhar: WF,
  lvertneqq: GF,
  lvnE: ZF,
  macr: jF,
  male: JF,
  malt: YF,
  maltese: XF,
  Map: "⤅",
  map: QF,
  mapsto: ez,
  mapstodown: tz,
  mapstoleft: nz,
  mapstoup: rz,
  marker: iz,
  mcomma: sz,
  Mcy: oz,
  mcy: az,
  mdash: lz,
  mDDot: cz,
  measuredangle: uz,
  MediumSpace: dz,
  Mellintrf: fz,
  Mfr: pz,
  mfr: hz,
  mho: gz,
  micro: mz,
  midast: bz,
  midcir: yz,
  mid: vz,
  middot: wz,
  minusb: kz,
  minus: Ez,
  minusd: xz,
  minusdu: Cz,
  MinusPlus: Sz,
  mlcp: _z,
  mldr: Mz,
  mnplus: Az,
  models: Tz,
  Mopf: Nz,
  mopf: Oz,
  mp: Lz,
  mscr: Rz,
  Mscr: Dz,
  mstpos: Iz,
  Mu: Bz,
  mu: Hz,
  multimap: Pz,
  mumap: $z,
  nabla: Fz,
  Nacute: zz,
  nacute: Vz,
  nang: qz,
  nap: Uz,
  napE: Kz,
  napid: Wz,
  napos: Gz,
  napprox: Zz,
  natural: jz,
  naturals: Jz,
  natur: Yz,
  nbsp: Xz,
  nbump: Qz,
  nbumpe: eV,
  ncap: tV,
  Ncaron: nV,
  ncaron: rV,
  Ncedil: iV,
  ncedil: sV,
  ncong: oV,
  ncongdot: aV,
  ncup: lV,
  Ncy: cV,
  ncy: uV,
  ndash: dV,
  nearhk: fV,
  nearr: pV,
  neArr: hV,
  nearrow: gV,
  ne: mV,
  nedot: bV,
  NegativeMediumSpace: yV,
  NegativeThickSpace: vV,
  NegativeThinSpace: wV,
  NegativeVeryThinSpace: kV,
  nequiv: EV,
  nesear: xV,
  nesim: CV,
  NestedGreaterGreater: SV,
  NestedLessLess: _V,
  NewLine: MV,
  nexist: AV,
  nexists: TV,
  Nfr: NV,
  nfr: OV,
  ngE: LV,
  nge: RV,
  ngeq: DV,
  ngeqq: IV,
  ngeqslant: BV,
  nges: HV,
  nGg: PV,
  ngsim: $V,
  nGt: FV,
  ngt: zV,
  ngtr: VV,
  nGtv: qV,
  nharr: UV,
  nhArr: KV,
  nhpar: WV,
  ni: GV,
  nis: ZV,
  nisd: jV,
  niv: JV,
  NJcy: YV,
  njcy: XV,
  nlarr: QV,
  nlArr: eq,
  nldr: tq,
  nlE: nq,
  nle: rq,
  nleftarrow: iq,
  nLeftarrow: sq,
  nleftrightarrow: oq,
  nLeftrightarrow: aq,
  nleq: lq,
  nleqq: cq,
  nleqslant: uq,
  nles: dq,
  nless: fq,
  nLl: pq,
  nlsim: hq,
  nLt: gq,
  nlt: mq,
  nltri: bq,
  nltrie: yq,
  nLtv: vq,
  nmid: wq,
  NoBreak: kq,
  NonBreakingSpace: Eq,
  nopf: xq,
  Nopf: Cq,
  Not: Sq,
  not: _q,
  NotCongruent: Mq,
  NotCupCap: Aq,
  NotDoubleVerticalBar: Tq,
  NotElement: Nq,
  NotEqual: Oq,
  NotEqualTilde: Lq,
  NotExists: Rq,
  NotGreater: Dq,
  NotGreaterEqual: Iq,
  NotGreaterFullEqual: Bq,
  NotGreaterGreater: Hq,
  NotGreaterLess: Pq,
  NotGreaterSlantEqual: $q,
  NotGreaterTilde: Fq,
  NotHumpDownHump: zq,
  NotHumpEqual: Vq,
  notin: qq,
  notindot: Uq,
  notinE: Kq,
  notinva: Wq,
  notinvb: Gq,
  notinvc: Zq,
  NotLeftTriangleBar: jq,
  NotLeftTriangle: Jq,
  NotLeftTriangleEqual: Yq,
  NotLess: Xq,
  NotLessEqual: Qq,
  NotLessGreater: eU,
  NotLessLess: tU,
  NotLessSlantEqual: nU,
  NotLessTilde: rU,
  NotNestedGreaterGreater: iU,
  NotNestedLessLess: sU,
  notni: oU,
  notniva: aU,
  notnivb: lU,
  notnivc: cU,
  NotPrecedes: uU,
  NotPrecedesEqual: dU,
  NotPrecedesSlantEqual: fU,
  NotReverseElement: pU,
  NotRightTriangleBar: hU,
  NotRightTriangle: gU,
  NotRightTriangleEqual: mU,
  NotSquareSubset: bU,
  NotSquareSubsetEqual: yU,
  NotSquareSuperset: vU,
  NotSquareSupersetEqual: wU,
  NotSubset: kU,
  NotSubsetEqual: EU,
  NotSucceeds: xU,
  NotSucceedsEqual: CU,
  NotSucceedsSlantEqual: SU,
  NotSucceedsTilde: _U,
  NotSuperset: MU,
  NotSupersetEqual: AU,
  NotTilde: TU,
  NotTildeEqual: NU,
  NotTildeFullEqual: OU,
  NotTildeTilde: LU,
  NotVerticalBar: RU,
  nparallel: DU,
  npar: IU,
  nparsl: BU,
  npart: HU,
  npolint: PU,
  npr: $U,
  nprcue: FU,
  nprec: zU,
  npreceq: VU,
  npre: qU,
  nrarrc: UU,
  nrarr: KU,
  nrArr: WU,
  nrarrw: GU,
  nrightarrow: ZU,
  nRightarrow: jU,
  nrtri: JU,
  nrtrie: YU,
  nsc: XU,
  nsccue: QU,
  nsce: eK,
  Nscr: tK,
  nscr: nK,
  nshortmid: rK,
  nshortparallel: iK,
  nsim: sK,
  nsime: oK,
  nsimeq: aK,
  nsmid: lK,
  nspar: cK,
  nsqsube: uK,
  nsqsupe: dK,
  nsub: fK,
  nsubE: pK,
  nsube: hK,
  nsubset: gK,
  nsubseteq: mK,
  nsubseteqq: bK,
  nsucc: yK,
  nsucceq: vK,
  nsup: wK,
  nsupE: kK,
  nsupe: EK,
  nsupset: xK,
  nsupseteq: CK,
  nsupseteqq: SK,
  ntgl: _K,
  Ntilde: MK,
  ntilde: AK,
  ntlg: TK,
  ntriangleleft: NK,
  ntrianglelefteq: OK,
  ntriangleright: LK,
  ntrianglerighteq: RK,
  Nu: DK,
  nu: IK,
  num: BK,
  numero: HK,
  numsp: PK,
  nvap: $K,
  nvdash: FK,
  nvDash: zK,
  nVdash: VK,
  nVDash: qK,
  nvge: UK,
  nvgt: KK,
  nvHarr: WK,
  nvinfin: GK,
  nvlArr: ZK,
  nvle: jK,
  nvlt: JK,
  nvltrie: YK,
  nvrArr: XK,
  nvrtrie: QK,
  nvsim: eW,
  nwarhk: tW,
  nwarr: nW,
  nwArr: rW,
  nwarrow: iW,
  nwnear: sW,
  Oacute: oW,
  oacute: aW,
  oast: lW,
  Ocirc: cW,
  ocirc: uW,
  ocir: dW,
  Ocy: fW,
  ocy: pW,
  odash: hW,
  Odblac: gW,
  odblac: mW,
  odiv: bW,
  odot: yW,
  odsold: vW,
  OElig: wW,
  oelig: kW,
  ofcir: EW,
  Ofr: xW,
  ofr: CW,
  ogon: SW,
  Ograve: _W,
  ograve: MW,
  ogt: AW,
  ohbar: TW,
  ohm: NW,
  oint: OW,
  olarr: LW,
  olcir: RW,
  olcross: DW,
  oline: IW,
  olt: BW,
  Omacr: HW,
  omacr: PW,
  Omega: $W,
  omega: FW,
  Omicron: zW,
  omicron: VW,
  omid: qW,
  ominus: UW,
  Oopf: KW,
  oopf: WW,
  opar: GW,
  OpenCurlyDoubleQuote: ZW,
  OpenCurlyQuote: jW,
  operp: JW,
  oplus: YW,
  orarr: XW,
  Or: QW,
  or: eG,
  ord: tG,
  order: nG,
  orderof: rG,
  ordf: iG,
  ordm: sG,
  origof: oG,
  oror: aG,
  orslope: lG,
  orv: cG,
  oS: uG,
  Oscr: dG,
  oscr: fG,
  Oslash: pG,
  oslash: hG,
  osol: gG,
  Otilde: mG,
  otilde: bG,
  otimesas: yG,
  Otimes: vG,
  otimes: wG,
  Ouml: kG,
  ouml: EG,
  ovbar: xG,
  OverBar: CG,
  OverBrace: SG,
  OverBracket: _G,
  OverParenthesis: MG,
  para: AG,
  parallel: TG,
  par: NG,
  parsim: OG,
  parsl: LG,
  part: RG,
  PartialD: DG,
  Pcy: IG,
  pcy: BG,
  percnt: HG,
  period: PG,
  permil: $G,
  perp: FG,
  pertenk: zG,
  Pfr: VG,
  pfr: qG,
  Phi: UG,
  phi: KG,
  phiv: WG,
  phmmat: GG,
  phone: ZG,
  Pi: jG,
  pi: JG,
  pitchfork: YG,
  piv: XG,
  planck: QG,
  planckh: eZ,
  plankv: tZ,
  plusacir: nZ,
  plusb: rZ,
  pluscir: iZ,
  plus: sZ,
  plusdo: oZ,
  plusdu: aZ,
  pluse: lZ,
  PlusMinus: cZ,
  plusmn: uZ,
  plussim: dZ,
  plustwo: fZ,
  pm: pZ,
  Poincareplane: hZ,
  pointint: gZ,
  popf: mZ,
  Popf: bZ,
  pound: yZ,
  prap: vZ,
  Pr: wZ,
  pr: kZ,
  prcue: EZ,
  precapprox: xZ,
  prec: CZ,
  preccurlyeq: SZ,
  Precedes: _Z,
  PrecedesEqual: MZ,
  PrecedesSlantEqual: AZ,
  PrecedesTilde: TZ,
  preceq: NZ,
  precnapprox: OZ,
  precneqq: LZ,
  precnsim: RZ,
  pre: DZ,
  prE: IZ,
  precsim: BZ,
  prime: HZ,
  Prime: PZ,
  primes: $Z,
  prnap: FZ,
  prnE: zZ,
  prnsim: VZ,
  prod: qZ,
  Product: UZ,
  profalar: KZ,
  profline: WZ,
  profsurf: GZ,
  prop: ZZ,
  Proportional: jZ,
  Proportion: JZ,
  propto: YZ,
  prsim: XZ,
  prurel: QZ,
  Pscr: ej,
  pscr: tj,
  Psi: nj,
  psi: rj,
  puncsp: ij,
  Qfr: sj,
  qfr: oj,
  qint: aj,
  qopf: lj,
  Qopf: cj,
  qprime: uj,
  Qscr: dj,
  qscr: fj,
  quaternions: pj,
  quatint: hj,
  quest: gj,
  questeq: mj,
  quot: bj,
  QUOT: yj,
  rAarr: vj,
  race: wj,
  Racute: kj,
  racute: Ej,
  radic: xj,
  raemptyv: Cj,
  rang: Sj,
  Rang: _j,
  rangd: Mj,
  range: Aj,
  rangle: Tj,
  raquo: Nj,
  rarrap: Oj,
  rarrb: Lj,
  rarrbfs: Rj,
  rarrc: Dj,
  rarr: Ij,
  Rarr: Bj,
  rArr: Hj,
  rarrfs: Pj,
  rarrhk: $j,
  rarrlp: Fj,
  rarrpl: zj,
  rarrsim: Vj,
  Rarrtl: qj,
  rarrtl: Uj,
  rarrw: Kj,
  ratail: Wj,
  rAtail: Gj,
  ratio: Zj,
  rationals: jj,
  rbarr: Jj,
  rBarr: Yj,
  RBarr: Xj,
  rbbrk: Qj,
  rbrace: eJ,
  rbrack: tJ,
  rbrke: nJ,
  rbrksld: rJ,
  rbrkslu: iJ,
  Rcaron: sJ,
  rcaron: oJ,
  Rcedil: aJ,
  rcedil: lJ,
  rceil: cJ,
  rcub: uJ,
  Rcy: dJ,
  rcy: fJ,
  rdca: pJ,
  rdldhar: hJ,
  rdquo: gJ,
  rdquor: mJ,
  rdsh: bJ,
  real: yJ,
  realine: vJ,
  realpart: wJ,
  reals: kJ,
  Re: EJ,
  rect: xJ,
  reg: CJ,
  REG: SJ,
  ReverseElement: _J,
  ReverseEquilibrium: MJ,
  ReverseUpEquilibrium: AJ,
  rfisht: TJ,
  rfloor: NJ,
  rfr: OJ,
  Rfr: LJ,
  rHar: RJ,
  rhard: DJ,
  rharu: IJ,
  rharul: BJ,
  Rho: HJ,
  rho: PJ,
  rhov: $J,
  RightAngleBracket: FJ,
  RightArrowBar: zJ,
  rightarrow: VJ,
  RightArrow: qJ,
  Rightarrow: UJ,
  RightArrowLeftArrow: KJ,
  rightarrowtail: WJ,
  RightCeiling: GJ,
  RightDoubleBracket: ZJ,
  RightDownTeeVector: jJ,
  RightDownVectorBar: JJ,
  RightDownVector: YJ,
  RightFloor: XJ,
  rightharpoondown: QJ,
  rightharpoonup: eY,
  rightleftarrows: tY,
  rightleftharpoons: nY,
  rightrightarrows: rY,
  rightsquigarrow: iY,
  RightTeeArrow: sY,
  RightTee: oY,
  RightTeeVector: aY,
  rightthreetimes: lY,
  RightTriangleBar: cY,
  RightTriangle: uY,
  RightTriangleEqual: dY,
  RightUpDownVector: fY,
  RightUpTeeVector: pY,
  RightUpVectorBar: hY,
  RightUpVector: gY,
  RightVectorBar: mY,
  RightVector: bY,
  ring: yY,
  risingdotseq: vY,
  rlarr: wY,
  rlhar: kY,
  rlm: EY,
  rmoustache: xY,
  rmoust: CY,
  rnmid: SY,
  roang: _Y,
  roarr: MY,
  robrk: AY,
  ropar: TY,
  ropf: NY,
  Ropf: OY,
  roplus: LY,
  rotimes: RY,
  RoundImplies: DY,
  rpar: IY,
  rpargt: BY,
  rppolint: HY,
  rrarr: PY,
  Rrightarrow: $Y,
  rsaquo: FY,
  rscr: zY,
  Rscr: VY,
  rsh: qY,
  Rsh: UY,
  rsqb: KY,
  rsquo: WY,
  rsquor: GY,
  rthree: ZY,
  rtimes: jY,
  rtri: JY,
  rtrie: YY,
  rtrif: XY,
  rtriltri: QY,
  RuleDelayed: eX,
  ruluhar: tX,
  rx: nX,
  Sacute: rX,
  sacute: iX,
  sbquo: sX,
  scap: oX,
  Scaron: aX,
  scaron: lX,
  Sc: cX,
  sc: uX,
  sccue: dX,
  sce: fX,
  scE: pX,
  Scedil: hX,
  scedil: gX,
  Scirc: mX,
  scirc: bX,
  scnap: yX,
  scnE: vX,
  scnsim: wX,
  scpolint: kX,
  scsim: EX,
  Scy: xX,
  scy: CX,
  sdotb: SX,
  sdot: _X,
  sdote: MX,
  searhk: AX,
  searr: TX,
  seArr: NX,
  searrow: OX,
  sect: LX,
  semi: RX,
  seswar: DX,
  setminus: IX,
  setmn: BX,
  sext: HX,
  Sfr: PX,
  sfr: $X,
  sfrown: FX,
  sharp: zX,
  SHCHcy: VX,
  shchcy: qX,
  SHcy: UX,
  shcy: KX,
  ShortDownArrow: WX,
  ShortLeftArrow: GX,
  shortmid: ZX,
  shortparallel: jX,
  ShortRightArrow: JX,
  ShortUpArrow: YX,
  shy: XX,
  Sigma: QX,
  sigma: eQ,
  sigmaf: tQ,
  sigmav: nQ,
  sim: rQ,
  simdot: iQ,
  sime: sQ,
  simeq: oQ,
  simg: aQ,
  simgE: lQ,
  siml: cQ,
  simlE: uQ,
  simne: dQ,
  simplus: fQ,
  simrarr: pQ,
  slarr: hQ,
  SmallCircle: gQ,
  smallsetminus: mQ,
  smashp: bQ,
  smeparsl: yQ,
  smid: vQ,
  smile: wQ,
  smt: kQ,
  smte: EQ,
  smtes: xQ,
  SOFTcy: CQ,
  softcy: SQ,
  solbar: _Q,
  solb: MQ,
  sol: AQ,
  Sopf: TQ,
  sopf: NQ,
  spades: OQ,
  spadesuit: LQ,
  spar: RQ,
  sqcap: DQ,
  sqcaps: IQ,
  sqcup: BQ,
  sqcups: HQ,
  Sqrt: PQ,
  sqsub: $Q,
  sqsube: FQ,
  sqsubset: zQ,
  sqsubseteq: VQ,
  sqsup: qQ,
  sqsupe: UQ,
  sqsupset: KQ,
  sqsupseteq: WQ,
  square: GQ,
  Square: ZQ,
  SquareIntersection: jQ,
  SquareSubset: JQ,
  SquareSubsetEqual: YQ,
  SquareSuperset: XQ,
  SquareSupersetEqual: QQ,
  SquareUnion: eee,
  squarf: tee,
  squ: nee,
  squf: ree,
  srarr: iee,
  Sscr: see,
  sscr: oee,
  ssetmn: aee,
  ssmile: lee,
  sstarf: cee,
  Star: uee,
  star: dee,
  starf: fee,
  straightepsilon: pee,
  straightphi: hee,
  strns: gee,
  sub: mee,
  Sub: bee,
  subdot: yee,
  subE: vee,
  sube: wee,
  subedot: kee,
  submult: Eee,
  subnE: xee,
  subne: Cee,
  subplus: See,
  subrarr: _ee,
  subset: Mee,
  Subset: Aee,
  subseteq: Tee,
  subseteqq: Nee,
  SubsetEqual: Oee,
  subsetneq: Lee,
  subsetneqq: Ree,
  subsim: Dee,
  subsub: Iee,
  subsup: Bee,
  succapprox: Hee,
  succ: Pee,
  succcurlyeq: $ee,
  Succeeds: Fee,
  SucceedsEqual: zee,
  SucceedsSlantEqual: Vee,
  SucceedsTilde: qee,
  succeq: Uee,
  succnapprox: Kee,
  succneqq: Wee,
  succnsim: Gee,
  succsim: Zee,
  SuchThat: jee,
  sum: Jee,
  Sum: Yee,
  sung: Xee,
  sup1: Qee,
  sup2: ete,
  sup3: tte,
  sup: nte,
  Sup: rte,
  supdot: ite,
  supdsub: ste,
  supE: ote,
  supe: ate,
  supedot: lte,
  Superset: cte,
  SupersetEqual: ute,
  suphsol: dte,
  suphsub: fte,
  suplarr: pte,
  supmult: hte,
  supnE: gte,
  supne: mte,
  supplus: bte,
  supset: yte,
  Supset: vte,
  supseteq: wte,
  supseteqq: kte,
  supsetneq: Ete,
  supsetneqq: xte,
  supsim: Cte,
  supsub: Ste,
  supsup: _te,
  swarhk: Mte,
  swarr: Ate,
  swArr: Tte,
  swarrow: Nte,
  swnwar: Ote,
  szlig: Lte,
  Tab: Rte,
  target: Dte,
  Tau: Ite,
  tau: Bte,
  tbrk: Hte,
  Tcaron: Pte,
  tcaron: $te,
  Tcedil: Fte,
  tcedil: zte,
  Tcy: Vte,
  tcy: qte,
  tdot: Ute,
  telrec: Kte,
  Tfr: Wte,
  tfr: Gte,
  there4: Zte,
  therefore: jte,
  Therefore: Jte,
  Theta: Yte,
  theta: Xte,
  thetasym: Qte,
  thetav: ene,
  thickapprox: tne,
  thicksim: nne,
  ThickSpace: rne,
  ThinSpace: ine,
  thinsp: sne,
  thkap: one,
  thksim: ane,
  THORN: lne,
  thorn: cne,
  tilde: une,
  Tilde: dne,
  TildeEqual: fne,
  TildeFullEqual: pne,
  TildeTilde: hne,
  timesbar: gne,
  timesb: mne,
  times: bne,
  timesd: yne,
  tint: vne,
  toea: wne,
  topbot: kne,
  topcir: Ene,
  top: xne,
  Topf: Cne,
  topf: Sne,
  topfork: _ne,
  tosa: Mne,
  tprime: Ane,
  trade: Tne,
  TRADE: Nne,
  triangle: One,
  triangledown: Lne,
  triangleleft: Rne,
  trianglelefteq: Dne,
  triangleq: Ine,
  triangleright: Bne,
  trianglerighteq: Hne,
  tridot: Pne,
  trie: $ne,
  triminus: Fne,
  TripleDot: zne,
  triplus: Vne,
  trisb: qne,
  tritime: Une,
  trpezium: Kne,
  Tscr: Wne,
  tscr: Gne,
  TScy: Zne,
  tscy: jne,
  TSHcy: Jne,
  tshcy: Yne,
  Tstrok: Xne,
  tstrok: Qne,
  twixt: ere,
  twoheadleftarrow: tre,
  twoheadrightarrow: nre,
  Uacute: rre,
  uacute: ire,
  uarr: sre,
  Uarr: ore,
  uArr: are,
  Uarrocir: lre,
  Ubrcy: cre,
  ubrcy: ure,
  Ubreve: dre,
  ubreve: fre,
  Ucirc: pre,
  ucirc: hre,
  Ucy: gre,
  ucy: mre,
  udarr: bre,
  Udblac: yre,
  udblac: vre,
  udhar: wre,
  ufisht: kre,
  Ufr: Ere,
  ufr: xre,
  Ugrave: Cre,
  ugrave: Sre,
  uHar: _re,
  uharl: Mre,
  uharr: Are,
  uhblk: Tre,
  ulcorn: Nre,
  ulcorner: Ore,
  ulcrop: Lre,
  ultri: Rre,
  Umacr: Dre,
  umacr: Ire,
  uml: Bre,
  UnderBar: Hre,
  UnderBrace: Pre,
  UnderBracket: $re,
  UnderParenthesis: Fre,
  Union: zre,
  UnionPlus: Vre,
  Uogon: qre,
  uogon: Ure,
  Uopf: Kre,
  uopf: Wre,
  UpArrowBar: Gre,
  uparrow: Zre,
  UpArrow: jre,
  Uparrow: Jre,
  UpArrowDownArrow: Yre,
  updownarrow: Xre,
  UpDownArrow: Qre,
  Updownarrow: eie,
  UpEquilibrium: tie,
  upharpoonleft: nie,
  upharpoonright: rie,
  uplus: iie,
  UpperLeftArrow: sie,
  UpperRightArrow: oie,
  upsi: aie,
  Upsi: lie,
  upsih: cie,
  Upsilon: uie,
  upsilon: die,
  UpTeeArrow: fie,
  UpTee: pie,
  upuparrows: hie,
  urcorn: gie,
  urcorner: mie,
  urcrop: bie,
  Uring: yie,
  uring: vie,
  urtri: wie,
  Uscr: kie,
  uscr: Eie,
  utdot: xie,
  Utilde: Cie,
  utilde: Sie,
  utri: _ie,
  utrif: Mie,
  uuarr: Aie,
  Uuml: Tie,
  uuml: Nie,
  uwangle: Oie,
  vangrt: Lie,
  varepsilon: Rie,
  varkappa: Die,
  varnothing: Iie,
  varphi: Bie,
  varpi: Hie,
  varpropto: Pie,
  varr: $ie,
  vArr: Fie,
  varrho: zie,
  varsigma: Vie,
  varsubsetneq: qie,
  varsubsetneqq: Uie,
  varsupsetneq: Kie,
  varsupsetneqq: Wie,
  vartheta: Gie,
  vartriangleleft: Zie,
  vartriangleright: jie,
  vBar: Jie,
  Vbar: Yie,
  vBarv: Xie,
  Vcy: Qie,
  vcy: ese,
  vdash: tse,
  vDash: nse,
  Vdash: rse,
  VDash: ise,
  Vdashl: sse,
  veebar: ose,
  vee: ase,
  Vee: lse,
  veeeq: cse,
  vellip: use,
  verbar: dse,
  Verbar: fse,
  vert: pse,
  Vert: hse,
  VerticalBar: gse,
  VerticalLine: mse,
  VerticalSeparator: bse,
  VerticalTilde: yse,
  VeryThinSpace: vse,
  Vfr: wse,
  vfr: kse,
  vltri: Ese,
  vnsub: xse,
  vnsup: Cse,
  Vopf: Sse,
  vopf: _se,
  vprop: Mse,
  vrtri: Ase,
  Vscr: Tse,
  vscr: Nse,
  vsubnE: Ose,
  vsubne: Lse,
  vsupnE: Rse,
  vsupne: Dse,
  Vvdash: Ise,
  vzigzag: Bse,
  Wcirc: Hse,
  wcirc: Pse,
  wedbar: $se,
  wedge: Fse,
  Wedge: zse,
  wedgeq: Vse,
  weierp: qse,
  Wfr: Use,
  wfr: Kse,
  Wopf: Wse,
  wopf: Gse,
  wp: Zse,
  wr: jse,
  wreath: Jse,
  Wscr: Yse,
  wscr: Xse,
  xcap: Qse,
  xcirc: eoe,
  xcup: toe,
  xdtri: noe,
  Xfr: roe,
  xfr: ioe,
  xharr: soe,
  xhArr: ooe,
  Xi: aoe,
  xi: loe,
  xlarr: coe,
  xlArr: uoe,
  xmap: doe,
  xnis: foe,
  xodot: poe,
  Xopf: hoe,
  xopf: goe,
  xoplus: moe,
  xotime: boe,
  xrarr: yoe,
  xrArr: voe,
  Xscr: woe,
  xscr: koe,
  xsqcup: Eoe,
  xuplus: xoe,
  xutri: Coe,
  xvee: Soe,
  xwedge: _oe,
  Yacute: Moe,
  yacute: Aoe,
  YAcy: Toe,
  yacy: Noe,
  Ycirc: Ooe,
  ycirc: Loe,
  Ycy: Roe,
  ycy: Doe,
  yen: Ioe,
  Yfr: Boe,
  yfr: Hoe,
  YIcy: Poe,
  yicy: $oe,
  Yopf: Foe,
  yopf: zoe,
  Yscr: Voe,
  yscr: qoe,
  YUcy: Uoe,
  yucy: Koe,
  yuml: Woe,
  Yuml: Goe,
  Zacute: Zoe,
  zacute: joe,
  Zcaron: Joe,
  zcaron: Yoe,
  Zcy: Xoe,
  zcy: Qoe,
  Zdot: eae,
  zdot: tae,
  zeetrf: nae,
  ZeroWidthSpace: rae,
  Zeta: iae,
  zeta: sae,
  zfr: oae,
  Zfr: aae,
  ZHcy: lae,
  zhcy: cae,
  zigrarr: uae,
  zopf: dae,
  Zopf: fae,
  Zscr: pae,
  zscr: hae,
  zwj: gae,
  zwnj: mae
};
var jm = bae, Yc = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/, ei = {}, Yf = {};
function yae(n) {
  var e, t, r = Yf[n];
  if (r)
    return r;
  for (r = Yf[n] = [], e = 0; e < 128; e++)
    t = String.fromCharCode(e), /^[0-9a-z]$/i.test(t) ? r.push(t) : r.push("%" + ("0" + e.toString(16).toUpperCase()).slice(-2));
  for (e = 0; e < n.length; e++)
    r[n.charCodeAt(e)] = n[e];
  return r;
}
function Uo(n, e, t) {
  var r, i, s, o, a, l = "";
  for (typeof e != "string" && (t = e, e = Uo.defaultChars), typeof t > "u" && (t = !0), a = yae(e), r = 0, i = n.length; r < i; r++) {
    if (s = n.charCodeAt(r), t && s === 37 && r + 2 < i && /^[0-9a-f]{2}$/i.test(n.slice(r + 1, r + 3))) {
      l += n.slice(r, r + 3), r += 2;
      continue;
    }
    if (s < 128) {
      l += a[s];
      continue;
    }
    if (s >= 55296 && s <= 57343) {
      if (s >= 55296 && s <= 56319 && r + 1 < i && (o = n.charCodeAt(r + 1), o >= 56320 && o <= 57343)) {
        l += encodeURIComponent(n[r] + n[r + 1]), r++;
        continue;
      }
      l += "%EF%BF%BD";
      continue;
    }
    l += encodeURIComponent(n[r]);
  }
  return l;
}
Uo.defaultChars = ";/?:@&=+$,-_.!~*'()#";
Uo.componentChars = "-_.!~*'()";
var vae = Uo, Xf = {};
function wae(n) {
  var e, t, r = Xf[n];
  if (r)
    return r;
  for (r = Xf[n] = [], e = 0; e < 128; e++)
    t = String.fromCharCode(e), r.push(t);
  for (e = 0; e < n.length; e++)
    t = n.charCodeAt(e), r[t] = "%" + ("0" + t.toString(16).toUpperCase()).slice(-2);
  return r;
}
function Ko(n, e) {
  var t;
  return typeof e != "string" && (e = Ko.defaultChars), t = wae(e), n.replace(/(%[a-f0-9]{2})+/gi, function(r) {
    var i, s, o, a, l, c, u, d = "";
    for (i = 0, s = r.length; i < s; i += 3) {
      if (o = parseInt(r.slice(i + 1, i + 3), 16), o < 128) {
        d += t[o];
        continue;
      }
      if ((o & 224) === 192 && i + 3 < s && (a = parseInt(r.slice(i + 4, i + 6), 16), (a & 192) === 128)) {
        u = o << 6 & 1984 | a & 63, u < 128 ? d += "��" : d += String.fromCharCode(u), i += 3;
        continue;
      }
      if ((o & 240) === 224 && i + 6 < s && (a = parseInt(r.slice(i + 4, i + 6), 16), l = parseInt(r.slice(i + 7, i + 9), 16), (a & 192) === 128 && (l & 192) === 128)) {
        u = o << 12 & 61440 | a << 6 & 4032 | l & 63, u < 2048 || u >= 55296 && u <= 57343 ? d += "���" : d += String.fromCharCode(u), i += 6;
        continue;
      }
      if ((o & 248) === 240 && i + 9 < s && (a = parseInt(r.slice(i + 4, i + 6), 16), l = parseInt(r.slice(i + 7, i + 9), 16), c = parseInt(r.slice(i + 10, i + 12), 16), (a & 192) === 128 && (l & 192) === 128 && (c & 192) === 128)) {
        u = o << 18 & 1835008 | a << 12 & 258048 | l << 6 & 4032 | c & 63, u < 65536 || u > 1114111 ? d += "����" : (u -= 65536, d += String.fromCharCode(55296 + (u >> 10), 56320 + (u & 1023))), i += 9;
        continue;
      }
      d += "�";
    }
    return d;
  });
}
Ko.defaultChars = ";/?:@&=+$,#";
Ko.componentChars = "";
var kae = Ko, Eae = function(e) {
  var t = "";
  return t += e.protocol || "", t += e.slashes ? "//" : "", t += e.auth ? e.auth + "@" : "", e.hostname && e.hostname.indexOf(":") !== -1 ? t += "[" + e.hostname + "]" : t += e.hostname || "", t += e.port ? ":" + e.port : "", t += e.pathname || "", t += e.search || "", t += e.hash || "", t;
};
function ko() {
  this.protocol = null, this.slashes = null, this.auth = null, this.port = null, this.hostname = null, this.hash = null, this.search = null, this.pathname = null;
}
var xae = /^([a-z0-9.+-]+:)/i, Cae = /:[0-9]*$/, Sae = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/, _ae = ["<", ">", '"', "`", " ", "\r", `
`, "	"], Mae = ["{", "}", "|", "\\", "^", "`"].concat(_ae), Aae = ["'"].concat(Mae), Qf = ["%", "/", "?", ";", "#"].concat(Aae), ep = ["/", "?", "#"], Tae = 255, tp = /^[+a-z0-9A-Z_-]{0,63}$/, Nae = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, np = {
  javascript: !0,
  "javascript:": !0
}, rp = {
  http: !0,
  https: !0,
  ftp: !0,
  gopher: !0,
  file: !0,
  "http:": !0,
  "https:": !0,
  "ftp:": !0,
  "gopher:": !0,
  "file:": !0
};
function Oae(n, e) {
  if (n && n instanceof ko)
    return n;
  var t = new ko();
  return t.parse(n, e), t;
}
ko.prototype.parse = function(n, e) {
  var t, r, i, s, o, a = n;
  if (a = a.trim(), !e && n.split("#").length === 1) {
    var l = Sae.exec(a);
    if (l)
      return this.pathname = l[1], l[2] && (this.search = l[2]), this;
  }
  var c = xae.exec(a);
  if (c && (c = c[0], i = c.toLowerCase(), this.protocol = c, a = a.substr(c.length)), (e || c || a.match(/^\/\/[^@\/]+@[^@\/]+/)) && (o = a.substr(0, 2) === "//", o && !(c && np[c]) && (a = a.substr(2), this.slashes = !0)), !np[c] && (o || c && !rp[c])) {
    var u = -1;
    for (t = 0; t < ep.length; t++)
      s = a.indexOf(ep[t]), s !== -1 && (u === -1 || s < u) && (u = s);
    var d, f;
    for (u === -1 ? f = a.lastIndexOf("@") : f = a.lastIndexOf("@", u), f !== -1 && (d = a.slice(0, f), a = a.slice(f + 1), this.auth = d), u = -1, t = 0; t < Qf.length; t++)
      s = a.indexOf(Qf[t]), s !== -1 && (u === -1 || s < u) && (u = s);
    u === -1 && (u = a.length), a[u - 1] === ":" && u--;
    var p = a.slice(0, u);
    a = a.slice(u), this.parseHost(p), this.hostname = this.hostname || "";
    var h = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
    if (!h) {
      var g = this.hostname.split(/\./);
      for (t = 0, r = g.length; t < r; t++) {
        var m = g[t];
        if (m && !m.match(tp)) {
          for (var v = "", y = 0, k = m.length; y < k; y++)
            m.charCodeAt(y) > 127 ? v += "x" : v += m[y];
          if (!v.match(tp)) {
            var b = g.slice(0, t), x = g.slice(t + 1), w = m.match(Nae);
            w && (b.push(w[1]), x.unshift(w[2])), x.length && (a = x.join(".") + a), this.hostname = b.join(".");
            break;
          }
        }
      }
    }
    this.hostname.length > Tae && (this.hostname = ""), h && (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
  }
  var S = a.indexOf("#");
  S !== -1 && (this.hash = a.substr(S), a = a.slice(0, S));
  var T = a.indexOf("?");
  return T !== -1 && (this.search = a.substr(T), a = a.slice(0, T)), a && (this.pathname = a), rp[i] && this.hostname && !this.pathname && (this.pathname = ""), this;
};
ko.prototype.parseHost = function(n) {
  var e = Cae.exec(n);
  e && (e = e[0], e !== ":" && (this.port = e.substr(1)), n = n.substr(0, n.length - e.length)), n && (this.hostname = n);
};
var Lae = Oae;
ei.encode = vae;
ei.decode = kae;
ei.format = Eae;
ei.parse = Lae;
var Pn = {}, qa, ip;
function Jm() {
  return ip || (ip = 1, qa = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/), qa;
}
var Ua, sp;
function Ym() {
  return sp || (sp = 1, Ua = /[\0-\x1F\x7F-\x9F]/), Ua;
}
var Ka, op;
function Rae() {
  return op || (op = 1, Ka = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/), Ka;
}
var Wa, ap;
function Xm() {
  return ap || (ap = 1, Wa = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/), Wa;
}
var lp;
function Dae() {
  return lp || (lp = 1, Pn.Any = Jm(), Pn.Cc = Ym(), Pn.Cf = Rae(), Pn.P = Yc, Pn.Z = Xm()), Pn;
}
(function(n) {
  function e(A) {
    return Object.prototype.toString.call(A);
  }
  function t(A) {
    return e(A) === "[object String]";
  }
  var r = Object.prototype.hasOwnProperty;
  function i(A, H) {
    return r.call(A, H);
  }
  function s(A) {
    var H = Array.prototype.slice.call(arguments, 1);
    return H.forEach(function(C) {
      if (C) {
        if (typeof C != "object")
          throw new TypeError(C + "must be object");
        Object.keys(C).forEach(function(E) {
          A[E] = C[E];
        });
      }
    }), A;
  }
  function o(A, H, C) {
    return [].concat(A.slice(0, H), C, A.slice(H + 1));
  }
  function a(A) {
    return !(A >= 55296 && A <= 57343 || A >= 64976 && A <= 65007 || (A & 65535) === 65535 || (A & 65535) === 65534 || A >= 0 && A <= 8 || A === 11 || A >= 14 && A <= 31 || A >= 127 && A <= 159 || A > 1114111);
  }
  function l(A) {
    if (A > 65535) {
      A -= 65536;
      var H = 55296 + (A >> 10), C = 56320 + (A & 1023);
      return String.fromCharCode(H, C);
    }
    return String.fromCharCode(A);
  }
  var c = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g, u = /&([a-z#][a-z0-9]{1,31});/gi, d = new RegExp(c.source + "|" + u.source, "gi"), f = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i, p = jm;
  function h(A, H) {
    var C;
    return i(p, H) ? p[H] : H.charCodeAt(0) === 35 && f.test(H) && (C = H[1].toLowerCase() === "x" ? parseInt(H.slice(2), 16) : parseInt(H.slice(1), 10), a(C)) ? l(C) : A;
  }
  function g(A) {
    return A.indexOf("\\") < 0 ? A : A.replace(c, "$1");
  }
  function m(A) {
    return A.indexOf("\\") < 0 && A.indexOf("&") < 0 ? A : A.replace(d, function(H, C, E) {
      return C || h(H, E);
    });
  }
  var v = /[&<>"]/, y = /[&<>"]/g, k = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;"
  };
  function b(A) {
    return k[A];
  }
  function x(A) {
    return v.test(A) ? A.replace(y, b) : A;
  }
  var w = /[.?*+^$[\]\\(){}|-]/g;
  function S(A) {
    return A.replace(w, "\\$&");
  }
  function T(A) {
    switch (A) {
      case 9:
      case 32:
        return !0;
    }
    return !1;
  }
  function M(A) {
    if (A >= 8192 && A <= 8202)
      return !0;
    switch (A) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 160:
      case 5760:
      case 8239:
      case 8287:
      case 12288:
        return !0;
    }
    return !1;
  }
  var L = Yc;
  function z(A) {
    return L.test(A);
  }
  function G(A) {
    switch (A) {
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 123:
      case 124:
      case 125:
      case 126:
        return !0;
      default:
        return !1;
    }
  }
  function q(A) {
    return A = A.trim().replace(/\s+/g, " "), "ẞ".toLowerCase() === "Ṿ" && (A = A.replace(/ẞ/g, "ß")), A.toLowerCase().toUpperCase();
  }
  n.lib = {}, n.lib.mdurl = ei, n.lib.ucmicro = Dae(), n.assign = s, n.isString = t, n.has = i, n.unescapeMd = g, n.unescapeAll = m, n.isValidEntityCode = a, n.fromCodePoint = l, n.escapeHtml = x, n.arrayReplaceAt = o, n.isSpace = T, n.isWhiteSpace = M, n.isMdAsciiPunct = G, n.isPunctChar = z, n.escapeRE = S, n.normalizeReference = q;
})(ve);
var Wo = {}, Iae = function(e, t, r) {
  var i, s, o, a, l = -1, c = e.posMax, u = e.pos;
  for (e.pos = t + 1, i = 1; e.pos < c; ) {
    if (o = e.src.charCodeAt(e.pos), o === 93 && (i--, i === 0)) {
      s = !0;
      break;
    }
    if (a = e.pos, e.md.inline.skipToken(e), o === 91) {
      if (a === e.pos - 1)
        i++;
      else if (r)
        return e.pos = u, -1;
    }
  }
  return s && (l = e.pos), e.pos = u, l;
}, cp = ve.unescapeAll, Bae = function(e, t, r) {
  var i, s, o = t, a = {
    ok: !1,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (e.charCodeAt(o) === 60) {
    for (o++; o < r; ) {
      if (i = e.charCodeAt(o), i === 10 || i === 60)
        return a;
      if (i === 62)
        return a.pos = o + 1, a.str = cp(e.slice(t + 1, o)), a.ok = !0, a;
      if (i === 92 && o + 1 < r) {
        o += 2;
        continue;
      }
      o++;
    }
    return a;
  }
  for (s = 0; o < r && (i = e.charCodeAt(o), !(i === 32 || i < 32 || i === 127)); ) {
    if (i === 92 && o + 1 < r) {
      if (e.charCodeAt(o + 1) === 32)
        break;
      o += 2;
      continue;
    }
    if (i === 40 && (s++, s > 32))
      return a;
    if (i === 41) {
      if (s === 0)
        break;
      s--;
    }
    o++;
  }
  return t === o || s !== 0 || (a.str = cp(e.slice(t, o)), a.pos = o, a.ok = !0), a;
}, Hae = ve.unescapeAll, Pae = function(e, t, r) {
  var i, s, o = 0, a = t, l = {
    ok: !1,
    pos: 0,
    lines: 0,
    str: ""
  };
  if (a >= r || (s = e.charCodeAt(a), s !== 34 && s !== 39 && s !== 40))
    return l;
  for (a++, s === 40 && (s = 41); a < r; ) {
    if (i = e.charCodeAt(a), i === s)
      return l.pos = a + 1, l.lines = o, l.str = Hae(e.slice(t + 1, a)), l.ok = !0, l;
    if (i === 40 && s === 41)
      return l;
    i === 10 ? o++ : i === 92 && a + 1 < r && (a++, e.charCodeAt(a) === 10 && o++), a++;
  }
  return l;
};
Wo.parseLinkLabel = Iae;
Wo.parseLinkDestination = Bae;
Wo.parseLinkTitle = Pae;
var $ae = ve.assign, Fae = ve.unescapeAll, cr = ve.escapeHtml, Qt = {};
Qt.code_inline = function(n, e, t, r, i) {
  var s = n[e];
  return "<code" + i.renderAttrs(s) + ">" + cr(s.content) + "</code>";
};
Qt.code_block = function(n, e, t, r, i) {
  var s = n[e];
  return "<pre" + i.renderAttrs(s) + "><code>" + cr(n[e].content) + `</code></pre>
`;
};
Qt.fence = function(n, e, t, r, i) {
  var s = n[e], o = s.info ? Fae(s.info).trim() : "", a = "", l = "", c, u, d, f, p;
  return o && (d = o.split(/(\s+)/g), a = d[0], l = d.slice(2).join("")), t.highlight ? c = t.highlight(s.content, a, l) || cr(s.content) : c = cr(s.content), c.indexOf("<pre") === 0 ? c + `
` : o ? (u = s.attrIndex("class"), f = s.attrs ? s.attrs.slice() : [], u < 0 ? f.push(["class", t.langPrefix + a]) : (f[u] = f[u].slice(), f[u][1] += " " + t.langPrefix + a), p = {
    attrs: f
  }, "<pre><code" + i.renderAttrs(p) + ">" + c + `</code></pre>
`) : "<pre><code" + i.renderAttrs(s) + ">" + c + `</code></pre>
`;
};
Qt.image = function(n, e, t, r, i) {
  var s = n[e];
  return s.attrs[s.attrIndex("alt")][1] = i.renderInlineAsText(s.children, t, r), i.renderToken(n, e, t);
};
Qt.hardbreak = function(n, e, t) {
  return t.xhtmlOut ? `<br />
` : `<br>
`;
};
Qt.softbreak = function(n, e, t) {
  return t.breaks ? t.xhtmlOut ? `<br />
` : `<br>
` : `
`;
};
Qt.text = function(n, e) {
  return cr(n[e].content);
};
Qt.html_block = function(n, e) {
  return n[e].content;
};
Qt.html_inline = function(n, e) {
  return n[e].content;
};
function ti() {
  this.rules = $ae({}, Qt);
}
ti.prototype.renderAttrs = function(e) {
  var t, r, i;
  if (!e.attrs)
    return "";
  for (i = "", t = 0, r = e.attrs.length; t < r; t++)
    i += " " + cr(e.attrs[t][0]) + '="' + cr(e.attrs[t][1]) + '"';
  return i;
};
ti.prototype.renderToken = function(e, t, r) {
  var i, s = "", o = !1, a = e[t];
  return a.hidden ? "" : (a.block && a.nesting !== -1 && t && e[t - 1].hidden && (s += `
`), s += (a.nesting === -1 ? "</" : "<") + a.tag, s += this.renderAttrs(a), a.nesting === 0 && r.xhtmlOut && (s += " /"), a.block && (o = !0, a.nesting === 1 && t + 1 < e.length && (i = e[t + 1], (i.type === "inline" || i.hidden || i.nesting === -1 && i.tag === a.tag) && (o = !1))), s += o ? `>
` : ">", s);
};
ti.prototype.renderInline = function(n, e, t) {
  for (var r, i = "", s = this.rules, o = 0, a = n.length; o < a; o++)
    r = n[o].type, typeof s[r] < "u" ? i += s[r](n, o, e, t, this) : i += this.renderToken(n, o, e);
  return i;
};
ti.prototype.renderInlineAsText = function(n, e, t) {
  for (var r = "", i = 0, s = n.length; i < s; i++)
    n[i].type === "text" ? r += n[i].content : n[i].type === "image" ? r += this.renderInlineAsText(n[i].children, e, t) : n[i].type === "softbreak" && (r += `
`);
  return r;
};
ti.prototype.render = function(n, e, t) {
  var r, i, s, o = "", a = this.rules;
  for (r = 0, i = n.length; r < i; r++)
    s = n[r].type, s === "inline" ? o += this.renderInline(n[r].children, e, t) : typeof a[s] < "u" ? o += a[s](n, r, e, t, this) : o += this.renderToken(n, r, e, t);
  return o;
};
var zae = ti;
function It() {
  this.__rules__ = [], this.__cache__ = null;
}
It.prototype.__find__ = function(n) {
  for (var e = 0; e < this.__rules__.length; e++)
    if (this.__rules__[e].name === n)
      return e;
  return -1;
};
It.prototype.__compile__ = function() {
  var n = this, e = [""];
  n.__rules__.forEach(function(t) {
    t.enabled && t.alt.forEach(function(r) {
      e.indexOf(r) < 0 && e.push(r);
    });
  }), n.__cache__ = {}, e.forEach(function(t) {
    n.__cache__[t] = [], n.__rules__.forEach(function(r) {
      r.enabled && (t && r.alt.indexOf(t) < 0 || n.__cache__[t].push(r.fn));
    });
  });
};
It.prototype.at = function(n, e, t) {
  var r = this.__find__(n), i = t || {};
  if (r === -1)
    throw new Error("Parser rule not found: " + n);
  this.__rules__[r].fn = e, this.__rules__[r].alt = i.alt || [], this.__cache__ = null;
};
It.prototype.before = function(n, e, t, r) {
  var i = this.__find__(n), s = r || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + n);
  this.__rules__.splice(i, 0, {
    name: e,
    enabled: !0,
    fn: t,
    alt: s.alt || []
  }), this.__cache__ = null;
};
It.prototype.after = function(n, e, t, r) {
  var i = this.__find__(n), s = r || {};
  if (i === -1)
    throw new Error("Parser rule not found: " + n);
  this.__rules__.splice(i + 1, 0, {
    name: e,
    enabled: !0,
    fn: t,
    alt: s.alt || []
  }), this.__cache__ = null;
};
It.prototype.push = function(n, e, t) {
  var r = t || {};
  this.__rules__.push({
    name: n,
    enabled: !0,
    fn: e,
    alt: r.alt || []
  }), this.__cache__ = null;
};
It.prototype.enable = function(n, e) {
  Array.isArray(n) || (n = [n]);
  var t = [];
  return n.forEach(function(r) {
    var i = this.__find__(r);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + r);
    }
    this.__rules__[i].enabled = !0, t.push(r);
  }, this), this.__cache__ = null, t;
};
It.prototype.enableOnly = function(n, e) {
  Array.isArray(n) || (n = [n]), this.__rules__.forEach(function(t) {
    t.enabled = !1;
  }), this.enable(n, e);
};
It.prototype.disable = function(n, e) {
  Array.isArray(n) || (n = [n]);
  var t = [];
  return n.forEach(function(r) {
    var i = this.__find__(r);
    if (i < 0) {
      if (e)
        return;
      throw new Error("Rules manager: invalid rule name " + r);
    }
    this.__rules__[i].enabled = !1, t.push(r);
  }, this), this.__cache__ = null, t;
};
It.prototype.getRules = function(n) {
  return this.__cache__ === null && this.__compile__(), this.__cache__[n] || [];
};
var Xc = It, Vae = /\r\n?|\n/g, qae = /\0/g, Uae = function(e) {
  var t;
  t = e.src.replace(Vae, `
`), t = t.replace(qae, "�"), e.src = t;
}, Kae = function(e) {
  var t;
  e.inlineMode ? (t = new e.Token("inline", "", 0), t.content = e.src, t.map = [0, 1], t.children = [], e.tokens.push(t)) : e.md.block.parse(e.src, e.md, e.env, e.tokens);
}, Wae = function(e) {
  var t = e.tokens, r, i, s;
  for (i = 0, s = t.length; i < s; i++)
    r = t[i], r.type === "inline" && e.md.inline.parse(r.content, e.md, e.env, r.children);
}, Gae = ve.arrayReplaceAt;
function Zae(n) {
  return /^<a[>\s]/i.test(n);
}
function jae(n) {
  return /^<\/a\s*>/i.test(n);
}
var Jae = function(e) {
  var t, r, i, s, o, a, l, c, u, d, f, p, h, g, m, v, y = e.tokens, k;
  if (e.md.options.linkify) {
    for (r = 0, i = y.length; r < i; r++)
      if (!(y[r].type !== "inline" || !e.md.linkify.pretest(y[r].content)))
        for (s = y[r].children, h = 0, t = s.length - 1; t >= 0; t--) {
          if (a = s[t], a.type === "link_close") {
            for (t--; s[t].level !== a.level && s[t].type !== "link_open"; )
              t--;
            continue;
          }
          if (a.type === "html_inline" && (Zae(a.content) && h > 0 && h--, jae(a.content) && h++), !(h > 0) && a.type === "text" && e.md.linkify.test(a.content)) {
            for (u = a.content, k = e.md.linkify.match(u), l = [], p = a.level, f = 0, k.length > 0 && k[0].index === 0 && t > 0 && s[t - 1].type === "text_special" && (k = k.slice(1)), c = 0; c < k.length; c++)
              g = k[c].url, m = e.md.normalizeLink(g), e.md.validateLink(m) && (v = k[c].text, k[c].schema ? k[c].schema === "mailto:" && !/^mailto:/i.test(v) ? v = e.md.normalizeLinkText("mailto:" + v).replace(/^mailto:/, "") : v = e.md.normalizeLinkText(v) : v = e.md.normalizeLinkText("http://" + v).replace(/^http:\/\//, ""), d = k[c].index, d > f && (o = new e.Token("text", "", 0), o.content = u.slice(f, d), o.level = p, l.push(o)), o = new e.Token("link_open", "a", 1), o.attrs = [["href", m]], o.level = p++, o.markup = "linkify", o.info = "auto", l.push(o), o = new e.Token("text", "", 0), o.content = v, o.level = p, l.push(o), o = new e.Token("link_close", "a", -1), o.level = --p, o.markup = "linkify", o.info = "auto", l.push(o), f = k[c].lastIndex);
            f < u.length && (o = new e.Token("text", "", 0), o.content = u.slice(f), o.level = p, l.push(o)), y[r].children = s = Gae(s, t, l);
          }
        }
  }
}, Qm = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/, Yae = /\((c|tm|r)\)/i, Xae = /\((c|tm|r)\)/ig, Qae = {
  c: "©",
  r: "®",
  tm: "™"
};
function ele(n, e) {
  return Qae[e.toLowerCase()];
}
function tle(n) {
  var e, t, r = 0;
  for (e = n.length - 1; e >= 0; e--)
    t = n[e], t.type === "text" && !r && (t.content = t.content.replace(Xae, ele)), t.type === "link_open" && t.info === "auto" && r--, t.type === "link_close" && t.info === "auto" && r++;
}
function nle(n) {
  var e, t, r = 0;
  for (e = n.length - 1; e >= 0; e--)
    t = n[e], t.type === "text" && !r && Qm.test(t.content) && (t.content = t.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–")), t.type === "link_open" && t.info === "auto" && r--, t.type === "link_close" && t.info === "auto" && r++;
}
var rle = function(e) {
  var t;
  if (e.md.options.typographer)
    for (t = e.tokens.length - 1; t >= 0; t--)
      e.tokens[t].type === "inline" && (Yae.test(e.tokens[t].content) && tle(e.tokens[t].children), Qm.test(e.tokens[t].content) && nle(e.tokens[t].children));
}, up = ve.isWhiteSpace, dp = ve.isPunctChar, fp = ve.isMdAsciiPunct, ile = /['"]/, pp = /['"]/g, hp = "’";
function xs(n, e, t) {
  return n.slice(0, e) + t + n.slice(e + 1);
}
function sle(n, e) {
  var t, r, i, s, o, a, l, c, u, d, f, p, h, g, m, v, y, k, b, x, w;
  for (b = [], t = 0; t < n.length; t++) {
    for (r = n[t], l = n[t].level, y = b.length - 1; y >= 0 && !(b[y].level <= l); y--)
      ;
    if (b.length = y + 1, r.type === "text") {
      i = r.content, o = 0, a = i.length;
      e:
        for (; o < a && (pp.lastIndex = o, s = pp.exec(i), !!s); ) {
          if (m = v = !0, o = s.index + 1, k = s[0] === "'", u = 32, s.index - 1 >= 0)
            u = i.charCodeAt(s.index - 1);
          else
            for (y = t - 1; y >= 0 && !(n[y].type === "softbreak" || n[y].type === "hardbreak"); y--)
              if (n[y].content) {
                u = n[y].content.charCodeAt(n[y].content.length - 1);
                break;
              }
          if (d = 32, o < a)
            d = i.charCodeAt(o);
          else
            for (y = t + 1; y < n.length && !(n[y].type === "softbreak" || n[y].type === "hardbreak"); y++)
              if (n[y].content) {
                d = n[y].content.charCodeAt(0);
                break;
              }
          if (f = fp(u) || dp(String.fromCharCode(u)), p = fp(d) || dp(String.fromCharCode(d)), h = up(u), g = up(d), g ? m = !1 : p && (h || f || (m = !1)), h ? v = !1 : f && (g || p || (v = !1)), d === 34 && s[0] === '"' && u >= 48 && u <= 57 && (v = m = !1), m && v && (m = f, v = p), !m && !v) {
            k && (r.content = xs(r.content, s.index, hp));
            continue;
          }
          if (v) {
            for (y = b.length - 1; y >= 0 && (c = b[y], !(b[y].level < l)); y--)
              if (c.single === k && b[y].level === l) {
                c = b[y], k ? (x = e.md.options.quotes[2], w = e.md.options.quotes[3]) : (x = e.md.options.quotes[0], w = e.md.options.quotes[1]), r.content = xs(r.content, s.index, w), n[c.token].content = xs(
                  n[c.token].content,
                  c.pos,
                  x
                ), o += w.length - 1, c.token === t && (o += x.length - 1), i = r.content, a = i.length, b.length = y;
                continue e;
              }
          }
          m ? b.push({
            token: t,
            pos: s.index,
            single: k,
            level: l
          }) : v && k && (r.content = xs(r.content, s.index, hp));
        }
    }
  }
}
var ole = function(e) {
  var t;
  if (e.md.options.typographer)
    for (t = e.tokens.length - 1; t >= 0; t--)
      e.tokens[t].type !== "inline" || !ile.test(e.tokens[t].content) || sle(e.tokens[t].children, e);
}, ale = function(e) {
  var t, r, i, s, o, a, l = e.tokens;
  for (t = 0, r = l.length; t < r; t++)
    if (l[t].type === "inline") {
      for (i = l[t].children, o = i.length, s = 0; s < o; s++)
        i[s].type === "text_special" && (i[s].type = "text");
      for (s = a = 0; s < o; s++)
        i[s].type === "text" && s + 1 < o && i[s + 1].type === "text" ? i[s + 1].content = i[s].content + i[s + 1].content : (s !== a && (i[a] = i[s]), a++);
      s !== a && (i.length = a);
    }
};
function ni(n, e, t) {
  this.type = n, this.tag = e, this.attrs = null, this.map = null, this.nesting = t, this.level = 0, this.children = null, this.content = "", this.markup = "", this.info = "", this.meta = null, this.block = !1, this.hidden = !1;
}
ni.prototype.attrIndex = function(e) {
  var t, r, i;
  if (!this.attrs)
    return -1;
  for (t = this.attrs, r = 0, i = t.length; r < i; r++)
    if (t[r][0] === e)
      return r;
  return -1;
};
ni.prototype.attrPush = function(e) {
  this.attrs ? this.attrs.push(e) : this.attrs = [e];
};
ni.prototype.attrSet = function(e, t) {
  var r = this.attrIndex(e), i = [e, t];
  r < 0 ? this.attrPush(i) : this.attrs[r] = i;
};
ni.prototype.attrGet = function(e) {
  var t = this.attrIndex(e), r = null;
  return t >= 0 && (r = this.attrs[t][1]), r;
};
ni.prototype.attrJoin = function(e, t) {
  var r = this.attrIndex(e);
  r < 0 ? this.attrPush([e, t]) : this.attrs[r][1] = this.attrs[r][1] + " " + t;
};
var Qc = ni, lle = Qc;
function eb(n, e, t) {
  this.src = n, this.env = t, this.tokens = [], this.inlineMode = !1, this.md = e;
}
eb.prototype.Token = lle;
var cle = eb, ule = Xc, Ga = [
  ["normalize", Uae],
  ["block", Kae],
  ["inline", Wae],
  ["linkify", Jae],
  ["replacements", rle],
  ["smartquotes", ole],
  // `text_join` finds `text_special` tokens (for escape sequences)
  // and joins them with the rest of the text
  ["text_join", ale]
];
function eu() {
  this.ruler = new ule();
  for (var n = 0; n < Ga.length; n++)
    this.ruler.push(Ga[n][0], Ga[n][1]);
}
eu.prototype.process = function(n) {
  var e, t, r;
  for (r = this.ruler.getRules(""), e = 0, t = r.length; e < t; e++)
    r[e](n);
};
eu.prototype.State = cle;
var dle = eu, Za = ve.isSpace;
function ja(n, e) {
  var t = n.bMarks[e] + n.tShift[e], r = n.eMarks[e];
  return n.src.slice(t, r);
}
function gp(n) {
  var e = [], t = 0, r = n.length, i, s = !1, o = 0, a = "";
  for (i = n.charCodeAt(t); t < r; )
    i === 124 && (s ? (a += n.substring(o, t - 1), o = t) : (e.push(a + n.substring(o, t)), a = "", o = t + 1)), s = i === 92, t++, i = n.charCodeAt(t);
  return e.push(a + n.substring(o)), e;
}
var fle = function(e, t, r, i) {
  var s, o, a, l, c, u, d, f, p, h, g, m, v, y, k, b, x, w;
  if (t + 2 > r || (u = t + 1, e.sCount[u] < e.blkIndent) || e.sCount[u] - e.blkIndent >= 4 || (a = e.bMarks[u] + e.tShift[u], a >= e.eMarks[u]) || (x = e.src.charCodeAt(a++), x !== 124 && x !== 45 && x !== 58) || a >= e.eMarks[u] || (w = e.src.charCodeAt(a++), w !== 124 && w !== 45 && w !== 58 && !Za(w)) || x === 45 && Za(w))
    return !1;
  for (; a < e.eMarks[u]; ) {
    if (s = e.src.charCodeAt(a), s !== 124 && s !== 45 && s !== 58 && !Za(s))
      return !1;
    a++;
  }
  for (o = ja(e, t + 1), d = o.split("|"), h = [], l = 0; l < d.length; l++) {
    if (g = d[l].trim(), !g) {
      if (l === 0 || l === d.length - 1)
        continue;
      return !1;
    }
    if (!/^:?-+:?$/.test(g))
      return !1;
    g.charCodeAt(g.length - 1) === 58 ? h.push(g.charCodeAt(0) === 58 ? "center" : "right") : g.charCodeAt(0) === 58 ? h.push("left") : h.push("");
  }
  if (o = ja(e, t).trim(), o.indexOf("|") === -1 || e.sCount[t] - e.blkIndent >= 4 || (d = gp(o), d.length && d[0] === "" && d.shift(), d.length && d[d.length - 1] === "" && d.pop(), f = d.length, f === 0 || f !== h.length))
    return !1;
  if (i)
    return !0;
  for (y = e.parentType, e.parentType = "table", b = e.md.block.ruler.getRules("blockquote"), p = e.push("table_open", "table", 1), p.map = m = [t, 0], p = e.push("thead_open", "thead", 1), p.map = [t, t + 1], p = e.push("tr_open", "tr", 1), p.map = [t, t + 1], l = 0; l < d.length; l++)
    p = e.push("th_open", "th", 1), h[l] && (p.attrs = [["style", "text-align:" + h[l]]]), p = e.push("inline", "", 0), p.content = d[l].trim(), p.children = [], p = e.push("th_close", "th", -1);
  for (p = e.push("tr_close", "tr", -1), p = e.push("thead_close", "thead", -1), u = t + 2; u < r && !(e.sCount[u] < e.blkIndent); u++) {
    for (k = !1, l = 0, c = b.length; l < c; l++)
      if (b[l](e, u, r, !0)) {
        k = !0;
        break;
      }
    if (k || (o = ja(e, u).trim(), !o) || e.sCount[u] - e.blkIndent >= 4)
      break;
    for (d = gp(o), d.length && d[0] === "" && d.shift(), d.length && d[d.length - 1] === "" && d.pop(), u === t + 2 && (p = e.push("tbody_open", "tbody", 1), p.map = v = [t + 2, 0]), p = e.push("tr_open", "tr", 1), p.map = [u, u + 1], l = 0; l < f; l++)
      p = e.push("td_open", "td", 1), h[l] && (p.attrs = [["style", "text-align:" + h[l]]]), p = e.push("inline", "", 0), p.content = d[l] ? d[l].trim() : "", p.children = [], p = e.push("td_close", "td", -1);
    p = e.push("tr_close", "tr", -1);
  }
  return v && (p = e.push("tbody_close", "tbody", -1), v[1] = u), p = e.push("table_close", "table", -1), m[1] = u, e.parentType = y, e.line = u, !0;
}, ple = function(e, t, r) {
  var i, s, o;
  if (e.sCount[t] - e.blkIndent < 4)
    return !1;
  for (s = i = t + 1; i < r; ) {
    if (e.isEmpty(i)) {
      i++;
      continue;
    }
    if (e.sCount[i] - e.blkIndent >= 4) {
      i++, s = i;
      continue;
    }
    break;
  }
  return e.line = s, o = e.push("code_block", "code", 0), o.content = e.getLines(t, s, 4 + e.blkIndent, !1) + `
`, o.map = [t, e.line], !0;
}, hle = function(e, t, r, i) {
  var s, o, a, l, c, u, d, f = !1, p = e.bMarks[t] + e.tShift[t], h = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || p + 3 > h || (s = e.src.charCodeAt(p), s !== 126 && s !== 96) || (c = p, p = e.skipChars(p, s), o = p - c, o < 3) || (d = e.src.slice(c, p), a = e.src.slice(p, h), s === 96 && a.indexOf(String.fromCharCode(s)) >= 0))
    return !1;
  if (i)
    return !0;
  for (l = t; l++, !(l >= r || (p = c = e.bMarks[l] + e.tShift[l], h = e.eMarks[l], p < h && e.sCount[l] < e.blkIndent)); )
    if (e.src.charCodeAt(p) === s && !(e.sCount[l] - e.blkIndent >= 4) && (p = e.skipChars(p, s), !(p - c < o) && (p = e.skipSpaces(p), !(p < h)))) {
      f = !0;
      break;
    }
  return o = e.sCount[t], e.line = l + (f ? 1 : 0), u = e.push("fence", "code", 0), u.info = a, u.content = e.getLines(t + 1, l, o, !0), u.markup = d, u.map = [t, e.line], !0;
}, gle = ve.isSpace, mle = function(e, t, r, i) {
  var s, o, a, l, c, u, d, f, p, h, g, m, v, y, k, b, x, w, S, T, M = e.lineMax, L = e.bMarks[t] + e.tShift[t], z = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || e.src.charCodeAt(L) !== 62)
    return !1;
  if (i)
    return !0;
  for (h = [], g = [], y = [], k = [], w = e.md.block.ruler.getRules("blockquote"), v = e.parentType, e.parentType = "blockquote", f = t; f < r && (T = e.sCount[f] < e.blkIndent, L = e.bMarks[f] + e.tShift[f], z = e.eMarks[f], !(L >= z)); f++) {
    if (e.src.charCodeAt(L++) === 62 && !T) {
      for (l = e.sCount[f] + 1, e.src.charCodeAt(L) === 32 ? (L++, l++, s = !1, b = !0) : e.src.charCodeAt(L) === 9 ? (b = !0, (e.bsCount[f] + l) % 4 === 3 ? (L++, l++, s = !1) : s = !0) : b = !1, p = l, h.push(e.bMarks[f]), e.bMarks[f] = L; L < z && (o = e.src.charCodeAt(L), gle(o)); ) {
        o === 9 ? p += 4 - (p + e.bsCount[f] + (s ? 1 : 0)) % 4 : p++;
        L++;
      }
      u = L >= z, g.push(e.bsCount[f]), e.bsCount[f] = e.sCount[f] + 1 + (b ? 1 : 0), y.push(e.sCount[f]), e.sCount[f] = p - l, k.push(e.tShift[f]), e.tShift[f] = L - e.bMarks[f];
      continue;
    }
    if (u)
      break;
    for (x = !1, a = 0, c = w.length; a < c; a++)
      if (w[a](e, f, r, !0)) {
        x = !0;
        break;
      }
    if (x) {
      e.lineMax = f, e.blkIndent !== 0 && (h.push(e.bMarks[f]), g.push(e.bsCount[f]), k.push(e.tShift[f]), y.push(e.sCount[f]), e.sCount[f] -= e.blkIndent);
      break;
    }
    h.push(e.bMarks[f]), g.push(e.bsCount[f]), k.push(e.tShift[f]), y.push(e.sCount[f]), e.sCount[f] = -1;
  }
  for (m = e.blkIndent, e.blkIndent = 0, S = e.push("blockquote_open", "blockquote", 1), S.markup = ">", S.map = d = [t, 0], e.md.block.tokenize(e, t, f), S = e.push("blockquote_close", "blockquote", -1), S.markup = ">", e.lineMax = M, e.parentType = v, d[1] = e.line, a = 0; a < k.length; a++)
    e.bMarks[a + t] = h[a], e.tShift[a + t] = k[a], e.sCount[a + t] = y[a], e.bsCount[a + t] = g[a];
  return e.blkIndent = m, !0;
}, ble = ve.isSpace, yle = function(e, t, r, i) {
  var s, o, a, l, c = e.bMarks[t] + e.tShift[t], u = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || (s = e.src.charCodeAt(c++), s !== 42 && s !== 45 && s !== 95))
    return !1;
  for (o = 1; c < u; ) {
    if (a = e.src.charCodeAt(c++), a !== s && !ble(a))
      return !1;
    a === s && o++;
  }
  return o < 3 ? !1 : (i || (e.line = t + 1, l = e.push("hr", "hr", 0), l.map = [t, e.line], l.markup = Array(o + 1).join(String.fromCharCode(s))), !0);
}, tb = ve.isSpace;
function mp(n, e) {
  var t, r, i, s;
  return r = n.bMarks[e] + n.tShift[e], i = n.eMarks[e], t = n.src.charCodeAt(r++), t !== 42 && t !== 45 && t !== 43 || r < i && (s = n.src.charCodeAt(r), !tb(s)) ? -1 : r;
}
function bp(n, e) {
  var t, r = n.bMarks[e] + n.tShift[e], i = r, s = n.eMarks[e];
  if (i + 1 >= s || (t = n.src.charCodeAt(i++), t < 48 || t > 57))
    return -1;
  for (; ; ) {
    if (i >= s)
      return -1;
    if (t = n.src.charCodeAt(i++), t >= 48 && t <= 57) {
      if (i - r >= 10)
        return -1;
      continue;
    }
    if (t === 41 || t === 46)
      break;
    return -1;
  }
  return i < s && (t = n.src.charCodeAt(i), !tb(t)) ? -1 : i;
}
function vle(n, e) {
  var t, r, i = n.level + 2;
  for (t = e + 2, r = n.tokens.length - 2; t < r; t++)
    n.tokens[t].level === i && n.tokens[t].type === "paragraph_open" && (n.tokens[t + 2].hidden = !0, n.tokens[t].hidden = !0, t += 2);
}
var wle = function(e, t, r, i) {
  var s, o, a, l, c, u, d, f, p, h, g, m, v, y, k, b, x, w, S, T, M, L, z, G, q, A, H, C = t, E = !1, _ = !0;
  if (e.sCount[C] - e.blkIndent >= 4 || e.listIndent >= 0 && e.sCount[C] - e.listIndent >= 4 && e.sCount[C] < e.blkIndent)
    return !1;
  if (i && e.parentType === "paragraph" && e.sCount[C] >= e.blkIndent && (E = !0), (L = bp(e, C)) >= 0) {
    if (d = !0, G = e.bMarks[C] + e.tShift[C], v = Number(e.src.slice(G, L - 1)), E && v !== 1)
      return !1;
  } else if ((L = mp(e, C)) >= 0)
    d = !1;
  else
    return !1;
  if (E && e.skipSpaces(L) >= e.eMarks[C])
    return !1;
  if (i)
    return !0;
  for (m = e.src.charCodeAt(L - 1), g = e.tokens.length, d ? (H = e.push("ordered_list_open", "ol", 1), v !== 1 && (H.attrs = [["start", v]])) : H = e.push("bullet_list_open", "ul", 1), H.map = h = [C, 0], H.markup = String.fromCharCode(m), z = !1, A = e.md.block.ruler.getRules("list"), x = e.parentType, e.parentType = "list"; C < r; ) {
    for (M = L, y = e.eMarks[C], u = k = e.sCount[C] + L - (e.bMarks[C] + e.tShift[C]); M < y; ) {
      if (s = e.src.charCodeAt(M), s === 9)
        k += 4 - (k + e.bsCount[C]) % 4;
      else if (s === 32)
        k++;
      else
        break;
      M++;
    }
    if (o = M, o >= y ? c = 1 : c = k - u, c > 4 && (c = 1), l = u + c, H = e.push("list_item_open", "li", 1), H.markup = String.fromCharCode(m), H.map = f = [C, 0], d && (H.info = e.src.slice(G, L - 1)), T = e.tight, S = e.tShift[C], w = e.sCount[C], b = e.listIndent, e.listIndent = e.blkIndent, e.blkIndent = l, e.tight = !0, e.tShift[C] = o - e.bMarks[C], e.sCount[C] = k, o >= y && e.isEmpty(C + 1) ? e.line = Math.min(e.line + 2, r) : e.md.block.tokenize(e, C, r, !0), (!e.tight || z) && (_ = !1), z = e.line - C > 1 && e.isEmpty(e.line - 1), e.blkIndent = e.listIndent, e.listIndent = b, e.tShift[C] = S, e.sCount[C] = w, e.tight = T, H = e.push("list_item_close", "li", -1), H.markup = String.fromCharCode(m), C = e.line, f[1] = C, C >= r || e.sCount[C] < e.blkIndent || e.sCount[C] - e.blkIndent >= 4)
      break;
    for (q = !1, a = 0, p = A.length; a < p; a++)
      if (A[a](e, C, r, !0)) {
        q = !0;
        break;
      }
    if (q)
      break;
    if (d) {
      if (L = bp(e, C), L < 0)
        break;
      G = e.bMarks[C] + e.tShift[C];
    } else if (L = mp(e, C), L < 0)
      break;
    if (m !== e.src.charCodeAt(L - 1))
      break;
  }
  return d ? H = e.push("ordered_list_close", "ol", -1) : H = e.push("bullet_list_close", "ul", -1), H.markup = String.fromCharCode(m), h[1] = C, e.line = C, e.parentType = x, _ && vle(e, g), !0;
}, kle = ve.normalizeReference, Cs = ve.isSpace, Ele = function(e, t, r, i) {
  var s, o, a, l, c, u, d, f, p, h, g, m, v, y, k, b, x = 0, w = e.bMarks[t] + e.tShift[t], S = e.eMarks[t], T = t + 1;
  if (e.sCount[t] - e.blkIndent >= 4 || e.src.charCodeAt(w) !== 91)
    return !1;
  for (; ++w < S; )
    if (e.src.charCodeAt(w) === 93 && e.src.charCodeAt(w - 1) !== 92) {
      if (w + 1 === S || e.src.charCodeAt(w + 1) !== 58)
        return !1;
      break;
    }
  for (l = e.lineMax, k = e.md.block.ruler.getRules("reference"), h = e.parentType, e.parentType = "reference"; T < l && !e.isEmpty(T); T++)
    if (!(e.sCount[T] - e.blkIndent > 3) && !(e.sCount[T] < 0)) {
      for (y = !1, u = 0, d = k.length; u < d; u++)
        if (k[u](e, T, l, !0)) {
          y = !0;
          break;
        }
      if (y)
        break;
    }
  for (v = e.getLines(t, T, e.blkIndent, !1).trim(), S = v.length, w = 1; w < S; w++) {
    if (s = v.charCodeAt(w), s === 91)
      return !1;
    if (s === 93) {
      p = w;
      break;
    } else
      s === 10 ? x++ : s === 92 && (w++, w < S && v.charCodeAt(w) === 10 && x++);
  }
  if (p < 0 || v.charCodeAt(p + 1) !== 58)
    return !1;
  for (w = p + 2; w < S; w++)
    if (s = v.charCodeAt(w), s === 10)
      x++;
    else if (!Cs(s))
      break;
  if (g = e.md.helpers.parseLinkDestination(v, w, S), !g.ok || (c = e.md.normalizeLink(g.str), !e.md.validateLink(c)))
    return !1;
  for (w = g.pos, x += g.lines, o = w, a = x, m = w; w < S; w++)
    if (s = v.charCodeAt(w), s === 10)
      x++;
    else if (!Cs(s))
      break;
  for (g = e.md.helpers.parseLinkTitle(v, w, S), w < S && m !== w && g.ok ? (b = g.str, w = g.pos, x += g.lines) : (b = "", w = o, x = a); w < S && (s = v.charCodeAt(w), !!Cs(s)); )
    w++;
  if (w < S && v.charCodeAt(w) !== 10 && b)
    for (b = "", w = o, x = a; w < S && (s = v.charCodeAt(w), !!Cs(s)); )
      w++;
  return w < S && v.charCodeAt(w) !== 10 || (f = kle(v.slice(1, p)), !f) ? !1 : (i || (typeof e.env.references > "u" && (e.env.references = {}), typeof e.env.references[f] > "u" && (e.env.references[f] = { title: b, href: c }), e.parentType = h, e.line = t + x + 1), !0);
}, xle = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "source",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
], Go = {}, Cle = "[a-zA-Z_:][a-zA-Z0-9:._-]*", Sle = "[^\"'=<>`\\x00-\\x20]+", _le = "'[^']*'", Mle = '"[^"]*"', Ale = "(?:" + Sle + "|" + _le + "|" + Mle + ")", Tle = "(?:\\s+" + Cle + "(?:\\s*=\\s*" + Ale + ")?)", nb = "<[A-Za-z][A-Za-z0-9\\-]*" + Tle + "*\\s*\\/?>", rb = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>", Nle = "<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->", Ole = "<[?][\\s\\S]*?[?]>", Lle = "<![A-Z]+\\s+[^>]*>", Rle = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>", Dle = new RegExp("^(?:" + nb + "|" + rb + "|" + Nle + "|" + Ole + "|" + Lle + "|" + Rle + ")"), Ile = new RegExp("^(?:" + nb + "|" + rb + ")");
Go.HTML_TAG_RE = Dle;
Go.HTML_OPEN_CLOSE_TAG_RE = Ile;
var Ble = xle, Hle = Go.HTML_OPEN_CLOSE_TAG_RE, Er = [
  [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, !0],
  [/^<!--/, /-->/, !0],
  [/^<\?/, /\?>/, !0],
  [/^<![A-Z]/, />/, !0],
  [/^<!\[CDATA\[/, /\]\]>/, !0],
  [new RegExp("^</?(" + Ble.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, !0],
  [new RegExp(Hle.source + "\\s*$"), /^$/, !1]
], Ple = function(e, t, r, i) {
  var s, o, a, l, c = e.bMarks[t] + e.tShift[t], u = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || !e.md.options.html || e.src.charCodeAt(c) !== 60)
    return !1;
  for (l = e.src.slice(c, u), s = 0; s < Er.length && !Er[s][0].test(l); s++)
    ;
  if (s === Er.length)
    return !1;
  if (i)
    return Er[s][2];
  if (o = t + 1, !Er[s][1].test(l)) {
    for (; o < r && !(e.sCount[o] < e.blkIndent); o++)
      if (c = e.bMarks[o] + e.tShift[o], u = e.eMarks[o], l = e.src.slice(c, u), Er[s][1].test(l)) {
        l.length !== 0 && o++;
        break;
      }
  }
  return e.line = o, a = e.push("html_block", "", 0), a.map = [t, o], a.content = e.getLines(t, o, e.blkIndent, !0), !0;
}, yp = ve.isSpace, $le = function(e, t, r, i) {
  var s, o, a, l, c = e.bMarks[t] + e.tShift[t], u = e.eMarks[t];
  if (e.sCount[t] - e.blkIndent >= 4 || (s = e.src.charCodeAt(c), s !== 35 || c >= u))
    return !1;
  for (o = 1, s = e.src.charCodeAt(++c); s === 35 && c < u && o <= 6; )
    o++, s = e.src.charCodeAt(++c);
  return o > 6 || c < u && !yp(s) ? !1 : (i || (u = e.skipSpacesBack(u, c), a = e.skipCharsBack(u, 35, c), a > c && yp(e.src.charCodeAt(a - 1)) && (u = a), e.line = t + 1, l = e.push("heading_open", "h" + String(o), 1), l.markup = "########".slice(0, o), l.map = [t, e.line], l = e.push("inline", "", 0), l.content = e.src.slice(c, u).trim(), l.map = [t, e.line], l.children = [], l = e.push("heading_close", "h" + String(o), -1), l.markup = "########".slice(0, o)), !0);
}, Fle = function(e, t, r) {
  var i, s, o, a, l, c, u, d, f, p = t + 1, h, g = e.md.block.ruler.getRules("paragraph");
  if (e.sCount[t] - e.blkIndent >= 4)
    return !1;
  for (h = e.parentType, e.parentType = "paragraph"; p < r && !e.isEmpty(p); p++)
    if (!(e.sCount[p] - e.blkIndent > 3)) {
      if (e.sCount[p] >= e.blkIndent && (c = e.bMarks[p] + e.tShift[p], u = e.eMarks[p], c < u && (f = e.src.charCodeAt(c), (f === 45 || f === 61) && (c = e.skipChars(c, f), c = e.skipSpaces(c), c >= u)))) {
        d = f === 61 ? 1 : 2;
        break;
      }
      if (!(e.sCount[p] < 0)) {
        for (s = !1, o = 0, a = g.length; o < a; o++)
          if (g[o](e, p, r, !0)) {
            s = !0;
            break;
          }
        if (s)
          break;
      }
    }
  return d ? (i = e.getLines(t, p, e.blkIndent, !1).trim(), e.line = p + 1, l = e.push("heading_open", "h" + String(d), 1), l.markup = String.fromCharCode(f), l.map = [t, e.line], l = e.push("inline", "", 0), l.content = i, l.map = [t, e.line - 1], l.children = [], l = e.push("heading_close", "h" + String(d), -1), l.markup = String.fromCharCode(f), e.parentType = h, !0) : !1;
}, zle = function(e, t, r) {
  var i, s, o, a, l, c, u = t + 1, d = e.md.block.ruler.getRules("paragraph");
  for (c = e.parentType, e.parentType = "paragraph"; u < r && !e.isEmpty(u); u++)
    if (!(e.sCount[u] - e.blkIndent > 3) && !(e.sCount[u] < 0)) {
      for (s = !1, o = 0, a = d.length; o < a; o++)
        if (d[o](e, u, r, !0)) {
          s = !0;
          break;
        }
      if (s)
        break;
    }
  return i = e.getLines(t, u, e.blkIndent, !1).trim(), e.line = u, l = e.push("paragraph_open", "p", 1), l.map = [t, e.line], l = e.push("inline", "", 0), l.content = i, l.map = [t, e.line], l.children = [], l = e.push("paragraph_close", "p", -1), e.parentType = c, !0;
}, ib = Qc, Zo = ve.isSpace;
function en(n, e, t, r) {
  var i, s, o, a, l, c, u, d;
  for (this.src = n, this.md = e, this.env = t, this.tokens = r, this.bMarks = [], this.eMarks = [], this.tShift = [], this.sCount = [], this.bsCount = [], this.blkIndent = 0, this.line = 0, this.lineMax = 0, this.tight = !1, this.ddIndent = -1, this.listIndent = -1, this.parentType = "root", this.level = 0, this.result = "", s = this.src, d = !1, o = a = c = u = 0, l = s.length; a < l; a++) {
    if (i = s.charCodeAt(a), !d)
      if (Zo(i)) {
        c++, i === 9 ? u += 4 - u % 4 : u++;
        continue;
      } else
        d = !0;
    (i === 10 || a === l - 1) && (i !== 10 && a++, this.bMarks.push(o), this.eMarks.push(a), this.tShift.push(c), this.sCount.push(u), this.bsCount.push(0), d = !1, c = 0, u = 0, o = a + 1);
  }
  this.bMarks.push(s.length), this.eMarks.push(s.length), this.tShift.push(0), this.sCount.push(0), this.bsCount.push(0), this.lineMax = this.bMarks.length - 1;
}
en.prototype.push = function(n, e, t) {
  var r = new ib(n, e, t);
  return r.block = !0, t < 0 && this.level--, r.level = this.level, t > 0 && this.level++, this.tokens.push(r), r;
};
en.prototype.isEmpty = function(e) {
  return this.bMarks[e] + this.tShift[e] >= this.eMarks[e];
};
en.prototype.skipEmptyLines = function(e) {
  for (var t = this.lineMax; e < t && !(this.bMarks[e] + this.tShift[e] < this.eMarks[e]); e++)
    ;
  return e;
};
en.prototype.skipSpaces = function(e) {
  for (var t, r = this.src.length; e < r && (t = this.src.charCodeAt(e), !!Zo(t)); e++)
    ;
  return e;
};
en.prototype.skipSpacesBack = function(e, t) {
  if (e <= t)
    return e;
  for (; e > t; )
    if (!Zo(this.src.charCodeAt(--e)))
      return e + 1;
  return e;
};
en.prototype.skipChars = function(e, t) {
  for (var r = this.src.length; e < r && this.src.charCodeAt(e) === t; e++)
    ;
  return e;
};
en.prototype.skipCharsBack = function(e, t, r) {
  if (e <= r)
    return e;
  for (; e > r; )
    if (t !== this.src.charCodeAt(--e))
      return e + 1;
  return e;
};
en.prototype.getLines = function(e, t, r, i) {
  var s, o, a, l, c, u, d, f = e;
  if (e >= t)
    return "";
  for (u = new Array(t - e), s = 0; f < t; f++, s++) {
    for (o = 0, d = l = this.bMarks[f], f + 1 < t || i ? c = this.eMarks[f] + 1 : c = this.eMarks[f]; l < c && o < r; ) {
      if (a = this.src.charCodeAt(l), Zo(a))
        a === 9 ? o += 4 - (o + this.bsCount[f]) % 4 : o++;
      else if (l - d < this.tShift[f])
        o++;
      else
        break;
      l++;
    }
    o > r ? u[s] = new Array(o - r + 1).join(" ") + this.src.slice(l, c) : u[s] = this.src.slice(l, c);
  }
  return u.join("");
};
en.prototype.Token = ib;
var Vle = en, qle = Xc, Ss = [
  // First 2 params - rule name & source. Secondary array - list of rules,
  // which can be terminated by this one.
  ["table", fle, ["paragraph", "reference"]],
  ["code", ple],
  ["fence", hle, ["paragraph", "reference", "blockquote", "list"]],
  ["blockquote", mle, ["paragraph", "reference", "blockquote", "list"]],
  ["hr", yle, ["paragraph", "reference", "blockquote", "list"]],
  ["list", wle, ["paragraph", "reference", "blockquote"]],
  ["reference", Ele],
  ["html_block", Ple, ["paragraph", "reference", "blockquote"]],
  ["heading", $le, ["paragraph", "reference", "blockquote"]],
  ["lheading", Fle],
  ["paragraph", zle]
];
function jo() {
  this.ruler = new qle();
  for (var n = 0; n < Ss.length; n++)
    this.ruler.push(Ss[n][0], Ss[n][1], { alt: (Ss[n][2] || []).slice() });
}
jo.prototype.tokenize = function(n, e, t) {
  for (var r, i, s, o = this.ruler.getRules(""), a = o.length, l = e, c = !1, u = n.md.options.maxNesting; l < t && (n.line = l = n.skipEmptyLines(l), !(l >= t || n.sCount[l] < n.blkIndent)); ) {
    if (n.level >= u) {
      n.line = t;
      break;
    }
    for (s = n.line, i = 0; i < a; i++)
      if (r = o[i](n, l, t, !1), r) {
        if (s >= n.line)
          throw new Error("block rule didn't increment state.line");
        break;
      }
    if (!r)
      throw new Error("none of the block rules matched");
    n.tight = !c, n.isEmpty(n.line - 1) && (c = !0), l = n.line, l < t && n.isEmpty(l) && (c = !0, l++, n.line = l);
  }
};
jo.prototype.parse = function(n, e, t, r) {
  var i;
  n && (i = new this.State(n, e, t, r), this.tokenize(i, i.line, i.lineMax));
};
jo.prototype.State = Vle;
var Ule = jo;
function Kle(n) {
  switch (n) {
    case 10:
    case 33:
    case 35:
    case 36:
    case 37:
    case 38:
    case 42:
    case 43:
    case 45:
    case 58:
    case 60:
    case 61:
    case 62:
    case 64:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 123:
    case 125:
    case 126:
      return !0;
    default:
      return !1;
  }
}
var Wle = function(e, t) {
  for (var r = e.pos; r < e.posMax && !Kle(e.src.charCodeAt(r)); )
    r++;
  return r === e.pos ? !1 : (t || (e.pending += e.src.slice(e.pos, r)), e.pos = r, !0);
}, Gle = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i, Zle = function(e, t) {
  var r, i, s, o, a, l, c, u;
  return !e.md.options.linkify || e.linkLevel > 0 || (r = e.pos, i = e.posMax, r + 3 > i) || e.src.charCodeAt(r) !== 58 || e.src.charCodeAt(r + 1) !== 47 || e.src.charCodeAt(r + 2) !== 47 || (s = e.pending.match(Gle), !s) || (o = s[1], a = e.md.linkify.matchAtStart(e.src.slice(r - o.length)), !a) || (l = a.url, l.length <= o.length) || (l = l.replace(/\*+$/, ""), c = e.md.normalizeLink(l), !e.md.validateLink(c)) ? !1 : (t || (e.pending = e.pending.slice(0, -o.length), u = e.push("link_open", "a", 1), u.attrs = [["href", c]], u.markup = "linkify", u.info = "auto", u = e.push("text", "", 0), u.content = e.md.normalizeLinkText(l), u = e.push("link_close", "a", -1), u.markup = "linkify", u.info = "auto"), e.pos += l.length - o.length, !0);
}, jle = ve.isSpace, Jle = function(e, t) {
  var r, i, s, o = e.pos;
  if (e.src.charCodeAt(o) !== 10)
    return !1;
  if (r = e.pending.length - 1, i = e.posMax, !t)
    if (r >= 0 && e.pending.charCodeAt(r) === 32)
      if (r >= 1 && e.pending.charCodeAt(r - 1) === 32) {
        for (s = r - 1; s >= 1 && e.pending.charCodeAt(s - 1) === 32; )
          s--;
        e.pending = e.pending.slice(0, s), e.push("hardbreak", "br", 0);
      } else
        e.pending = e.pending.slice(0, -1), e.push("softbreak", "br", 0);
    else
      e.push("softbreak", "br", 0);
  for (o++; o < i && jle(e.src.charCodeAt(o)); )
    o++;
  return e.pos = o, !0;
}, Yle = ve.isSpace, tu = [];
for (var vp = 0; vp < 256; vp++)
  tu.push(0);
"\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(n) {
  tu[n.charCodeAt(0)] = 1;
});
var Xle = function(e, t) {
  var r, i, s, o, a, l = e.pos, c = e.posMax;
  if (e.src.charCodeAt(l) !== 92 || (l++, l >= c))
    return !1;
  if (r = e.src.charCodeAt(l), r === 10) {
    for (t || e.push("hardbreak", "br", 0), l++; l < c && (r = e.src.charCodeAt(l), !!Yle(r)); )
      l++;
    return e.pos = l, !0;
  }
  return o = e.src[l], r >= 55296 && r <= 56319 && l + 1 < c && (i = e.src.charCodeAt(l + 1), i >= 56320 && i <= 57343 && (o += e.src[l + 1], l++)), s = "\\" + o, t || (a = e.push("text_special", "", 0), r < 256 && tu[r] !== 0 ? a.content = o : a.content = s, a.markup = s, a.info = "escape"), e.pos = l + 1, !0;
}, Qle = function(e, t) {
  var r, i, s, o, a, l, c, u, d = e.pos, f = e.src.charCodeAt(d);
  if (f !== 96)
    return !1;
  for (r = d, d++, i = e.posMax; d < i && e.src.charCodeAt(d) === 96; )
    d++;
  if (s = e.src.slice(r, d), c = s.length, e.backticksScanned && (e.backticks[c] || 0) <= r)
    return t || (e.pending += s), e.pos += c, !0;
  for (l = d; (a = e.src.indexOf("`", l)) !== -1; ) {
    for (l = a + 1; l < i && e.src.charCodeAt(l) === 96; )
      l++;
    if (u = l - a, u === c)
      return t || (o = e.push("code_inline", "code", 0), o.markup = s, o.content = e.src.slice(d, a).replace(/\n/g, " ").replace(/^ (.+) $/, "$1")), e.pos = l, !0;
    e.backticks[u] = a;
  }
  return e.backticksScanned = !0, t || (e.pending += s), e.pos += c, !0;
}, Jo = {};
Jo.tokenize = function(e, t) {
  var r, i, s, o, a, l = e.pos, c = e.src.charCodeAt(l);
  if (t || c !== 126 || (i = e.scanDelims(e.pos, !0), o = i.length, a = String.fromCharCode(c), o < 2))
    return !1;
  for (o % 2 && (s = e.push("text", "", 0), s.content = a, o--), r = 0; r < o; r += 2)
    s = e.push("text", "", 0), s.content = a + a, e.delimiters.push({
      marker: c,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: e.tokens.length - 1,
      end: -1,
      open: i.can_open,
      close: i.can_close
    });
  return e.pos += i.length, !0;
};
function wp(n, e) {
  var t, r, i, s, o, a = [], l = e.length;
  for (t = 0; t < l; t++)
    i = e[t], i.marker === 126 && i.end !== -1 && (s = e[i.end], o = n.tokens[i.token], o.type = "s_open", o.tag = "s", o.nesting = 1, o.markup = "~~", o.content = "", o = n.tokens[s.token], o.type = "s_close", o.tag = "s", o.nesting = -1, o.markup = "~~", o.content = "", n.tokens[s.token - 1].type === "text" && n.tokens[s.token - 1].content === "~" && a.push(s.token - 1));
  for (; a.length; ) {
    for (t = a.pop(), r = t + 1; r < n.tokens.length && n.tokens[r].type === "s_close"; )
      r++;
    r--, t !== r && (o = n.tokens[r], n.tokens[r] = n.tokens[t], n.tokens[t] = o);
  }
}
Jo.postProcess = function(e) {
  var t, r = e.tokens_meta, i = e.tokens_meta.length;
  for (wp(e, e.delimiters), t = 0; t < i; t++)
    r[t] && r[t].delimiters && wp(e, r[t].delimiters);
};
var Yo = {};
Yo.tokenize = function(e, t) {
  var r, i, s, o = e.pos, a = e.src.charCodeAt(o);
  if (t || a !== 95 && a !== 42)
    return !1;
  for (i = e.scanDelims(e.pos, a === 42), r = 0; r < i.length; r++)
    s = e.push("text", "", 0), s.content = String.fromCharCode(a), e.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker: a,
      // Total length of these series of delimiters.
      //
      length: i.length,
      // A position of the token this delimiter corresponds to.
      //
      token: e.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: i.can_open,
      close: i.can_close
    });
  return e.pos += i.length, !0;
};
function kp(n, e) {
  var t, r, i, s, o, a, l = e.length;
  for (t = l - 1; t >= 0; t--)
    r = e[t], !(r.marker !== 95 && r.marker !== 42) && r.end !== -1 && (i = e[r.end], a = t > 0 && e[t - 1].end === r.end + 1 && // check that first two markers match and adjacent
    e[t - 1].marker === r.marker && e[t - 1].token === r.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
    e[r.end + 1].token === i.token + 1, o = String.fromCharCode(r.marker), s = n.tokens[r.token], s.type = a ? "strong_open" : "em_open", s.tag = a ? "strong" : "em", s.nesting = 1, s.markup = a ? o + o : o, s.content = "", s = n.tokens[i.token], s.type = a ? "strong_close" : "em_close", s.tag = a ? "strong" : "em", s.nesting = -1, s.markup = a ? o + o : o, s.content = "", a && (n.tokens[e[t - 1].token].content = "", n.tokens[e[r.end + 1].token].content = "", t--));
}
Yo.postProcess = function(e) {
  var t, r = e.tokens_meta, i = e.tokens_meta.length;
  for (kp(e, e.delimiters), t = 0; t < i; t++)
    r[t] && r[t].delimiters && kp(e, r[t].delimiters);
};
var ece = ve.normalizeReference, Ja = ve.isSpace, tce = function(e, t) {
  var r, i, s, o, a, l, c, u, d, f = "", p = "", h = e.pos, g = e.posMax, m = e.pos, v = !0;
  if (e.src.charCodeAt(e.pos) !== 91 || (a = e.pos + 1, o = e.md.helpers.parseLinkLabel(e, e.pos, !0), o < 0))
    return !1;
  if (l = o + 1, l < g && e.src.charCodeAt(l) === 40) {
    for (v = !1, l++; l < g && (i = e.src.charCodeAt(l), !(!Ja(i) && i !== 10)); l++)
      ;
    if (l >= g)
      return !1;
    if (m = l, c = e.md.helpers.parseLinkDestination(e.src, l, e.posMax), c.ok) {
      for (f = e.md.normalizeLink(c.str), e.md.validateLink(f) ? l = c.pos : f = "", m = l; l < g && (i = e.src.charCodeAt(l), !(!Ja(i) && i !== 10)); l++)
        ;
      if (c = e.md.helpers.parseLinkTitle(e.src, l, e.posMax), l < g && m !== l && c.ok)
        for (p = c.str, l = c.pos; l < g && (i = e.src.charCodeAt(l), !(!Ja(i) && i !== 10)); l++)
          ;
    }
    (l >= g || e.src.charCodeAt(l) !== 41) && (v = !0), l++;
  }
  if (v) {
    if (typeof e.env.references > "u")
      return !1;
    if (l < g && e.src.charCodeAt(l) === 91 ? (m = l + 1, l = e.md.helpers.parseLinkLabel(e, l), l >= 0 ? s = e.src.slice(m, l++) : l = o + 1) : l = o + 1, s || (s = e.src.slice(a, o)), u = e.env.references[ece(s)], !u)
      return e.pos = h, !1;
    f = u.href, p = u.title;
  }
  return t || (e.pos = a, e.posMax = o, d = e.push("link_open", "a", 1), d.attrs = r = [["href", f]], p && r.push(["title", p]), e.linkLevel++, e.md.inline.tokenize(e), e.linkLevel--, d = e.push("link_close", "a", -1)), e.pos = l, e.posMax = g, !0;
}, nce = ve.normalizeReference, Ya = ve.isSpace, rce = function(e, t) {
  var r, i, s, o, a, l, c, u, d, f, p, h, g, m = "", v = e.pos, y = e.posMax;
  if (e.src.charCodeAt(e.pos) !== 33 || e.src.charCodeAt(e.pos + 1) !== 91 || (l = e.pos + 2, a = e.md.helpers.parseLinkLabel(e, e.pos + 1, !1), a < 0))
    return !1;
  if (c = a + 1, c < y && e.src.charCodeAt(c) === 40) {
    for (c++; c < y && (i = e.src.charCodeAt(c), !(!Ya(i) && i !== 10)); c++)
      ;
    if (c >= y)
      return !1;
    for (g = c, d = e.md.helpers.parseLinkDestination(e.src, c, e.posMax), d.ok && (m = e.md.normalizeLink(d.str), e.md.validateLink(m) ? c = d.pos : m = ""), g = c; c < y && (i = e.src.charCodeAt(c), !(!Ya(i) && i !== 10)); c++)
      ;
    if (d = e.md.helpers.parseLinkTitle(e.src, c, e.posMax), c < y && g !== c && d.ok)
      for (f = d.str, c = d.pos; c < y && (i = e.src.charCodeAt(c), !(!Ya(i) && i !== 10)); c++)
        ;
    else
      f = "";
    if (c >= y || e.src.charCodeAt(c) !== 41)
      return e.pos = v, !1;
    c++;
  } else {
    if (typeof e.env.references > "u")
      return !1;
    if (c < y && e.src.charCodeAt(c) === 91 ? (g = c + 1, c = e.md.helpers.parseLinkLabel(e, c), c >= 0 ? o = e.src.slice(g, c++) : c = a + 1) : c = a + 1, o || (o = e.src.slice(l, a)), u = e.env.references[nce(o)], !u)
      return e.pos = v, !1;
    m = u.href, f = u.title;
  }
  return t || (s = e.src.slice(l, a), e.md.inline.parse(
    s,
    e.md,
    e.env,
    h = []
  ), p = e.push("image", "img", 0), p.attrs = r = [["src", m], ["alt", ""]], p.children = h, p.content = s, f && r.push(["title", f])), e.pos = c, e.posMax = y, !0;
}, ice = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/, sce = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/, oce = function(e, t) {
  var r, i, s, o, a, l, c = e.pos;
  if (e.src.charCodeAt(c) !== 60)
    return !1;
  for (a = e.pos, l = e.posMax; ; ) {
    if (++c >= l || (o = e.src.charCodeAt(c), o === 60))
      return !1;
    if (o === 62)
      break;
  }
  return r = e.src.slice(a + 1, c), sce.test(r) ? (i = e.md.normalizeLink(r), e.md.validateLink(i) ? (t || (s = e.push("link_open", "a", 1), s.attrs = [["href", i]], s.markup = "autolink", s.info = "auto", s = e.push("text", "", 0), s.content = e.md.normalizeLinkText(r), s = e.push("link_close", "a", -1), s.markup = "autolink", s.info = "auto"), e.pos += r.length + 2, !0) : !1) : ice.test(r) ? (i = e.md.normalizeLink("mailto:" + r), e.md.validateLink(i) ? (t || (s = e.push("link_open", "a", 1), s.attrs = [["href", i]], s.markup = "autolink", s.info = "auto", s = e.push("text", "", 0), s.content = e.md.normalizeLinkText(r), s = e.push("link_close", "a", -1), s.markup = "autolink", s.info = "auto"), e.pos += r.length + 2, !0) : !1) : !1;
}, ace = Go.HTML_TAG_RE;
function lce(n) {
  return /^<a[>\s]/i.test(n);
}
function cce(n) {
  return /^<\/a\s*>/i.test(n);
}
function uce(n) {
  var e = n | 32;
  return e >= 97 && e <= 122;
}
var dce = function(e, t) {
  var r, i, s, o, a = e.pos;
  return !e.md.options.html || (s = e.posMax, e.src.charCodeAt(a) !== 60 || a + 2 >= s) || (r = e.src.charCodeAt(a + 1), r !== 33 && r !== 63 && r !== 47 && !uce(r)) || (i = e.src.slice(a).match(ace), !i) ? !1 : (t || (o = e.push("html_inline", "", 0), o.content = i[0], lce(o.content) && e.linkLevel++, cce(o.content) && e.linkLevel--), e.pos += i[0].length, !0);
}, Ep = jm, fce = ve.has, pce = ve.isValidEntityCode, xp = ve.fromCodePoint, hce = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i, gce = /^&([a-z][a-z0-9]{1,31});/i, mce = function(e, t) {
  var r, i, s, o, a = e.pos, l = e.posMax;
  if (e.src.charCodeAt(a) !== 38 || a + 1 >= l)
    return !1;
  if (r = e.src.charCodeAt(a + 1), r === 35) {
    if (s = e.src.slice(a).match(hce), s)
      return t || (i = s[1][0].toLowerCase() === "x" ? parseInt(s[1].slice(1), 16) : parseInt(s[1], 10), o = e.push("text_special", "", 0), o.content = pce(i) ? xp(i) : xp(65533), o.markup = s[0], o.info = "entity"), e.pos += s[0].length, !0;
  } else if (s = e.src.slice(a).match(gce), s && fce(Ep, s[1]))
    return t || (o = e.push("text_special", "", 0), o.content = Ep[s[1]], o.markup = s[0], o.info = "entity"), e.pos += s[0].length, !0;
  return !1;
};
function Cp(n) {
  var e, t, r, i, s, o, a, l, c = {}, u = n.length;
  if (u) {
    var d = 0, f = -2, p = [];
    for (e = 0; e < u; e++)
      if (r = n[e], p.push(0), (n[d].marker !== r.marker || f !== r.token - 1) && (d = e), f = r.token, r.length = r.length || 0, !!r.close) {
        for (c.hasOwnProperty(r.marker) || (c[r.marker] = [-1, -1, -1, -1, -1, -1]), s = c[r.marker][(r.open ? 3 : 0) + r.length % 3], t = d - p[d] - 1, o = t; t > s; t -= p[t] + 1)
          if (i = n[t], i.marker === r.marker && i.open && i.end < 0 && (a = !1, (i.close || r.open) && (i.length + r.length) % 3 === 0 && (i.length % 3 !== 0 || r.length % 3 !== 0) && (a = !0), !a)) {
            l = t > 0 && !n[t - 1].open ? p[t - 1] + 1 : 0, p[e] = e - t + l, p[t] = l, r.open = !1, i.end = e, i.close = !1, o = -1, f = -2;
            break;
          }
        o !== -1 && (c[r.marker][(r.open ? 3 : 0) + (r.length || 0) % 3] = o);
      }
  }
}
var bce = function(e) {
  var t, r = e.tokens_meta, i = e.tokens_meta.length;
  for (Cp(e.delimiters), t = 0; t < i; t++)
    r[t] && r[t].delimiters && Cp(r[t].delimiters);
}, yce = function(e) {
  var t, r, i = 0, s = e.tokens, o = e.tokens.length;
  for (t = r = 0; t < o; t++)
    s[t].nesting < 0 && i--, s[t].level = i, s[t].nesting > 0 && i++, s[t].type === "text" && t + 1 < o && s[t + 1].type === "text" ? s[t + 1].content = s[t].content + s[t + 1].content : (t !== r && (s[r] = s[t]), r++);
  t !== r && (s.length = r);
}, nu = Qc, Sp = ve.isWhiteSpace, _p = ve.isPunctChar, Mp = ve.isMdAsciiPunct;
function Yi(n, e, t, r) {
  this.src = n, this.env = t, this.md = e, this.tokens = r, this.tokens_meta = Array(r.length), this.pos = 0, this.posMax = this.src.length, this.level = 0, this.pending = "", this.pendingLevel = 0, this.cache = {}, this.delimiters = [], this._prev_delimiters = [], this.backticks = {}, this.backticksScanned = !1, this.linkLevel = 0;
}
Yi.prototype.pushPending = function() {
  var n = new nu("text", "", 0);
  return n.content = this.pending, n.level = this.pendingLevel, this.tokens.push(n), this.pending = "", n;
};
Yi.prototype.push = function(n, e, t) {
  this.pending && this.pushPending();
  var r = new nu(n, e, t), i = null;
  return t < 0 && (this.level--, this.delimiters = this._prev_delimiters.pop()), r.level = this.level, t > 0 && (this.level++, this._prev_delimiters.push(this.delimiters), this.delimiters = [], i = { delimiters: this.delimiters }), this.pendingLevel = this.level, this.tokens.push(r), this.tokens_meta.push(i), r;
};
Yi.prototype.scanDelims = function(n, e) {
  var t = n, r, i, s, o, a, l, c, u, d, f = !0, p = !0, h = this.posMax, g = this.src.charCodeAt(n);
  for (r = n > 0 ? this.src.charCodeAt(n - 1) : 32; t < h && this.src.charCodeAt(t) === g; )
    t++;
  return s = t - n, i = t < h ? this.src.charCodeAt(t) : 32, c = Mp(r) || _p(String.fromCharCode(r)), d = Mp(i) || _p(String.fromCharCode(i)), l = Sp(r), u = Sp(i), u ? f = !1 : d && (l || c || (f = !1)), l ? p = !1 : c && (u || d || (p = !1)), e ? (o = f, a = p) : (o = f && (!p || c), a = p && (!f || d)), {
    can_open: o,
    can_close: a,
    length: s
  };
};
Yi.prototype.Token = nu;
var vce = Yi, Ap = Xc, Xa = [
  ["text", Wle],
  ["linkify", Zle],
  ["newline", Jle],
  ["escape", Xle],
  ["backticks", Qle],
  ["strikethrough", Jo.tokenize],
  ["emphasis", Yo.tokenize],
  ["link", tce],
  ["image", rce],
  ["autolink", oce],
  ["html_inline", dce],
  ["entity", mce]
], Qa = [
  ["balance_pairs", bce],
  ["strikethrough", Jo.postProcess],
  ["emphasis", Yo.postProcess],
  // rules for pairs separate '**' into its own text tokens, which may be left unused,
  // rule below merges unused segments back with the rest of the text
  ["fragments_join", yce]
];
function Xi() {
  var n;
  for (this.ruler = new Ap(), n = 0; n < Xa.length; n++)
    this.ruler.push(Xa[n][0], Xa[n][1]);
  for (this.ruler2 = new Ap(), n = 0; n < Qa.length; n++)
    this.ruler2.push(Qa[n][0], Qa[n][1]);
}
Xi.prototype.skipToken = function(n) {
  var e, t, r = n.pos, i = this.ruler.getRules(""), s = i.length, o = n.md.options.maxNesting, a = n.cache;
  if (typeof a[r] < "u") {
    n.pos = a[r];
    return;
  }
  if (n.level < o) {
    for (t = 0; t < s; t++)
      if (n.level++, e = i[t](n, !0), n.level--, e) {
        if (r >= n.pos)
          throw new Error("inline rule didn't increment state.pos");
        break;
      }
  } else
    n.pos = n.posMax;
  e || n.pos++, a[r] = n.pos;
};
Xi.prototype.tokenize = function(n) {
  for (var e, t, r, i = this.ruler.getRules(""), s = i.length, o = n.posMax, a = n.md.options.maxNesting; n.pos < o; ) {
    if (r = n.pos, n.level < a) {
      for (t = 0; t < s; t++)
        if (e = i[t](n, !1), e) {
          if (r >= n.pos)
            throw new Error("inline rule didn't increment state.pos");
          break;
        }
    }
    if (e) {
      if (n.pos >= o)
        break;
      continue;
    }
    n.pending += n.src[n.pos++];
  }
  n.pending && n.pushPending();
};
Xi.prototype.parse = function(n, e, t, r) {
  var i, s, o, a = new this.State(n, e, t, r);
  for (this.tokenize(a), s = this.ruler2.getRules(""), o = s.length, i = 0; i < o; i++)
    s[i](a);
};
Xi.prototype.State = vce;
var wce = Xi, el, Tp;
function kce() {
  return Tp || (Tp = 1, el = function(n) {
    var e = {};
    n = n || {}, e.src_Any = Jm().source, e.src_Cc = Ym().source, e.src_Z = Xm().source, e.src_P = Yc.source, e.src_ZPCc = [e.src_Z, e.src_P, e.src_Cc].join("|"), e.src_ZCc = [e.src_Z, e.src_Cc].join("|");
    var t = "[><｜]";
    return e.src_pseudo_letter = "(?:(?!" + t + "|" + e.src_ZPCc + ")" + e.src_Any + ")", e.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)", e.src_auth = "(?:(?:(?!" + e.src_ZCc + "|[@/\\[\\]()]).)+@)?", e.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?", e.src_host_terminator = "(?=$|" + t + "|" + e.src_ZPCc + ")(?!" + (n["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + e.src_ZPCc + "))", e.src_path = "(?:[/?#](?:(?!" + e.src_ZCc + "|" + t + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + e.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + e.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + e.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + e.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + e.src_ZCc + "|[']).)+\\'|\\'(?=" + e.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + e.src_ZCc + "|[.]|$)|" + (n["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + ",(?!" + e.src_ZCc + "|$)|;(?!" + e.src_ZCc + "|$)|\\!+(?!" + e.src_ZCc + "|[!]|$)|\\?(?!" + e.src_ZCc + "|[?]|$))+|\\/)?", e.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*', e.src_xn = "xn--[a-z0-9\\-]{1,59}", e.src_domain_root = // Allow letters & digits (http://test1)
    "(?:" + e.src_xn + "|" + e.src_pseudo_letter + "{1,63})", e.src_domain = "(?:" + e.src_xn + "|(?:" + e.src_pseudo_letter + ")|(?:" + e.src_pseudo_letter + "(?:-|" + e.src_pseudo_letter + "){0,61}" + e.src_pseudo_letter + "))", e.src_host = "(?:(?:(?:(?:" + e.src_domain + ")\\.)*" + e.src_domain + "))", e.tpl_host_fuzzy = "(?:" + e.src_ip4 + "|(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%)))", e.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + e.src_domain + ")\\.)+(?:%TLDS%))", e.src_host_strict = e.src_host + e.src_host_terminator, e.tpl_host_fuzzy_strict = e.tpl_host_fuzzy + e.src_host_terminator, e.src_host_port_strict = e.src_host + e.src_port + e.src_host_terminator, e.tpl_host_port_fuzzy_strict = e.tpl_host_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_port_no_ip_fuzzy_strict = e.tpl_host_no_ip_fuzzy + e.src_port + e.src_host_terminator, e.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + e.src_ZPCc + "|>|$))", e.tpl_email_fuzzy = "(^|" + t + '|"|\\(|' + e.src_ZCc + ")(" + e.src_email_name + "@" + e.tpl_host_fuzzy_strict + ")", e.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_fuzzy_strict + e.src_path + ")", e.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
    // but can start with > (markdown blockquote)
    "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + e.src_ZPCc + "))((?![$+<=>^`|｜])" + e.tpl_host_port_no_ip_fuzzy_strict + e.src_path + ")", e;
  }), el;
}
function Ul(n) {
  var e = Array.prototype.slice.call(arguments, 1);
  return e.forEach(function(t) {
    t && Object.keys(t).forEach(function(r) {
      n[r] = t[r];
    });
  }), n;
}
function Xo(n) {
  return Object.prototype.toString.call(n);
}
function Ece(n) {
  return Xo(n) === "[object String]";
}
function xce(n) {
  return Xo(n) === "[object Object]";
}
function Cce(n) {
  return Xo(n) === "[object RegExp]";
}
function Np(n) {
  return Xo(n) === "[object Function]";
}
function Sce(n) {
  return n.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
}
var sb = {
  fuzzyLink: !0,
  fuzzyEmail: !0,
  fuzzyIP: !1
};
function _ce(n) {
  return Object.keys(n || {}).reduce(function(e, t) {
    return e || sb.hasOwnProperty(t);
  }, !1);
}
var Mce = {
  "http:": {
    validate: function(n, e, t) {
      var r = n.slice(e);
      return t.re.http || (t.re.http = new RegExp(
        "^\\/\\/" + t.re.src_auth + t.re.src_host_port_strict + t.re.src_path,
        "i"
      )), t.re.http.test(r) ? r.match(t.re.http)[0].length : 0;
    }
  },
  "https:": "http:",
  "ftp:": "http:",
  "//": {
    validate: function(n, e, t) {
      var r = n.slice(e);
      return t.re.no_http || (t.re.no_http = new RegExp(
        "^" + t.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        "(?:localhost|(?:(?:" + t.re.src_domain + ")\\.)+" + t.re.src_domain_root + ")" + t.re.src_port + t.re.src_host_terminator + t.re.src_path,
        "i"
      )), t.re.no_http.test(r) ? e >= 3 && n[e - 3] === ":" || e >= 3 && n[e - 3] === "/" ? 0 : r.match(t.re.no_http)[0].length : 0;
    }
  },
  "mailto:": {
    validate: function(n, e, t) {
      var r = n.slice(e);
      return t.re.mailto || (t.re.mailto = new RegExp(
        "^" + t.re.src_email_name + "@" + t.re.src_host_strict,
        "i"
      )), t.re.mailto.test(r) ? r.match(t.re.mailto)[0].length : 0;
    }
  }
}, Ace = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]", Tce = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
function Nce(n) {
  n.__index__ = -1, n.__text_cache__ = "";
}
function Oce(n) {
  return function(e, t) {
    var r = e.slice(t);
    return n.test(r) ? r.match(n)[0].length : 0;
  };
}
function Op() {
  return function(n, e) {
    e.normalize(n);
  };
}
function Eo(n) {
  var e = n.re = kce()(n.__opts__), t = n.__tlds__.slice();
  n.onCompile(), n.__tlds_replaced__ || t.push(Ace), t.push(e.src_xn), e.src_tlds = t.join("|");
  function r(a) {
    return a.replace("%TLDS%", e.src_tlds);
  }
  e.email_fuzzy = RegExp(r(e.tpl_email_fuzzy), "i"), e.link_fuzzy = RegExp(r(e.tpl_link_fuzzy), "i"), e.link_no_ip_fuzzy = RegExp(r(e.tpl_link_no_ip_fuzzy), "i"), e.host_fuzzy_test = RegExp(r(e.tpl_host_fuzzy_test), "i");
  var i = [];
  n.__compiled__ = {};
  function s(a, l) {
    throw new Error('(LinkifyIt) Invalid schema "' + a + '": ' + l);
  }
  Object.keys(n.__schemas__).forEach(function(a) {
    var l = n.__schemas__[a];
    if (l !== null) {
      var c = { validate: null, link: null };
      if (n.__compiled__[a] = c, xce(l)) {
        Cce(l.validate) ? c.validate = Oce(l.validate) : Np(l.validate) ? c.validate = l.validate : s(a, l), Np(l.normalize) ? c.normalize = l.normalize : l.normalize ? s(a, l) : c.normalize = Op();
        return;
      }
      if (Ece(l)) {
        i.push(a);
        return;
      }
      s(a, l);
    }
  }), i.forEach(function(a) {
    n.__compiled__[n.__schemas__[a]] && (n.__compiled__[a].validate = n.__compiled__[n.__schemas__[a]].validate, n.__compiled__[a].normalize = n.__compiled__[n.__schemas__[a]].normalize);
  }), n.__compiled__[""] = { validate: null, normalize: Op() };
  var o = Object.keys(n.__compiled__).filter(function(a) {
    return a.length > 0 && n.__compiled__[a];
  }).map(Sce).join("|");
  n.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "i"), n.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + e.src_ZPCc + "))(" + o + ")", "ig"), n.re.schema_at_start = RegExp("^" + n.re.schema_search.source, "i"), n.re.pretest = RegExp(
    "(" + n.re.schema_test.source + ")|(" + n.re.host_fuzzy_test.source + ")|@",
    "i"
  ), Nce(n);
}
function Lce(n, e) {
  var t = n.__index__, r = n.__last_index__, i = n.__text_cache__.slice(t, r);
  this.schema = n.__schema__.toLowerCase(), this.index = t + e, this.lastIndex = r + e, this.raw = i, this.text = i, this.url = i;
}
function Kl(n, e) {
  var t = new Lce(n, e);
  return n.__compiled__[t.schema].normalize(t, n), t;
}
function yt(n, e) {
  if (!(this instanceof yt))
    return new yt(n, e);
  e || _ce(n) && (e = n, n = {}), this.__opts__ = Ul({}, sb, e), this.__index__ = -1, this.__last_index__ = -1, this.__schema__ = "", this.__text_cache__ = "", this.__schemas__ = Ul({}, Mce, n), this.__compiled__ = {}, this.__tlds__ = Tce, this.__tlds_replaced__ = !1, this.re = {}, Eo(this);
}
yt.prototype.add = function(e, t) {
  return this.__schemas__[e] = t, Eo(this), this;
};
yt.prototype.set = function(e) {
  return this.__opts__ = Ul(this.__opts__, e), this;
};
yt.prototype.test = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return !1;
  var t, r, i, s, o, a, l, c, u;
  if (this.re.schema_test.test(e)) {
    for (l = this.re.schema_search, l.lastIndex = 0; (t = l.exec(e)) !== null; )
      if (s = this.testSchemaAt(e, t[2], l.lastIndex), s) {
        this.__schema__ = t[2], this.__index__ = t.index + t[1].length, this.__last_index__ = t.index + t[0].length + s;
        break;
      }
  }
  return this.__opts__.fuzzyLink && this.__compiled__["http:"] && (c = e.search(this.re.host_fuzzy_test), c >= 0 && (this.__index__ < 0 || c < this.__index__) && (r = e.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null && (o = r.index + r[1].length, (this.__index__ < 0 || o < this.__index__) && (this.__schema__ = "", this.__index__ = o, this.__last_index__ = r.index + r[0].length))), this.__opts__.fuzzyEmail && this.__compiled__["mailto:"] && (u = e.indexOf("@"), u >= 0 && (i = e.match(this.re.email_fuzzy)) !== null && (o = i.index + i[1].length, a = i.index + i[0].length, (this.__index__ < 0 || o < this.__index__ || o === this.__index__ && a > this.__last_index__) && (this.__schema__ = "mailto:", this.__index__ = o, this.__last_index__ = a))), this.__index__ >= 0;
};
yt.prototype.pretest = function(e) {
  return this.re.pretest.test(e);
};
yt.prototype.testSchemaAt = function(e, t, r) {
  return this.__compiled__[t.toLowerCase()] ? this.__compiled__[t.toLowerCase()].validate(e, r, this) : 0;
};
yt.prototype.match = function(e) {
  var t = 0, r = [];
  this.__index__ >= 0 && this.__text_cache__ === e && (r.push(Kl(this, t)), t = this.__last_index__);
  for (var i = t ? e.slice(t) : e; this.test(i); )
    r.push(Kl(this, t)), i = i.slice(this.__last_index__), t += this.__last_index__;
  return r.length ? r : null;
};
yt.prototype.matchAtStart = function(e) {
  if (this.__text_cache__ = e, this.__index__ = -1, !e.length)
    return null;
  var t = this.re.schema_at_start.exec(e);
  if (!t)
    return null;
  var r = this.testSchemaAt(e, t[2], t[0].length);
  return r ? (this.__schema__ = t[2], this.__index__ = t.index + t[1].length, this.__last_index__ = t.index + t[0].length + r, Kl(this, 0)) : null;
};
yt.prototype.tlds = function(e, t) {
  return e = Array.isArray(e) ? e : [e], t ? (this.__tlds__ = this.__tlds__.concat(e).sort().filter(function(r, i, s) {
    return r !== s[i - 1];
  }).reverse(), Eo(this), this) : (this.__tlds__ = e.slice(), this.__tlds_replaced__ = !0, Eo(this), this);
};
yt.prototype.normalize = function(e) {
  e.schema || (e.url = "http://" + e.url), e.schema === "mailto:" && !/^mailto:/i.test(e.url) && (e.url = "mailto:" + e.url);
};
yt.prototype.onCompile = function() {
};
var Rce = yt;
const Pr = 2147483647, Wt = 36, ru = 1, Ui = 26, Dce = 38, Ice = 700, ob = 72, ab = 128, lb = "-", Bce = /^xn--/, Hce = /[^\0-\x7F]/, Pce = /[\x2E\u3002\uFF0E\uFF61]/g, $ce = {
  overflow: "Overflow: input needs wider integers to process",
  "not-basic": "Illegal input >= 0x80 (not a basic code point)",
  "invalid-input": "Invalid input"
}, tl = Wt - ru, Gt = Math.floor, nl = String.fromCharCode;
function mn(n) {
  throw new RangeError($ce[n]);
}
function Fce(n, e) {
  const t = [];
  let r = n.length;
  for (; r--; )
    t[r] = e(n[r]);
  return t;
}
function cb(n, e) {
  const t = n.split("@");
  let r = "";
  t.length > 1 && (r = t[0] + "@", n = t[1]), n = n.replace(Pce, ".");
  const i = n.split("."), s = Fce(i, e).join(".");
  return r + s;
}
function iu(n) {
  const e = [];
  let t = 0;
  const r = n.length;
  for (; t < r; ) {
    const i = n.charCodeAt(t++);
    if (i >= 55296 && i <= 56319 && t < r) {
      const s = n.charCodeAt(t++);
      (s & 64512) == 56320 ? e.push(((i & 1023) << 10) + (s & 1023) + 65536) : (e.push(i), t--);
    } else
      e.push(i);
  }
  return e;
}
const ub = (n) => String.fromCodePoint(...n), zce = function(n) {
  return n >= 48 && n < 58 ? 26 + (n - 48) : n >= 65 && n < 91 ? n - 65 : n >= 97 && n < 123 ? n - 97 : Wt;
}, Lp = function(n, e) {
  return n + 22 + 75 * (n < 26) - ((e != 0) << 5);
}, db = function(n, e, t) {
  let r = 0;
  for (n = t ? Gt(n / Ice) : n >> 1, n += Gt(n / e); n > tl * Ui >> 1; r += Wt)
    n = Gt(n / tl);
  return Gt(r + (tl + 1) * n / (n + Dce));
}, su = function(n) {
  const e = [], t = n.length;
  let r = 0, i = ab, s = ob, o = n.lastIndexOf(lb);
  o < 0 && (o = 0);
  for (let a = 0; a < o; ++a)
    n.charCodeAt(a) >= 128 && mn("not-basic"), e.push(n.charCodeAt(a));
  for (let a = o > 0 ? o + 1 : 0; a < t; ) {
    const l = r;
    for (let u = 1, d = Wt; ; d += Wt) {
      a >= t && mn("invalid-input");
      const f = zce(n.charCodeAt(a++));
      f >= Wt && mn("invalid-input"), f > Gt((Pr - r) / u) && mn("overflow"), r += f * u;
      const p = d <= s ? ru : d >= s + Ui ? Ui : d - s;
      if (f < p)
        break;
      const h = Wt - p;
      u > Gt(Pr / h) && mn("overflow"), u *= h;
    }
    const c = e.length + 1;
    s = db(r - l, c, l == 0), Gt(r / c) > Pr - i && mn("overflow"), i += Gt(r / c), r %= c, e.splice(r++, 0, i);
  }
  return String.fromCodePoint(...e);
}, ou = function(n) {
  const e = [];
  n = iu(n);
  const t = n.length;
  let r = ab, i = 0, s = ob;
  for (const l of n)
    l < 128 && e.push(nl(l));
  const o = e.length;
  let a = o;
  for (o && e.push(lb); a < t; ) {
    let l = Pr;
    for (const u of n)
      u >= r && u < l && (l = u);
    const c = a + 1;
    l - r > Gt((Pr - i) / c) && mn("overflow"), i += (l - r) * c, r = l;
    for (const u of n)
      if (u < r && ++i > Pr && mn("overflow"), u === r) {
        let d = i;
        for (let f = Wt; ; f += Wt) {
          const p = f <= s ? ru : f >= s + Ui ? Ui : f - s;
          if (d < p)
            break;
          const h = d - p, g = Wt - p;
          e.push(
            nl(Lp(p + h % g, 0))
          ), d = Gt(h / g);
        }
        e.push(nl(Lp(d, 0))), s = db(i, c, a === o), i = 0, ++a;
      }
    ++i, ++r;
  }
  return e.join("");
}, fb = function(n) {
  return cb(n, function(e) {
    return Bce.test(e) ? su(e.slice(4).toLowerCase()) : e;
  });
}, pb = function(n) {
  return cb(n, function(e) {
    return Hce.test(e) ? "xn--" + ou(e) : e;
  });
}, Vce = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  version: "2.3.1",
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  ucs2: {
    decode: iu,
    encode: ub
  },
  decode: su,
  encode: ou,
  toASCII: pb,
  toUnicode: fb
}, qce = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  decode: su,
  default: Vce,
  encode: ou,
  toASCII: pb,
  toUnicode: fb,
  ucs2decode: iu,
  ucs2encode: ub
}, Symbol.toStringTag, { value: "Module" })), Uce = /* @__PURE__ */ Ig(qce);
var Kce = {
  options: {
    html: !1,
    // Enable HTML tags in source
    xhtmlOut: !1,
    // Use '/' to close single tags (<br />)
    breaks: !1,
    // Convert '\n' in paragraphs into <br>
    langPrefix: "language-",
    // CSS language prefix for fenced blocks
    linkify: !1,
    // autoconvert URL-like texts to links
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    maxNesting: 100
    // Internal protection, recursion limit
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
}, Wce = {
  options: {
    html: !1,
    // Enable HTML tags in source
    xhtmlOut: !1,
    // Use '/' to close single tags (<br />)
    breaks: !1,
    // Convert '\n' in paragraphs into <br>
    langPrefix: "language-",
    // CSS language prefix for fenced blocks
    linkify: !1,
    // autoconvert URL-like texts to links
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    maxNesting: 20
    // Internal protection, recursion limit
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "text"
      ],
      rules2: [
        "balance_pairs",
        "fragments_join"
      ]
    }
  }
}, Gce = {
  options: {
    html: !0,
    // Enable HTML tags in source
    xhtmlOut: !0,
    // Use '/' to close single tags (<br />)
    breaks: !1,
    // Convert '\n' in paragraphs into <br>
    langPrefix: "language-",
    // CSS language prefix for fenced blocks
    linkify: !1,
    // autoconvert URL-like texts to links
    // Enable some language-neutral replacements + quotes beautification
    typographer: !1,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: "“”‘’",
    /* “”‘’ */
    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    maxNesting: 20
    // Internal protection, recursion limit
  },
  components: {
    core: {
      rules: [
        "normalize",
        "block",
        "inline",
        "text_join"
      ]
    },
    block: {
      rules: [
        "blockquote",
        "code",
        "fence",
        "heading",
        "hr",
        "html_block",
        "lheading",
        "list",
        "reference",
        "paragraph"
      ]
    },
    inline: {
      rules: [
        "autolink",
        "backticks",
        "emphasis",
        "entity",
        "escape",
        "html_inline",
        "image",
        "link",
        "newline",
        "text"
      ],
      rules2: [
        "balance_pairs",
        "emphasis",
        "fragments_join"
      ]
    }
  }
}, Ci = ve, Zce = Wo, jce = zae, Jce = dle, Yce = Ule, Xce = wce, Qce = Rce, Wn = ei, hb = Uce, eue = {
  default: Kce,
  zero: Wce,
  commonmark: Gce
}, tue = /^(vbscript|javascript|file|data):/, nue = /^data:image\/(gif|png|jpeg|webp);/;
function rue(n) {
  var e = n.trim().toLowerCase();
  return tue.test(e) ? !!nue.test(e) : !0;
}
var gb = ["http:", "https:", "mailto:"];
function iue(n) {
  var e = Wn.parse(n, !0);
  if (e.hostname && (!e.protocol || gb.indexOf(e.protocol) >= 0))
    try {
      e.hostname = hb.toASCII(e.hostname);
    } catch {
    }
  return Wn.encode(Wn.format(e));
}
function sue(n) {
  var e = Wn.parse(n, !0);
  if (e.hostname && (!e.protocol || gb.indexOf(e.protocol) >= 0))
    try {
      e.hostname = hb.toUnicode(e.hostname);
    } catch {
    }
  return Wn.decode(Wn.format(e), Wn.decode.defaultChars + "%");
}
function Tt(n, e) {
  if (!(this instanceof Tt))
    return new Tt(n, e);
  e || Ci.isString(n) || (e = n || {}, n = "default"), this.inline = new Xce(), this.block = new Yce(), this.core = new Jce(), this.renderer = new jce(), this.linkify = new Qce(), this.validateLink = rue, this.normalizeLink = iue, this.normalizeLinkText = sue, this.utils = Ci, this.helpers = Ci.assign({}, Zce), this.options = {}, this.configure(n), e && this.set(e);
}
Tt.prototype.set = function(n) {
  return Ci.assign(this.options, n), this;
};
Tt.prototype.configure = function(n) {
  var e = this, t;
  if (Ci.isString(n) && (t = n, n = eue[t], !n))
    throw new Error('Wrong `markdown-it` preset "' + t + '", check name');
  if (!n)
    throw new Error("Wrong `markdown-it` preset, can't be empty");
  return n.options && e.set(n.options), n.components && Object.keys(n.components).forEach(function(r) {
    n.components[r].rules && e[r].ruler.enableOnly(n.components[r].rules), n.components[r].rules2 && e[r].ruler2.enableOnly(n.components[r].rules2);
  }), this;
};
Tt.prototype.enable = function(n, e) {
  var t = [];
  Array.isArray(n) || (n = [n]), ["core", "block", "inline"].forEach(function(i) {
    t = t.concat(this[i].ruler.enable(n, !0));
  }, this), t = t.concat(this.inline.ruler2.enable(n, !0));
  var r = n.filter(function(i) {
    return t.indexOf(i) < 0;
  });
  if (r.length && !e)
    throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + r);
  return this;
};
Tt.prototype.disable = function(n, e) {
  var t = [];
  Array.isArray(n) || (n = [n]), ["core", "block", "inline"].forEach(function(i) {
    t = t.concat(this[i].ruler.disable(n, !0));
  }, this), t = t.concat(this.inline.ruler2.disable(n, !0));
  var r = n.filter(function(i) {
    return t.indexOf(i) < 0;
  });
  if (r.length && !e)
    throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + r);
  return this;
};
Tt.prototype.use = function(n) {
  var e = [this].concat(Array.prototype.slice.call(arguments, 1));
  return n.apply(n, e), this;
};
Tt.prototype.parse = function(n, e) {
  if (typeof n != "string")
    throw new Error("Input data should be a String");
  var t = new this.core.State(n, this, e);
  return this.core.process(t), t.tokens;
};
Tt.prototype.render = function(n, e) {
  return e = e || {}, this.renderer.render(this.parse(n, e), this.options, e);
};
Tt.prototype.parseInline = function(n, e) {
  var t = new this.core.State(n, this, e);
  return t.inlineMode = !0, this.core.process(t), t.tokens;
};
Tt.prototype.renderInline = function(n, e) {
  return e = e || {}, this.renderer.render(this.parseInline(n, e), this.options, e);
};
var oue = Tt, aue = oue;
const au = /* @__PURE__ */ Xr(aue), lue = new eh({
  nodes: {
    doc: {
      content: "block+"
    },
    paragraph: {
      content: "inline*",
      group: "block",
      parseDOM: [{ tag: "p" }],
      toDOM() {
        return ["p", 0];
      }
    },
    blockquote: {
      content: "block+",
      group: "block",
      parseDOM: [{ tag: "blockquote" }],
      toDOM() {
        return ["blockquote", 0];
      }
    },
    horizontal_rule: {
      group: "block",
      parseDOM: [{ tag: "hr" }],
      toDOM() {
        return ["div", ["hr"]];
      }
    },
    heading: {
      attrs: { level: { default: 1 } },
      content: "(text | image)*",
      group: "block",
      defining: !0,
      parseDOM: [
        { tag: "h1", attrs: { level: 1 } },
        { tag: "h2", attrs: { level: 2 } },
        { tag: "h3", attrs: { level: 3 } },
        { tag: "h4", attrs: { level: 4 } },
        { tag: "h5", attrs: { level: 5 } },
        { tag: "h6", attrs: { level: 6 } }
      ],
      toDOM(n) {
        return ["h" + n.attrs.level, 0];
      }
    },
    code_block: {
      content: "text*",
      group: "block",
      code: !0,
      defining: !0,
      marks: "",
      attrs: { params: { default: "" } },
      parseDOM: [{ tag: "pre", preserveWhitespace: "full", getAttrs: (n) => ({ params: n.getAttribute("data-params") || "" }) }],
      toDOM(n) {
        return ["pre", n.attrs.params ? { "data-params": n.attrs.params } : {}, ["code", 0]];
      }
    },
    ordered_list: {
      content: "list_item+",
      group: "block",
      attrs: { order: { default: 1 }, tight: { default: !1 } },
      parseDOM: [{ tag: "ol", getAttrs(n) {
        return {
          order: n.hasAttribute("start") ? +n.getAttribute("start") : 1,
          tight: n.hasAttribute("data-tight")
        };
      } }],
      toDOM(n) {
        return ["ol", {
          start: n.attrs.order == 1 ? null : n.attrs.order,
          "data-tight": n.attrs.tight ? "true" : null
        }, 0];
      }
    },
    bullet_list: {
      content: "list_item+",
      group: "block",
      attrs: { tight: { default: !1 } },
      parseDOM: [{ tag: "ul", getAttrs: (n) => ({ tight: n.hasAttribute("data-tight") }) }],
      toDOM(n) {
        return ["ul", { "data-tight": n.attrs.tight ? "true" : null }, 0];
      }
    },
    list_item: {
      content: "block+",
      defining: !0,
      parseDOM: [{ tag: "li" }],
      toDOM() {
        return ["li", 0];
      }
    },
    text: {
      group: "inline"
    },
    image: {
      inline: !0,
      attrs: {
        src: {},
        alt: { default: null },
        title: { default: null }
      },
      group: "inline",
      draggable: !0,
      parseDOM: [{ tag: "img[src]", getAttrs(n) {
        return {
          src: n.getAttribute("src"),
          title: n.getAttribute("title"),
          alt: n.getAttribute("alt")
        };
      } }],
      toDOM(n) {
        return ["img", n.attrs];
      }
    },
    hard_break: {
      inline: !0,
      group: "inline",
      selectable: !1,
      parseDOM: [{ tag: "br" }],
      toDOM() {
        return ["br"];
      }
    }
  },
  marks: {
    em: {
      parseDOM: [
        { tag: "i" },
        { tag: "em" },
        { style: "font-style=italic" },
        { style: "font-style=normal", clearMark: (n) => n.type.name == "em" }
      ],
      toDOM() {
        return ["em"];
      }
    },
    strong: {
      parseDOM: [
        { tag: "strong" },
        { tag: "b", getAttrs: (n) => n.style.fontWeight != "normal" && null },
        { style: "font-weight=400", clearMark: (n) => n.type.name == "strong" },
        { style: "font-weight", getAttrs: (n) => /^(bold(er)?|[5-9]\d{2,})$/.test(n) && null }
      ],
      toDOM() {
        return ["strong"];
      }
    },
    link: {
      attrs: {
        href: {},
        title: { default: null }
      },
      inclusive: !1,
      parseDOM: [{ tag: "a[href]", getAttrs(n) {
        return { href: n.getAttribute("href"), title: n.getAttribute("title") };
      } }],
      toDOM(n) {
        return ["a", n.attrs];
      }
    },
    code: {
      parseDOM: [{ tag: "code" }],
      toDOM() {
        return ["code"];
      }
    }
  }
});
function cue(n, e) {
  if (n.isText && e.isText && ye.sameSet(n.marks, e.marks))
    return n.withText(n.text + e.text);
}
class uue {
  constructor(e, t) {
    this.schema = e, this.tokenHandlers = t, this.stack = [{ type: e.topNodeType, attrs: null, content: [], marks: ye.none }];
  }
  top() {
    return this.stack[this.stack.length - 1];
  }
  push(e) {
    this.stack.length && this.top().content.push(e);
  }
  // Adds the given text to the current position in the document,
  // using the current marks as styling.
  addText(e) {
    if (!e)
      return;
    let t = this.top(), r = t.content, i = r[r.length - 1], s = this.schema.text(e, t.marks), o;
    i && (o = cue(i, s)) ? r[r.length - 1] = o : r.push(s);
  }
  // Adds the given mark to the set of active marks.
  openMark(e) {
    let t = this.top();
    t.marks = e.addToSet(t.marks);
  }
  // Removes the given mark from the set of active marks.
  closeMark(e) {
    let t = this.top();
    t.marks = e.removeFromSet(t.marks);
  }
  parseTokens(e) {
    for (let t = 0; t < e.length; t++) {
      let r = e[t], i = this.tokenHandlers[r.type];
      if (!i)
        throw new Error("Token type `" + r.type + "` not supported by Markdown parser");
      i(this, r, e, t);
    }
  }
  // Add a node at the current position.
  addNode(e, t, r) {
    let i = this.top(), s = e.createAndFill(t, r, i ? i.marks : []);
    return s ? (this.push(s), s) : null;
  }
  // Wrap subsequent content in a node of the given type.
  openNode(e, t) {
    this.stack.push({ type: e, attrs: t, content: [], marks: ye.none });
  }
  // Close and return the node that is currently on top of the stack.
  closeNode() {
    let e = this.stack.pop();
    return this.addNode(e.type, e.attrs, e.content);
  }
}
function ci(n, e, t, r) {
  return n.getAttrs ? n.getAttrs(e, t, r) : n.attrs instanceof Function ? n.attrs(e) : n.attrs;
}
function rl(n, e) {
  return n.noCloseToken || e == "code_inline" || e == "code_block" || e == "fence";
}
function Rp(n) {
  return n[n.length - 1] == `
` ? n.slice(0, n.length - 1) : n;
}
function il() {
}
function due(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let r in e) {
    let i = e[r];
    if (i.block) {
      let s = n.nodeType(i.block);
      rl(i, r) ? t[r] = (o, a, l, c) => {
        o.openNode(s, ci(i, a, l, c)), o.addText(Rp(a.content)), o.closeNode();
      } : (t[r + "_open"] = (o, a, l, c) => o.openNode(s, ci(i, a, l, c)), t[r + "_close"] = (o) => o.closeNode());
    } else if (i.node) {
      let s = n.nodeType(i.node);
      t[r] = (o, a, l, c) => o.addNode(s, ci(i, a, l, c));
    } else if (i.mark) {
      let s = n.marks[i.mark];
      rl(i, r) ? t[r] = (o, a, l, c) => {
        o.openMark(s.create(ci(i, a, l, c))), o.addText(Rp(a.content)), o.closeMark(s);
      } : (t[r + "_open"] = (o, a, l, c) => o.openMark(s.create(ci(i, a, l, c))), t[r + "_close"] = (o) => o.closeMark(s));
    } else if (i.ignore)
      rl(i, r) ? t[r] = il : (t[r + "_open"] = il, t[r + "_close"] = il);
    else
      throw new RangeError("Unrecognized parsing spec " + JSON.stringify(i));
  }
  return t.text = (r, i) => r.addText(i.content), t.inline = (r, i) => r.parseTokens(i.children), t.softbreak = t.softbreak || ((r) => r.addText(" ")), t;
}
let fue = class {
  /**
  Create a parser with the given configuration. You can configure
  the markdown-it parser to parse the dialect you want, and provide
  a description of the ProseMirror entities those tokens map to in
  the `tokens` object, which maps token names to descriptions of
  what to do with them. Such a description is an object, and may
  have the following properties:
  */
  constructor(e, t, r) {
    this.schema = e, this.tokenizer = t, this.tokens = r, this.tokenHandlers = due(e, r);
  }
  /**
  Parse a string as [CommonMark](http://commonmark.org/) markup,
  and create a ProseMirror document as prescribed by this parser's
  rules.
  
  The second argument, when given, is passed through to the
  [Markdown
  parser](https://markdown-it.github.io/markdown-it/#MarkdownIt.parse).
  */
  parse(e, t = {}) {
    let r = new uue(this.schema, this.tokenHandlers), i;
    r.parseTokens(this.tokenizer.parse(e, t));
    do
      i = r.closeNode();
    while (r.stack.length);
    return i || this.schema.topNodeType.createAndFill();
  }
};
function Dp(n, e) {
  for (; ++e < n.length; )
    if (n[e].type != "list_item_open")
      return n[e].hidden;
  return !1;
}
new fue(lue, au("commonmark", { html: !1 }), {
  blockquote: { block: "blockquote" },
  paragraph: { block: "paragraph" },
  list_item: { block: "list_item" },
  bullet_list: { block: "bullet_list", getAttrs: (n, e, t) => ({ tight: Dp(e, t) }) },
  ordered_list: { block: "ordered_list", getAttrs: (n, e, t) => ({
    order: +n.attrGet("start") || 1,
    tight: Dp(e, t)
  }) },
  heading: { block: "heading", getAttrs: (n) => ({ level: +n.tag.slice(1) }) },
  code_block: { block: "code_block", noCloseToken: !0 },
  fence: { block: "code_block", getAttrs: (n) => ({ params: n.info || "" }), noCloseToken: !0 },
  hr: { node: "horizontal_rule" },
  image: { node: "image", getAttrs: (n) => ({
    src: n.attrGet("src"),
    title: n.attrGet("title") || null,
    alt: n.children[0] && n.children[0].content || null
  }) },
  hardbreak: { node: "hard_break" },
  em: { mark: "em" },
  strong: { mark: "strong" },
  link: { mark: "link", getAttrs: (n) => ({
    href: n.attrGet("href"),
    title: n.attrGet("title") || null
  }) },
  code_inline: { mark: "code", noCloseToken: !0 }
});
let pue = class {
  /**
  Construct a serializer with the given configuration. The `nodes`
  object should map node names in a given schema to function that
  take a serializer state and such a node, and serialize the node.
  */
  constructor(e, t, r = {}) {
    this.nodes = e, this.marks = t, this.options = r;
  }
  /**
  Serialize the content of the given node to
  [CommonMark](http://commonmark.org/).
  */
  serialize(e, t = {}) {
    t = Object.assign({}, this.options, t);
    let r = new mb(this.nodes, this.marks, t);
    return r.renderContent(e), r.out;
  }
};
const Bt = new pue({
  blockquote(n, e) {
    n.wrapBlock("> ", null, e, () => n.renderContent(e));
  },
  code_block(n, e) {
    const t = e.textContent.match(/`{3,}/gm), r = t ? t.sort().slice(-1)[0] + "`" : "```";
    n.write(r + (e.attrs.params || "") + `
`), n.text(e.textContent, !1), n.write(`
`), n.write(r), n.closeBlock(e);
  },
  heading(n, e) {
    n.write(n.repeat("#", e.attrs.level) + " "), n.renderInline(e), n.closeBlock(e);
  },
  horizontal_rule(n, e) {
    n.write(e.attrs.markup || "---"), n.closeBlock(e);
  },
  bullet_list(n, e) {
    n.renderList(e, "  ", () => (e.attrs.bullet || "*") + " ");
  },
  ordered_list(n, e) {
    let t = e.attrs.order || 1, r = String(t + e.childCount - 1).length, i = n.repeat(" ", r + 2);
    n.renderList(e, i, (s) => {
      let o = String(t + s);
      return n.repeat(" ", r - o.length) + o + ". ";
    });
  },
  list_item(n, e) {
    n.renderContent(e);
  },
  paragraph(n, e) {
    n.renderInline(e), n.closeBlock(e);
  },
  image(n, e) {
    n.write("![" + n.esc(e.attrs.alt || "") + "](" + e.attrs.src.replace(/[\(\)]/g, "\\$&") + (e.attrs.title ? ' "' + e.attrs.title.replace(/"/g, '\\"') + '"' : "") + ")");
  },
  hard_break(n, e, t, r) {
    for (let i = r + 1; i < t.childCount; i++)
      if (t.child(i).type != e.type) {
        n.write(`\\
`);
        return;
      }
  },
  text(n, e) {
    n.text(e.text, !n.inAutolink);
  }
}, {
  em: { open: "*", close: "*", mixable: !0, expelEnclosingWhitespace: !0 },
  strong: { open: "**", close: "**", mixable: !0, expelEnclosingWhitespace: !0 },
  link: {
    open(n, e, t, r) {
      return n.inAutolink = hue(e, t, r), n.inAutolink ? "<" : "[";
    },
    close(n, e, t, r) {
      let { inAutolink: i } = n;
      return n.inAutolink = void 0, i ? ">" : "](" + e.attrs.href.replace(/[\(\)"]/g, "\\$&") + (e.attrs.title ? ` "${e.attrs.title.replace(/"/g, '\\"')}"` : "") + ")";
    },
    mixable: !0
  },
  code: {
    open(n, e, t, r) {
      return Ip(t.child(r), -1);
    },
    close(n, e, t, r) {
      return Ip(t.child(r - 1), 1);
    },
    escape: !1
  }
});
function Ip(n, e) {
  let t = /`+/g, r, i = 0;
  if (n.isText)
    for (; r = t.exec(n.text); )
      i = Math.max(i, r[0].length);
  let s = i > 0 && e > 0 ? " `" : "`";
  for (let o = 0; o < i; o++)
    s += "`";
  return i > 0 && e < 0 && (s += " "), s;
}
function hue(n, e, t) {
  if (n.attrs.title || !/^\w+:/.test(n.attrs.href))
    return !1;
  let r = e.child(t);
  return !r.isText || r.text != n.attrs.href || r.marks[r.marks.length - 1] != n ? !1 : t == e.childCount - 1 || !n.isInSet(e.child(t + 1).marks);
}
let mb = class {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.nodes = e, this.marks = t, this.options = r, this.delim = "", this.out = "", this.closed = null, this.inAutolink = void 0, this.atBlockStart = !1, this.inTightList = !1, typeof this.options.tightLists > "u" && (this.options.tightLists = !1), typeof this.options.hardBreakNodeName > "u" && (this.options.hardBreakNodeName = "hard_break");
  }
  /**
  @internal
  */
  flushClose(e = 2) {
    if (this.closed) {
      if (this.atBlank() || (this.out += `
`), e > 1) {
        let t = this.delim, r = /\s+$/.exec(t);
        r && (t = t.slice(0, t.length - r[0].length));
        for (let i = 1; i < e; i++)
          this.out += t + `
`;
      }
      this.closed = null;
    }
  }
  /**
  Render a block, prefixing each line with `delim`, and the first
  line in `firstDelim`. `node` should be the node that is closed at
  the end of the block, and `f` is a function that renders the
  content of the block.
  */
  wrapBlock(e, t, r, i) {
    let s = this.delim;
    this.write(t ?? e), this.delim += e, i(), this.delim = s, this.closeBlock(r);
  }
  /**
  @internal
  */
  atBlank() {
    return /(^|\n)$/.test(this.out);
  }
  /**
  Ensure the current content ends with a newline.
  */
  ensureNewLine() {
    this.atBlank() || (this.out += `
`);
  }
  /**
  Prepare the state for writing output (closing closed paragraphs,
  adding delimiters, and so on), and then optionally add content
  (unescaped) to the output.
  */
  write(e) {
    this.flushClose(), this.delim && this.atBlank() && (this.out += this.delim), e && (this.out += e);
  }
  /**
  Close the block for the given node.
  */
  closeBlock(e) {
    this.closed = e;
  }
  /**
  Add the given text to the document. When escape is not `false`,
  it will be escaped.
  */
  text(e, t = !0) {
    let r = e.split(`
`);
    for (let i = 0; i < r.length; i++)
      this.write(), !t && r[i][0] == "[" && /(^|[^\\])\!$/.test(this.out) && (this.out = this.out.slice(0, this.out.length - 1) + "\\!"), this.out += t ? this.esc(r[i], this.atBlockStart) : r[i], i != r.length - 1 && (this.out += `
`);
  }
  /**
  Render the given node as a block.
  */
  render(e, t, r) {
    if (typeof t == "number")
      throw new Error("!");
    if (!this.nodes[e.type.name])
      throw new Error("Token type `" + e.type.name + "` not supported by Markdown renderer");
    this.nodes[e.type.name](this, e, t, r);
  }
  /**
  Render the contents of `parent` as block nodes.
  */
  renderContent(e) {
    e.forEach((t, r, i) => this.render(t, e, i));
  }
  /**
  Render the contents of `parent` as inline content.
  */
  renderInline(e) {
    this.atBlockStart = !0;
    let t = [], r = "", i = (s, o, a) => {
      let l = s ? s.marks : [];
      s && s.type.name === this.options.hardBreakNodeName && (l = l.filter((h) => {
        if (a + 1 == e.childCount)
          return !1;
        let g = e.child(a + 1);
        return h.isInSet(g.marks) && (!g.isText || /\S/.test(g.text));
      }));
      let c = r;
      if (r = "", s && s.isText && l.some((h) => {
        let g = this.marks[h.type.name];
        return g && g.expelEnclosingWhitespace && !h.isInSet(t);
      })) {
        let [h, g, m] = /^(\s*)(.*)$/m.exec(s.text);
        g && (c += g, s = m ? s.withText(m) : null, s || (l = t));
      }
      if (s && s.isText && l.some((h) => {
        let g = this.marks[h.type.name];
        return g && g.expelEnclosingWhitespace && (a == e.childCount - 1 || !h.isInSet(e.child(a + 1).marks));
      })) {
        let [h, g, m] = /^(.*?)(\s*)$/m.exec(s.text);
        m && (r = m, s = g ? s.withText(g) : null, s || (l = t));
      }
      let u = l.length ? l[l.length - 1] : null, d = u && this.marks[u.type.name].escape === !1, f = l.length - (d ? 1 : 0);
      e:
        for (let h = 0; h < f; h++) {
          let g = l[h];
          if (!this.marks[g.type.name].mixable)
            break;
          for (let m = 0; m < t.length; m++) {
            let v = t[m];
            if (!this.marks[v.type.name].mixable)
              break;
            if (g.eq(v)) {
              h > m ? l = l.slice(0, m).concat(g).concat(l.slice(m, h)).concat(l.slice(h + 1, f)) : m > h && (l = l.slice(0, h).concat(l.slice(h + 1, m)).concat(g).concat(l.slice(m, f)));
              continue e;
            }
          }
        }
      let p = 0;
      for (; p < Math.min(t.length, f) && l[p].eq(t[p]); )
        ++p;
      for (; p < t.length; )
        this.text(this.markString(t.pop(), !1, e, a), !1);
      if (c && this.text(c), s) {
        for (; t.length < f; ) {
          let h = l[t.length];
          t.push(h), this.text(this.markString(h, !0, e, a), !1), this.atBlockStart = !1;
        }
        d && s.isText ? this.text(this.markString(u, !0, e, a) + s.text + this.markString(u, !1, e, a + 1), !1) : this.render(s, e, a), this.atBlockStart = !1;
      }
      s != null && s.isText && s.nodeSize > 0 && (this.atBlockStart = !1);
    };
    e.forEach(i), i(null, 0, e.childCount), this.atBlockStart = !1;
  }
  /**
  Render a node's content as a list. `delim` should be the extra
  indentation added to all lines except the first in an item,
  `firstDelim` is a function going from an item index to a
  delimiter for the first line of the item.
  */
  renderList(e, t, r) {
    this.closed && this.closed.type == e.type ? this.flushClose(3) : this.inTightList && this.flushClose(1);
    let i = typeof e.attrs.tight < "u" ? e.attrs.tight : this.options.tightLists, s = this.inTightList;
    this.inTightList = i, e.forEach((o, a, l) => {
      l && i && this.flushClose(1), this.wrapBlock(t, r(l), e, () => this.render(o, e, l));
    }), this.inTightList = s;
  }
  /**
  Escape the given string so that it can safely appear in Markdown
  content. If `startOfLine` is true, also escape characters that
  have special meaning only at the start of the line.
  */
  esc(e, t = !1) {
    return e = e.replace(/[`*\\~\[\]_]/g, (r, i) => r == "_" && i > 0 && i + 1 < e.length && e[i - 1].match(/\w/) && e[i + 1].match(/\w/) ? r : "\\" + r), t && (e = e.replace(/^[\-*+>]/, "\\$&").replace(/^(\s*)(#{1,6})(\s|$)/, "$1\\$2$3").replace(/^(\s*\d+)\.\s/, "$1\\. ")), this.options.escapeExtraCharacters && (e = e.replace(this.options.escapeExtraCharacters, "\\$&")), e;
  }
  /**
  @internal
  */
  quote(e) {
    let t = e.indexOf('"') == -1 ? '""' : e.indexOf("'") == -1 ? "''" : "()";
    return t[0] + e + t[1];
  }
  /**
  Repeat the given string `n` times.
  */
  repeat(e, t) {
    let r = "";
    for (let i = 0; i < t; i++)
      r += e;
    return r;
  }
  /**
  Get the markdown string for a given opening or closing mark.
  */
  markString(e, t, r, i) {
    let s = this.marks[e.type.name], o = t ? s.open : s.close;
    return typeof o == "string" ? o : o(this, e, r, i);
  }
  /**
  Get leading and trailing whitespace from a string. Values of
  leading or trailing property of the return object will be undefined
  if there is no match.
  */
  getEnclosingWhitespace(e) {
    return {
      leading: (e.match(/^(\s+)/) || [void 0])[0],
      trailing: (e.match(/(\s+)$/) || [void 0])[0]
    };
  }
};
var Wl = !0, bb = !1, yb = !1, gue = function(n, e) {
  e && (Wl = !e.enabled, bb = !!e.label, yb = !!e.labelAfter), n.core.ruler.after("inline", "github-task-lists", function(t) {
    for (var r = t.tokens, i = 2; i < r.length; i++)
      bue(r, i) && (yue(r[i], t.Token), Bp(r[i - 2], "class", "task-list-item" + (Wl ? "" : " enabled")), Bp(r[mue(r, i - 2)], "class", "contains-task-list"));
  });
};
function Bp(n, e, t) {
  var r = n.attrIndex(e), i = [e, t];
  r < 0 ? n.attrPush(i) : n.attrs[r] = i;
}
function mue(n, e) {
  for (var t = n[e].level - 1, r = e - 1; r >= 0; r--)
    if (n[r].level === t)
      return r;
  return -1;
}
function bue(n, e) {
  return xue(n[e]) && Cue(n[e - 1]) && Sue(n[e - 2]) && _ue(n[e]);
}
function yue(n, e) {
  if (n.children.unshift(vue(n, e)), n.children[1].content = n.children[1].content.slice(3), n.content = n.content.slice(3), bb)
    if (yb) {
      n.children.pop();
      var t = "task-item-" + Math.ceil(Math.random() * (1e4 * 1e3) - 1e3);
      n.children[0].content = n.children[0].content.slice(0, -1) + ' id="' + t + '">', n.children.push(Eue(n.content, t, e));
    } else
      n.children.unshift(wue(e)), n.children.push(kue(e));
}
function vue(n, e) {
  var t = new e("html_inline", "", 0), r = Wl ? ' disabled="" ' : "";
  return n.content.indexOf("[ ] ") === 0 ? t.content = '<input class="task-list-item-checkbox"' + r + 'type="checkbox">' : (n.content.indexOf("[x] ") === 0 || n.content.indexOf("[X] ") === 0) && (t.content = '<input class="task-list-item-checkbox" checked=""' + r + 'type="checkbox">'), t;
}
function wue(n) {
  var e = new n("html_inline", "", 0);
  return e.content = "<label>", e;
}
function kue(n) {
  var e = new n("html_inline", "", 0);
  return e.content = "</label>", e;
}
function Eue(n, e, t) {
  var r = new t("html_inline", "", 0);
  return r.content = '<label class="task-list-item-label" for="' + e + '">' + n + "</label>", r.attrs = [{ for: e }], r;
}
function xue(n) {
  return n.type === "inline";
}
function Cue(n) {
  return n.type === "paragraph_open";
}
function Sue(n) {
  return n.type === "list_item_open";
}
function _ue(n) {
  return n.content.indexOf("[ ] ") === 0 || n.content.indexOf("[x] ") === 0 || n.content.indexOf("[X] ") === 0;
}
const Mue = /* @__PURE__ */ Xr(gue);
var Aue = Object.defineProperty, Tue = (n, e, t) => e in n ? Aue(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Gl = (n, e, t) => (Tue(n, typeof e != "symbol" ? e + "" : e, t), t);
const Nue = Ee.create({
  name: "markdownTightLists",
  addOptions: () => ({
    tight: !0,
    tightClass: "tight",
    listTypes: ["bulletList", "orderedList"]
  }),
  addGlobalAttributes() {
    return [{
      types: this.options.listTypes,
      attributes: {
        tight: {
          default: this.options.tight,
          parseHTML: (n) => n.getAttribute("data-tight") === "true" || !n.querySelector("p"),
          renderHTML: (n) => ({
            class: n.tight ? this.options.tightClass : null,
            "data-tight": n.tight ? "true" : null
          })
        }
      }
    }];
  },
  addCommands() {
    var n = this;
    return {
      toggleTight: function() {
        let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        return (t) => {
          let {
            editor: r,
            commands: i
          } = t;
          function s(o) {
            if (!r.isActive(o))
              return !1;
            const a = r.getAttributes(o);
            return i.updateAttributes(o, {
              tight: e ?? !(a != null && a.tight)
            });
          }
          return n.options.listTypes.some((o) => s(o));
        };
      }
    };
  }
}), Hp = au();
function vb(n, e) {
  return Hp.inline.State.prototype.scanDelims.call({
    src: n,
    posMax: n.length
  }), new Hp.inline.State(n, null, null, []).scanDelims(e, !0);
}
function wb(n, e, t, r) {
  let i = n.substring(0, t) + n.substring(t + e.length);
  return i = i.substring(0, t + r) + e + i.substring(t + r), i;
}
function Oue(n, e, t, r) {
  let i = t, s = n;
  for (; i < r && !vb(s, i).can_open; )
    s = wb(s, e, i, 1), i++;
  return {
    text: s,
    from: i,
    to: r
  };
}
function Lue(n, e, t, r) {
  let i = r, s = n;
  for (; i > t && !vb(s, i).can_close; )
    s = wb(s, e, i, -1), i--;
  return {
    text: s,
    from: t,
    to: i
  };
}
function Rue(n, e, t, r) {
  let i = {
    text: n,
    from: t,
    to: r
  };
  return i = Oue(i.text, e, i.from, i.to), i = Lue(i.text, e, i.from, i.to), i.to - i.from < e.length + 1 && (i.text = i.text.substring(0, i.from) + i.text.substring(i.to + e.length)), i.text;
}
class Due extends mb {
  constructor(e, t, r) {
    super(e, t, r ?? {}), this.inlines = [];
  }
  render(e, t, r) {
    super.render(e, t, r);
    const i = this.inlines[this.inlines.length - 1];
    if (i != null && i.start && i !== null && i !== void 0 && i.end) {
      const {
        delimiter: s,
        start: o,
        end: a
      } = this.normalizeInline(i);
      this.out = Rue(this.out, s, o, a), this.inlines.pop();
    }
  }
  markString(e, t, r, i) {
    const s = this.marks[e.type.name];
    if (s.expelEnclosingWhitespace)
      if (t)
        this.inlines.push({
          start: this.out.length,
          delimiter: s.open
        });
      else {
        const o = this.inlines.pop();
        this.inlines.push({
          ...o,
          end: this.out.length
        });
      }
    return super.markString(e, t, r, i);
  }
  normalizeInline(e) {
    let {
      start: t,
      end: r
    } = e;
    for (; this.out.charAt(t).match(/\s/); )
      t++;
    return {
      ...e,
      start: t
    };
  }
}
const kb = Re.create({
  name: "markdownHTMLMark",
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: {
          open(n, e) {
            var t, r;
            return this.editor.storage.markdown.options.html ? (t = (r = Pp(e)) === null || r === void 0 ? void 0 : r[0]) !== null && t !== void 0 ? t : "" : (console.warn(`Tiptap Markdown: "${e.type.name}" mark is only available in html mode`), "");
          },
          close(n, e) {
            var t, r;
            return this.editor.storage.markdown.options.html && (t = (r = Pp(e)) === null || r === void 0 ? void 0 : r[1]) !== null && t !== void 0 ? t : "";
          }
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function Pp(n) {
  const e = n.type.schema, t = e.text(" ", [n]), i = hc(R.from(t), e).match(/^(<.*?>) (<\/.*?>)$/);
  return i ? [i[1], i[2]] : null;
}
function lu(n) {
  const e = `<body>${n}</body>`;
  return new window.DOMParser().parseFromString(e, "text/html").body;
}
function Iue(n) {
  return n == null ? void 0 : n.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
function Bue(n) {
  const e = n.parentElement, t = e.cloneNode();
  for (; e.firstChild && e.firstChild !== n; )
    t.appendChild(e.firstChild);
  t.childNodes.length > 0 && e.parentElement.insertBefore(t, e), e.parentElement.insertBefore(n, e), e.childNodes.length === 0 && e.remove();
}
function Hue(n) {
  const e = n.parentNode;
  for (; n.firstChild; )
    e.insertBefore(n.firstChild, n);
  e.removeChild(n);
}
const cu = le.create({
  name: "markdownHTMLNode",
  addStorage() {
    return {
      markdown: {
        serialize(n, e, t) {
          this.editor.storage.markdown.options.html ? n.write(Pue(e, t)) : (console.warn(`Tiptap Markdown: "${e.type.name}" node is only available in html mode`), n.write(`[${e.type.name}]`)), e.isBlock && n.closeBlock(e);
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function Pue(n, e) {
  const t = n.type.schema, r = hc(R.from(n), t);
  return n.isBlock && (e instanceof R || e.type.name === t.topNodeType.name) ? $ue(r) : r;
}
function $ue(n) {
  const t = lu(n).firstElementChild;
  return t.innerHTML = t.innerHTML.trim() ? `
${t.innerHTML}
` : `
`, t.outerHTML;
}
const Fue = le.create({
  name: "blockquote"
}), zue = Fue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.blockquote,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), Vue = le.create({
  name: "bulletList"
}), Eb = Vue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(n, e) {
          return n.renderList(e, "  ", () => (this.editor.storage.markdown.options.bulletListMarker || "-") + " ");
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), que = le.create({
  name: "codeBlock"
}), Uue = que.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(n, e) {
          n.write("```" + (e.attrs.language || "") + `
`), n.text(e.textContent, !1), n.ensureNewLine(), n.write("```"), n.closeBlock(e);
        },
        parse: {
          setup(n) {
            var e;
            n.set({
              langPrefix: (e = this.options.languageClassPrefix) !== null && e !== void 0 ? e : "language-"
            });
          },
          updateDOM(n) {
            n.innerHTML = n.innerHTML.replace(/\n<\/code><\/pre>/g, "</code></pre>");
          }
        }
      }
    };
  }
}), Kue = le.create({
  name: "hardBreak"
}), xb = Kue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.hard_break,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), Wue = le.create({
  name: "heading"
}), Gue = Wue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.heading,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), Zue = le.create({
  name: "horizontalRule"
}), jue = Zue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.horizontal_rule,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), Jue = le.create({
  name: "image"
}), Yue = Jue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.image,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), Xue = le.create({
  name: "listItem"
}), Que = Xue.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.list_item,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), ede = le.create({
  name: "orderedList"
}), tde = ede.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(n, e) {
          const t = e.attrs.start || 1, r = String(t + e.childCount - 1).length, i = n.repeat(" ", r + 2);
          n.renderList(e, i, (s) => {
            const o = String(t + s);
            return n.repeat(" ", r - o.length) + o + ". ";
          });
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), nde = le.create({
  name: "paragraph"
}), rde = nde.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.nodes.paragraph,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function sl(n) {
  var e, t;
  return (e = n == null || (t = n.content) === null || t === void 0 ? void 0 : t.content) !== null && e !== void 0 ? e : [];
}
const ide = le.create({
  name: "table"
}), sde = ide.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(n, e, t) {
          if (!ode(e)) {
            cu.storage.markdown.serialize.call(this, n, e, t);
            return;
          }
          e.forEach((r, i, s) => {
            if (n.write("| "), r.forEach((o, a, l) => {
              l && n.write(" | ");
              const c = o.firstChild;
              c.textContent.trim() && n.renderInline(c);
            }), n.write(" |"), n.ensureNewLine(), !s) {
              const o = Array.from({
                length: r.childCount
              }).map(() => "---").join(" | ");
              n.write(`| ${o} |`), n.ensureNewLine();
            }
          }), n.closeBlock(e);
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
});
function $p(n) {
  return n.attrs.colspan > 1 || n.attrs.rowspan > 1;
}
function ode(n) {
  const e = sl(n), t = e[0], r = e.slice(1);
  return !(sl(t).some((i) => i.type.name !== "tableHeader" || $p(i) || i.childCount > 1) || r.some((i) => sl(i).some((s) => s.type.name === "tableHeader" || $p(s) || s.childCount > 1)));
}
const ade = le.create({
  name: "taskItem"
}), lde = ade.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(n, e) {
          const t = e.attrs.checked ? "[x]" : "[ ]";
          n.write(`${t} `), n.renderContent(e);
        },
        parse: {
          updateDOM(n) {
            [...n.querySelectorAll(".task-list-item")].forEach((e) => {
              const t = e.querySelector("input");
              e.setAttribute("data-type", "taskItem"), t && (e.setAttribute("data-checked", t.checked), t.remove());
            });
          }
        }
      }
    };
  }
}), cde = le.create({
  name: "taskList"
}), ude = cde.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Eb.storage.markdown.serialize,
        parse: {
          setup(n) {
            n.use(Mue);
          },
          updateDOM(n) {
            [...n.querySelectorAll(".contains-task-list")].forEach((e) => {
              e.setAttribute("data-type", "taskList");
            });
          }
        }
      }
    };
  }
}), dde = le.create({
  name: "text"
}), fde = dde.extend({
  /**
   * @return {{markdown: MarkdownNodeSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize(n, e) {
          n.text(Iue(e.text));
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), pde = Re.create({
  name: "bold"
}), hde = pde.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.marks.strong,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), gde = Re.create({
  name: "code"
}), mde = gde.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.marks.code,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), bde = Re.create({
  name: "italic"
}), yde = bde.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.marks.em,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), vde = Re.create({
  name: "link"
}), wde = vde.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: Bt.marks.link,
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), kde = Re.create({
  name: "strike"
}), Ede = kde.extend({
  /**
   * @return {{markdown: MarkdownMarkSpec}}
   */
  addStorage() {
    return {
      markdown: {
        serialize: {
          open: "~~",
          close: "~~",
          expelEnclosingWhitespace: !0
        },
        parse: {
          // handled by markdown-it
        }
      }
    };
  }
}), xde = [zue, Eb, Uue, xb, Gue, jue, cu, Yue, Que, tde, rde, sde, lde, ude, fde, hde, mde, kb, yde, wde, Ede];
function xo(n) {
  var e, t;
  const r = (e = n.storage) === null || e === void 0 ? void 0 : e.markdown, i = (t = xde.find((s) => s.name === n.name)) === null || t === void 0 ? void 0 : t.storage.markdown;
  return r || i ? {
    ...i,
    ...r
  } : null;
}
class Cde {
  constructor(e) {
    Gl(this, "editor", null), this.editor = e;
  }
  serialize(e) {
    const t = new Due(this.nodes, this.marks, {
      hardBreakNodeName: xb.name
    });
    return t.renderContent(e), t.out;
  }
  get nodes() {
    var e;
    return {
      ...Object.fromEntries(Object.keys(this.editor.schema.nodes).map((t) => [t, this.serializeNode(cu)])),
      ...Object.fromEntries((e = this.editor.extensionManager.extensions.filter((t) => t.type === "node" && this.serializeNode(t)).map((t) => [t.name, this.serializeNode(t)])) !== null && e !== void 0 ? e : [])
    };
  }
  get marks() {
    var e;
    return {
      ...Object.fromEntries(Object.keys(this.editor.schema.marks).map((t) => [t, this.serializeMark(kb)])),
      ...Object.fromEntries((e = this.editor.extensionManager.extensions.filter((t) => t.type === "mark" && this.serializeMark(t)).map((t) => [t.name, this.serializeMark(t)])) !== null && e !== void 0 ? e : [])
    };
  }
  serializeNode(e) {
    var t;
    return (t = xo(e)) === null || t === void 0 || (t = t.serialize) === null || t === void 0 ? void 0 : t.bind({
      editor: this.editor,
      options: e.options
    });
  }
  serializeMark(e) {
    var t;
    const r = (t = xo(e)) === null || t === void 0 ? void 0 : t.serialize;
    return r ? {
      ...r,
      open: typeof r.open == "function" ? r.open.bind({
        editor: this.editor,
        options: e.options
      }) : r.open,
      close: typeof r.close == "function" ? r.close.bind({
        editor: this.editor,
        options: e.options
      }) : r.close
    } : null;
  }
}
class Sde {
  constructor(e, t) {
    Gl(this, "editor", null), Gl(this, "md", null);
    let {
      html: r,
      linkify: i,
      breaks: s
    } = t;
    this.editor = e, this.md = this.withPatchedRenderer(au({
      html: r,
      linkify: i,
      breaks: s
    }));
  }
  parse(e) {
    let {
      inline: t
    } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (typeof e == "string") {
      this.editor.extensionManager.extensions.forEach((s) => {
        var o;
        return (o = xo(s)) === null || o === void 0 || (o = o.parse) === null || o === void 0 || (o = o.setup) === null || o === void 0 ? void 0 : o.call({
          editor: this.editor,
          options: s.options
        }, this.md);
      });
      const r = this.md.render(e), i = lu(r);
      return this.editor.extensionManager.extensions.forEach((s) => {
        var o;
        return (o = xo(s)) === null || o === void 0 || (o = o.parse) === null || o === void 0 || (o = o.updateDOM) === null || o === void 0 ? void 0 : o.call({
          editor: this.editor,
          options: s.options
        }, i);
      }), this.normalizeDOM(i, {
        inline: t,
        content: e
      }), i.innerHTML;
    }
    return e;
  }
  normalizeDOM(e, t) {
    let {
      inline: r,
      content: i
    } = t;
    return this.normalizeBlocks(e), e.querySelectorAll("*").forEach((s) => {
      var o;
      ((o = s.nextSibling) === null || o === void 0 ? void 0 : o.nodeType) === Node.TEXT_NODE && !s.closest("pre") && (s.nextSibling.textContent = s.nextSibling.textContent.replace(/^\n/, ""));
    }), r && this.normalizeInline(e, i), e;
  }
  normalizeBlocks(e) {
    const r = Object.values(this.editor.schema.nodes).filter((i) => i.isBlock).map((i) => {
      var s;
      return (s = i.spec.parseDOM) === null || s === void 0 ? void 0 : s.map((o) => o.tag);
    }).flat().filter(Boolean).join(",");
    r && [...e.querySelectorAll(r)].forEach((i) => {
      i.parentElement.matches("p") && Bue(i);
    });
  }
  normalizeInline(e, t) {
    var r;
    if ((r = e.firstElementChild) !== null && r !== void 0 && r.matches("p")) {
      var i, s, o, a;
      const l = e.firstElementChild, {
        nextElementSibling: c
      } = l, u = (i = (s = t.match(/^\s+/)) === null || s === void 0 ? void 0 : s[0]) !== null && i !== void 0 ? i : "", d = c ? "" : (o = (a = t.match(/\s+$/)) === null || a === void 0 ? void 0 : a[0]) !== null && o !== void 0 ? o : "";
      if (t.match(/^\n\n/)) {
        l.innerHTML = `${l.innerHTML}${d}`;
        return;
      }
      Hue(l), e.innerHTML = `${u}${e.innerHTML}${d}`;
    }
  }
  /**
   * @param {markdownit} md
   */
  withPatchedRenderer(e) {
    const t = (r) => function() {
      const i = r(...arguments);
      return i === `
` ? i : i[i.length - 1] === `
` ? i.slice(0, -1) : i;
    };
    return e.renderer.rules.hardbreak = t(e.renderer.rules.hardbreak), e.renderer.rules.softbreak = t(e.renderer.rules.softbreak), e.renderer.rules.fence = t(e.renderer.rules.fence), e.renderer.rules.code_block = t(e.renderer.rules.code_block), e.renderer.renderToken = t(e.renderer.renderToken.bind(e.renderer)), e;
  }
}
const _de = Ee.create({
  name: "markdownClipboard",
  addOptions() {
    return {
      transformPastedText: !1,
      transformCopiedText: !1
    };
  },
  addProseMirrorPlugins() {
    return [new Se({
      key: new Me("markdownClipboard"),
      props: {
        clipboardTextParser: (n, e, t) => {
          if (t || !this.options.transformPastedText)
            return null;
          const r = this.editor.storage.markdown.parser.parse(n, {
            inline: !0
          });
          return Nn.fromSchema(this.editor.schema).parseSlice(lu(r), {
            preserveWhitespace: !0,
            context: e
          });
        },
        /**
         * @param {import('prosemirror-model').Slice} slice
         */
        clipboardTextSerializer: (n) => this.options.transformCopiedText ? this.editor.storage.markdown.serializer.serialize(n.content) : null
      }
    })];
  }
}), Mde = Ee.create({
  name: "markdown",
  priority: 50,
  addOptions() {
    return {
      html: !0,
      tightLists: !0,
      tightListClass: "tight",
      bulletListMarker: "-",
      linkify: !1,
      breaks: !1,
      transformPastedText: !1,
      transformCopiedText: !1
    };
  },
  addCommands() {
    const n = cg.Commands.config.addCommands();
    return {
      setContent: (e, t, r) => (i) => n.setContent(i.editor.storage.markdown.parser.parse(e), t, r)(i),
      insertContentAt: (e, t, r) => (i) => n.insertContentAt(e, i.editor.storage.markdown.parser.parse(t, {
        inline: !0
      }), r)(i)
    };
  },
  onBeforeCreate() {
    this.editor.storage.markdown = {
      options: {
        ...this.options
      },
      parser: new Sde(this.editor, this.options),
      serializer: new Cde(this.editor),
      getMarkdown: () => this.editor.storage.markdown.serializer.serialize(this.editor.state.doc)
    }, this.editor.options.initialContent = this.editor.options.content, this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);
  },
  onCreate() {
    this.editor.options.content = this.editor.options.initialContent, delete this.editor.options.initialContent;
  },
  addStorage() {
    return {
      /// storage will be defined in onBeforeCreate() to prevent initial object overriding
    };
  },
  addExtensions() {
    return [Nue.configure({
      tight: this.options.tightLists,
      tightClass: this.options.tightListClass
    }), _de.configure({
      transformPastedText: this.options.transformPastedText,
      transformCopiedText: this.options.transformCopiedText
    })];
  }
});
var Ade = function(e, t, r) {
  function i(p) {
    return p.trim().split(" ", 2)[0] === t;
  }
  function s(p, h, g, m, v) {
    return p[h].nesting === 1 && p[h].attrJoin("class", t), v.renderToken(p, h, g, m, v);
  }
  r = r || {};
  var o = 3, a = r.marker || ":", l = a.charCodeAt(0), c = a.length, u = r.validate || i, d = r.render || s;
  function f(p, h, g, m) {
    var v, y, k, b, x, w, S, T, M = !1, L = p.bMarks[h] + p.tShift[h], z = p.eMarks[h];
    if (l !== p.src.charCodeAt(L))
      return !1;
    for (v = L + 1; v <= z && a[(v - L) % c] === p.src[v]; v++)
      ;
    if (k = Math.floor((v - L) / c), k < o || (v -= (v - L) % c, b = p.src.slice(L, v), x = p.src.slice(v, z), !u(x, b)))
      return !1;
    if (m)
      return !0;
    for (y = h; y++, !(y >= g || (L = p.bMarks[y] + p.tShift[y], z = p.eMarks[y], L < z && p.sCount[y] < p.blkIndent)); )
      if (l === p.src.charCodeAt(L) && !(p.sCount[y] - p.blkIndent >= 4)) {
        for (v = L + 1; v <= z && a[(v - L) % c] === p.src[v]; v++)
          ;
        if (!(Math.floor((v - L) / c) < k) && (v -= (v - L) % c, v = p.skipSpaces(v), !(v < z))) {
          M = !0;
          break;
        }
      }
    return S = p.parentType, T = p.lineMax, p.parentType = "container", p.lineMax = y, w = p.push("container_" + t + "_open", "div", 1), w.markup = b, w.block = !0, w.info = x, w.map = [h, y], p.md.block.tokenize(p, h + 1, y), w = p.push("container_" + t + "_close", "div", -1), w.markup = p.src.slice(L, v), w.block = !0, p.parentType = S, p.lineMax = T, p.line = y + (M ? 1 : 0), !0;
  }
  e.block.ruler.before("fence", "container_" + t, f, {
    alt: ["paragraph", "reference", "blockquote", "list"]
  }), e.renderer.rules["container_" + t + "_open"] = d, e.renderer.rules["container_" + t + "_close"] = d;
};
const Tde = /* @__PURE__ */ Xr(Ade), Nde = /^:::([a-z]+)?[\s\n]$/, Ode = le.create({
  name: "container",
  group: "block",
  content: "block+",
  defining: !0,
  addOptions() {
    return {
      classes: ["info", "warning", "danger"],
      HTMLAttributes: {
        class: "container-wrapper"
      }
    };
  },
  addStorage() {
    return {
      markdown: {
        serialize(n, e) {
          n.write("::: " + (e.attrs.containerClass || "") + `
`), n.renderContent(e), n.flushClose(1), n.write(":::"), n.closeBlock(e);
        },
        parse: {
          setup: (n) => {
            this.options.classes.forEach((e) => {
              n.use(Tde, e);
            });
          }
        }
      }
    };
  },
  addAttributes() {
    return {
      containerClass: {
        default: null,
        parseHTML: (n) => [...n.classList].find((e) => this.options.classes.includes(e)),
        renderHTML: (n) => ({
          class: n.containerClass
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "div",
        getAttrs: (n) => {
          const e = n, t = ["container-wrapper"].concat(this.options.classes);
          return [...e.classList].find((r) => t.includes(r)) ? null : !1;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["div", pe(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setContainer: (n) => ({ commands: e }) => e.wrapIn(this.name, { containerClass: n }),
      toggleContainer: (n) => ({ commands: e }) => e.toggleWrap(this.name, { containerClass: n }),
      unsetContainer: () => ({ commands: n }) => n.lift(this.name)
    };
  },
  addInputRules() {
    return [
      or({
        find: Nde,
        type: this.type,
        getAttributes: (n) => ({
          containerClass: n[1]
        })
      })
    ];
  }
}), Lde = (n, e) => {
  var r, i, s, o, a, l, c, u, d;
  const t = e.cbName && e.cbUrl ? [Yd.configure({
    history: !1,
    codeBlock: !1
  })] : [Yd.configure({
    codeBlock: !1
  })];
  return t.push(
    wC,
    kC,
    EC,
    _C.configure({
      uploadUrl: (r = e.video) == null ? void 0 : r.uploadUrl,
      uploadHeaders: (i = e.video) == null ? void 0 : i.uploadHeaders,
      uploader: ((s = e.video) == null ? void 0 : s.uploader) || e.uploader
    }),
    MC,
    QA,
    NC.configure({
      multicolor: !0
    }),
    OC,
    LC,
    RC,
    DC.configure({
      types: ["heading", "paragraph"]
    }),
    IC,
    PC.configure({
      allowBase64: !0,
      uploadUrl: (o = e.image) == null ? void 0 : o.uploadUrl,
      uploadHeaders: (a = e.image) == null ? void 0 : a.uploadHeaders,
      uploader: ((l = e.image) == null ? void 0 : l.uploader) || e.uploader
    }),
    $S.configure({
      resizable: !0,
      lastColumnResizable: !0,
      allowTableNodeSelection: !0
    }),
    FS,
    zS,
    VS,
    qS,
    f_.configure({
      openOnClick: !1
    }),
    p_,
    h_,
    g_,
    b_.configure({
      nested: !0
    }),
    k2.configure({
      lowlight: LA(BM),
      defaultLanguage: "auto",
      languageClassPrefix: "language-"
    }),
    IA.configure({
      uploadUrl: (c = e.video) == null ? void 0 : c.uploadUrl,
      uploadHeaders: (u = e.video) == null ? void 0 : u.uploadHeaders,
      uploader: ((d = e.video) == null ? void 0 : d.uploader) || e.uploader
    }),
    BA,
    // PasteExt,
    Mde.configure({
      html: !0,
      // Allow HTML input/output
      tightLists: !0,
      // No <p> inside <li> in markdown output
      tightListClass: "tight",
      // Add class to <ul> allowing you to remove <p> margins when tight
      bulletListMarker: "-",
      // <li> prefix in markdown output
      linkify: !0,
      // Create links from "https://..." text
      breaks: !0,
      // New lines (\n) in markdown input are converted to <br>
      transformPastedText: !0,
      // Allow to paste markdown text in the editor
      transformCopiedText: !1
      // Copied text is transformed to markdown
    }),
    Ode,
    ...UA(n)
  ), e.placeholder && t.push(KA.configure({
    placeholder: e.placeholder
  })), t.push(XA.configure({
    suggestion: {
      items: (f) => {
        var h;
        return ((h = e.ai) == null ? void 0 : h.commands) || YA;
      }
    }
  })), e.onMentionQuery && t.push(JA(e.onMentionQuery)), t;
};
const Rde = {
  ////commons
  default: "默认",
  delete: "删除",
  confirm: "确定",
  //menu tips
  undo: "撤销",
  redo: "重做",
  brush: "格式刷",
  container: "高亮块",
  eraser: "清除格式",
  heading: "正文/标题",
  "font-family": "字体",
  "font-size": "字号",
  bold: "加粗",
  italic: "斜体",
  underline: "下划线",
  strike: "删除线",
  link: "链接",
  code: "行内代码",
  subscript: "下标",
  superscript: "上标",
  hr: "分割线",
  todo: "任务列表",
  emoji: "表情",
  highlight: "高亮",
  "font-color": "字体颜色",
  align: "对齐",
  "line-height": "行高",
  "bullet-list": "无序列表",
  "ordered-list": "有序列表",
  "indent-decrease": "减少缩进",
  "indent-increase": "增加缩进",
  break: "强制换行",
  image: "图片",
  video: "视频",
  attachment: "附件",
  quote: "引用",
  "code-block": "代码块",
  table: "表格",
  printer: "打印",
  fullscreen: "全屏",
  ai: "人工智能",
  /////
  paragraph: "正文",
  h1: "标题 1",
  h2: "标题 2",
  h3: "标题 3",
  h4: "标题 4",
  h5: "标题 5",
  h6: "标题 6",
  ////colors panel
  standardColors: "标准色",
  historyColors: "最近使用",
  ////table
  insertTable: "插入表格",
  row: "行",
  column: "列",
  ////alignment
  "align-left": "居左对齐",
  "align-right": "居右对齐",
  "align-center": "居中对齐",
  "align-justify": "两端对齐",
  ////table
  "insert-column-left": "左侧插入列",
  "insert-column-right": "右侧插入列",
  "insert-row-top": "上方插入行",
  "insert-row-bottom": "下方插入行",
  "delete-column": "删除当前列",
  "delete-row": "删除当前行",
  "merge-cells-horizontal": "合并单元格",
  "merge-cells-vertical": "合并单元格",
  "split-cells-horizontal": "解除合并单元格",
  "split-cells-vertical": "解除合并单元格",
  "delete-table": "上传表格",
  ////link
  "edit-link": "编辑链接",
  unlink: "取消链接",
  "visit-link": "访问链接",
  "link-address": "链接地址",
  "link-open-type": "打开方式",
  "link-open-blank": "新窗口",
  ////font
  "default-font-size": "字号",
  "default-font-family": "默认字体"
}, Dde = {
  ////commons
  default: "Default",
  delete: "Delete",
  confirm: "Confirm",
  //menu tips
  undo: "Undo",
  redo: "Redo",
  brush: "Format Painter",
  container: "Highlight container",
  eraser: "clear format",
  heading: "Paragraph/Heading",
  "font-family": "Font Family",
  "font-size": "Font Size",
  bold: "Bold",
  italic: "Italics",
  underline: "Underline",
  strike: "Strikethrough",
  link: "Link",
  code: "Inline code",
  subscript: "Subscript",
  superscript: "Superscript",
  hr: "Dividing line",
  todo: "Task list",
  emoji: "Emoji expression",
  highlight: "Highlight",
  "font-color": "Font color",
  align: "Alignment",
  "line-height": "Line height",
  "bullet-list": "Unordered list",
  "ordered-list": "Ordered list",
  "indent-decrease": "Decrease indent",
  "indent-increase": "Increase indent",
  break: "Force line break",
  image: "Image",
  video: "video",
  attachment: "Attachment",
  quote: "Quote",
  "code-block": "Code block",
  table: "Table",
  printer: "Print",
  fullscreen: "Full screen",
  ai: "AI",
  /////
  paragraph: "Paragraph",
  h1: "H1",
  h2: "H2",
  h3: "H3",
  h4: "H4",
  h5: "H5",
  h6: "H6",
  ////colors panel
  standardColors: "Standard colors",
  historyColors: "Recently used colors",
  ////table
  insertTable: "Insert Table",
  row: "Row",
  column: "Column",
  ////alignment
  "align-left": "Align left",
  "align-right": "Align right",
  "align-center": "Align center",
  "align-justify": "Align justify",
  ////table
  "insert-column-left": "Insert column left",
  "insert-column-right": "Insert column right",
  "insert-row-top": "Insert row top",
  "insert-row-bottom": "Insert row bottom",
  "delete-column": "Delete column",
  "delete-row": "Delete row",
  "merge-cells-horizontal": "Merge cells",
  "merge-cells-vertical": "Merge cells",
  "split-cells-horizontal": "Split cells",
  "split-cells-vertical": "Split cells",
  "delete-table": "Delete table",
  ///link
  "edit-link": "Edit link",
  unlink: "Unlink",
  "visit-link": "Visit link",
  "link-address": "Link address",
  "link-open-type": "Open type",
  "link-open-blank": "Blank",
  ////font
  "default-font-size": "Size",
  "default-font-family": "Default font"
};
window.customElements.define("aie-menus", kx);
window.customElements.define("aie-footer", Ex);
const Ide = {
  theme: "light",
  lang: "zh",
  contentRetentionKey: "ai-editor-content",
  placeholder: ""
};
class Bde extends pw {
  constructor(t, r = {}) {
    super(r);
    j(this, "userOptions");
    this.userOptions = t;
  }
  parseHtml(t) {
    function r(s) {
      return new window.DOMParser().parseFromString(`<body>${s}</body>`, "text/html").body;
    }
    return Nn.fromSchema(this.schema).parse(r(t), {}).content;
  }
  parseMarkdown(t) {
    var i, s, o;
    const r = (o = (s = (i = this.storage.markdown) == null ? void 0 : i.parser) == null ? void 0 : s.parse) == null ? void 0 : o.call(s, t, {
      inline: !1
    });
    return this.parseHtml(r);
  }
}
class cfe {
  constructor(e) {
    j(this, "innerEditor");
    j(this, "container");
    j(this, "menus");
    j(this, "footer");
    j(this, "options");
    j(this, "eventComponents", []);
    this.options = Object.assign(Ide, e), this.initI18n();
  }
  initI18n() {
    const e = this.options.i18n || {}, t = {
      en: { translation: { ...Dde, ...e.en } },
      zh: { translation: { ...Rde, ...e.zh } }
    };
    for (let r of Object.keys(e))
      r != "en" && r != "zh" && (t[r] = {
        translation: { ...e[r] }
      });
    We.init({
      lng: this.options.lang,
      resources: t
    }, (r, i) => {
      this.initInnerEditor();
    });
  }
  initInnerEditor() {
    const e = typeof this.options.element == "string" ? document.querySelector(this.options.element) : this.options.element;
    e.classList.add(`aie-theme-${this.options.theme}`), this.container = document.createElement("div"), this.container.classList.add("aie-container"), e.appendChild(this.container);
    const t = document.createElement("div");
    t.style.flexGrow = "1", t.style.overflow = "auto", this.menus = document.createElement("aie-menus"), this.footer = document.createElement("aie-footer"), this.eventComponents.push(this.menus), this.eventComponents.push(this.footer);
    let r = this.options.content;
    if (this.options.contentRetention && this.options.contentRetentionKey) {
      const i = localStorage.getItem(this.options.contentRetentionKey);
      i && (r = JSON.parse(i));
    }
    this.innerEditor = new Bde(this.options, {
      element: t,
      content: r,
      extensions: Lde(this, this.options),
      onCreate: (i) => this.onCreate(i, t),
      onTransaction: (i) => this.onTransaction(i),
      onDestroy: () => this.onDestroy,
      editorProps: {
        attributes: {
          class: "aie-content"
        }
      }
    });
  }
  onCreate(e, t) {
    this.innerEditor.view.dom.style.height = "calc(100% - 20px)", this.eventComponents.forEach((r) => {
      r.onCreate && r.onCreate(e, this.options);
    }), this.container.appendChild(this.menus), this.container.appendChild(t), this.container.appendChild(this.footer);
  }
  onTransaction(e) {
    if (this.eventComponents.forEach((t) => {
      t.onTransaction && t.onTransaction(e);
    }), e.transaction.docChanged && this.options.onChange && this.options.onChange(this), e.transaction.docChanged && this.options.contentRetention && this.options.contentRetentionKey) {
      const t = this.innerEditor.getHTML();
      t === "<p></p>" || t === "" ? localStorage.removeItem(this.options.contentRetentionKey) : localStorage.setItem(this.options.contentRetentionKey, JSON.stringify(this.innerEditor.getJSON()));
    }
  }
  onDestroy() {
    console.log("AiEditor has destroyed!");
  }
  getHtml() {
    return this.innerEditor.getHTML();
  }
  getJson() {
    return this.innerEditor.getJSON();
  }
  getText() {
    return this.innerEditor.getText();
  }
  getMarkdown() {
    return this.innerEditor.storage.markdown.getMarkdown();
  }
  getOptions() {
    return this.options;
  }
  getOutline() {
    const e = this.innerEditor.state.doc, t = [];
    return e.descendants((r, i) => {
      if (r.type.name === "heading") {
        let s = "";
        r.descendants((o) => {
          o.text && (s += o.text);
        }), t.push({
          text: s,
          level: r.attrs.level,
          pos: i,
          size: r.nodeSize
        });
      }
    }), t;
  }
  focus() {
    return this.innerEditor.commands.focus(), this;
  }
  focusPos(e) {
    return this.innerEditor.commands.focus(e), this;
  }
  focusStart() {
    return this.innerEditor.commands.focus("start"), this;
  }
  focusEnd() {
    return this.innerEditor.commands.focus("end"), this;
  }
  isFocused() {
    return this.innerEditor.isFocused;
  }
  blur() {
    return this.innerEditor.commands.blur(), this;
  }
  insert(e) {
    return this.innerEditor.commands.insertContent(e), this;
  }
  clear() {
    return this.innerEditor.commands.clearContent(!0), this;
  }
  isEmpty() {
    return this.innerEditor.isEmpty;
  }
  changeLang(e) {
    return this.destroy(), this.options.lang = e, We.changeLanguage(e), this.initInnerEditor(), this;
  }
  removeRetention() {
    return this.options.contentRetentionKey && localStorage.removeItem(this.options.contentRetentionKey), this;
  }
  destroy() {
    this.innerEditor.destroy(), this.container.remove(), this.eventComponents = [];
  }
  isDestroyed() {
    return this.innerEditor.isDestroyed;
  }
}
export {
  cfe as AiEditor,
  Bde as InnerEditor
};
